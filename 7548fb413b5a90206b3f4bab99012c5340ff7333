{
  "comments": [
    {
      "key": {
        "uuid": "20f5787a_de5fb5df",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-27T00:40:51Z",
      "side": 1,
      "message": "It would\u0027ve really helped if this change were made in a different commit.  This is going to significantly change the cache loading of the router, as what existed there was done on purpose to reduce the cache misses for the hot path (ie searching for a URI).\n\nCan you walk me through why this was required?  It would seem like the flattened node structure would\u0027ve still worked, and this was just an extra cleanup.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 62
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c629bf38_f15792fc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-05-27T18:32:10Z",
      "side": 1,
      "message": "I thought about making it 2 patches. But I found it is hard to explain the reason why we need the first patch until it reaches second patch of adding priority. \n\nI can make it a separate patch if you think it is more clear. \n\nThe reason of the refactor is that, priority belongs to rule and routing algorithm(find) belongs to trie. In order to implement priority search/find, rule needs to be visible to Tire. \n\nFor the previous implement, both rule (vector) and trie are parallel member variables of router. So when trie need to visit rule for priority, it has to claim its ownership by router then redirect to rule with vector index. \n\nGiven that trie and router are two individual class, I believe it is a bad practice to add a router*/router\u0026 to trie to claim the ownership. Making rule belongs to Trie makes more sense.",
      "parentUuid": "20f5787a_de5fb5df",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 62
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "036dbb87_2e1d1b50",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-05-27T18:40:25Z",
      "side": 1,
      "message": "BTW, what do you mean by cache loading? optimizeNode() within validate()? \n\nIf it is, the mechanism is still here untouched.",
      "parentUuid": "c629bf38_f15792fc",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 62
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f15a121_b0e3fb4d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-07T15:46:49Z",
      "side": 1,
      "message": "\u003e The reason of the refactor is that, priority belongs to rule and routing algorithm(find) belongs to trie. In order to implement priority search/find, rule needs to be visible to Tire.\n\n\nThis doesn\u0027t \"require\" that we flatten the tree;  Similarly, the http verb (GET/POST/PATCH) belongs to the rule, but can still operate just fine.\n\nWhat I suspect needs to happen here is the trie needs to be updated with a structure that supports priority.\n\n\n\u003e BTW, what do you mean by cache loading? optimizeNode() within validate()? \n\nNo, I mean, when a URL is looked up, your patchset will pull more cache lines into the processor, for data that isn\u0027t required to fulfill the request.  Not all requests will require looking at the priority of every handler, so keeping them in separate structures ensures that we only pull in those cache lines when they\u0027re needed.",
      "parentUuid": "036dbb87_2e1d1b50",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 62
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4e83f4b_a850450a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-27T00:40:51Z",
      "side": 1,
      "message": "Can we just remove it entirely?  We don\u0027t use it, and its usage was deprecated a long time ago.  The code you\u0027re seeing there is just remnants that haven\u0027t been cleaned up.",
      "range": {
        "startLine": 18,
        "startChar": 3,
        "endLine": 19,
        "endChar": 37
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e07dd64_99356e31",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 19,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-05-27T18:32:10Z",
      "side": 1,
      "message": "Yep, I can do that.",
      "parentUuid": "a4e83f4b_a850450a",
      "range": {
        "startLine": 18,
        "startChar": 3,
        "endLine": 19,
        "endChar": 37
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db5f40db_3e08e807",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-27T00:40:51Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 41
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70efa0dc_78e70b72",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-05-27T18:32:10Z",
      "side": 1,
      "message": "This is a bug fix actually. routing.hpp requires this header. \n\nThis problem wasn\u0027t exposed because of the include sequence. bmcweb include this header ahead of routing.hpp.",
      "parentUuid": "db5f40db_3e08e807",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 41
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2a81778_f39518c1",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 108,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-05-26T21:06:50Z",
      "side": 1,
      "message": "Are these only used in the test?",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 108,
        "endChar": 38
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84029fbd_afc23962",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 108,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-05-26T21:30:22Z",
      "side": 1,
      "message": "No it will be used for anyone who want to set a highest or lowest priority.",
      "parentUuid": "c2a81778_f39518c1",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 108,
        "endChar": 38
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28a54e7a_7c319f34",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 115,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-27T00:40:51Z",
      "side": 1,
      "message": "I only see these used in unit tests, and would imagine they\u0027re a bit of an anti-pattern.  There should be no route with a \"max\" priority such that it can\u0027t be overridden.",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 115,
        "endChar": 5
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14be1fad_bbb27d2d",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 115,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-05-27T18:32:10Z",
      "side": 1,
      "message": "But we still need priorityMin(). I am going to use min for default rule of redfish to read cached responses. \n\nI made a priorityMax() because: \n1. the beauty of symmetry (LoL. \n2. it is easier for the users to static_assert their priority within [min, max).",
      "parentUuid": "28a54e7a_7c319f34",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 115,
        "endChar": 5
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c8617f7_6eb87cb0",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 115,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-07T15:53:41Z",
      "side": 1,
      "message": "\u003e But we still need priorityMin(). I am going to use min for default rule of redfish to read cached responses. \n\nShouldn\u0027t the default be 0?  That way, any handler can choose to be higher or lower priority than the default?\n\n\u003e \n\u003e I made a priorityMax() because: \n\u003e 1. the beauty of symmetry (LoL. \n\u003e 2. it is easier for the users to static_assert their priority within [min, max).\n\nIn this case, wouldn\u0027t the generalized way to do that be to simply have a \n\nusing priorityType \u003d int;\n\nsomewhere in here?  Then users can simply call numeric limits if they need it?  Although given the previous answer, I suspect that it\u0027s unlikely a user would need it in a normal setting.",
      "parentUuid": "14be1fad_bbb27d2d",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 115,
        "endChar": 5
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd4576ef_9fb0a33e",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 676,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-27T00:40:51Z",
      "side": 1,
      "message": "This is taking ownership of a raw pointer, which we don\u0027t really want from a safety perspective, if we continue with combining the structs this way, we should be using some form of smart pointer.",
      "range": {
        "startLine": 676,
        "startChar": 8,
        "endLine": 676,
        "endChar": 32
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a871941_c66ac3d5",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 676,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-05-27T18:32:10Z",
      "side": 1,
      "message": "The old mechanism didn\u0027t take ownership either. Explained in L1323",
      "parentUuid": "fd4576ef_9fb0a33e",
      "range": {
        "startLine": 676,
        "startChar": 8,
        "endLine": 676,
        "endChar": 32
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa70190b_586ec26a",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 676,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-07T15:53:41Z",
      "side": 1,
      "message": "correct, it didn\u0027t take ownership, but it took an index, which could be bounds checked against the vector.  In the worst case scenario, you\u0027d get the wrong node, but you\u0027d never get a node with a bounds issue.",
      "parentUuid": "9a871941_c66ac3d5",
      "range": {
        "startLine": 676,
        "startChar": 8,
        "endLine": 676,
        "endChar": 32
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f5e9140_690173df",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 692,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-27T00:40:51Z",
      "side": 1,
      "message": "Is this new constructor and private variable needed?  I don\u0027t see it used.",
      "range": {
        "startLine": 688,
        "startChar": 0,
        "endLine": 692,
        "endChar": 19
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8228c9e8_6ed37fe2",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 692,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-05-27T18:32:10Z",
      "side": 1,
      "message": "It was used for getRedirectRule(). Since we are deprecating getRedirectRule(), we can delete it.",
      "parentUuid": "2f5e9140_690173df",
      "range": {
        "startLine": 688,
        "startChar": 0,
        "endLine": 692,
        "endChar": 19
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b172dcd0_0cc1a122",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1323,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-27T00:40:51Z",
      "side": 1,
      "message": "You\u0027re capturing a pointer by value here, which makes it really easy to have lifetime issues.  The old mechanism was safer, because routes were always added to the array, and range checked before being used.",
      "range": {
        "startLine": 1323,
        "startChar": 30,
        "endLine": 1323,
        "endChar": 34
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee509c60_ec565112",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1323,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-05-27T18:32:10Z",
      "side": 1,
      "message": "Both mechanism should be equally safe: \n\n1. In the old one, we push/pop Trie node and rule vector at the same time. That means the life time of a rule is the same no matter outside the trie node(using vector index) or inside. \n\n2. the allrules vector is still there. (https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/43502/9/http/routing.hpp#b1460). The original rule vector is just the bare ptr copy of the allrules element, which doesn\u0027t preserve life time at all. \n\n3. there is no rule deletion at all, so the lifetime of a rule is basically from the rule creation until the end of game. Actually, the originally implementation made it impossible to delete, since a deletion in the middle of rule list will cause every index of following the rules minus one.",
      "parentUuid": "b172dcd0_0cc1a122",
      "range": {
        "startLine": 1323,
        "startChar": 30,
        "endLine": 1323,
        "endChar": 34
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "442d3b24_7fb03871",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1323,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-07T15:53:41Z",
      "side": 1,
      "message": "\u003e Both mechanism should be equally safe: \n\u003e \n\u003e 1. In the old one, we push/pop Trie node and rule vector at the same time. That means the life time of a rule is the same no matter outside the trie node(using vector index) or inside. \n\nThere\u0027s nothing about the ownership model that guarantees that though.\n\n\u003e \n\u003e 2. the allrules vector is still there. (https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/43502/9/http/routing.hpp#b1460). The original rule vector is just the bare ptr copy of the allrules element, which doesn\u0027t preserve life time at all. \n\n\nThis would kind of imply that you want to use a shared_ptr, possibly with this handler accepting by weak_ptr\n\n\u003e \n\u003e 3. there is no rule deletion at all, so the lifetime of a rule is basically from the rule creation until the end of game.\n\nExcept on shutdown, which can (and has in the past) had lifetime issues with calls being made while the system is shutting down.\n\n\u003e Actually, the originally implementation made it impossible to delete, since a deletion in the middle of rule list will cause every index of following the rules minus one.\n\nIt\u0027s impossible to delete, but very easy to reallocate the vector memory and invalidate the pointers right?",
      "parentUuid": "ee509c60_ec565112",
      "range": {
        "startLine": 1323,
        "startChar": 30,
        "endLine": 1323,
        "endChar": 34
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e52ae7e_49ef4910",
        "filename": "redfish-core/ut/priority_test.cpp",
        "patchSetId": 9
      },
      "lineNbr": 19,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-05-26T21:06:50Z",
      "side": 1,
      "message": "Will routes need to add a priority this way, to have an explicit priority.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 79
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "884f92e3_785b7661",
        "filename": "redfish-core/ut/priority_test.cpp",
        "patchSetId": 9
      },
      "lineNbr": 19,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-05-26T21:30:22Z",
      "side": 1,
      "message": "yes. This is the way to set priority. The default priority value is 0 so most of the current node/rule doesn\u0027t need to explicitly set the priority. \n\nThe priority is designed to set default rule for redfish node in the future.",
      "parentUuid": "6e52ae7e_49ef4910",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 79
      },
      "revId": "7548fb413b5a90206b3f4bab99012c5340ff7333",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}
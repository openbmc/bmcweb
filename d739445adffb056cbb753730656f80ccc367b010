{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "747b7fc6_b8666b62",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:32:08Z",
      "side": 1,
      "message": "THis is using the DMTF server example?  If so, please call that out.",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 62
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5109d799_cfb3cedc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T20:09:05Z",
      "side": 1,
      "message": "Updated commit message with more details.",
      "parentUuid": "747b7fc6_b8666b62",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 62
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1428271c_09a6d315",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:32:08Z",
      "side": 1,
      "message": "You will need a test that adds both simultaneously;  As-written, I don\u0027t think this code will handle it properly.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 30,
        "endChar": 37
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9445d4cc_54afdb83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T20:09:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1428271c_09a6d315",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 30,
        "endChar": 37
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec8a6f66_5bb18dc7",
        "filename": "bmcweb_config.h.in",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "Please don\u0027t make this configurable, or, if it must be configurable, please call out the use case for why a platform would need to configure it in your commit message.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 84
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "856390db_94ebbcac",
        "filename": "bmcweb_config.h.in",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T18:48:55Z",
      "side": 1,
      "message": "Its more than platform, Different OEM might look to store certificates in different area\u0027s. I can add same note in commit message.",
      "parentUuid": "ec8a6f66_5bb18dc7",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 84
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "897c3f85_3e4280d4",
        "filename": "bmcweb_config.h.in",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T20:19:55Z",
      "side": 1,
      "message": "\u003e Different OEM might look to store certificates in different area\u0027s\n\nI\u0027m not interested in supporting multiple locations.  If OEMs want to have custom certificates, integrate with phosphor-certificate-manager and have it own the cert.",
      "parentUuid": "856390db_94ebbcac",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 84
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c162b95b_3500c356",
        "filename": "bmcweb_config.h.in",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-17T00:55:48Z",
      "side": 1,
      "message": "Changed it to single location and removed compile option.",
      "parentUuid": "897c3f85_3e4280d4",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 84
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31fc26eb_cc7b161e",
        "filename": "bmcweb_config.h.in",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-08-08T11:45:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c162b95b_3500c356",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 84
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9475d4b_eee36c87",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "Please just rely on // NOLINTNEXTLINE(error-type) for resolving this as we have in other places.  Having out own copy of this doesn\u0027t seem like it helps us here.",
      "range": {
        "startLine": 54,
        "startChar": 17,
        "endLine": 58,
        "endChar": 77
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de7866d3_9842318c",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T18:48:55Z",
      "side": 1,
      "message": "I tried multiple ways ways of using but no luck :( \n\nAdding \"// NOLINTNEXTLINE(cppcoreguidelines-pro-type-old-style-cast)\" and \"// NOLINTNEXTLINE(*)\" and \"// NOLINT(*)\" but still seeing same issue. Not sure whats wrong, any pointer?\n\nERROR: \nerror: use of old-style cast to \u0027void*\u0027 [-Werror\u003dold-style-cast]",
      "parentUuid": "c9475d4b_eee36c87",
      "range": {
        "startLine": 54,
        "startChar": 17,
        "endLine": 58,
        "endChar": 77
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "106f2737_fa92a198",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T20:19:55Z",
      "side": 1,
      "message": "Maybe try NOLINTBEGIN and NOLINTEND, which got added in clang-tidy-14.\n\nPS, please don\u0027t resolve comments if they haven\u0027t been resolved.  It helps maintainers to review.",
      "parentUuid": "de7866d3_9842318c",
      "range": {
        "startLine": 54,
        "startChar": 17,
        "endLine": 58,
        "endChar": 77
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "300f606f_215b8aa2",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-17T00:55:48Z",
      "side": 1,
      "message": "I tried that as well with no luck (Same error). For now, I left  the code with \"_local\" define. Can you please provide any further suggestion? Thanks for continuous support on this.\n\nSure, I will make sure its open till you agree on it.",
      "parentUuid": "106f2737_fa92a198",
      "range": {
        "startLine": 54,
        "startChar": 17,
        "endLine": 58,
        "endChar": 77
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f15bf17_8cb8b6c0",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-17T16:24:57Z",
      "side": 1,
      "message": "Maybe just inline this then with a comment about the above?  #defines tend to be difficult to remove once in place.",
      "parentUuid": "300f606f_215b8aa2",
      "range": {
        "startLine": 54,
        "startChar": 17,
        "endLine": 58,
        "endChar": 77
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "637abb1e_da2427ce",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-08-08T11:40:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f15bf17_8cb8b6c0",
      "range": {
        "startLine": 54,
        "startChar": 17,
        "endLine": 58,
        "endChar": 77
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74b6a827_130f695b",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "no tls 1.3?\n\nCan you please make sure this conforms to the owasp TLS recommendations (as the documentation asks for).\n\nAlso, please document these design decisions (including the links to the backing owasp recommendations) in your commit message.",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 154,
        "endChar": 76
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71a91d40_1846a897",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T20:09:05Z",
      "side": 1,
      "message": "Yeah, This is initial commit with tls1.2, I will look at the OWSAP and enhance the security as part of separate commit",
      "parentUuid": "74b6a827_130f695b",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 154,
        "endChar": 76
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0082df74_d2d6196a",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T20:15:44Z",
      "side": 1,
      "message": "Per our coding standard, that commit will need to go in the same time.  If you\u0027re willing to maintain this patch series in the meantime, that would be fine, but I\u0027m not going to merge a default behavior that is known to not obey the security rules.  If you disagree with the security rules, or owasp recommendations, I\u0027m happy to have that discussion.",
      "parentUuid": "71a91d40_1846a897",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 154,
        "endChar": 76
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6beb745f_95c68f25",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-17T00:55:48Z",
      "side": 1,
      "message": "Done, I added code to support only TLS v1.2 \u0026 TLS v1.3 and explicitly disabled SSLv2/v3/TLSv1/TLS v1.1\n\nhttps://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html\nhttps://www.boost.org/doc/libs/1_73_0/doc/html/boost_asio/reference/ssl__context.html",
      "parentUuid": "0082df74_d2d6196a",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 154,
        "endChar": 76
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "deb25929_092694b3",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-08-08T11:45:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6beb745f_95c68f25",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 154,
        "endChar": 76
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02064a3e_7fdabfb8",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "If we do this codepath in the constructor, we can remove the need for useSSL entirely, and just rely on\n\nif (sslConn)\n\nWe don\u0027t use any of the content from endpointList to construct the ctx, so that seems useful?",
      "range": {
        "startLine": 193,
        "startChar": 12,
        "endLine": 193,
        "endChar": 18
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "807496f5_c4915e88",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T19:31:11Z",
      "side": 1,
      "message": "We need to set the connection context with all required options and create ssl_stream with tcp_stream before doing every connection. Else we are ending up on asio.ssl error.",
      "parentUuid": "02064a3e_7fdabfb8",
      "range": {
        "startLine": 193,
        "startChar": 12,
        "endLine": 193,
        "endChar": 18
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b2480d5_dba9f1bf",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-14T00:10:38Z",
      "side": 1,
      "message": "I\u0027m not sure what one has to do with another.  The context can be created in the constructor.",
      "parentUuid": "807496f5_c4915e88",
      "range": {
        "startLine": 193,
        "startChar": 12,
        "endLine": 193,
        "endChar": 18
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2297ce6_4527d4e1",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-17T00:55:48Z",
      "side": 1,
      "message": "Moved prepare context section to constructor and used context for differentiating the SSL connection and to create ssl_stream.",
      "parentUuid": "4b2480d5_dba9f1bf",
      "range": {
        "startLine": 193,
        "startChar": 12,
        "endLine": 193,
        "endChar": 18
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f99f9271_8f972f50",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-08-08T11:45:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2297ce6_4527d4e1",
      "range": {
        "startLine": 193,
        "startChar": 12,
        "endLine": 193,
        "endChar": 18
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3f2d5e1_10e4ef68",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 197,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "Common error #5\n\nThere lots of error paths here.  Please account for them",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 56
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9885aee4_9a5bf370",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 197,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-17T00:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3f2d5e1_10e4ef68",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 197,
        "endChar": 56
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59d674e6_c41d101d",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 200,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "common error #5",
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6e1b73d_883b93b4",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 200,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-17T00:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "59d674e6_c41d101d",
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d39f22a_4176a2e3",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 206,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "possible nullptr dereference if host is empty.\n\nalso, please use .c_str().",
      "range": {
        "startLine": 206,
        "startChar": 54,
        "endLine": 206,
        "endChar": 59
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b197fced_fef7db78",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 206,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T18:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d39f22a_4176a2e3",
      "range": {
        "startLine": 206,
        "startChar": 54,
        "endLine": 206,
        "endChar": 59
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2bb1d1f_58ae5fac",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "If loading the ssl context fails, should we even retry?  There\u0027s no recovery that I\u0027m aware of if the certs fail to load?",
      "range": {
        "startLine": 216,
        "startChar": 16,
        "endLine": 216,
        "endChar": 28
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e5101ff_87f8a2b7",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T20:09:05Z",
      "side": 1,
      "message": "Yeah, ideally no recovery but i am just following fail safe path of retry after retry interval and set connection to suspended/terminate states.",
      "parentUuid": "d2bb1d1f_58ae5fac",
      "range": {
        "startLine": 216,
        "startChar": 16,
        "endLine": 216,
        "endChar": 28
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d6d76e2_f8c28610",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T20:15:44Z",
      "side": 1,
      "message": "Retrying is no more safe if the cert isn\u0027t available, so I don\u0027t understand your answer.",
      "parentUuid": "5e5101ff_87f8a2b7",
      "range": {
        "startLine": 216,
        "startChar": 16,
        "endLine": 216,
        "endChar": 28
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4b34d45_317afaab",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-17T00:55:48Z",
      "side": 1,
      "message": "Done, Set the state to sslInitFailed and correspondingly, state will be transitioned to suspended/terminated depending on subscription settings.",
      "parentUuid": "7d6d76e2_f8c28610",
      "range": {
        "startLine": 216,
        "startChar": 16,
        "endLine": 216,
        "endChar": 28
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f42cabac_0d2845e2",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-08-08T11:45:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4b34d45_317afaab",
      "range": {
        "startLine": 216,
        "startChar": 16,
        "endLine": 216,
        "endChar": 28
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "084a19e9_2d98a08d",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 282,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "not a problem in your patchset, but size_t is generally taken by value, not reference.",
      "range": {
        "startLine": 282,
        "startChar": 50,
        "endLine": 282,
        "endChar": 56
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8568ba2_dda6004f",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 282,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T18:48:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "084a19e9_2d98a08d",
      "range": {
        "startLine": 282,
        "startChar": 50,
        "endLine": 282,
        "endChar": 56
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89d11273_7b98893d",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 294,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "Can this move to a member method instead of a lambda?  That\u0027s the pattern we\u0027ve been trying to move to.\n\nSomething like\n\nvoid afterConnect(std::shared_ptr\u003cConnectionInfo\u003e connection)\n\n\nthen you would use it with:\n\nboost::beast::http::async_write(*sslConn, req, std::bind_front(this, shared_from_this());",
      "range": {
        "startLine": 283,
        "startChar": 0,
        "endLine": 294,
        "endChar": 32
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "452d9a3e_c69a4563",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 294,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T20:09:05Z",
      "side": 1,
      "message": "I think this is aligned with other patterns, like:\n\nOn success cases (In side lamda) -\u003e doResolve()  calls  doConnect()  Calls -\u003e doHandShake() -\u003e sendMessage() -\u003e recvMessage() -\u003e Calls callback()",
      "parentUuid": "89d11273_7b98893d",
      "range": {
        "startLine": 283,
        "startChar": 0,
        "endLine": 294,
        "endChar": 32
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a95b30d3_db67e305",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 294,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T20:15:44Z",
      "side": 1,
      "message": "Point still stands, this is a pattern that we\u0027re trying to get rid of because it leads to really confusing compile errors, log messages, and stack traces.  I\u0027m not interested in supporting patchsets that make the problem worse.\n\nIf you need me to make this mod for you, I\u0027m happy to if you\u0027re still willing to test.",
      "parentUuid": "452d9a3e_c69a4563",
      "range": {
        "startLine": 283,
        "startChar": 0,
        "endLine": 294,
        "endChar": 32
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cc82e71_4bb489fd",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 294,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-17T00:55:48Z",
      "side": 1,
      "message": "ED, Thanks for offering help, I misunderstood your first comment, my bad. \n\nNow its moved to member function. There is one more existing code which need to be moved doResolvee() which i can move it in separate patch( Since its not touched in this).",
      "parentUuid": "a95b30d3_db67e305",
      "range": {
        "startLine": 283,
        "startChar": 0,
        "endLine": 294,
        "endChar": 32
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38c5f525_f5f38c0f",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 294,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-08-08T11:45:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1cc82e71_4bb489fd",
      "range": {
        "startLine": 283,
        "startChar": 0,
        "endLine": 294,
        "endChar": 32
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "913c73c7_510b7c1d",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 467,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "once the async_shutdown is complete, you still need to call conn.socket().shutdown(boost::asio::ip::tcp::socket::shutdown_both,\n                                   ec);\n                                   \nas you do on the lines below.",
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc7c908c_b6d06c1c",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 467,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T20:09:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "913c73c7_510b7c1d",
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99d4e4ea_fc3ace58",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 472,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "both of these code paths have very similar code;  Can they be combined?",
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0f81bbf_f8d45812",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 472,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T20:09:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99d4e4ea_fc3ace58",
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95c4aa4a_7b920af6",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 502,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "This whole function is pretty much a duplicate of the above, which, when it was 10 lines of code duplicated was probably fine, but now that its much longer, is there any way to deduplicate the paths?",
      "range": {
        "startLine": 502,
        "startChar": 9,
        "endLine": 502,
        "endChar": 24
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c125bf88_7b9acf96",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 502,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T20:09:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "95c4aa4a_7b920af6",
      "range": {
        "startLine": 502,
        "startChar": 9,
        "endLine": 502,
        "endChar": 24
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09060fca_d5151bb2",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "I\u0027m a little confused the connection pool would have a single bool in it for \"useSSL\".  Isn\u0027t the SSL state per connection?  Do we need another vector of httpsConnections similar to the http connection poll we have on 584?\n\n\nSaid another way, if I have one subscription that uses SSL and one that doesn\u0027t, this will break.  PLease add that to your tests.",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d90186b6_923047f3",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-12T17:34:58Z",
      "side": 1,
      "message": "+1 on the bool needing to be per connection instead of the pool as a whole.  Account for this in the testing.\n\n\u003e Do we need another vector of httpsConnections similar to the http connection poll we have on 584?\nIs it common to have separate pools for http and https?  Also at that point we\u0027d effectively have 8 connections to a single destination.  We had a discussion around limiting the pool size back on the refactoring CL https://gerrit.openbmc.org/c/openbmc/bmcweb/+/52281/comments/56c205dc_6fa6f52e",
      "parentUuid": "09060fca_d5151bb2",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0a487a1_da331e11",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T18:48:55Z",
      "side": 1,
      "message": "The subscriptions are maintained in different map that is connectionPools.\n\nEach subscription can have map entry in connectionPools with key as IP:PORT. So ideally speaking with this itself both http \u0026 https works fine( Reason: Since we are using IP:port as key to connectionPools which can\u0027t be same for both http \u0026 https - Either IP or port has be change)\n\nBut there is an issue what if two subscriptions has different paths on same IP:PORT ( example: Subscription 1: https://10.0.0.1:4000/path1 and subscription 2: https://10.0.0.1:4000/path2 - Note both can have there own filters) -  So i am planning to change logic in such a way that Key will be passed directly from EventServiceManager ( can use same subscription ID) as part of sendData(...) call. This way all key\u0027s will be unique. But planning to do this as separate commit.",
      "parentUuid": "d90186b6_923047f3",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97c46dda_a7916670",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T20:15:44Z",
      "side": 1,
      "message": "Sure, let me know when that commit is ready and we can stack it on top of this one, but they\u0027ll need to merge together.\n\nThe behavior you describe seems pretty likely to what a test script would do, or if A user mapped to localhost, so it\u0027s not something I\u0027m comfortable living with in master for the moment.",
      "parentUuid": "c0a487a1_da331e11",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29468008_65e0bd89",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-13T21:30:32Z",
      "side": 1,
      "message": "\u003e The subscriptions are maintained in different map that is connectionPools.\nNo we have a connection pool for each IP:PORT pair and each connection pool can have at most 4 connections.  This way we can have N different subscriptions using the same IP:PORT and now create unique connections or pools for each one.\n\n\u003e But there is an issue what if two subscriptions has different paths on same IP:PORT\nThat should not be an issue.  The public sendData() function takes IP, Port, and destUri as arguments.  The IP:Port is used to choose the connection pool and then a conection within a pool sends to the destUri.  \n\n\u003e So i am planning to change logic in such a way that Key will be passed directly from EventServiceManager ( can use same subscription ID) as part of sendData(...) call. This way all key\u0027s will be unique. But planning to do this as separate commit.\nDo not make this change.  In your example we want both subscriptions to use the same connection pool.  I don\u0027t think it\u0027s a good idea to let services like EventServiceManager create exclusive pools via a unique subscription ID.  We want these pools to be shared across different services.  Right now Redfish Aggregation is the only other entity that will send HTTP requests, but there could be more in the future.\n\nIf subscriptions are somehow being created as their own connection pool then that is a bug that needs to be fixed rather than standardizing that behavior.",
      "parentUuid": "97c46dda_a7916670",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20808b5e_e3e3e0f5",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-17T00:55:48Z",
      "side": 1,
      "message": "\u003e \u003e The subscriptions are maintained in different map that is connectionPools.\n\u003e No we have a connection pool for each IP:PORT pair and each connection pool can have at most 4 connections.  This way we can have N different subscriptions using the same IP:PORT and now create unique connections or pools for each one.\n\u003e \n\u003e \u003e But there is an issue what if two subscriptions has different paths on same IP:PORT\n\u003e That should not be an issue.  The public sendData() function takes IP, Port, and destUri as arguments.  The IP:Port is used to choose the connection pool and then a conection within a pool sends to the destUri.  \n\u003e \n\u003e \u003e So i am planning to change logic in such a way that Key will be passed directly from EventServiceManager ( can use same subscription ID) as part of sendData(...) call. This way all key\u0027s will be unique. But planning to do this as separate commit.\n\u003e Do not make this change.  In your example we want both subscriptions to use the same connection pool.  I don\u0027t think it\u0027s a good idea to let services like EventServiceManager create exclusive pools via a unique subscription ID.  We want these pools to be shared across different services.  Right now Redfish Aggregation is the only other entity that will send HTTP requests, but there could be more in the future.\n\u003e \n\u003e If subscriptions are somehow being created as their own connection pool then that is a bug that needs to be fixed rather than standardizing that behavior.\n\nYeah, I see and looks like the code is fine as is even for SSL. As i said before, each IP:PORT will have its own pool of connections and in that pool we can\u0027t have SSL \u0026 Non SSL both together( Reason: Either IP or PORT one of it will change between http or https). So we are good in handling both connections pool. I checked a case where https://\u003cIP\u003e:\u003chttps_port\u003e \u0026 http://\u003cSameIP\u003e:\u003chttp_port\u003e and both works. Also tested with multiple subscription(different path) and that also works fine.",
      "parentUuid": "29468008_65e0bd89",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fa32c89_42b80eea",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-18T17:38:21Z",
      "side": 1,
      "message": "\u003e Yeah, I see and looks like the code is fine as is even for SSL. As i said before, each IP:PORT will have its own pool of connections and in that pool we can\u0027t have SSL \u0026 Non SSL both together( Reason: Either IP or PORT one of it will change between http or https)\nI don\u0027t think we can rely on this by itself.  The connection pools are meant to be shared by entities beyond just EventServiceManager.  EventServiceManager might be using a specific IP:PORT pair as an SSL connection, but that does not mean something else will not attempt to use the same IP:PORT pair as non-SSL.\n\n\u003e  I checked a case where https://\u003cIP\u003e:\u003chttps_port\u003e \u0026 http://\u003cSameIP\u003e:\u003chttp_port\u003e and both works. Also tested with multiple subscription(different path) and that also works fine.\nWhat about a case where a subscription is created for https://\u003cIP\u003e:\u003chttps_port\u003e and then one is created for http://\u003cIP\u003e:\u003chttps_port\u003e?  Maybe that shouldn\u0027t happen in practice, but I do not think it\u0027s a good idea to rely on that assumption rather than handling the possibility.\n\nFor example, let\u0027s say a subscription is supposed to be created as https, but for the first attempt it is accidentally created as http i.e (http://\u003cIP\u003e:\u003chttps_port\u003e).  The subscription is deleted and then a new subscription is created using https (i.e. https://\u003csame_IP\u003e:\u003csame_https_port\u003e).  The connection pool was originally created without SSL so any messages sent by the subscription would not use SSL, even though the subscription was recreated as https.",
      "parentUuid": "20808b5e_e3e3e0f5",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96fa5a82_67e92f9e",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-08-08T11:40:18Z",
      "side": 1,
      "message": "\u003e \u003e Yeah, I see and looks like the code is fine as is even for SSL. As i said before, each IP:PORT will have its own pool of connections and in that pool we can\u0027t have SSL \u0026 Non SSL both together( Reason: Either IP or PORT one of it will change between http or https)\n\u003e I don\u0027t think we can rely on this by itself.  The connection pools are meant to be shared by entities beyond just EventServiceManager.  EventServiceManager might be using a specific IP:PORT pair as an SSL connection, but that does not mean something else will not attempt to use the same IP:PORT pair as non-SSL.\n\u003e\nI agree connection pools can be beyond EventServiceManager( Even though its not today) but even then IP:PORT key can be unique for any such( Listeners can\u0027t run http \u0026 https with same IP:PORt combination). \n\u003e \u003e  I checked a case where https://\u003cIP\u003e:\u003chttps_port\u003e \u0026 http://\u003cSameIP\u003e:\u003chttp_port\u003e and both works. Also tested with multiple subscription(different path) and that also works fine.\n\u003e What about a case where a subscription is created for https://\u003cIP\u003e:\u003chttps_port\u003e and then one is created for http://\u003cIP\u003e:\u003chttps_port\u003e?  Maybe that shouldn\u0027t happen in practice, but I do not think it\u0027s a good idea to rely on that assumption rather than handling the possibility.\n\u003e \n\u003e For example, let\u0027s say a subscription is supposed to be created as https, but for the first attempt it is accidentally created as http i.e (http://\u003cIP\u003e:\u003chttps_port\u003e).  The subscription is deleted and then a new subscription is created using https (i.e. https://\u003csame_IP\u003e:\u003csame_https_port\u003e).  The connection pool was originally created without SSL so any messages sent by the subscription would not use SSL, even though the subscription was recreated as https.\n\nIdeally speaking when ever the subscription is created, it should be added to pool ( This is working fine) and when ever subscription is deleted, It should be removed form pool. But today, I don\u0027t see deleting subscriptions is removing entry from pool. So Its existing problem irrespective of this SSL support patch. So that will be addressed as separate commit.",
      "parentUuid": "2fa32c89_42b80eea",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "215f03f7_b9af1ee6",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-08T14:35:16Z",
      "side": 1,
      "message": "\u003e ( Listeners can\u0027t run http \u0026 https with same IP:PORt combination). \n\nThey can, although it\u0027s far less common.",
      "parentUuid": "96fa5a82_67e92f9e",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69737b7a_2272f272",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-08-08T19:23:22Z",
      "side": 1,
      "message": "Do you mean one can run http \u0026 https on same port number on same system? I don\u0027t think that is possible. Both requires its known port.",
      "parentUuid": "215f03f7_b9af1ee6",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2dac218_bdb49faa",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-08T20:38:09Z",
      "side": 1,
      "message": "\u003e I agree connection pools can be beyond EventServiceManager( Even though its not today) but even then IP:PORT key can be unique for any such( Listeners can\u0027t run http \u0026 https with same IP:PORt combination). \nEd already pointed out they can, but even if you disregard that, this client is supposed to play nice with multiple entities using it.  It does this in its current state.  This patch shouldn\u0027t impact that capability.\n\n\u003e Ideally speaking when ever the subscription is created, it should be added to pool ( This is working fine) and when ever subscription is deleted, It should be removed form pool. \nWhen a subscription is created and it sends its first message a pool is created if one does not already exist for the associated IP:PORT.  Connections are added to the pool whenever we need to send multiple messages at a time to that IP:PORT.  You can have multiple subscriptions use the same IP:PORT so you wouldn\u0027t want to delete a pool unless you can verify that there is nothing else in the system using the pool.\n\n\u003e But today, I don\u0027t see deleting subscriptions is removing entry from pool. So Its existing problem irrespective of this SSL support patch. So that will be addressed as separate commit.\nIt is currently not a problem if deleting subscriptions does not delete the pool.  A new subscription could later be created and reuse the pool.  There is no break in functionality.\n\nThis change does introduce the issue where a connection pool cannot be reused depending on the use of SSL.  That needs to be fixed as part of this patch by allowing a pool to contain both SSL and non-SSL connections.",
      "parentUuid": "69737b7a_2272f272",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "984690ce_1aeb8fd3",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-08-08T21:42:32Z",
      "side": 1,
      "message": "\u003e \u003e I agree connection pools can be beyond EventServiceManager( Even though its not today) but even then IP:PORT key can be unique for any such( Listeners can\u0027t run http \u0026 https with same IP:PORt combination). \n\u003e Ed already pointed out they can, but even if you disregard that, this client is supposed to play nice with multiple entities using it.  It does this in its current state.  This patch shouldn\u0027t impact that capability.\n\u003e \n\u003e \u003e Ideally speaking when ever the subscription is created, it should be added to pool ( This is working fine) and when ever subscription is deleted, It should be removed form pool. \n\u003e When a subscription is created and it sends its first message a pool is created if one does not already exist for the associated IP:PORT.  Connections are added to the pool whenever we need to send multiple messages at a time to that IP:PORT.  You can have multiple subscriptions use the same IP:PORT so you wouldn\u0027t want to delete a pool unless you can verify that there is nothing else in the system using the pool.\n\u003e \n\u003e \u003e But today, I don\u0027t see deleting subscriptions is removing entry from pool. So Its existing problem irrespective of this SSL support patch. So that will be addressed as separate commit.\n\u003e It is currently not a problem if deleting subscriptions does not delete the pool.  A new subscription could later be created and reuse the pool.  There is no break in functionality.\n\u003e \nNot connection pool when subscription is created can create the issue say if someone creates x (maxPoolSize i.e 4) subscriptions and delete them, Then connection pool is exhausted and will lead to add all request to queue and eventually fill up resources.\n\u003e This change does introduce the issue where a connection pool cannot be reused depending on the use of SSL.  That needs to be fixed as part of this patch by allowing a pool to contain both SSL and non-SSL connections.\n\nI couldn\u0027t think of a case where http \u0026 https uses same IP:PORT combination and lead to above said issue. But I agree that its better to differentiate SSL \u0026 Non-SSL. One way to do so by using common connection pool( Not having separate pool for SSL) is expand the map key from IP:PORT to http/https://IP:PORT. Please do suggest if you thought of any other method.",
      "parentUuid": "c2dac218_bdb49faa",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e5fe85a_b20eeb10",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-09T17:07:59Z",
      "side": 1,
      "message": "\u003e Not connection pool when subscription is created can create the issue say if someone creates x (maxPoolSize i.e 4) subscriptions and delete them, Then connection pool is exhausted and will lead to add all request to queue and eventually fill up resources.\nI don\u0027t entirely understand what you are trying to say.  We don\u0027t delete pools so there\u0027s a possibility of a bad actor being able to create enough subscriptions to unique IP:PORT that we run out of memory due to creating a new connection pool for each.  However, that issue is completely separate from my concerns about how this patch handle SSL and non-SSL for the same connection pool.\n\nA pool can hold up to 4 connections.  I can create 4 subscriptions using the same IP:PORT.  I can delete and recreate those subscription as many times as I want and I won\u0027t run out of resources between that same connection pool will get reused each time.\n\nWith your path I can create 4 subscriptions using non-SSL IP:PORT.  If I delete those subscriptions and then create 4 subscriptions using SSL with the same IP:PORT then none of those subscriptions will send correctly because the IP:PORT pool is already full of non-SSL connections and the pool itself only supports non-SSL connections.\n\n\u003e I couldn\u0027t think of a case where http \u0026 https uses same IP:PORT combination and lead to above said issue. But I agree that its better to differentiate SSL \u0026 Non-SSL.\nIt might be unlikely, but it is a possibility.  With different entities able to share the client and connection pool we can\u0027t assume that they all coordinate to designate specific IP:PORT as SSL or non-SSL.\n\n\u003e One way to do so by using common connection pool( Not having separate pool for SSL) is expand the map key from IP:PORT to http/https://IP:PORT. Please do suggest if you thought of any other method\nExpanding the map key would in fact do the opposite and create separate pools for SSL.\n\nMy thought is we still only want to support 4 simultaneous connections for each IP:PORT (i.e. connection pool).  You would make these changes:\n- Remove useSSL from ConnectionPool.  We only need it in the individual connections to track if it\u0027s to be used for SSL or non-SSL communication.\n- In ConnectionInfo it looks like there are already separate connection objects for SSL and non-SSL.  It should be straightforward enough to modify doConnect() to choose the appropriate connection depending on the state of useSSL.\n- All of the ConnectionInfo methods that are common to the SSL and non-SSL flow should rely on useSSL to decide which one to use.\n- When grabbing an idle connection to send a message you must make sure the connection and message agree in terms of using SSL.\n- If you can\u0027t find an idle connection that matches then take one of the idle connections and modify it to use the type of connection that matches the message.  Make sure you close out the existing connection first if it\u0027s active due to being \"keep alive\".\nI have pointed out the location for the latter two points in other comments.",
      "parentUuid": "984690ce_1aeb8fd3",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cfedafe_9e8d9eb7",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-08-16T17:50:51Z",
      "side": 1,
      "message": "\u003e \u003e Not connection pool when subscription is created can create the issue say if someone creates x (maxPoolSize i.e 4) subscriptions and delete them, Then connection pool is exhausted and will lead to add all request to queue and eventually fill up resources.\n\u003e I don\u0027t entirely understand what you are trying to say.  We don\u0027t delete pools so there\u0027s a possibility of a bad actor being able to create enough subscriptions to unique IP:PORT that we run out of memory due to creating a new connection pool for each.  However, that issue is completely separate from my concerns about how this patch handle SSL and non-SSL for the same connection pool.\n\u003e \n\u003e A pool can hold up to 4 connections.  I can create 4 subscriptions using the same IP:PORT.  I can delete and recreate those subscription as many times as I want and I won\u0027t run out of resources between that same connection pool will get reused each time.\n\u003e \n\u003e With your path I can create 4 subscriptions using non-SSL IP:PORT.  If I delete those subscriptions and then create 4 subscriptions using SSL with the same IP:PORT then none of those subscriptions will send correctly because the IP:PORT pool is already full of non-SSL connections and the pool itself only supports non-SSL connections.\n\u003e \n\u003e \u003e I couldn\u0027t think of a case where http \u0026 https uses same IP:PORT combination and lead to above said issue. But I agree that its better to differentiate SSL \u0026 Non-SSL.\n\u003e It might be unlikely, but it is a possibility.  With different entities able to share the client and connection pool we can\u0027t assume that they all coordinate to designate specific IP:PORT as SSL or non-SSL.\n\u003e \n\u003e \u003e One way to do so by using common connection pool( Not having separate pool for SSL) is expand the map key from IP:PORT to http/https://IP:PORT. Please do suggest if you thought of any other method\n\u003e Expanding the map key would in fact do the opposite and create separate pools for SSL.\nYes, It will have separate pools. Do you see any downside for having separate pools for SSL?\n\u003e \n\u003e My thought is we still only want to support 4 simultaneous connections for each IP:PORT (i.e. connection pool).  You would make these changes:\n\u003e - Remove useSSL from ConnectionPool.  We only need it in the individual connections to track if it\u0027s to be used for SSL or non-SSL communication.\n\u003e - In ConnectionInfo it looks like there are already separate connection objects for SSL and non-SSL.  It should be straightforward enough to modify doConnect() to choose the appropriate connection depending on the state of useSSL.\n\u003e - All of the ConnectionInfo methods that are common to the SSL and non-SSL flow should rely on useSSL to decide which one to use.\n\u003e - When grabbing an idle connection to send a message you must make sure the connection and message agree in terms of using SSL.\n\u003e - If you can\u0027t find an idle connection that matches then take one of the idle connections and modify it to use the type of connection that matches the message.  Make sure you close out the existing connection first if it\u0027s active due to being \"keep alive\".\nThe issues in above two points is what i am trying to resolve by having separate pool for SSL instead of mixing SSL \u0026 non-SSL in single. In that case, We don\u0027t need to decide it during run time and have extra logic to grab idle connections and close them if not matches and start connection from begging.\n\u003e I have pointed out the location for the latter two points in other comments.",
      "parentUuid": "8e5fe85a_b20eeb10",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5166722a_c3cf7e47",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-16T18:43:25Z",
      "side": 1,
      "message": "Having a separate variable for SSL connections versus not seems reasonable to me.\n\nCarson?  Does that address your concerns?",
      "parentUuid": "7cfedafe_9e8d9eb7",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "510fd661_6469de02",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-16T21:37:55Z",
      "side": 1,
      "message": "\u003e The issues in above two points is what i am trying to resolve by having separate pool for SSL instead of mixing SSL \u0026 non-SSL in single.\nHaving completely separate pools (i.e. ConnectionPool objects) for SSL and non-SSL feels very wasteful since each individual connection object will already have full support to be used as SSL or non-SSL.\n\n\u003e In that case, We don\u0027t need to decide it during run time and have extra logic to grab idle connections and close them if not matches and start connection from begging\nI don\u0027t see this as much extra work.  We already have logic to grab idle connections from the vector and conditionally handle if the connection is keep alive or not.  This would just be adding another check when determining if a given connection is available to send a message.\n\nPlus we already have to open and close a connection as part of each message sending event when the destination is not keep alive enabled so closing and then opening an idle connection to swap between SSL and non-SSL doesn\u0027t seem too out of the ordinary.  Needing to swap between SSL and non-SSL is more of an edge case that we need to support rather than a regular usecase so the number of swaps should be relatively minor.\n\nWhen grabbing a new connection we could prioritize it so that we won\u0027t always take the first one we find.  Instead we\u0027d prioritize one that matches in terms of SSL/non-SSL.  If one does not exist then we\u0027ll swap one of the idle connection in the pool.\n\n\u003e Having a separate variable for SSL connections versus not seems reasonable to me.\n\u003e \n\u003e Carson?  Does that address your concerns?\nYes if you mean that in support of what I proposed in my previous comment.  I don\u0027t want to allow more than 4 active connections to a specific IP:PORT pair.  We\u0027ll double that number if have separate pools for SSL and non-SSL connections.  We avoid that if we have a single connection pool per IP:PORT pair and we can reconfigure individual connections as needed between SSL and non-SSL.\n\nPlease correct me if you meant that in a different way.",
      "parentUuid": "5166722a_c3cf7e47",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "126835d6_28ce6e33",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-16T23:52:38Z",
      "side": 1,
      "message": "\u003e \u003e The issues in above two points is what i am trying to resolve by having separate pool for SSL instead of mixing SSL \u0026 non-SSL in single.\n\u003e Having completely separate pools (i.e. ConnectionPool objects) for SSL and non-SSL feels very wasteful since each individual connection object will already have full support to be used as SSL or non-SSL.\n\nI\u0027m not following this.  A connection object is going to be either TLS or not.  It can\u0027t switch mid-stream.  The only difference is that some are going to have a cipher suite set up and have an ssl_stream object, and some wont.  I really don\u0027t want to be changing TLS to non on the fly, and realistically, each connection doesn\u0027t have that much state that it tracks, so constructing a new one is relatively cheap.\n\n\u003e \n\u003e \u003e In that case, We don\u0027t need to decide it during run time and have extra logic to grab idle connections and close them if not matches and start connection from begging\n\u003e I don\u0027t see this as much extra work.  We already have logic to grab idle connections from the vector and conditionally handle if the connection is keep alive or not.  This would just be adding another check when determining if a given connection is available to send a message.\n\nAlso not following this.  Isn\u0027t it better to just categorize these?  Realistically, a given url/port is going to support TLS or not, so it\u0027s not like we\u0027re losing out on anything in any \"normal\" case.  In theory I could have a hybrid port that supports both, but no bmc I\u0027m aware of does that.\n\n\u003e \n\u003e Plus we already have to open and close a connection as part of each message sending event when the destination is not keep alive enabled so closing and then opening an idle connection to swap between SSL and non-SSL doesn\u0027t seem too out of the ordinary.\n\u003e  Needing to swap between SSL and non-SSL is more of an edge case that we need to support rather than a regular usecase so the number of swaps should be relatively minor.\n\nThis!  This is for sure an edge case, so why take on the complexity of swapping?\n\nAlso, FWIW, I would expect a number of systems to compile with only HTTPS or only HTTP, so in the base case, this isn\u0027t really an issue.\n\n\u003e \n\u003e When grabbing a new connection we could prioritize it so that we won\u0027t always take the first one we find.  Instead we\u0027d prioritize one that matches in terms of SSL/non-SSL.  If one does not exist then we\u0027ll swap one of the idle connection in the pool.\n\nBut...... if we do that, why not just make the keys on the connection map have that data, so we do the lookup once, instead of doing the lookup, then trying to hunt down a connection that meets our needs.  I don\u0027t think there\u0027s any case where we\u0027d say \"either TLS or non tls\", right?\n\n\u003e \n\u003e \u003e Having a separate variable for SSL connections versus not seems reasonable to me.\n\u003e \u003e \n\u003e \u003e Carson?  Does that address your concerns?\n\u003e Yes if you mean that in support of what I proposed in my previous comment.  I don\u0027t want to allow more than 4 active connections to a specific IP:PORT pair.  We\u0027ll double that number if have separate pools for SSL and non-SSL connections. \n\nDouble is 8, which is still pretty reasonable, and the likelihood that a user has both HTTP and HTTPS running on the same port is essentially zero.\n\n\u003e We avoid that if we have a single connection pool per IP:PORT pair and we can reconfigure individual connections as needed between SSL and non-SSL.\n\u003e \n\u003e Please correct me if you meant that in a different way.\n\nNo, I think you got it, but I\u0027m still kind of with Appu here.  If we encode the connection \"requirements\" in the map we look stuff up on, in the worst case (which will probably never happen in the real world) we get 8 connections, which is still not that bad.",
      "parentUuid": "510fd661_6469de02",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c37df86_0fdd844e",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-17T01:57:04Z",
      "side": 1,
      "message": "\u003e \u003e Plus we already have to open and close a connection as part of each message sending event when the destination is not keep alive enabled so closing and then opening an idle connection to swap between SSL and non-SSL doesn\u0027t seem too out of the ordinary.\n\u003e \u003e Needing to swap between SSL and non-SSL is more of an edge case that we need to support rather than a regular usecase so the number of swaps should be relatively minor.\n\u003e This!  This is for sure an edge case, so why take on the complexity of swapping?\n\u003e\n\u003e Also, FWIW, I would expect a number of systems to compile with only HTTPS or only HTTP, so in the base case, this isn\u0027t really an issue.\nIf we don\u0027t handle this then we are introducing a bug where you can lock a IP:PORT as only being used for SSL or non-SSL.  W/o this patch there isn\u0027t a way to lock a user out of being able to correctly send a message to a destination.  I don\u0027t want the patch to introduce this bug. In its current state the is only using the IP:PORT as the key for creating new connection pools.\n\n\u003e Double is 8, which is still pretty reasonable, and the likelihood that a user has both HTTP and HTTPS running on the same port is essentially zero.\n\u003e ...in the worst case (which will probably never happen in the real world) we get 8 connections, which is still not that bad\nAlright so if Ed\u0027s good with 8 then the simplest way forward would be to just have separate pools for SSL and non-SSL.  Connection pools need to account for SSL when they are created.  This will also cover my earlier concerns around locking IP:PORT to be SSL or non-SSL.  I\u0027ll mark where to do that in a separate comment.",
      "parentUuid": "126835d6_28ce6e33",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fc663b6_5a853007",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-08-17T08:57:37Z",
      "side": 1,
      "message": "Thanks for agreement. This option, i tried in past and it works as expected. This way we will have isolated pool for SSL and Non-SSL. only down side is instead of 4 connections, we may have double connections but that too in corner cases( Only user errors - Ideally there won\u0027t be any Listener who work both SSL \u0026 Non-SSL on same IP:PORT combination).\n\nThanks Ed and Carson for inputs and having patience to respond on such long discussions.",
      "parentUuid": "3c37df86_0fdd844e",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dede985_490bf2c7",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-18T16:26:08Z",
      "side": 1,
      "message": "\u003e If we don\u0027t handle this then we are introducing a bug where you can lock a IP:PORT as only being used for SSL or non-SSL.\n\nI agree, we need to handle it, I\u0027m just saying handle it in the connection pool.\n\nTo be more concrete, I mean taking this variable here:\nhttps://github.com/openbmc/bmcweb/blob/17dcc312e534b33c2ea18a1dbf287e30ea79cfb5/http/http_client.hpp#L627\n\nAnd splitting it into:\n    std::unordered_map\u003cstd::string, std::shared_ptr\u003cConnectionPool\u003e\u003e\n        httpConnectionPools;\n    std::unordered_map\u003cstd::string, std::shared_ptr\u003cConnectionPool\u003e\u003e\n        httpsConnectionPools;\n        \nThen using the TLS-ness of the request in the lookup here:\nhttps://github.com/openbmc/bmcweb/blob/17dcc312e534b33c2ea18a1dbf287e30ea79cfb5/http/http_client.hpp#L682\n\nAlternatively, on the aformentioned line, we could also just include the \"http/https\" as part of the clientKey, which would give the same result.  (note after I wrote this commment, I see you proposed the same below.  We\u0027re on the same page I think)\n\nI think that would mean that we can no longer get a mixup, right?\n\n\n\u003e In its current state the is only using the IP:PORT as the key for creating new connection pools.\n\nCompletely agree, as-written, we have a bug that needs resolved.\n\n\u003e only down side is instead of 4 connections, we may have double connections but that too in corner case\n\nTo reiterate, we go from 4 to 8 connections, and it\u0027s a corner case that will probably never be hit in practice.  I\u0027m ok with this tradeoff.",
      "parentUuid": "4fc663b6_5a853007",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a178012_3bb93242",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 583,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-19T18:19:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2dede985_490bf2c7",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 22
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a26b0535_265df071",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 604,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "std::move on a bool does nothing.  Please remove.",
      "range": {
        "startLine": 604,
        "startChar": 22,
        "endLine": 604,
        "endChar": 32
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1d4e494_0226fa8d",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 604,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T18:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a26b0535_265df071",
      "range": {
        "startLine": 604,
        "startChar": 22,
        "endLine": 604,
        "endChar": 32
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "399374bc_22930e3a",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 651,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-12T17:34:58Z",
      "side": 1,
      "message": "You first need to make sure the next message in the queue matches the current connection in terms of using SSL.  If they do not then you need to ignore if the server is keepAlive and close the connection before reconfiguring the connection and sending the next message.",
      "range": {
        "startLine": 639,
        "startChar": 12,
        "endLine": 651,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d090d160_cde6f787",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 651,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T18:48:55Z",
      "side": 1,
      "message": "Same as explained at https://gerrit.openbmc.org/c/openbmc/bmcweb/+/54945/comments/8e9e1133_2df87256\n\nDo let me know if any disagreement.",
      "parentUuid": "399374bc_22930e3a",
      "range": {
        "startLine": 639,
        "startChar": 12,
        "endLine": 651,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40867b2b_a5b67c5a",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 651,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-13T21:30:32Z",
      "side": 1,
      "message": "See my above response",
      "parentUuid": "d090d160_cde6f787",
      "range": {
        "startLine": 639,
        "startChar": 12,
        "endLine": 651,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c07f46fe_37d2f538",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 651,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-17T00:55:48Z",
      "side": 1,
      "message": "See my response. https://gerrit.openbmc.org/c/openbmc/bmcweb/+/54945/comments/09060fca_d5151bb2\n\nModified code with parsing useSSL makes sslConn and existing connection pool works for both SSL \u0026 non-SSL cases.",
      "parentUuid": "40867b2b_a5b67c5a",
      "range": {
        "startLine": 639,
        "startChar": 12,
        "endLine": 651,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ff411f6_e64f7dd3",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 651,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-08-08T11:45:53Z",
      "side": 1,
      "message": "Tracked in other comment which is mentioned above, So closing this.",
      "parentUuid": "c07f46fe_37d2f538",
      "range": {
        "startLine": 639,
        "startChar": 12,
        "endLine": 651,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdfcf860_77229e31",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 651,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-08T20:38:09Z",
      "side": 1,
      "message": "\u003e Modified code with parsing useSSL makes sslConn and existing connection pool works for both SSL \u0026 non-SSL cases.\nThe connection pool forces all connections to be either SSL or non-SSL.  It needs to allow a mix of the two such as through the ability to reconfigure individual connections to switch from SSL to non-SSL or vice versa.\n\nThe issue you linked to has not been resolved.  My initial comment in this thread directly depends on the outcome of that linked issue.  Please do not close this thread before that issue\u0027s been resolved.",
      "parentUuid": "7ff411f6_e64f7dd3",
      "range": {
        "startLine": 639,
        "startChar": 12,
        "endLine": 651,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d9918c2_0f4d45b7",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 651,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-19T18:19:09Z",
      "side": 1,
      "message": "I think we solved this in the other comment thread, and the clientKey now includes ssl or not, so I\u0027m going to close this.  Please reopen if this is still an issue.",
      "parentUuid": "bdfcf860_77229e31",
      "range": {
        "startLine": 639,
        "startChar": 12,
        "endLine": 651,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f49dc36a_4dfb482d",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 669,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "Why do we need a separate bool for this?  doesn\u0027t destUri contain http or https?",
      "range": {
        "startLine": 669,
        "startChar": 0,
        "endLine": 669,
        "endChar": 38
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f0e7eb9_5afd4ff7",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 669,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T18:48:55Z",
      "side": 1,
      "message": "destUri is contains the path not the full URI to extract it. It should have been name destPath instead of destUri.  I will correct name in separate commit.",
      "parentUuid": "f49dc36a_4dfb482d",
      "range": {
        "startLine": 669,
        "startChar": 0,
        "endLine": 669,
        "endChar": 38
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62b9604b_992e6b3b",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 669,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T20:19:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4f0e7eb9_5afd4ff7",
      "range": {
        "startLine": 669,
        "startChar": 0,
        "endLine": 669,
        "endChar": 38
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e9e1133_2df87256",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 731,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-12T17:34:58Z",
      "side": 1,
      "message": "This is where you need to make sure the message and existing connection agree in terms of using SSL.  If they do not then you need to reconfigure the connection.  \n\nIf the connection is idle then you need to make sure you close it first",
      "range": {
        "startLine": 708,
        "startChar": 0,
        "endLine": 731,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52e8e1a5_9caa1e7e",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 731,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T18:48:55Z",
      "side": 1,
      "message": "Not clear on why we need to make check message and existing connection again here. Already we are adding entry for each subscription in connectionPool using IP \u0026 port . So only if the the send request is for specific subscription( Checked via unique key in connection pool) and its sent to the connections established(No mismatch of http-https there) for that specific subscription. So i don\u0027t see need for cross verification of SSL here.\n\nRegarding idle state checking, We are already doing this here as we mapped conn(tcp_stream) with ssl_stream during construction of sslConn, So using state from tcp_stream connection is enough that is we are already doing in this highlighted code.",
      "parentUuid": "8e9e1133_2df87256",
      "range": {
        "startLine": 708,
        "startChar": 0,
        "endLine": 731,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4fe1e21_642bbd28",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 731,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-13T21:30:32Z",
      "side": 1,
      "message": "As explained above, a connection pool only exists for a given IP:Port pair.  Each connection within the pool is configured to send to that specific IP:Port pair. They just exist within the pool as a vector of connections.\n\nThere is no distinction made about what entity created the pool in the first place.  Different subscription that use the same IP:Port will share the same connection pool.",
      "parentUuid": "52e8e1a5_9caa1e7e",
      "range": {
        "startLine": 708,
        "startChar": 0,
        "endLine": 731,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66e09848_59d8ff15",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 731,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-17T00:55:48Z",
      "side": 1,
      "message": "Same as above: https://gerrit.openbmc.org/c/openbmc/bmcweb/+/54945/comments/09060fca_d5151bb2",
      "parentUuid": "f4fe1e21_642bbd28",
      "range": {
        "startLine": 708,
        "startChar": 0,
        "endLine": 731,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b57b777_e8041573",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 731,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-08-08T11:45:53Z",
      "side": 1,
      "message": "Tracked in above comment.",
      "parentUuid": "66e09848_59d8ff15",
      "range": {
        "startLine": 708,
        "startChar": 0,
        "endLine": 731,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6866f41a_31797360",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 731,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-08T20:38:09Z",
      "side": 1,
      "message": "The issue you linked to has not been resolved.  My initial comment in this thread directly depends on the outcome of that linked issue.  Please do not close this thread until it has been resolved.",
      "parentUuid": "0b57b777_e8041573",
      "range": {
        "startLine": 708,
        "startChar": 0,
        "endLine": 731,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6cecd08_3626d989",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 731,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-19T18:20:54Z",
      "side": 1,
      "message": "I think this is solved now that ConnectionInfo is unique to SSL vs non-ssl",
      "parentUuid": "6866f41a_31797360",
      "range": {
        "startLine": 708,
        "startChar": 0,
        "endLine": 731,
        "endChar": 13
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e73ce50_a921c59a",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 743,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-12T17:34:58Z",
      "side": 1,
      "message": "You don\u0027t need to use move since this is a bool",
      "range": {
        "startLine": 743,
        "startChar": 12,
        "endLine": 743,
        "endChar": 47
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d1c1b20_06bb7061",
        "filename": "http/http_client.hpp",
        "patchSetId": 5
      },
      "lineNbr": 743,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T18:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e73ce50_a921c59a",
      "range": {
        "startLine": 743,
        "startChar": 12,
        "endLine": 743,
        "endChar": 47
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05e78574_5a49b2b3",
        "filename": "meson_options.txt",
        "patchSetId": 5
      },
      "lineNbr": 307,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "I don\u0027t think this is where phosphor-certificate-manager stores these, is it?",
      "range": {
        "startLine": 307,
        "startChar": 4,
        "endLine": 307,
        "endChar": 29
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b70cd174_4f35d3ad",
        "filename": "meson_options.txt",
        "patchSetId": 5
      },
      "lineNbr": 307,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T19:31:11Z",
      "side": 1,
      "message": "All SSL certificates are stored here so added it as default patch. I will change the default path.",
      "parentUuid": "05e78574_5a49b2b3",
      "range": {
        "startLine": 307,
        "startChar": 4,
        "endLine": 307,
        "endChar": 29
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "320a8be9_794de374",
        "filename": "meson_options.txt",
        "patchSetId": 5
      },
      "lineNbr": 307,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-17T00:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b70cd174_4f35d3ad",
      "range": {
        "startLine": 307,
        "startChar": 4,
        "endLine": 307,
        "endChar": 29
      },
      "revId": "d739445adffb056cbb753730656f80ccc367b010",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
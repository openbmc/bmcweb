{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6c17c259_b4785777",
        "filename": "/COMMIT_MSG",
        "patchSetId": 25
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-24T19:45:02Z",
      "side": 1,
      "message": "Missing testing.",
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc938a2c_3c0a8c29",
        "filename": "/COMMIT_MSG",
        "patchSetId": 25
      },
      "lineNbr": 17,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c17c259_b4785777",
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "072a8c4a_893f3638",
        "filename": "/COMMIT_MSG",
        "patchSetId": 25
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-22T19:16:37Z",
      "side": 1,
      "message": "Please don\u0027t just mark things done.  The latest patchset still has no testing listed in the commit message.",
      "parentUuid": "fc938a2c_3c0a8c29",
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f477c237_4bba2cc8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 25
      },
      "lineNbr": 17,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-08-27T15:44:28Z",
      "side": 1,
      "message": "I still don\u0027t see a tested statement",
      "parentUuid": "072a8c4a_893f3638",
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a743ddb7_37588862",
        "filename": "/COMMIT_MSG",
        "patchSetId": 25
      },
      "lineNbr": 17,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-09-07T03:56:58Z",
      "side": 1,
      "message": "Unit test cases http_connection_test.cpp, http_response_test.cpp are added.",
      "parentUuid": "f477c237_4bba2cc8",
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1a49f01_794d4c77",
        "filename": "/COMMIT_MSG",
        "patchSetId": 25
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-07T17:00:34Z",
      "side": 1,
      "message": "Unit tests alone are definitely not enough testing for a core change like this.",
      "parentUuid": "a743ddb7_37588862",
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95506afb_198c9ecc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 25
      },
      "lineNbr": 17,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-09-08T04:01:13Z",
      "side": 1,
      "message": "True. I have done one round of functional testing in downstream repo with my initial patch sets. But the upstream diverged a lot since we did the last rebase. I am struggling to find the right environment to do the functional testing for the upstream changes.",
      "parentUuid": "b1a49f01_794d4c77",
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eeef36e9_6431081b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 25
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-08T17:07:09Z",
      "side": 1,
      "message": "Understood.  Please update your commit message when you\u0027ve tested.",
      "parentUuid": "95506afb_198c9ecc",
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b99978a6_4a0d726e",
        "filename": "http/complete_response_fields.hpp",
        "patchSetId": 25
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-25T19:11:43Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 57,
        "endChar": 2
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fbd48d7_644ab4d5",
        "filename": "http/complete_response_fields.hpp",
        "patchSetId": 25
      },
      "lineNbr": 57,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-07-26T07:59:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b99978a6_4a0d726e",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 57,
        "endChar": 2
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1609520d_4a0eed53",
        "filename": "http/http_connection.hpp",
        "patchSetId": 25
      },
      "lineNbr": 521,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-25T19:11:43Z",
      "side": 1,
      "message": "please don\u0027t use auto in this context.  It obfuscates intent.\n\nIn this case, it also duplicates quite a bit of non-trivial code.  I suspect you want to roll out the lambda into it method so it doesn\u0027t get duplicated.",
      "range": {
        "startLine": 521,
        "startChar": 21,
        "endLine": 521,
        "endChar": 25
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34d5c129_9bef9f0c",
        "filename": "http/http_connection.hpp",
        "patchSetId": 25
      },
      "lineNbr": 521,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-07-26T07:59:06Z",
      "side": 1,
      "message": "auto was needed because it is a generic function that should work for both file and string body. I moved the common code that does not depend on parameter out of the function. Now I believe less code will be generated",
      "parentUuid": "1609520d_4a0eed53",
      "range": {
        "startLine": 521,
        "startChar": 21,
        "endLine": 521,
        "endChar": 25
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bab648c_b8090284",
        "filename": "http/http_connection.hpp",
        "patchSetId": 25
      },
      "lineNbr": 521,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-07T16:19:13Z",
      "side": 1,
      "message": "\u003e auto was needed because it is a generic function that should work for both file and string body.\n\nAs I\u0027ve said other places, please don\u0027t use generic functions unless they make the code cleaner.  With only two types, they definitely don\u0027t make the code cleaner.",
      "parentUuid": "34d5c129_9bef9f0c",
      "range": {
        "startLine": 521,
        "startChar": 21,
        "endLine": 521,
        "endChar": 25
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5de092ae_e870c486",
        "filename": "http/http_connection.hpp",
        "patchSetId": 25
      },
      "lineNbr": 521,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5bab648c_b8090284",
      "range": {
        "startLine": 521,
        "startChar": 21,
        "endLine": 521,
        "endChar": 25
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5dc041c_73a85662",
        "filename": "http/http_connection.hpp",
        "patchSetId": 25
      },
      "lineNbr": 566,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-25T19:11:43Z",
      "side": 1,
      "message": "This throws exceptions, which is why it was replaced a while ago.  Why was it added back?",
      "range": {
        "startLine": 566,
        "startChar": 0,
        "endLine": 566,
        "endChar": 32
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c213488_4c69ab43",
        "filename": "http/http_connection.hpp",
        "patchSetId": 25
      },
      "lineNbr": 566,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-07-26T07:59:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b5dc041c_73a85662",
      "range": {
        "startLine": 566,
        "startChar": 0,
        "endLine": 566,
        "endChar": 32
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f12f2f05_a4a0389d",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 59,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-25T19:11:43Z",
      "side": 1,
      "message": "Please don\u0027t do this.  Doing so causes you to not handle errors at all.\n\nAlso, variants can only throw in the case of unfilled-by-exception, which we should never see.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 59,
        "endChar": 2
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3629eb93_497abf45",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 59,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-07-26T07:59:06Z",
      "side": 1,
      "message": "This was done to fix the clang-tidy error. Move and visit are called from no-except functions. Yes, in our case variant will always hold some value. That is why the catch is empty. But clang-tidy will show it as Error if don\u0027t catch possible exceptions. This wrapper works as exception-safe version of std::visit. The wrapper added to avoid ugly try-catch everywhere std::visit is performed.",
      "parentUuid": "f12f2f05_a4a0389d",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 59,
        "endChar": 2
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31b95a60_deac6864",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 59,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:32:55Z",
      "side": 1,
      "message": "Understood, I would like to see how we can avoid this complexity of having a templated, non-trivial class.  I suspect it will be quite a few iterations of using get_if rather than std::visit, and I\u0027m ok with that.  That seems significantly less complex to me.",
      "parentUuid": "3629eb93_497abf45",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 59,
        "endChar": 2
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2f5e7c9_cc01a7de",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 59,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:44:25Z",
      "side": 1,
      "message": "I wonder if this is a place where we should be using boost::variant, which I don\u0027t believe requires valueless by exception.  Might be something to consider, although I suspect get_if will work better.",
      "parentUuid": "31b95a60_deac6864",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 59,
        "endChar": 2
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "682d4fc7_806c3a35",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 59,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "I felt adding \"if else\" chain everywhere to do the same thing for different types reduces the readability and maintainability. I have removed Template class with a generic function to do the same. is it ok?",
      "parentUuid": "a2f5e7c9_cc01a7de",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 59,
        "endChar": 2
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32ce70f7_4c2a3cac",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 59,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-07T16:19:13Z",
      "side": 1,
      "message": "\u003e I felt adding \"if else\" chain everywhere to do the same thing for different types reduces the readability and maintainability. \n\nAs the maintainer of this project, I disagree.  Having concrete types helps to review code faster, as you don\u0027t have to hunt for every possible type an lvalue can be.  Please make the change as I\u0027ve requested.",
      "parentUuid": "682d4fc7_806c3a35",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 59,
        "endChar": 2
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "facad103_1e4d848a",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 59,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-07T16:45:24Z",
      "side": 1,
      "message": "I disagree on this. To me it is against the spirit of generic programming and \" dont repeat yourself (DRY)\" principle. I think we can agree to disagree here. \nI will make changes as per the request.",
      "parentUuid": "32ce70f7_4c2a3cac",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 59,
        "endChar": 2
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c56d36a_df9b7687",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 59,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-07T17:19:39Z",
      "side": 1,
      "message": "\u003e I disagree on this.\n\nYour disagreement is noted, and I\u0027m happy to revisit if we get N different implementations of this.  Part of the reason I\u0027m arguing for this is I know that we will likely only have 3 body implementations, and we\u0027ve been through several rounds where people write \"generic\" code, and duplicate quite a bit of code in the binary.  If we get to 3 body implementations, and this use of generics doesn\u0027t duplicate a lot of code, I\u0027m happy to discuss again then.\n\n\u003e To me it is against the spirit of generic programming and \" dont repeat yourself (DRY)\" principle. I think we can agree to disagree here. \n\u003e I will make changes as per the request.\n\nThank you, I appreciate it.",
      "parentUuid": "facad103_1e4d848a",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 59,
        "endChar": 2
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94358932_6076b92f",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 59,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c56d36a_df9b7687",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 59,
        "endChar": 2
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a301dd8_08a1633f",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 192,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-25T19:11:43Z",
      "side": 1,
      "message": "THere\u0027s no needs to do BOTH holds_alternative and std::visit.  I\u0027m having a little trouble even understanding what this function is doing.  Can you help me understand here?",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 192,
        "endChar": 74
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07942e55_5d94a946",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 192,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-07-26T07:59:06Z",
      "side": 1,
      "message": "This code does the body migration (string-body to file-body or file-body to string-body).\nUse Case;\n1) current response type is string-body\n2) user updates some header fields of the response\n3) Then the user tries to open a file\n4) The body should be migrated to file-body\n5) Before setting the file-body to variant, we need to copy all headers from string-body to the new file-body\n\nThe same code work for file-body to string-body migration as well.\n\nThe hold_alternative check prevents migration from file-body to file-body, or string-body to string-body. Similar to how we avoid self-assignment in \"\u003d\" operator overloading.",
      "parentUuid": "2a301dd8_08a1633f",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 192,
        "endChar": 74
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "138a1750_3d1e0f0d",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 192,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:37:25Z",
      "side": 1,
      "message": "\u003e This code does the body migration (string-body to file-body or file-body to string-body).\n\u003e Use Case;\n\u003e 1) current response type is string-body\n\u003e 2) user updates some header fields of the response\n\u003e 3) Then the user tries to open a file\n\u003e 4) The body should be migrated to file-body\n\u003e 5) Before setting the file-body to variant, we need to copy all headers from string-body to the new file-body\n\u003e \n\u003e The same code work for file-body to string-body migration as well.\n\u003e \n\u003e The hold_alternative check prevents migration from file-body to file-body, or string-body to string-body. Similar to how we avoid self-assignment in \"\u003d\" operator overloading.",
      "parentUuid": "07942e55_5d94a946",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 192,
        "endChar": 74
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20abf2ff_949dcd8b",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 192,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-07T16:19:13Z",
      "side": 1,
      "message": "Please make the code simpler to read.",
      "parentUuid": "138a1750_3d1e0f0d",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 192,
        "endChar": 74
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "128e73b1_00574d05",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 192,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-07T16:45:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "20abf2ff_949dcd8b",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 192,
        "endChar": 74
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35621684_89b22214",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 205,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-25T19:11:43Z",
      "side": 1,
      "message": "std::get throws.  Please use the result of the emplace() call as your return.",
      "range": {
        "startLine": 205,
        "startChar": 15,
        "endLine": 205,
        "endChar": 24
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b0eb016_0ec1b1d5",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 205,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-07-26T07:59:06Z",
      "side": 1,
      "message": "we are making sure that the variant will have proper value at updateAlternative function. Should we still use get_if here?",
      "parentUuid": "35621684_89b22214",
      "range": {
        "startLine": 205,
        "startChar": 15,
        "endLine": 205,
        "endChar": 24
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5edeec22_64be1a35",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 205,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:32:55Z",
      "side": 1,
      "message": "I never said to use get_if.  I said to use the result of emplace()",
      "parentUuid": "8b0eb016_0ec1b1d5",
      "range": {
        "startLine": 205,
        "startChar": 15,
        "endLine": 205,
        "endChar": 24
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3283d13c_110a6da9",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 205,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:37:25Z",
      "side": 1,
      "message": "The most important thing is that body() can now return an error, which means that the prototype of this function needs to change.  As-is, you\u0027ve just make this code throw, which this code doesn\u0027t catch anywhere, and will just crash the service.",
      "parentUuid": "5edeec22_64be1a35",
      "range": {
        "startLine": 205,
        "startChar": 15,
        "endLine": 205,
        "endChar": 24
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c630b61_23ea88ed",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 205,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "emplace will not be executed always. It executes only if the current body type is not the desired type. So we should call get or get_if in other cases. Made changes to use safeVisit to avoid the exception.",
      "parentUuid": "3283d13c_110a6da9",
      "range": {
        "startLine": 205,
        "startChar": 15,
        "endLine": 205,
        "endChar": 24
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f2850d0_da37ab0e",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 205,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-06T17:23:26Z",
      "side": 1,
      "message": "Per the coding standard documented in Developing.md please do not use exceptions for recoverable errors, which this is.",
      "parentUuid": "5c630b61_23ea88ed",
      "range": {
        "startLine": 205,
        "startChar": 15,
        "endLine": 205,
        "endChar": 24
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1ffd4b4_364e9671",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 205,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-07T16:45:24Z",
      "side": 1,
      "message": "But how do make a non-breaking change here? The body() should return a reference to a string.  If we change the return type to include error-info then the change set will be huge. We should handle the error in every calling site. Do we really want to do it? And how do we handle the error case in the calling site? I felt the simplest solution would be to make sure that no such case occur. That is what updateResponseIfNeeded function do. The only issue is that the \"get\" can throw, but it will never throw in our case.",
      "parentUuid": "4f2850d0_da37ab0e",
      "range": {
        "startLine": 205,
        "startChar": 15,
        "endLine": 205,
        "endChar": 24
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86bb490b_c28354d3",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 205,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-07T17:19:39Z",
      "side": 1,
      "message": "\u003e But how do make a non-breaking change here?\n\nBecause prior to this commit we did not use exceptions for non-exceptional (Ie, should not crash) error handling.  This uses exceptions for non-exceptional error handling.\n\n\u003e The body() should return a reference to a string.  If we change the return type to include error-info then the change set will be huge.\n\n\"This requires a large change\" is not an argument against not handling errors.  Errors shall be handled.  Also, there aren\u0027t that many calls to body(), I would expect about a dozen.\n\n\u003e We should handle the error in every calling site. Do we really want to do it? \n\nYes, we should handle errors.\n\n\u003e And how do we handle the error case in the calling site? I felt the simplest solution would be to make sure that no such case occur.\n\nThe case can occur.  It is trivial to write code in a handler that does this incorrectly, which means it\u0027s an error that needs handled.\n\n\u003e That is what updateResponseIfNeeded function do. The only issue is that the \"get\" can throw, but it will never throw in our case.\n\nHow have you verified that it can never throw?",
      "parentUuid": "b1ffd4b4_364e9671",
      "range": {
        "startLine": 205,
        "startChar": 15,
        "endLine": 205,
        "endChar": 24
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a14524a_d01befb1",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 205,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T14:53:30Z",
      "side": 1,
      "message": "How have you verified that it can never throw?\nStandard says so.\nstd::bad_variant_access is the type of the exception thrown in the following situations:\n\nstd::get(std::variant) called with an index or type that does not match the currently active alternative\nstd::visit called to visit a variant that is valueless_by_exception\n\nWe are making sure that variant has value before calling get.\n\n\nThe case can occur. It is trivial to write code in a handler that does this incorrectly, \nHow? if we make sure that new strigbody will be created and set before returning",
      "parentUuid": "86bb490b_c28354d3",
      "range": {
        "startLine": 205,
        "startChar": 15,
        "endLine": 205,
        "endChar": 24
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e31744a_726ecd46",
        "filename": "http/http_response.hpp",
        "patchSetId": 25
      },
      "lineNbr": 205,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0a14524a_d01befb1",
      "range": {
        "startLine": 205,
        "startChar": 15,
        "endLine": 205,
        "endChar": 24
      },
      "revId": "905356b40d3430a3d6a5f9c2a4f27ac4d2f10268",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
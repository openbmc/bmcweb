{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "db1aec0a_7d2251b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-31T19:13:52Z",
      "side": 1,
      "message": "Like we talked about, please keep support for the old URI.  They can call similar methods, but we can\u0027t day zero drop support for an API that has existed for as many years as this one has.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 14,
        "endChar": 61
      },
      "revId": "7f9121283cfbc57ec32b2cf33bf1f03371fbc758",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5c1090a_7ddf58bc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1001634
      },
      "writtenOn": "2023-05-31T19:22:50Z",
      "side": 1,
      "message": "The backward compatibility will be maintained by webui. Following drop handles that and must be merged before mine.\n\nhttps://gerrit.openbmc.org/c/openbmc/webui-vue/+/63442",
      "parentUuid": "db1aec0a_7d2251b5",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 14,
        "endChar": 61
      },
      "revId": "7f9121283cfbc57ec32b2cf33bf1f03371fbc758",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "042927bb_7fc4caf6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-31T19:30:16Z",
      "side": 1,
      "message": "\u003e The backward compatibility will be maintained by webui\n\nNo thank you.  Please maintain api compatibility at the API boundary.  Changing one client does not maintain compatibility for anything but that client.",
      "parentUuid": "e5c1090a_7ddf58bc",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 14,
        "endChar": 61
      },
      "revId": "7f9121283cfbc57ec32b2cf33bf1f03371fbc758",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35ec5930_910cd439",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-31T19:22:45Z",
      "side": 1,
      "message": "Why does a pre-built list of elements prevent service attacks?",
      "range": {
        "startLine": 15,
        "startChar": 2,
        "endLine": 15,
        "endChar": 33
      },
      "revId": "7f9121283cfbc57ec32b2cf33bf1f03371fbc758",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b04c9014_ae57e0f6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1001634
      },
      "writtenOn": "2023-05-31T19:24:56Z",
      "side": 1,
      "message": "We can not completely avoid it but we are trying to avoid DBUS call for bad string attach. This is from the discussion on my earlier drop. \n\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/62525?tab\u003dcomments",
      "parentUuid": "35ec5930_910cd439",
      "range": {
        "startLine": 15,
        "startChar": 2,
        "endLine": 15,
        "endChar": 33
      },
      "revId": "7f9121283cfbc57ec32b2cf33bf1f03371fbc758",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0bf63a5d_625704cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-31T19:10:33Z",
      "side": 1,
      "message": "Please help to review https://gerrit.openbmc.org/c/openbmc/bmcweb/+/63851",
      "revId": "7f9121283cfbc57ec32b2cf33bf1f03371fbc758",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9944cf81_c7c3b6f0",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-31T19:13:52Z",
      "side": 1,
      "message": "This should not be a global variable.  It\u0027s essentially storing mapper state, which should remain in the mapper.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 24
      },
      "revId": "7f9121283cfbc57ec32b2cf33bf1f03371fbc758",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbfd5634_5e480934",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1001634
      },
      "writtenOn": "2023-05-31T19:22:50Z",
      "side": 1,
      "message": "You mean something like this?\n\ngetSupportedConsoleIds()\n{\ntatic boost::container::flat_set\u003cstd::string, std::less\u003c\u003e,\n                                  std::vector\u003cstd::string\u003e\u003e\n    supportedConsoleIds;\n    return supportedConsoleIds;\n}",
      "parentUuid": "9944cf81_c7c3b6f0",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 24
      },
      "revId": "7f9121283cfbc57ec32b2cf33bf1f03371fbc758",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e30d5842_34eebc88",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-31T19:30:16Z",
      "side": 1,
      "message": "No, we should not store state at all.",
      "parentUuid": "dbfd5634_5e480934",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 24
      },
      "revId": "7f9121283cfbc57ec32b2cf33bf1f03371fbc758",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a41272ca_b032b99c",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 1
      },
      "lineNbr": 167,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-31T19:13:52Z",
      "side": 1,
      "message": "Why are we calling the mapper here again?  Can we just call obmc console directly?  Even if we\u0027re calling the mapper, we should be calling GetObject",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 167,
        "endChar": 54
      },
      "revId": "7f9121283cfbc57ec32b2cf33bf1f03371fbc758",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fde8ff7e_02c8641b",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 1
      },
      "lineNbr": 167,
      "author": {
        "id": 1001634
      },
      "writtenOn": "2023-05-31T19:22:50Z",
      "side": 1,
      "message": "This is to build the list of consoles. We need to get the list of paths. This is called once at the start of bmcweb.",
      "parentUuid": "a41272ca_b032b99c",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 167,
        "endChar": 54
      },
      "revId": "7f9121283cfbc57ec32b2cf33bf1f03371fbc758",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b403dca6_807fd194",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 1
      },
      "lineNbr": 167,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-31T19:30:16Z",
      "side": 1,
      "message": "\u003e This is to build the list of consoles.\n\nWHY?  This is counter to DBUS_USAGE.md.  If you want to get a console in a daemon-independent manner, use the mapper (GetObject).  In this case, I suspect we can just call the daemon directly until we have another user.",
      "parentUuid": "fde8ff7e_02c8641b",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 167,
        "endChar": 54
      },
      "revId": "7f9121283cfbc57ec32b2cf33bf1f03371fbc758",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
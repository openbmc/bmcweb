{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6c95fe0b_289e6c66",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-09-09T22:22:56Z",
      "side": 1,
      "message": "please wrap your commits 50/72",
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bde452a_ec8e906a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1001114
      },
      "writtenOn": "2021-09-13T19:58:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c95fe0b_289e6c66",
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3c535ef_77876772",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-09-09T22:22:56Z",
      "side": 1,
      "message": "more detail here, including a link to the OWASP standards you\u0027re citing.  We do validate the content type by actually parsing it, so I suspect we meet the intent of the OWASP guidelines.  There\u0027s lots of places where we can implicitly assume a content-type.\n\nOverall, there\u0027s lots of places where we implicitly assume a content-type given the URI, as the specification is defined that way (redfish for example only defines JSON).\n\n\nSuddenly checking this while technically correct, has the potential to break a lot of scripts that were previously working.  I\u0027m open to this being a security issue, but it\u0027s not clear what that would be, as the content-type is controlled by the user, so it doesn\u0027t really change the security boundary by checking possibly-attacker sent fields.\n\nThe patchset itself has some style things that need fixed as well, but lets get the \"why\" sorted out first, then we can deal with the actual implementation.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 32
      },
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df411016_c7f63082",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1001114
      },
      "writtenOn": "2021-09-13T11:13:16Z",
      "side": 1,
      "message": "By \"Content-Type\" I mean Content-Type header:\nhttps://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#validate-content-types\nSo it should be validated if body content type and Content-Type header is the same.\n\nCross-site Forged requests cannot be send with application/json content-type because of no-cors mode. Currently it is possible to make CSRF attacks when using mTLS authenticasion. Please check cover letter for more details, I also provide addition proposition about changing mTLS auth flow, because with current one there is no possibility to implement XSRF token.",
      "parentUuid": "f3c535ef_77876772",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 32
      },
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d603a8f1_a91f5313",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-09-15T15:59:10Z",
      "side": 1,
      "message": "\u003e By \"Content-Type\" I mean Content-Type header:\n\u003e https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#validate-content-types\n\u003e So it should be validated if body content type and Content-Type header is the same.\n\nThe content-type header is sent by the attacker.\n\n\u003e \n\u003e Cross-site Forged requests cannot be send with application/json content-type because of no-cors mode.\n\nCORS would prevent ALL requests, not just requests sent with a content-type header, correct?\n\n\u003e Currently it is possible to make CSRF attacks when using mTLS authenticasion. Please check cover letter for more details,\n\nYour cover letter had very few details on how to actually execute an attack, and involved injecting javascript into your browser.  Said javascript would also be able to defeat a cors check, as it\u0027s also stored in the browser javascript.  It\u0027s possible I missed something, but as written your cover letter isn\u0027t really enough to reproduce the issue.\n\n\u003e I also provide addition proposition about changing mTLS auth flow, because with current one there is no possibility to implement XSRF token.\n\nI have proposed several changes to the mTLS flow in the past, which nobody has responded to.  This needs discussed with the mTLS authors (of which I believe work for your same group).\n\nIf client-side injection of code is within your threat model, I would highly recommend disabling mtls, as we make a similar recommendation for basic auth for those that don\u0027t like the browser caching properties.",
      "parentUuid": "df411016_c7f63082",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 32
      },
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2ed74dd_160d426e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1001114
      },
      "writtenOn": "2021-09-15T19:08:42Z",
      "side": 1,
      "message": "\u003e The content-type header is sent by the attacker.\nYes it is. However browser in no-cors mode cannot send \"application/json\" Content-Type.\n\nSaying more that does not change that it should still be validated according to OWASP.",
      "parentUuid": "d603a8f1_a91f5313",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 32
      },
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb5a8a22_2d500762",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-10-01T17:08:43Z",
      "side": 1,
      "message": "\u003e \u003e The content-type header is sent by the attacker.\n\u003e Yes it is. However browser in no-cors mode cannot send \"application/json\" Content-Type.\n\nWe\u0027re now a year later, and the steps to reproduce still haven\u0027t been provided.  I guess we will just continue trying to push this forward, but I think the above would\u0027ve been clarified significantly if we had a set of reproduction steps.\n\n\u003e \n\u003e Saying more that does not change that it should still be validated according to OWASP.\n\nNo disagreement, and I stated as much in other messages.  What we\u0027re trying to gauge here is impact weighed against impact to the community of breaking many client implementations without warning, not whether or not this should ideally be done.\n\n\nMarking this comment closed;  I\u0027ve pushed a patch that adds more detail to this commit.",
      "parentUuid": "f2ed74dd_160d426e",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 32
      },
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73ae0db4_ff9226fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1001114
      },
      "writtenOn": "2022-10-02T20:25:32Z",
      "side": 1,
      "message": "Thank you very much Ed.\n\nAbout reproduction following code performs attack (because browser automatically use saved certificate):\n```\nwindow.fetch(\u0027https://\u003cbmcwebAddress\u003e/redfish/v1/AccountService/Accounts/\u0027,\n    {\n        method: \"POST\",\n        mode: \"no-cors\",\n        credentials: \"include\",\n        body: JSON.stringify({\u0027UserName\u0027: \u0027stefan\u0027, \u0027Enabled\u0027: true, \u0027Password\u0027:\u0027test123!\u0027, \u0027RoleId\u0027:\u0027Administrator\u0027})\n    })\n    .then(function(data){\n        console.log(data);\n    }).catch(function(error) {\n        console.log(\u0027Error while doing request\u0027, error);\n    });\n```\n    \nTo perform attack no-cors mode is necessary, and in no-cors mode we cannot send Content-Type to application/json",
      "parentUuid": "eb5a8a22_2d500762",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 32
      },
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb517f1a_2ea0cc0a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-10-02T21:27:40Z",
      "side": 1,
      "message": "\u003e About reproduction following code performs attack \n\nThat is not a set of steps to reproduce.  Steps to reproduce generally takes the form of:\n\nBuild OpenBMC from SHA1 X for platform Y\nLaunch webui as a user, and login via \u003clogin mechanism or command\u003e\nLaunch attack server using the following commands and code \u003clink to code\u003e\nFrom user webui, do steps X, Y, and Z.\nObserve changed state on server.\n\nI have quite a few questions, but I think the most useful form of this would be to get the steps above written down, then we can continue with targeted questions.",
      "parentUuid": "73ae0db4_ff9226fd",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 32
      },
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
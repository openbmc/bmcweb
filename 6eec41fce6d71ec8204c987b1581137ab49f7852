{
  "comments": [
    {
      "key": {
        "uuid": "6c95fe0b_289e6c66",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-09-09T22:22:56Z",
      "side": 1,
      "message": "please wrap your commits 50/72",
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bde452a_ec8e906a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1001114
      },
      "writtenOn": "2021-09-13T19:58:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c95fe0b_289e6c66",
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3c535ef_77876772",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-09-09T22:22:56Z",
      "side": 1,
      "message": "more detail here, including a link to the OWASP standards you\u0027re citing.  We do validate the content type by actually parsing it, so I suspect we meet the intent of the OWASP guidelines.  There\u0027s lots of places where we can implicitly assume a content-type.\n\nOverall, there\u0027s lots of places where we implicitly assume a content-type given the URI, as the specification is defined that way (redfish for example only defines JSON).\n\n\nSuddenly checking this while technically correct, has the potential to break a lot of scripts that were previously working.  I\u0027m open to this being a security issue, but it\u0027s not clear what that would be, as the content-type is controlled by the user, so it doesn\u0027t really change the security boundary by checking possibly-attacker sent fields.\n\nThe patchset itself has some style things that need fixed as well, but lets get the \"why\" sorted out first, then we can deal with the actual implementation.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 32
      },
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df411016_c7f63082",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1001114
      },
      "writtenOn": "2021-09-13T11:13:16Z",
      "side": 1,
      "message": "By \"Content-Type\" I mean Content-Type header:\nhttps://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#validate-content-types\nSo it should be validated if body content type and Content-Type header is the same.\n\nCross-site Forged requests cannot be send with application/json content-type because of no-cors mode. Currently it is possible to make CSRF attacks when using mTLS authenticasion. Please check cover letter for more details, I also provide addition proposition about changing mTLS auth flow, because with current one there is no possibility to implement XSRF token.",
      "parentUuid": "f3c535ef_77876772",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 32
      },
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d603a8f1_a91f5313",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-09-15T15:59:10Z",
      "side": 1,
      "message": "\u003e By \"Content-Type\" I mean Content-Type header:\n\u003e https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#validate-content-types\n\u003e So it should be validated if body content type and Content-Type header is the same.\n\nThe content-type header is sent by the attacker.\n\n\u003e \n\u003e Cross-site Forged requests cannot be send with application/json content-type because of no-cors mode.\n\nCORS would prevent ALL requests, not just requests sent with a content-type header, correct?\n\n\u003e Currently it is possible to make CSRF attacks when using mTLS authenticasion. Please check cover letter for more details,\n\nYour cover letter had very few details on how to actually execute an attack, and involved injecting javascript into your browser.  Said javascript would also be able to defeat a cors check, as it\u0027s also stored in the browser javascript.  It\u0027s possible I missed something, but as written your cover letter isn\u0027t really enough to reproduce the issue.\n\n\u003e I also provide addition proposition about changing mTLS auth flow, because with current one there is no possibility to implement XSRF token.\n\nI have proposed several changes to the mTLS flow in the past, which nobody has responded to.  This needs discussed with the mTLS authors (of which I believe work for your same group).\n\nIf client-side injection of code is within your threat model, I would highly recommend disabling mtls, as we make a similar recommendation for basic auth for those that don\u0027t like the browser caching properties.",
      "parentUuid": "df411016_c7f63082",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 32
      },
      "revId": "6eec41fce6d71ec8204c987b1581137ab49f7852",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
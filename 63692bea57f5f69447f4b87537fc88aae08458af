{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a5bf815a_2c859ea3",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 13
      },
      "lineNbr": 3019,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-07T23:46:27Z",
      "side": 1,
      "message": "A bool works in this simple case, but what if we had\n\n.canDelegateExpandLevel \u003d 1\nAND\n.canDeletgateTop \u003d true;\n\nHow would this code know when to expand, when to top, and when to do both?  I think the calling code needs access to the query structure at some point, right?  Or is there something else that I\u0027m not seeing that would handle that?",
      "range": {
        "startLine": 3019,
        "startChar": 16,
        "endLine": 3019,
        "endChar": 25
      },
      "revId": "63692bea57f5f69447f4b87537fc88aae08458af",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ed0c5e3_352413d0",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 13
      },
      "lineNbr": 3019,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-04-08T00:44:30Z",
      "side": 1,
      "message": "Regarding combinations like this, we will reply on the order of executing query parameters,\n\n```\nServices shall process query parameters in this order:\n• $filter\n• $skip\n• $top\n• Apply server-side pagination\n• $expand\n• excerpt\n• $select\n```\n\nWhen redfish-core/lib codes said they have capabilities to do both (e.g., .canDelegateExpandLevel\u003d1 \u0026\u0026 .canDeletgateTop\u003dtrue), since we execute $top before expand, the behavior in cases when query.expandLevel\u003d2 is still correct, the default handler won\u0027t do top, but do the remaining level\u003d1 expand.\n\nWhen redfish-core/lib codes can only do $top, they need to set the capabilities to (.canDeletgateTop\u003dtrue). The  the default handler won\u0027t do top, but do the full level\u003d2 expand.\n\nI couldn\u0027t see a case where redfish-core/lib codes can do expand but not $top efficiently. Please note, $top only applies to resource collection. The only drawback I could see is duplicate codes. The generic $top handler might just be like the efficient one in certain cases. This can be solved in making a common $top library on JSON objects.\n\nSo, in this architecture, what we don\u0027t support is cases when redfish-core/lib codes can do higher priority parameters efficiently but not lower priority parameters efficiently. As far as I can imagine, there are not many cases we will hit this limitation.\n\nLet me know if this doesn\u0027t answer your question.",
      "parentUuid": "a5bf815a_2c859ea3",
      "range": {
        "startLine": 3019,
        "startChar": 16,
        "endLine": 3019,
        "endChar": 25
      },
      "revId": "63692bea57f5f69447f4b87537fc88aae08458af",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a133618b_fe2e5a0e",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 13
      },
      "lineNbr": 3019,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-08T02:07:03Z",
      "side": 1,
      "message": "$top is just an example, it can be replaced with essentially any of the query params, but I feel like I haven\u0027t been clear.  What if a efficient handler\n\n.canDelegateExpandLevel \u003d 1\n.canDeletgateOnly \u003d true;\n \nbut then the user requests /foo?$only (ie no expand)\n\nHow does the handler know that it should ONLY do the only case, and not the expand case?\n\n\u003e I couldn\u0027t see a case where redfish-core/lib codes can do expand but not $top efficiently\n\nPost codes might be one example, LogServiceCollection (in systems or manager) might be another.\n\n\n\u003e So, in this architecture, what we don\u0027t support is cases when redfish-core/lib codes can do higher priority parameters efficiently but not lower priority parameters efficiently. As far as I can imagine, there are not many cases we will hit this limitation.\n\nI could definitely see both a case where an implementation would want to do only efficient $filter (LogEntryCollections), and a case where a handler would want to do only efficient $select (Sensor), and those are at opposite ends of the list you made.\n\n\nI really suspect that just returning the query structure, or a reference to the query structure (even if it\u0027s a copy) is the best thing here.  It makes it a ton more clear what the API requires (ie, you check the Query structure for things that need done) rather than it just being implicit.",
      "parentUuid": "0ed0c5e3_352413d0",
      "range": {
        "startLine": 3019,
        "startChar": 16,
        "endLine": 3019,
        "endChar": 25
      },
      "revId": "63692bea57f5f69447f4b87537fc88aae08458af",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
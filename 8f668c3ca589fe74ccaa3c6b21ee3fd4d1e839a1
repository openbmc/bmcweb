{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c7339aa3_cfe72342",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 54,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:32:55Z",
      "side": 1,
      "message": "please spell serializer properly.",
      "range": {
        "startLine": 54,
        "startChar": 22,
        "endLine": 54,
        "endChar": 32
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98fc9b45_b271b214",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 59,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:32:55Z",
      "side": 1,
      "message": "just call this \"serializer\"",
      "range": {
        "startLine": 59,
        "startChar": 10,
        "endLine": 59,
        "endChar": 28
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13dbcbe7_298f2780",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 554,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:32:55Z",
      "side": 1,
      "message": "There\u0027s only 4 lines of code in this method now.  Please just make it two methods, with two different types.",
      "range": {
        "startLine": 554,
        "startChar": 21,
        "endLine": 554,
        "endChar": 25
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8cd0e76_9cd8ba62",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 570,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:32:55Z",
      "side": 1,
      "message": "Please simplify to\n\nif (this.genericResponse.holds_alternative\u003cfile_body\u003e()){\n    serializer.emplace(Response::file_body_response_type());\n} else (.....){\n   serializer.emplace(Response::file_body_response_type());\n}\n\nThere\u0027s no need to invent a template just to use std::visit here.",
      "range": {
        "startLine": 569,
        "startChar": 0,
        "endLine": 570,
        "endChar": 52
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4fb4815_007ff62a",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 570,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "Using polymorphic despatch instead of if-else chain will make the code scalable for future types. If we wanted to add a custom body type that reads from a custom source, say a domain socket, then we just needed to add some new overloads to support it. Need not touch any common code. What you think?",
      "parentUuid": "b8cd0e76_9cd8ba62",
      "range": {
        "startLine": 569,
        "startChar": 0,
        "endLine": 570,
        "endChar": 52
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f7fcf3b_e81d7bbb",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 575,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:32:55Z",
      "side": 1,
      "message": "*serializer please for consistency.",
      "range": {
        "startLine": 575,
        "startChar": 12,
        "endLine": 575,
        "endChar": 22
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59b4d660_396f6af4",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 190,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:37:25Z",
      "side": 1,
      "message": "Please don\u0027t call this \"alternative\".  Probably make it not a template, and call the method:\n\nmodifyTypeToFile()",
      "range": {
        "startLine": 190,
        "startChar": 9,
        "endLine": 190,
        "endChar": 26
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "321b522e_2962e64c",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 190,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "It is better to keep this as a generic function for all types. Otherwise we will be duplicating the same code for each type. Templates are useful for wrting such reusable algorithms. What do you think?",
      "parentUuid": "59b4d660_396f6af4",
      "range": {
        "startLine": 190,
        "startChar": 9,
        "endLine": 190,
        "endChar": 26
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c8fa4ef_f2c22427",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 190,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-06T17:23:26Z",
      "side": 1,
      "message": "\u003e It is better to keep this as a generic function for all types. \n\nI don\u0027t agree.\n\n\u003e Otherwise we will be duplicating the same code for each type.\n\nThis is intentional, because the code will get duplicated at compile time.  It\u0027s intended to be a hint to the writer that things might need to be optimized into functions.",
      "parentUuid": "321b522e_2962e64c",
      "range": {
        "startLine": 190,
        "startChar": 9,
        "endLine": 190,
        "endChar": 26
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71725e1b_9e3bd0a7",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 194,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:37:25Z",
      "side": 1,
      "message": "Please just use the type of base().  There\u0027s no need to keep an entire body on stack.",
      "range": {
        "startLine": 194,
        "startChar": 12,
        "endLine": 194,
        "endChar": 23
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2976cffc_7b01ed53",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 194,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "We should create a new response anyway if the current body is not the desired one. We are using \"move\" to avoid any other temporary response object creation. I renamed the parameter names, as it was a bit confusing. What we really creating is a new response that can hold the body.",
      "parentUuid": "71725e1b_9e3bd0a7",
      "range": {
        "startLine": 194,
        "startChar": 12,
        "endLine": 194,
        "endChar": 23
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fac8e81_80d365f4",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 194,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-06T17:23:26Z",
      "side": 1,
      "message": "\u003e We should create a new response anyway if the current body is not the desired one. We are using \"move\" to avoid any other temporary response object creation.\n\nThis doesn\u0027t have any bearing on what I said.  I asked you to only make a copy of the things being copied.\n\n\u003e I renamed the parameter names, as it was a bit confusing. What we really creating is a new response that can hold the body.\n\nUnderstood, I would still like to see base() used.",
      "parentUuid": "2976cffc_7b01ed53",
      "range": {
        "startLine": 194,
        "startChar": 12,
        "endLine": 194,
        "endChar": 23
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b26679b_52ce1c4f",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 212,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:37:25Z",
      "side": 1,
      "message": "I suspect you want ::scan here.",
      "range": {
        "startLine": 212,
        "startChar": 57,
        "endLine": 212,
        "endChar": 61
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16b05b20_f68d0fe9",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 212,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5b26679b_52ce1c4f",
      "range": {
        "startLine": 212,
        "startChar": 57,
        "endLine": 212,
        "endChar": 61
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c70d7276_849a4ea8",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 217,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:37:25Z",
      "side": 1,
      "message": "Another place where we need to use emplace.",
      "range": {
        "startLine": 217,
        "startChar": 0,
        "endLine": 217,
        "endChar": 53
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f8e6f25_edc5ba84",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 248,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:44:25Z",
      "side": 1,
      "message": "for file_body types, I think we can just use the existing prepare_payload.  I don\u0027t think it throws?  I suspect a lot of this error handling isn\u0027t correct for file_body type.",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 248,
        "endChar": 43
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a235432_bde64cb6",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 248,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "I was wondering why we decided to reimplement prepare_payload? is it because it\u0027s a throwing function? In that case wrap it around a try-catch would have solved the problem?. I believe the beast owner knows better how prepare_payload work for different response types.",
      "parentUuid": "0f8e6f25_edc5ba84",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 248,
        "endChar": 43
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd110a53_d5683eab",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 248,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-06T17:23:26Z",
      "side": 1,
      "message": "\u003e I was wondering why we decided to reimplement prepare_payload?\n\nQuestions like this are better answered in the appropriate forums, either the mailing list, or discord.\n\n\u003e is it because it\u0027s a throwing function? \n\nYep.\n\n\u003e In that case wrap it around a try-catch would have solved the problem?.\n\nIt would\u0027ve been incompatible with https://gerrit.openbmc.org/c/openbmc/bmcweb/+/46841\n\n\u003e I believe the beast owner knows better how prepare_payload work for different response types.",
      "parentUuid": "9a235432_bde64cb6",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 248,
        "endChar": 43
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83e14b9c_bb92dd48",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 35
      },
      "lineNbr": 16,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:44:25Z",
      "side": 1,
      "message": "using namespace is disallowed.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7efaaff4_4856c296",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 35
      },
      "lineNbr": 16,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "is this applicable to test code?",
      "parentUuid": "83e14b9c_bb92dd48",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f52737a_aa9c5860",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 35
      },
      "lineNbr": 16,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-06T17:13:46Z",
      "side": 1,
      "message": "yes.",
      "parentUuid": "7efaaff4_4856c296",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "402cd318_35caac05",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 35
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:44:25Z",
      "side": 1,
      "message": "please don\u0027t invent your own split function.  WE already have access to several (both a bmcweb one and boost)",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 28,
        "endChar": 9
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de1feb13_dd959721",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 35
      },
      "lineNbr": 28,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "402cd318_35caac05",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 28,
        "endChar": 9
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c78d0d58_35ad8489",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-06T17:13:46Z",
      "side": 1,
      "message": "Please don\u0027t invent a new Http client type.  We have an http client defined in http_client.hpp.  Please use it.",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c7339aa3_cfe72342",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 54,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:32:55Z",
      "side": 1,
      "message": "please spell serializer properly.",
      "range": {
        "startLine": 54,
        "startChar": 22,
        "endLine": 54,
        "endChar": 32
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8284c34a_2da97362",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 54,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7339aa3_cfe72342",
      "range": {
        "startLine": 54,
        "startChar": 22,
        "endLine": 54,
        "endChar": 32
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98fc9b45_b271b214",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 59,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:32:55Z",
      "side": 1,
      "message": "just call this \"serializer\"",
      "range": {
        "startLine": 59,
        "startChar": 10,
        "endLine": 59,
        "endChar": 28
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4009cdca_0e521f02",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 59,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98fc9b45_b271b214",
      "range": {
        "startLine": 59,
        "startChar": 10,
        "endLine": 59,
        "endChar": 28
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13dbcbe7_298f2780",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 554,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:32:55Z",
      "side": 1,
      "message": "There\u0027s only 4 lines of code in this method now.  Please just make it two methods, with two different types.",
      "range": {
        "startLine": 554,
        "startChar": 21,
        "endLine": 554,
        "endChar": 25
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d19e9385_62e3e811",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 554,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "13dbcbe7_298f2780",
      "range": {
        "startLine": 554,
        "startChar": 21,
        "endLine": 554,
        "endChar": 25
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8cd0e76_9cd8ba62",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 570,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:32:55Z",
      "side": 1,
      "message": "Please simplify to\n\nif (this.genericResponse.holds_alternative\u003cfile_body\u003e()){\n    serializer.emplace(Response::file_body_response_type());\n} else (.....){\n   serializer.emplace(Response::file_body_response_type());\n}\n\nThere\u0027s no need to invent a template just to use std::visit here.",
      "range": {
        "startLine": 569,
        "startChar": 0,
        "endLine": 570,
        "endChar": 52
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4fb4815_007ff62a",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 570,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "Using polymorphic despatch instead of if-else chain will make the code scalable for future types. If we wanted to add a custom body type that reads from a custom source, say a domain socket, then we just needed to add some new overloads to support it. Need not touch any common code. What you think?",
      "parentUuid": "b8cd0e76_9cd8ba62",
      "range": {
        "startLine": 569,
        "startChar": 0,
        "endLine": 570,
        "endChar": 52
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f5a51fe_520c160c",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 570,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-06T17:54:05Z",
      "side": 1,
      "message": "\u003e will make the code scalable for future types.  If we....\n\nLets evaluate that when we build those future types.  For the moment, there are only two types, and we strive to keep code as simple as possible.",
      "parentUuid": "e4fb4815_007ff62a",
      "range": {
        "startLine": 569,
        "startChar": 0,
        "endLine": 570,
        "endChar": 52
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cc92b41_e9a89f6b",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 570,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f5a51fe_520c160c",
      "range": {
        "startLine": 569,
        "startChar": 0,
        "endLine": 570,
        "endChar": 52
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f7fcf3b_e81d7bbb",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 575,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:32:55Z",
      "side": 1,
      "message": "*serializer please for consistency.",
      "range": {
        "startLine": 575,
        "startChar": 12,
        "endLine": 575,
        "endChar": 22
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bf3eb79_9f9e6427",
        "filename": "http/http_connection.hpp",
        "patchSetId": 35
      },
      "lineNbr": 575,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f7fcf3b_e81d7bbb",
      "range": {
        "startLine": 575,
        "startChar": 12,
        "endLine": 575,
        "endChar": 22
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59b4d660_396f6af4",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 190,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:37:25Z",
      "side": 1,
      "message": "Please don\u0027t call this \"alternative\".  Probably make it not a template, and call the method:\n\nmodifyTypeToFile()",
      "range": {
        "startLine": 190,
        "startChar": 9,
        "endLine": 190,
        "endChar": 26
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "321b522e_2962e64c",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 190,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "It is better to keep this as a generic function for all types. Otherwise we will be duplicating the same code for each type. Templates are useful for wrting such reusable algorithms. What do you think?",
      "parentUuid": "59b4d660_396f6af4",
      "range": {
        "startLine": 190,
        "startChar": 9,
        "endLine": 190,
        "endChar": 26
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c8fa4ef_f2c22427",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 190,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-06T17:23:26Z",
      "side": 1,
      "message": "\u003e It is better to keep this as a generic function for all types. \n\nI don\u0027t agree.\n\n\u003e Otherwise we will be duplicating the same code for each type.\n\nThis is intentional, because the code will get duplicated at compile time.  It\u0027s intended to be a hint to the writer that things might need to be optimized into functions.",
      "parentUuid": "321b522e_2962e64c",
      "range": {
        "startLine": 190,
        "startChar": 9,
        "endLine": 190,
        "endChar": 26
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42a9484d_611ed83c",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 190,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-07T16:45:24Z",
      "side": 1,
      "message": "I don\u0027t understand. Are you saying that prefer handwritten duplicate code over generic functions? Generic functions are invented to avoid such duplicated hand-written code right?",
      "parentUuid": "0c8fa4ef_f2c22427",
      "range": {
        "startLine": 190,
        "startChar": 9,
        "endLine": 190,
        "endChar": 26
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea7073e8_d74e3557",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 190,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-07T17:19:39Z",
      "side": 1,
      "message": "\u003e Are you saying that prefer handwritten duplicate code over generic functions?\n\nYes.\n\n\u003e Generic functions are invented to avoid such duplicated hand-written code right?\n\nThis project has never optimized for amount of code.  It optimizes for simplicity.  Generics are quite useful if there are N implementations, where N is large, but with only 2 implementations, a branch is much simpler.\n\nAlso, FWIW, now that we have if constexpr, most implementations of generics have been moving to a branch-like generic for simplicity.",
      "parentUuid": "42a9484d_611ed83c",
      "range": {
        "startLine": 190,
        "startChar": 9,
        "endLine": 190,
        "endChar": 26
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5be213dc_a3073382",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 190,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea7073e8_d74e3557",
      "range": {
        "startLine": 190,
        "startChar": 9,
        "endLine": 190,
        "endChar": 26
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71725e1b_9e3bd0a7",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 194,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:37:25Z",
      "side": 1,
      "message": "Please just use the type of base().  There\u0027s no need to keep an entire body on stack.",
      "range": {
        "startLine": 194,
        "startChar": 12,
        "endLine": 194,
        "endChar": 23
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2976cffc_7b01ed53",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 194,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "We should create a new response anyway if the current body is not the desired one. We are using \"move\" to avoid any other temporary response object creation. I renamed the parameter names, as it was a bit confusing. What we really creating is a new response that can hold the body.",
      "parentUuid": "71725e1b_9e3bd0a7",
      "range": {
        "startLine": 194,
        "startChar": 12,
        "endLine": 194,
        "endChar": 23
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fac8e81_80d365f4",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 194,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-06T17:23:26Z",
      "side": 1,
      "message": "\u003e We should create a new response anyway if the current body is not the desired one. We are using \"move\" to avoid any other temporary response object creation.\n\nThis doesn\u0027t have any bearing on what I said.  I asked you to only make a copy of the things being copied.\n\n\u003e I renamed the parameter names, as it was a bit confusing. What we really creating is a new response that can hold the body.\n\nUnderstood, I would still like to see base() used.",
      "parentUuid": "2976cffc_7b01ed53",
      "range": {
        "startLine": 194,
        "startChar": 12,
        "endLine": 194,
        "endChar": 23
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7613f0fa_cd09e21d",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 194,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-07T16:45:24Z",
      "side": 1,
      "message": "I don\u0027t understand. The new response object creation and the invocation of base assignment operation will happen only if the current response type is not suitable for new body type. We are not doing any extra work here. \nIt seems you wanted to separate body from header. Is it possible to create such a response type in beast? can you point me to an example of it?",
      "parentUuid": "5fac8e81_80d365f4",
      "range": {
        "startLine": 194,
        "startChar": 12,
        "endLine": 194,
        "endChar": 23
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aba324b8_439d7ade",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 194,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-07T17:19:39Z",
      "side": 1,
      "message": "\u003e I don\u0027t understand. The new response object creation and the invocation of base assignment operation will happen only if the current response type is not suitable for new body type. We are not doing any extra work here. \n\nYou are copying a larger object than necessary. Whether or not that\u0027s \"work\" is up for debate, but I\u0027d still like to only copy the things we intend to use, which is base()\n\n\u003e It seems you wanted to separate body from header. Is it possible to create such a response type in beast?\n\nyes, using the base() method on the Response object.\n\n\u003e can you point me to an example of it?\n\nI\u0027ve already pointed you to the commit multiple times, but I\u0027m happy to point you to it again.\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/35992",
      "parentUuid": "7613f0fa_cd09e21d",
      "range": {
        "startLine": 194,
        "startChar": 12,
        "endLine": 194,
        "endChar": 23
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a3d98cb_25a2a83c",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 194,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aba324b8_439d7ade",
      "range": {
        "startLine": 194,
        "startChar": 12,
        "endLine": 194,
        "endChar": 23
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b26679b_52ce1c4f",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 212,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:37:25Z",
      "side": 1,
      "message": "I suspect you want ::scan here.",
      "range": {
        "startLine": 212,
        "startChar": 57,
        "endLine": 212,
        "endChar": 61
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16b05b20_f68d0fe9",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 212,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5b26679b_52ce1c4f",
      "range": {
        "startLine": 212,
        "startChar": 57,
        "endLine": 212,
        "endChar": 61
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c70d7276_849a4ea8",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 217,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:37:25Z",
      "side": 1,
      "message": "Another place where we need to use emplace.",
      "range": {
        "startLine": 217,
        "startChar": 0,
        "endLine": 217,
        "endChar": 53
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6027623e_3cf1f885",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 217,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T14:53:30Z",
      "side": 1,
      "message": "When I tested the emplace did not work properly. I was not forwarding the args properly. Nedd to investigate further.",
      "parentUuid": "c70d7276_849a4ea8",
      "range": {
        "startLine": 217,
        "startChar": 0,
        "endLine": 217,
        "endChar": 53
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51f7a385_b9944196",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 217,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6027623e_3cf1f885",
      "range": {
        "startLine": 217,
        "startChar": 0,
        "endLine": 217,
        "endChar": 53
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f8e6f25_edc5ba84",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 248,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:44:25Z",
      "side": 1,
      "message": "for file_body types, I think we can just use the existing prepare_payload.  I don\u0027t think it throws?  I suspect a lot of this error handling isn\u0027t correct for file_body type.",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 248,
        "endChar": 43
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a235432_bde64cb6",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 248,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "I was wondering why we decided to reimplement prepare_payload? is it because it\u0027s a throwing function? In that case wrap it around a try-catch would have solved the problem?. I believe the beast owner knows better how prepare_payload work for different response types.",
      "parentUuid": "0f8e6f25_edc5ba84",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 248,
        "endChar": 43
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd110a53_d5683eab",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 248,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-06T17:23:26Z",
      "side": 1,
      "message": "\u003e I was wondering why we decided to reimplement prepare_payload?\n\nQuestions like this are better answered in the appropriate forums, either the mailing list, or discord.\n\n\u003e is it because it\u0027s a throwing function? \n\nYep.\n\n\u003e In that case wrap it around a try-catch would have solved the problem?.\n\nIt would\u0027ve been incompatible with https://gerrit.openbmc.org/c/openbmc/bmcweb/+/46841\n\n\u003e I believe the beast owner knows better how prepare_payload work for different response types.",
      "parentUuid": "9a235432_bde64cb6",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 248,
        "endChar": 43
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e570fd57_9a1f3b7e",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 248,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-06T17:35:03Z",
      "side": 1,
      "message": "\u003e I believe the beast owner knows better how prepare_payload work for different response types.\n\nFeel free to go to boost and add no-throw variants of prepare_payload.  Once those exist, I\u0027m happy to use them.",
      "parentUuid": "bd110a53_d5683eab",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 248,
        "endChar": 43
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fb2364d_42edc376",
        "filename": "http/http_response.hpp",
        "patchSetId": 35
      },
      "lineNbr": 248,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T14:53:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e570fd57_9a1f3b7e",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 248,
        "endChar": 43
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83e14b9c_bb92dd48",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 35
      },
      "lineNbr": 16,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:44:25Z",
      "side": 1,
      "message": "using namespace is disallowed.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7efaaff4_4856c296",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 35
      },
      "lineNbr": 16,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "is this applicable to test code?",
      "parentUuid": "83e14b9c_bb92dd48",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f52737a_aa9c5860",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 35
      },
      "lineNbr": 16,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-06T17:13:46Z",
      "side": 1,
      "message": "yes.",
      "parentUuid": "7efaaff4_4856c296",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8ed909f_cda5fb6e",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 35
      },
      "lineNbr": 16,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9f52737a_aa9c5860",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "402cd318_35caac05",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 35
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-31T18:44:25Z",
      "side": 1,
      "message": "please don\u0027t invent your own split function.  WE already have access to several (both a bmcweb one and boost)",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 28,
        "endChar": 9
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de1feb13_dd959721",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 35
      },
      "lineNbr": 28,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-02T04:31:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "402cd318_35caac05",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 28,
        "endChar": 9
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c78d0d58_35ad8489",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-06T17:13:46Z",
      "side": 1,
      "message": "Please don\u0027t invent a new Http client type.  We have an http client defined in http_client.hpp.  Please use it.",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56d9cec8_b3690a8b",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-07T16:45:24Z",
      "side": 1,
      "message": "Does it work for simple synchronous connections suitable for automated tests?",
      "parentUuid": "c78d0d58_35ad8489",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3407e09b_f9612bf8",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-07T17:19:39Z",
      "side": 1,
      "message": "\u003e Does it work for simple synchronous connections suitable for automated tests?\n\nIt\u0027s a general http client.  If it doesn\u0027t work for your use case, modify it to make it work for your use case.  We cannot have N different implementations of an HTTP client in the codebase because everyone decided they didn\u0027t like what was there.",
      "parentUuid": "56d9cec8_b3690a8b",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad1c4cc2_28cfe163",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-17T23:38:25Z",
      "side": 1,
      "message": "it will be a non-trivial change to modify the http_client.hpp. I prefer making such changes in a separate commit. If you want I can remove the test case instead",
      "parentUuid": "3407e09b_f9612bf8",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93386000_b1454b9b",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-22T19:16:37Z",
      "side": 1,
      "message": "\u003e it will be a non-trivial change to modify the http_client.hpp.\n\nMore details needed here.  What non-trivial changes need made?\n\n\u003e I prefer making such changes in a separate commit. If you want I can remove the test case instead",
      "parentUuid": "ad1c4cc2_28cfe163",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a0b1613_42574b56",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-10T10:48:48Z",
      "side": 1,
      "message": "http_client is already doing several things, SSL/NO-SSL,\nconnection pool and request queue handling etc. What we need\nin this test is a simple blocking http client.  We cannot add \nasynchronous client in gtest as it needs blocking ioc run method to complete\nthe http request. Adding synchronous handling on top of current \nhttp_client just for the sake of this testcase looks not correct.",
      "parentUuid": "93386000_b1454b9b",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3bfb75c_8a1ab025",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-10T18:46:51Z",
      "side": 1,
      "message": "\u003e http_client is already doing several things, SSL/NO-SSL,\n\u003e connection pool and request queue handling etc. What we need\n\u003e in this test is a simple blocking http client. \n\nWhy do we need a blocking http client?\n\n\u003e We cannot add \n\u003e asynchronous client in gtest as it needs blocking ioc run method to complete\n\u003e the http request.\n\nThere are examples of doing async testing in gtest.  Any reason we can\u0027t use those?\n\n\u003e Adding synchronous handling on top of current \n\u003e http_client just for the sake of this testcase looks not correct.\n\nwhat does \"looks not correct\" mean?",
      "parentUuid": "6a0b1613_42574b56",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f584405_31cffe0f",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-11T12:46:17Z",
      "side": 1,
      "message": "There are examples of doing async testing in gtest. Any reason we can\u0027t use those?\n\ncan you point me to a test where boost asio has been used in gtest for asyncIo?I tried it but sometimes ioc.run() loop exit before the full http request handling. One solution will be to use io_service::work object to make the loop run forever. But that will make gtest block forever. I felt blocking htpp-client is better than this. \n\nwhat does \"looks not correct\" mean?\nThis patch set is planned for file-body changes. it has nothing to do http_client. So making production code changes to make a test case work will dilute focus and increase the scope of current patch set.\n\nAfter going through the htpp_client.hpp, I have another proposal to implement the same in a flexible manner. But I don\u0027t want to make it in this patchset.",
      "parentUuid": "a3bfb75c_8a1ab025",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54ccc614_624b7a0c",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-16T18:00:35Z",
      "side": 1,
      "message": "\u003e There are examples of doing async testing in gtest. Any reason we can\u0027t use those?\n\u003e \n\u003e can you point me to a test where boost asio has been used in gtest for asyncIo?\n\nHere\u0027s an example of mine from within bmcweb.  https://gerrit.openbmc.org/c/openbmc/bmcweb/+/66474\n\n\n\u003e I tried it but sometimes ioc.run() loop exit before the full http request handling.\n\nHave you asked anyone about that?  I\u0027d much rather just fix a bug in code than rewrite an entire module.\n\n\u003e One solution will be to use io_service::work object to make the loop run forever. But that will make gtest block forever. I felt blocking htpp-client is better than this. \n\nYep, using work() isn\u0027t the right way.  Making sure that the io_service always has work to do (in the form of attached sockets) is the way.\n\n\u003e \n\u003e what does \"looks not correct\" mean?\n\u003e This patch set is planned for file-body changes. it has nothing to do http_client. So making production code changes to make a test case work will dilute focus and increase the scope of current patch set.\n\nI disagree with the above.  The goal is to make the codebase clean and consistent, not to make an individual patch undiliuted.  If you\u0027re worried about scope, feel free to break it into multiple patches (which is generally prefered).\n\n\u003e \n\u003e After going through the htpp_client.hpp, I have another proposal to implement the same in a flexible manner. But I don\u0027t want to make it in this patchset.\n\nGreat, please put it in a patchset ahead of this one.  There\u0027s nothing requiring that you put everything in one gerrit review.",
      "parentUuid": "9f584405_31cffe0f",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "923eef44_57b99b0f",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-19T05:00:15Z",
      "side": 1,
      "message": "Here\u0027s an example of mine from within bmcweb.\n\nIt seems I should take this patch-set before I am able to use test-stream. It has some new changes in the main code for testability.",
      "parentUuid": "54ccc614_624b7a0c",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14e1a811_fbf77aac",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-19T15:41:56Z",
      "side": 1,
      "message": "Feel free to stack your patch on top.  My unit test patch is just waiting on some sanity checking.",
      "parentUuid": "54ccc614_624b7a0c",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be5110e5_4ad296c3",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-20T04:23:32Z",
      "side": 1,
      "message": "Has merge conflicts been resolved with filebody changes?",
      "parentUuid": "14e1a811_fbf77aac",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6020029f_8ab9609a",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-20T16:42:15Z",
      "side": 1,
      "message": "Yep.  They\u0027ve been resolved for a while now.",
      "parentUuid": "be5110e5_4ad296c3",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e996dc24_6dd36c39",
        "filename": "test/http/simple_client.hpp",
        "patchSetId": 35
      },
      "lineNbr": 21,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-11-02T07:11:00Z",
      "side": 1,
      "message": "removed the connection test case for the time being. Will add it back once 66474 is merged",
      "parentUuid": "6020029f_8ab9609a",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 19
      },
      "revId": "8f668c3ca589fe74ccaa3c6b21ee3fd4d1e839a1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
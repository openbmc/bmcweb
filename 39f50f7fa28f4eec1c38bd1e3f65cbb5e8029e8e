{
  "comments": [
    {
      "key": {
        "uuid": "d95aff40_1d29f2cb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 16,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Please list the dependent patches this change requires.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffab9393_f237e6d4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "you forgot to mention that you wrote these functions you tested.  You might also want to mention why you wrote \"utils\" classes that are used in one place, without updating the rest of bmcweb to the new paradigm.\n\nI suspect the utils classes probably need to be reviews on their own, as they\u0027re changing some major semantics of how bmcweb treats json and dbus today.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d307e7ac_8084693a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 21,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "We wrote utils to remove duplicated code and as you know duplicated code is almost always a bad practice.\n\nWe cannot change it everywhere with this commit, if we want it everywhere it should be after this code is merged otherwise this review would be a lot bigger, with lots of unrelated changes. Progress needs time.",
      "parentUuid": "ffab9393_f237e6d4",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d052f76_4ce35d0e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "Understood, but having 2 different methods of executing the same action, with very different code is far worse than some duplicated, relatively easy to read code.  In most cases, you\u0027ve replaced very easy to understand semantics with utility functions that obfuscate intent, and worse, cause the codebase to have 2 different \"right\" ways to do things.\n\nAt no point did I ask you to change it everywhere in this commit.  I asked you to separate your concerns.  There is nothing in TelemetryService that REQUIRES the constructs you\u0027ve added, and the types of conversions you\u0027re doing have been done in other redfish services many many times.  Also, in a lot of those cases, these utils functions have been discussed and discounted, as they obfuscate and make the code larger, and slower.  I\u0027m suggesting you can either.\n\n1. Push a commit to add the utils functions, and transfer enough of the bmcweb control flow over to those utils that they make the implementation cleaner, and host all the discussions that entails. Then, once that\u0027s merged use another patchset to check in the Telemetry Service implementation.\n2. (preferred) Build telemetry service with the existing abstractions and patterns available in the codebase today.  Then, when you feel comfortable, build the utils functions and transfer them over.\n\nSaid another way, there is nothing technically binding these two together, and they need to be separated in concept.",
      "parentUuid": "d307e7ac_8084693a",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc9ab565_9febe162",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Need more tests here.  You\u0027ve added several new handlers that I\u0027m hoping you validated ahead of time.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "113c4673_f0e9fc31",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 23,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "Yes it is validated, we will add cases in next patchset.",
      "parentUuid": "fc9ab565_9febe162",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ce3d89d_51ce566f",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 26
      },
      "lineNbr": 112,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "You need to take some effort to constrain these two, to avoid very confusing error messages when used.\nArray needs to meet the forward iterable class, and the value_type needs to be a string\nCallback needs to be callable.\n\nSimply handing them blindly to async_method_call is dangerous, and leads to code that compiles fine, but doesn\u0027t work.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8e5b9ed_64a9f25a",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 26
      },
      "lineNbr": 112,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "We will add proper Array verification. About the callback it is already validated in async_method_call.",
      "parentUuid": "8ce3d89d_51ce566f",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "222064d0_b77d5a9c",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 26
      },
      "lineNbr": 112,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8e5b9ed_64a9f25a",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63de8d8c_fb2d8549",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 26
      },
      "lineNbr": 113,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "If this is something you\u0027d like to see done, please update all the uses in bmcweb to use this helper.  I personally don\u0027t like the way it obfuscates what\u0027s going on, and I don\u0027t find it a useful abstraction, but push it to the rest of the uses, and we\u0027ll see if we can get some consensus.\n\npath should be accepted by std::string_view.\n\nNormal semantics would put the callback at the end, to allow lambdas to be used in a clean way.\n\nArray should also be const",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4a1e20c_7554bbeb",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 26
      },
      "lineNbr": 113,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "std::string_view - sdbusplus is using const std::string\u0026 which would force us to use copy. Thats why we are using const std::string\u0026 here.\n\nArray as const - OK\n\nWe discussed that we want to keep this helper function as much as we can\nsimilar to async method call so the users can easily replace one with another. For that we need callback to be first parameter.",
      "parentUuid": "63de8d8c_fb2d8549",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb22e3af_d09e2659",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 26
      },
      "lineNbr": 113,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "I thought sdbusplus had added std::string_view overloads.  Apparently that patch never made it in.  That\u0027s fine as is.\n\nFair, the ordering isn\u0027t crucial here.",
      "parentUuid": "c4a1e20c_7554bbeb",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4e3df39_a6dde4c6",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 26
      },
      "lineNbr": 113,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb22e3af_d09e2659",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a2fd48e_eed28535",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 26
      },
      "lineNbr": 124,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "again, please update std::String to std::string_view.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3b6ca39_5ae252b0",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 26
      },
      "lineNbr": 124,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "As above",
      "parentUuid": "5a2fd48e_eed28535",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5959c444_19cd4c59",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 26
      },
      "lineNbr": 124,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3b6ca39_5ae252b0",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d424a09_9a1c53a0",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 443,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Please put this in a different file.  \"is std function\" has nothing to do with json.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce01ed7f_2e45ad9b",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 443,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "3d424a09_9a1c53a0",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21f4ba47_f5d0e985",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 443,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce01ed7f_2e45ad9b",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b07f5b41_28dec25e",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 463,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "These kinds of abstractions are exactly what bmcweb was built to try to avoid.\n\n1. They create a lot of ancillary data structures\n2. They\u0027re difficult to read.\n3. They are slower at runtime, and consume more memory\n4. They\u0027re slower to compile.\n\nIn almost all cases where this is used, you\u0027re constructing a map, then doing a bunch of map lookups, rather than simply looping over a vector, which is much more efficient at both compile time and runtime, as well as using less memory.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eafc7f95_1675c7fb",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 463,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "We use boost::flat_map is actually a vector of pairs. Also we are getting this flat_map from sdbusplus and because of that we need to handle it this way. We are passing this flat_map as reference so there is no copy.\n\nWe avoid code duplication with that, which also has a lot of advantages.\nIt saves us a lot of development effort. We can optimize it once we have a proof that it slows down the system.",
      "parentUuid": "b07f5b41_28dec25e",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf116eb1_1d6d7391",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 463,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "\"We use boost::flat_map is actually a vector of pairs.\"\nA SORTED vector of pairs.  That sorting takes CPU cycles, that you then don\u0027t use, because you iterate the entire structure.\nSaid another way:\nInserting into a vector, then iterating said array is O(N)\nInserting into a map, then doing a lookup on said map by each key is O(NlogN)\n\n\"Also we are getting this flat_map from sdbusplus and because of that we need to handle it this way\"\nI\u0027m not sure where you got this impression.  I wrote the sdbusplus patch to support any iterable container, including flat_map.  It can use any other type, there is nothing about sdbusplus that requires a flat_map.\n\n\"We are passing this flat_map as reference so there is no copy.\"\nI never said that you copied it.\n\n\"We avoid code duplication with that, which also has a lot of advantages.\"\nDisagree.  The point of deduplicating code is to have less code.  If you wrote out your parsers, I\u0027m betting you would have significantly less code than you have in this patchset.\nI think you\u0027re confusing duplicated code with duplicated patterns.  You can have the later, and be no worse off.  In fact, following consistent patterns allows developers to develop a mindset around these things.  Randomly changing patterns, destroys a lot of that.  as-is, you\u0027ve made the code readability very very difficult compared to the relatively simpler loop and if/else if statement approach that the other handlers take.\n\n\"It saves us a lot of development effort. We can optimize it once we have a proof that it slows down the system.\"\nFrankly, it only saves development effort for the person writing the code, and even then it only saves a few keystrokes.  It causes significant development effort for those that have to maintain these constructs in the long run, and even more for the people that have to debug or use these constructs in the future.  Feel free to write the test to prove the performance, but I promise you, more code is being executed using this pattern, more memory is being copied, consumed and moved, and more code is being generated.  It is also much more difficult to read.",
      "parentUuid": "eafc7f95_1675c7fb",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c8c53b8_6c6f7b5b",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 463,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf116eb1_1d6d7391",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "740b997d_dc903dc0",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 472,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "a static_assert would be better here.  With that said, you need to do a better job delineating types of S here more than just \"isn\u0027t a std::function\".  Is a reference to a function ok?  Does it have to be callable?",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64c7da05_abe6977d",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 472,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "static assert doesn’t work for std::function::operator bool()\nwe don’t check if it’s callable, we call convert in line 482 if it is not callable code won’t compile.",
      "parentUuid": "740b997d_dc903dc0",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1621b25f_be674ac7",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 472,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "That wasn\u0027t what I was asking for.  S is required to be callable, that\u0027s what you should be testing for, not whether or not it\u0027s a std::function",
      "parentUuid": "64c7da05_abe6977d",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b2e8d5c_e4445239",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 472,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1621b25f_be674ac7",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe2f4ed6_2e3598c9",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 515,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "This seems like a good utilities function to add, but I\u0027m worried about duplicating logic.  Can you find the other collections that might benefit from this, and move them over to this one?",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e670615b_991e9a88",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 515,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "We will be still working on bmcweb. Once we find duplicated logic we will\nrefactor code to remove that duplication. We are doing it step by step.",
      "parentUuid": "fe2f4ed6_2e3598c9",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cd091ff_f3784052",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 515,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "See main comment.  Feel free to either do it the existing way, or add a utils function.  Don\u0027t do both in the same patchset.",
      "parentUuid": "e670615b_991e9a88",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a96974cd_1b21cc43",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 515,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4cd091ff_f3784052",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2600d2d_8c34bcfb",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 520,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "considering you put this in a generit \"utils\" class, this probably shouldn\u0027t be called \"reports\"",
      "range": {
        "startLine": 520,
        "startChar": 68,
        "endLine": 520,
        "endChar": 75
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9679f023_9e50d24c",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 520,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "e2600d2d_8c34bcfb",
      "range": {
        "startLine": 520,
        "startChar": 68,
        "endLine": 520,
        "endChar": 75
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06c151cf_0b88d051",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 520,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9679f023_9e50d24c",
      "range": {
        "startLine": 520,
        "startChar": 68,
        "endLine": 520,
        "endChar": 75
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5de6926d_81587dab",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 521,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "should be string_view.",
      "range": {
        "startLine": 521,
        "startChar": 48,
        "endLine": 521,
        "endChar": 52
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a95121ab_15a45462",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 521,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "5de6926d_81587dab",
      "range": {
        "startLine": 521,
        "startChar": 48,
        "endLine": 521,
        "endChar": 52
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd0c7319_34626e99",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 521,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T13:30:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a95121ab_15a45462",
      "range": {
        "startLine": 521,
        "startChar": 48,
        "endLine": 521,
        "endChar": 52
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88e58a96_e466bdfa",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 534,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "missing range check.",
      "range": {
        "startLine": 534,
        "startChar": 73,
        "endLine": 534,
        "endChar": 74
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec8eb5eb_0a5fb9ac",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 534,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "88e58a96_e466bdfa",
      "range": {
        "startLine": 534,
        "startChar": 73,
        "endLine": 534,
        "endChar": 74
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80396015_ae1be7a6",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 534,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec8eb5eb_0a5fb9ac",
      "range": {
        "startLine": 534,
        "startChar": 73,
        "endLine": 534,
        "endChar": 74
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61b1a770_773df42b",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Please include these URLs in the structures that require them, instead of constexpr defining them in one place.  This makes the code easier to audit in the future, and means that fewer urls (and strings) will be generated at runtime.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1108a948_10a9e262",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 25,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "To be honest I don’t understand how it impacts urls and string during runtime.\n\nWe defined this consts to reduce code duplication which are used in few files (telemetry service is split into few small files).",
      "parentUuid": "61b1a770_773df42b",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "900a80a2_2dc595ad",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "if I call \nfoo(metricReportDefinitionUri + \"MyPostfix\")\nit has to generate a new string, copy in the first string from RODATA, then append the second string from RODATA, then take the string_view to that.\n\nif I instead call\nfoo(\"/redfish/v1/TelemetryService/MetricReportDefinitions/MyPostfix\") the only object generated is the string_view, and no memory is malloced.\n\nThe filesystem openbmc uses is fully capable of deduplicating common prefixes.  Again, if you think this is a pattern we should use, transition some of the old code to use this pattern, and put it through a review.",
      "parentUuid": "1108a948_10a9e262",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfd288d2_fb9d84b0",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 25,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T13:23:24Z",
      "side": 1,
      "message": "Yes, you are right with your example. We are aware of it. But using same value like \"/redfish/v1/TelemetryService/...\" in many places is less readable than a simple constexpr variable that is same everywhere. This is a main reason why we define it as constexpr.\nIf you are afraid of constexpr and keeping strings in pointers, we can change it to macros as in C and thanks to ## join them in compile time.\n#define METRIC_REPORT_URI \"/redfish/v1/TelemetryService/MetricReports/\"",
      "parentUuid": "900a80a2_2dc595ad",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ec9f9cf_d3b01b26",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-18T15:28:04Z",
      "side": 1,
      "message": "\" But using same value like \"/redfish/v1/TelemetryService/...\" in many places is less readable than a simple constexpr variable that is same everywhere. \"\n\nThis is not true, especially when doing endpoint url audits.  You might try to put yourself in the maintainers shoes for a second, and attempt doing an endpoint and permissions audit on your code (along with every other handler) to see how hard it is.\nWithout your code, it can be done largely with a single grep statement.  With your code, it has to be done by hand.",
      "parentUuid": "cfd288d2_fb9d84b0",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8aa723b8_81138655",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 25,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T13:30:50Z",
      "side": 1,
      "message": "Done. Now every Node class that is included into Telemetry contains string literal. Uris as variables are only used in node methods.",
      "parentUuid": "5ec9f9cf_d3b01b26",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b8c722e_932d6dcd",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "pass by string_view",
      "range": {
        "startLine": 35,
        "startChar": 32,
        "endLine": 35,
        "endChar": 47
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b93a08d7_e2fc9e82",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 35,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "0b8c722e_932d6dcd",
      "range": {
        "startLine": 35,
        "startChar": 32,
        "endLine": 35,
        "endChar": 47
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1da65eb0_67125ef2",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 35,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T13:30:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b93a08d7_e2fc9e82",
      "range": {
        "startLine": 35,
        "startChar": 32,
        "endLine": 35,
        "endChar": 47
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc6eac5c_a6ec73ee",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "I don\u0027t see any dbus escaping of uri in either the caller of this code, or here.  it will need to be done.\n\n(note) I don\u0027t see any dbus escaping at all in any function.  Please audit all the places where user facing strings are placed on dbus, and make sure errors are handled properly.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2811f100_6c0c8c7b",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 37,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "sdbusplus library ensures that string we pass there is handled properly. It is sdbusplus library responsibility to escape/validate this.",
      "parentUuid": "dc6eac5c_a6ec73ee",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb65751e_ec820605",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "Can you point to the code that does what you say?  In my experience, what you\u0027ve described is in no way true, and sdbusplus does no validation on the paths.  Bad paths simply leads to bmcweb being removed from dbus.  We\u0027ve seen this happen before.",
      "parentUuid": "2811f100_6c0c8c7b",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d1ce444_6917ad49",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 37,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Added getDbusReportPath() that check for escaped characters",
      "parentUuid": "bb65751e_ec820605",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82fafad5_f2b4a627",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "uri is captured by pointer here.  This could lead to lifetime issues.  fix.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "614dfacd_b8e726b3",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 40,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "82fafad5_f2b4a627",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "539dfdb6_7b4b0472",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 40,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T13:30:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "614dfacd_b8e726b3",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64dba449_ad2a78b2",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 44,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "If the report was not found, this needs to return 404, not an empty array.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbd98479_e856f79b",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 44,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "We need to return empty collection here. It is expected behavior by redfish.",
      "parentUuid": "64dba449_ad2a78b2",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0802cf1_20214a18",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 44,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bbd98479_e856f79b",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7719bf75_e9b2171d",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "This is only called in one place, it does not need to accept the callback by template parameter.  Simply call the callback directly.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14675a90_171e5eca",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 61,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "This change doesn\u0027t have any noticeable benefits. It will couple utils with specific implementation and introduce circular dependency.\n\nAlso it will prevent future reuse in another use case.",
      "parentUuid": "7719bf75_e9b2171d",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2385fa7e_2aad3ab1",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "Noticeable benefits that you seem to have overlooked:\n1. Normal functions compile faster than templates.\n2. Code is easier to read and debug, as all types are known in the scope, and not determined by a calling scope.\n\nIf you end up using this function again in the future, it\u0027s a relatively small code change to change it back to a callable.  For now, solve the problem you have.",
      "parentUuid": "14675a90_171e5eca",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e8f2178_762e9897",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 61,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T13:30:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2385fa7e_2aad3ab1",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d16a62_5eb002b8",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 63,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Please pass schemaType by string_view",
      "range": {
        "startLine": 63,
        "startChar": 45,
        "endLine": 63,
        "endChar": 67
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b156385_14678e45",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 63,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "63d16a62_5eb002b8",
      "range": {
        "startLine": 63,
        "startChar": 45,
        "endLine": 63,
        "endChar": 67
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c319326f_86cc60ad",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 63,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b156385_14678e45",
      "range": {
        "startLine": 63,
        "startChar": 45,
        "endLine": 63,
        "endChar": 67
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9692cc1_5da6d231",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "id is not escaped for dbus here.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c428a81_09cc6aff",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 67,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "Value of id is not used for dbus call. It\u0027s only used for comparison against returned collection objects.",
      "parentUuid": "d9692cc1_5da6d231",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b4a1fef_fef87341",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "That\u0027s a really good point.  you shouldn\u0027t be calling subtree paths at all, you should be calling getObject.",
      "parentUuid": "6c428a81_09cc6aff",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36d00adb_4829dc60",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 67,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b4a1fef_fef87341",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32635597_35f7296f",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 72,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "you\u0027ve mixed a callback pattern with a inlined handler pattern.  Either pass an ec to the callback, and let it handle the failure, or handle the whole thing inline here.  Don\u0027t mix the two.  Same on line 80",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "956e4147_140cbe9d",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 72,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "It is done on purpose",
      "parentUuid": "32635597_35f7296f",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "019baf81_7082f9e0",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 89,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "Avoid auto here.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "089b10c3_d90d641f",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 89,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "019baf81_7082f9e0",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "704eceab_2ccce386",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 90,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "nit: For consistency, compare against reports.end().",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1d3e073_2573f5d8",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 90,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "704eceab_2ccce386",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83d69851_6da67849",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 90,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "See above.  Don\u0027t try to sort through the reports after the whole set has been returned.  Use GetObject to return just the object you want.",
      "parentUuid": "b1d3e073_2573f5d8",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2316c5f8_56c723b2",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 90,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83d69851_6da67849",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f370fd1_f3c28f80",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 36,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Considering that this function (see below) is going to boil down to 2 lines per entry, I suspect that this can simply be inlined.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba4c2b79_8ee200ec",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 36,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "The way it is not we want to keep because it decreases code duplication a lot.",
      "parentUuid": "2f370fd1_f3c28f80",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "226f61e3_cd1bcd6b",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 36,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "No.... it doesn\u0027t.  It makes significantly more code than is needed.",
      "parentUuid": "ba4c2b79_8ee200ec",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f79cc98d_0e732a22",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 36,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "226f61e3_cd1bcd6b",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce7b7859_e2816a07",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "I\u0027m not liking this as an input parameter.  for the types you care about, this can either be done in calling code, or the mapping can exist in a branch in the code here, but passing it in makes it possible for a user to call this with an incorrect character in a non obvious way.",
      "range": {
        "startLine": 37,
        "startChar": 34,
        "endLine": 37,
        "endChar": 52
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af1c51a8_eb5368d8",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 37,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "This function is an implementation details of this file. We don’t expect users to call details namespace outside of this file so this mapping is not really needed.",
      "parentUuid": "ce7b7859_e2816a07",
      "range": {
        "startLine": 37,
        "startChar": 34,
        "endLine": 37,
        "endChar": 52
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "646ea3e6_0fe06c47",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "Disagree.  Regardless of whether its in details or not, the postfix should be moved to the calling scope, as it really has nothing to do with this routine.",
      "parentUuid": "af1c51a8_eb5368d8",
      "range": {
        "startLine": 37,
        "startChar": 34,
        "endLine": 37,
        "endChar": 52
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "568d2a75_86caeb98",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 37,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "646ea3e6_0fe06c47",
      "range": {
        "startLine": 37,
        "startChar": 34,
        "endLine": 37,
        "endChar": 52
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52b2d82b_4ca2785b",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 45,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Given the size of the strings here, it seems unlikely that stringstream would be anything but a performance impediment.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42e06cd4_e7477052",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 45,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "Using std::stringstream makes formatting much easier than solution with std::to_string. We compared it with other solution and this one was better.",
      "parentUuid": "52b2d82b_4ca2785b",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63a39f07_82b40c17",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 45,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "I find that difficult to understand.  Can you post the code that you wrote before that used to_string?\n\nAlso, the performance here is important.  stringstream is going to make several copies, and will not optimize down well.  to_string optimizes much better.",
      "parentUuid": "42e06cd4_e7477052",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99cfede3_1afa0828",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 45,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T13:23:24Z",
      "side": 1,
      "message": "How can you be sure that std::to_string is better optimize than std::stringstream? Have you verified it on yocto system?",
      "parentUuid": "63a39f07_82b40c17",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47b4531a_b62a1199",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 45,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-18T15:28:04Z",
      "side": 1,
      "message": "I haven\u0027t looked at the assembly for this specific case, but I\u0027ve done many profiles, and for short strings, std::string (with reserve) and operator +\u003d has to optimized better on ast2500 yocto systems in the past.\n\nWhat I really should\u0027ve said here is that when built with std::to_string, this code is smaller, simpler, and easier to read.  You\u0027re right, I did jump too quickly to performance in my question.  See my proposed implementation below.",
      "parentUuid": "99cfede3_1afa0828",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcab0197_4d812c13",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 45,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47b4531a_b62a1199",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "105c35a5_4acd5a73",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 46,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "I suspect you don\u0027t want to type check milliseconds here, you want to check if T::period::den \u003e 0.  Otherwise, this helper won\u0027t work for nanoseconds (which I realize doesn\u0027t effect you in this case)\n\nedit: see below.  I suspect you don\u0027t need this special case at all.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f27079db_d364d642",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 46,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "105c35a5_4acd5a73",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4a2b0d0_208eada0",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 48,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "This should likely be using a fixed point printing, instead of printing the float as is to avoid rounding errors.\n\nI suspect that if it ended up as scientific notation (unlikely, but possible) that would go out of spec.",
      "range": {
        "startLine": 48,
        "startChar": 14,
        "endLine": 48,
        "endChar": 43
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88320fe8_d49ef5c6",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 48,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-13T13:51:29Z",
      "side": 1,
      "message": "It uses the default floating-point formatting. It is not scientific and fixed.",
      "parentUuid": "a4a2b0d0_208eada0",
      "range": {
        "startLine": 48,
        "startChar": 14,
        "endLine": 48,
        "endChar": 43
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9be15ef6_90e573dc",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 48,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "Stringstream definitely contains the logic to print in scientific notation.  It should only happen if t.count() is much bigger than you think it should be, but it\u0027s doing a branch either way.\nhttp://www.cplusplus.com/reference/ios/defaultfloat/\n\nI\u0027m pretty sure that\u0027s not what you intended.",
      "parentUuid": "88320fe8_d49ef5c6",
      "range": {
        "startLine": 48,
        "startChar": 14,
        "endLine": 48,
        "endChar": 43
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c37d9408_83ce0b8d",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 48,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9be15ef6_90e573dc",
      "range": {
        "startLine": 48,
        "startChar": 14,
        "endLine": 48,
        "endChar": 43
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf521c91_beadc5e4",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 49,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "You\u0027re doing a lot of fancy arithmetic here that I think the std library already does in duration cast.\n\nI suspect what you want here is\nstd::chrono::duration_cast\u003cstd::chrono::duration\u003cfloat\u003e\u003e(t).count();\n\nThat will properly handle any std library eccentricities as well as rounding for you.\n\nNote, I\u0027m pretty sure with that, you can also remove the branch.\n\nContinuing to look at it more, I suspect this whole function can be replaced with a call to std::chrono::duration cast, and std::chrono::floor, with no branches at all.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63e6f2f0_f1e4c4af",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 49,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-13T13:51:29Z",
      "side": 1,
      "message": "Yes, I will change to duration cast. You are right with this math, it is properly handled by\nstd::chrono::duration_cast\u003cstd::chrono::duration\u003cfloat\u003e\u003e(t).count()\n\nI do not see how you can change it using only single call to duration_cast and floor. You have to differentiate between milliseconds and days/hours/minutes to store it value in integer or float.",
      "parentUuid": "cf521c91_beadc5e4",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d051b5ef_67f80837",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 49,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "More concretely, this is the function I would\u0027ve expected to see here (compiled, but untested)\n\nIt is about a third the code, uses no details utils functions, includes no templates, has no compile time branching, requires no complete string copies (unless you count the intermediate to_string calls), does not use iostreams and is only doing pretty standard std::library conversions.  It does need zero padding added.  If the shortened version is require then that will need to be added back.\n\nI was also incorrect, you don\u0027t even need duration_cast to do this the way the library intends, only floor.\n\n\n\nstd::string toDurationFormat(std::chrono::milliseconds ms)\n{\n    std::string fmt;\n    fmt.reserve(sizeof(\"PxxxDTxxHxxMxx.xxxxxxS\"));\n    fmt +\u003d \"P\";\n\n    using Days \u003d std::chrono::duration\u003cstd::chrono::hours::rep, std::ratio\u003c24 * 60 * 60\u003e\u003e;\n    Days d \u003d std::chrono::floor\u003cDays\u003e(ms);\n    fmt +\u003d std::to_string(d.count());\n    ms -\u003d d;\n\n    fmt +\u003d \"DT\";\n    std::chrono::hours h \u003d std::chrono::floor\u003cstd::chrono::hours\u003e(ms);\n    fmt +\u003d std::to_string(h.count());\n    ms -\u003d h;\n    fmt +\u003d \"H\";\n\n\n    std::chrono::minutes m \u003d std::chrono::floor\u003cstd::chrono::minutes\u003e(ms);\n    fmt +\u003d std::to_string(m.count());\n    fmt +\u003d \"M\";\n    ms -\u003d m;\n\n    std::chrono::seconds s \u003d std::chrono::floor\u003cstd::chrono::seconds\u003e(ms);\n    fmt +\u003d std::to_string(s.count());\n    ms -\u003d s;\n\n    fmt +\u003d \".\";\n    fmt +\u003d std::to_string(ms.count());\n    fmt +\u003d \"S\";\n\n    return fmt;\n}",
      "parentUuid": "63e6f2f0_f1e4c4af",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "948e8602_64309399",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 49,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T13:23:24Z",
      "side": 1,
      "message": "floor is not required. We do not need to round it. duration_cast is enough for our use case.\n\nYour code is not exactly what we want because using std::to_string causes some numeric errors.\nfmt +\u003d std::to_string(std::chrono::duration_cast\u003cstd::chrono::duration\u003cfloat\u003e\u003e(ms).count());\nFor example:\nUser input: P48DT20H50M59.626S -\u003e Counted to ms: 4222259626, back to user output: P48DT20H50M59.625999S\n\nUsing stringstream is less problematic in this case because it does not add numeric error.",
      "parentUuid": "d051b5ef_67f80837",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "643ad2a0_efcf01f3",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 49,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-18T15:28:04Z",
      "side": 1,
      "message": "\"floor is not required.\"\nYou are functionally implementing floor in your code.  Using the library function for floor makes it easier to read, and better documented.\n\n\nCan you be more clear in your example of where my code is broken?  You\u0027ve said \"user input\" but this function does not accept a string, so your test case doesn\u0027t make sense to me.  What input did you use in the ms duration?\n\nWhen I compile the below test app, using your data point of 4222259626 it returns the correct string (P48DT20H50M59.626S).  It\u0027s surprising that it would have floating point errors, as it uses zero floating point values, and everything in done as ints (which should also help performance in a minor way).  Are you sure that your parser doesn\u0027t have an issue somewhere?\n\nHere is an isolated test app\n#include \u003cstring\u003e\n#include \u003cchrono\u003e\n#include \u003ciostream\u003e\n\nstd::string toDurationFormat(std::chrono::milliseconds ms)\n{\n    std::string fmt;\n    fmt.reserve(sizeof(\"PxxxDTxxHxxMxx.xxxxxxS\"));\n    fmt +\u003d \"P\";\n\n    using Days \u003d std::chrono::duration\u003cstd::chrono::hours::rep, std::ratio\u003c24 * 60 * 60\u003e\u003e;\n    Days d \u003d std::chrono::floor\u003cDays\u003e(ms);\n    fmt +\u003d std::to_string(d.count());\n    ms -\u003d d;\n\n    fmt +\u003d \"DT\";\n    std::chrono::hours h \u003d std::chrono::floor\u003cstd::chrono::hours\u003e(ms);\n    fmt +\u003d std::to_string(h.count());\n    ms -\u003d h;\n    fmt +\u003d \"H\";\n\n\n    std::chrono::minutes m \u003d std::chrono::floor\u003cstd::chrono::minutes\u003e(ms);\n    fmt +\u003d std::to_string(m.count());\n    fmt +\u003d \"M\";\n    ms -\u003d m;\n\n    std::chrono::seconds s \u003d std::chrono::floor\u003cstd::chrono::seconds\u003e(ms);\n    fmt +\u003d std::to_string(s.count());\n    ms -\u003d s;\n\n    fmt +\u003d \".\";\n    fmt +\u003d std::to_string(ms.count());\n    fmt +\u003d \"S\";\n\n    return fmt;\n}\n\n\nint main(int argc, char** argv){\n   std::cout \u003c\u003c toDurationFormat(std::chrono::milliseconds(std::chrono::milliseconds(4222259626)));\n\n}",
      "parentUuid": "948e8602_64309399",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "456bd3fc_036c75f8",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 49,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-28T15:38:36Z",
      "side": 1,
      "message": "Here is a new version that zero pads properly.  I suspect this can be used as-is.\n\n\n#include \u003cstring\u003e\n#include \u003cchrono\u003e\n#include \u003ciostream\u003e\n\nvoid zeroPad(std::string\u0026 value, size_t digits){\n    // Note, does not work on negative numbers\n    if (value.size() \u003c digits){\n        value.insert(0, digits - value.size(), \u00270\u0027);\n    }\n}\n\nstd::string toDurationFormat(std::chrono::milliseconds ms)\n{\n    std::string fmt;\n    fmt.reserve(sizeof(\"PxxxDTxxHxxMxx.xxxxxxS\"));\n    fmt +\u003d \"P\";\n    using Days \u003d std::chrono::duration\u003cstd::chrono::hours::rep, std::ratio\u003c24 * 60 * 60\u003e\u003e;\n    Days d \u003d std::chrono::floor\u003cDays\u003e(ms);\n    std::string value \u003d std::to_string(d.count());\n    zeroPad(value, 3);\n    fmt +\u003d value;\n    ms -\u003d d;\n    fmt +\u003d \"DT\";\n    std::chrono::hours h \u003d std::chrono::floor\u003cstd::chrono::hours\u003e(ms);\n    value \u003d std::to_string(h.count());\n    zeroPad(value, 2);\n    fmt +\u003d value;\n    ms -\u003d h;\n    fmt +\u003d \"H\";\n\n    std::chrono::minutes m \u003d std::chrono::floor\u003cstd::chrono::minutes\u003e(ms);\n    value \u003d std::to_string(m.count());\n    zeroPad(value, 2);\n    fmt +\u003d value;\n    fmt +\u003d \"M\";\n    ms -\u003d m;\n\n    std::chrono::seconds s \u003d std::chrono::floor\u003cstd::chrono::seconds\u003e(ms);\n    value \u003d std::to_string(s.count());\n    zeroPad(value, 2);\n    fmt +\u003d value;\n    ms -\u003d s;\n    fmt +\u003d \".\";\n    value \u003d std::to_string(ms.count());\n    zeroPad(value, 3);\n    fmt +\u003d value;\n    fmt +\u003d \"S\";\n    return fmt;\n}\n\nint main(int argc, char** argv){\n   std::cout \u003c\u003c toDurationFormat(std::chrono::milliseconds(std::chrono::milliseconds(4222259626)));\n}",
      "parentUuid": "643ad2a0_efcf01f3",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9647b554_d58d30a1",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 49,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Modified toDurationFormat() according to your comments. Thanks for all hints. I didn\u0027t want to add zeroPad because it is not required.",
      "parentUuid": "456bd3fc_036c75f8",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfb29732_996dec09",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 56,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "It\u0027s really non-obvious that duration is getting modified here.  I suspect simply using the next types floor would avoid quite a few rounding errors, and be easier to grok.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1e56e1b_af3f5df7",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 56,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "This is expected, we are using it internally to avoid code duplication. Because of that I think it will be easy to understand you only read it once.\n\nI guess you will have same problem if you inline it and have multiple duration -\u003d t; in external function. Duration and t.count() are both integers so there is no problems with rounding.",
      "parentUuid": "dfb29732_996dec09",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8c8477b_a198fae3",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 56,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "see implementation I posted above.  Much more obvious to the user what\u0027s going on",
      "parentUuid": "f1e56e1b_af3f5df7",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f614394_fd79d61c",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 56,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d8c8477b_a198fae3",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "304ad806_a60b1644",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 63,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "nit, it\u0027s a duration value, not a time value.",
      "range": {
        "startLine": 63,
        "startChar": 18,
        "endLine": 63,
        "endChar": 23
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39b142db_c5b180b4",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 63,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "304ad806_a60b1644",
      "range": {
        "startLine": 63,
        "startChar": 18,
        "endLine": 63,
        "endChar": 23
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "642db928_aa8fc31d",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "you might be better off simply giving some examples.  Giving a double escaped regex isn\u0027t very helpful in a comment.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "870ccae8_777d6b17",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 64,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "642db928_aa8fc31d",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e819a802_88860a13",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 64,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "870ccae8_777d6b17",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a2921fc_04a27d04",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 65,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Please don\u0027t reference the design doc.  The code should stand on its own.\n\nAlso, I see no mention of this duration format in the design doc.  Can you give a better reference?",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6571909c_3bcf404a",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 65,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "0a2921fc_04a27d04",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25871b3d_1da30ffa",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 65,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6571909c_3bcf404a",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e9ce9b3_99b93e2e",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Better variable name needed here.\n\nAlso, would it make more sense to simply take in a duration here?",
      "range": {
        "startLine": 67,
        "startChar": 44,
        "endLine": 67,
        "endChar": 46
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04b91d38_aa4be312",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 67,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "This function is intended to convert uint32_t from sdbusplus to std::string.\n\nWe can rename ms to milliseconds and duration to time.",
      "parentUuid": "4e9ce9b3_99b93e2e",
      "range": {
        "startLine": 67,
        "startChar": 44,
        "endLine": 67,
        "endChar": 46
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b65010b_6fe8139f",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "I see no mention of sdbusplus in this?  Let the calling code do the sdbusplus-\u003eduration convertion, as it\u0027s much clearer when done in that scope, and less likely to have duration issues (seconds accidentally converted to milliseconds, ect)",
      "parentUuid": "04b91d38_aa4be312",
      "range": {
        "startLine": 67,
        "startChar": 44,
        "endLine": 67,
        "endChar": 46
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efb163c3_f2a1e3a0",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 67,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b65010b_6fe8139f",
      "range": {
        "startLine": 67,
        "startChar": 44,
        "endLine": 67,
        "endChar": 46
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd5b83bd_d001a6b8",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 69,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "You\u0027re doing a type conversion of the underlying type here, as std::chrono::milliseconds contains an implementation defined type, and you\u0027re reading it in as a uint32_t.  I\u0027m guessing you didn\u0027t intend that.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "610f454b_915c1afb",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 69,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "This is expected behavior. We only care that we create it as ex. chrono::milliseconds(10) and we don\u0027t care how it is represented internally.",
      "parentUuid": "cd5b83bd_d001a6b8",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4da9a6b_e8655edb",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 69,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-18T15:28:04Z",
      "side": 1,
      "message": "sure.  Technically the standard guarantees minimum 48 bit type in std::chrono::milliseconds, so there\u0027s no danger of overflow here, although the underlying type might be signed, which might cause issues.  With that said, having this api take std::chrono::milliseconds instead of a uint32_t makes the code cleaner, and seaparates concerns better.",
      "parentUuid": "610f454b_915c1afb",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29b3d927_c169111b",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 69,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4da9a6b_e8655edb",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "812ee8a9_18008420",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 70,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Is this branch even needed?  It seems odd that it would be done has a hardcoded string instead of simply making the algorithm handle it properly.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "921172f3_2355659c",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 70,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "This is needed. Redfish expects us to have time in this format, this is the simplest way to implement it.",
      "parentUuid": "812ee8a9_18008420",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eac01cfa_25ac94fd",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 70,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "in the comment above, can you add the relevant section number  of the redfish spec that talks about this?",
      "parentUuid": "921172f3_2355659c",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4016a44f_3149471b",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 70,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eac01cfa_25ac94fd",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7728155e_6ca6e5be",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 76,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "You\u0027re reserving up to 999 days here.  Might want to consider adding 1 more in case an event gets more than 3+ years old,",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "280a8f4a_2362dbf8",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 76,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "We are taking uint32_t as parameter we are limited to +- 49 days.",
      "parentUuid": "7728155e_6ca6e5be",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "288004f3_0205c89b",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 76,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "I didn\u0027t think about that, but that\u0027s worrisome.  What happens when a duration exceeds that?",
      "parentUuid": "280a8f4a_2362dbf8",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25f80d53_7c7f1704",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 76,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T13:23:24Z",
      "side": 1,
      "message": "std::string will allocate more memory then. We only reserve some length to make it less memory consuming when appending new signs. It is limited to uint32 size.",
      "parentUuid": "288004f3_0205c89b",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5532a805_2a3855a9",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 76,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-18T15:28:04Z",
      "side": 1,
      "message": "49 days isn\u0027t very long, and well within a duration that the system would see.  Should this parameter be upgraded to a uint64_t to reduce the possibility of overflow?",
      "parentUuid": "25f80d53_7c7f1704",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce0b0a03_c832539e",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 76,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5532a805_2a3855a9",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "418db7b5_75358e5a",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 78,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "instead of int, you should be using similar type to the one the library uses.\n\nIn this case the closest is probably std::chrono::hours::rep.\n\nWhile in theory this won\u0027t be perfect, it will cover the cases that openbmc is likely to care about.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b793a8fe_bcde20ff",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 78,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "418db7b5_75358e5a",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b735adb_7c4d8023",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 78,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b793a8fe_bcde20ff",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ecd8f12_8303d298",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 82,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "This is going to stop the parsing there.  In the case of this, does it make sense to print out the zeros anyway, to:\n1. remove the extra branches.\n2. Make parsing easier by the user?",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e544e6a5_2b2c2c23",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 82,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-13T13:51:29Z",
      "side": 1,
      "message": "Yes, we can print zeros for every value but it will make duration format less readable. In the patch with support for POST on MetricReportDefinition we convert duration value from string to milliseconds value. User will pass it to bmcweb in the shortest possible form, for ex. PT1M30S.",
      "parentUuid": "8ecd8f12_8303d298",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ed362ef_04704b08",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 82,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "We\u0027re building a machine API here.  Readability is important for the webui.  Implement-ability is important to the API.\n\nAlso, because zero padding allows durations to be compared (by a person) more easily, I don\u0027t really agree about the less readable point.\n\n\"User will pass it to bmcweb in the shortest possible form, for ex. PT1M30S.\"\n\nYou\u0027re talking about a parser, which should accept both zero padded, or not, because we don\u0027t know how the user will pass it.  This code here is the serializer",
      "parentUuid": "e544e6a5_2b2c2c23",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b87a3d6e_fb877751",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 26
      },
      "lineNbr": 82,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ed362ef_04704b08",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9147b205_3c478837",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 26
      },
      "lineNbr": 24,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "DOesn\u0027t look used?",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cfb2f26_f3607ce7",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 26
      },
      "lineNbr": 24,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK, we will verify this.",
      "parentUuid": "9147b205_3c478837",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4612e95_e24852ba",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 26
      },
      "lineNbr": 24,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T13:30:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4cfb2f26_f3607ce7",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "021df36d_bdf567bf",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 26
      },
      "lineNbr": 63,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Please simply include the correct route string here, instead of constructing it at runtime.  This makes the code eisier to audit and grep.  There are other places where this needs fixed as well, please fix all of them.",
      "range": {
        "startLine": 63,
        "startChar": 18,
        "endLine": 63,
        "endChar": 61
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76b274a6_690811df",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 26
      },
      "lineNbr": 63,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "Managing routes the way you propose can introduce many problems. If we\nhave error in metricReportUri then we need to fix it all the places with constant it will be always one place.",
      "parentUuid": "021df36d_bdf567bf",
      "range": {
        "startLine": 63,
        "startChar": 18,
        "endLine": 63,
        "endChar": 61
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c4778d1_dd52d434",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 26
      },
      "lineNbr": 63,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "\"If we have error in metricReportUri\"\nThen you didn\u0027t run the tests as you\u0027ve been asked.  If you\u0027ve run the validator, there is no way there\u0027s an error in your URI.  Having every node contain a fixed, compile time string makes it easier to audit the table routing with a simple grep of the codebase.\n\nAlso, we\u0027re talking about 3 locations here.  It\u0027s not like we\u0027re using this in 1000s of handlers.  Fixing a route in 3 strings is in the noise compared to the effort to test and commit it, and the ease of security auditing the codebase is far outweighed by the extra typing.\n\nAlso, it\u0027s more efficient at startup, as you\u0027re not generating a new string at runtime.",
      "parentUuid": "76b274a6_690811df",
      "range": {
        "startLine": 63,
        "startChar": 18,
        "endLine": 63,
        "endChar": 61
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3014e6f_e75d2e7d",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 26
      },
      "lineNbr": 63,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c4778d1_dd52d434",
      "range": {
        "startLine": 63,
        "startChar": 18,
        "endLine": 63,
        "endChar": 61
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57c8b2af_a11f5355",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 26
      },
      "lineNbr": 139,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "See other comments.  This line is really really hard to grok at first look, for something that would be relatively simple if written out in code.  If written out in code, it would remove the need for toMetricValues, the MetricValues type, and all the extra allocations, and data structures that go with them.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40939e3e_f081d653",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 26
      },
      "lineNbr": 139,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "It will introduce lots of code duplication and there will be much more code to read and understand. We can change it to:\n\n\njson_utils::assign_if(asyncResp-\u003eres, dbus_utils::get_if\u003cstd::string\u003e(ret, \"Timestamp\"));\njson_utils::assign_if(asyncResp-\u003eres, \"MetricValue\", dbus_utils::get_if\u003cReadings\u003e(ret, \"Readings\", toMetricValues));",
      "parentUuid": "57c8b2af_a11f5355",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e062cdcf_cffabde5",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 26
      },
      "lineNbr": 139,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "Please follow the patterns that already exist in the codebase.  If you\u0027d like to try using these utils patterns, do it on some old handlers, and submit it for a separate review.\n\nps, I don\u0027t find your second attempt any more readable, and performance wise it\u0027s still doing O(nlogn) lookups for something that can be done in O(n).",
      "parentUuid": "40939e3e_f081d653",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00eea88d_7b5443b6",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 26
      },
      "lineNbr": 139,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e062cdcf_cffabde5",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ab47c9c_253102e2",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 99,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "There are only 2 actions here.  Please use a simple \"if (action \u003d\u003d \u0027Event\u0027)\" type branch here, instead of constructing a map for every single call.\n\nOnce you\u0027ve done that, I suspect this method doesn\u0027t need to exist, and could be inlined to simplify this quite a bit.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f757f8d6_503dd9d8",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 99,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "Instead of boost::flat_map we can use std::array\u003cstd::pair\u003cstd::string, std::string\u003e\u003e then compiler should optimize it.",
      "parentUuid": "0ab47c9c_253102e2",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ee5e67e_e3ad016c",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 99,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "I don\u0027t think the compiler is allowed to optimize it to that level, as std::string has to allocate.  Also, it\u0027s harder to read.\n\nPlease just use a simple branch for this.",
      "parentUuid": "f757f8d6_503dd9d8",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c58125a_6e9a6cd1",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 99,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3ee5e67e_e3ad016c",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "015fec91_c74b0d34",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 120,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Please put a comment explaining what this type is.\n\nIt\u0027s a list of maps of paths and properties (I think).",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "321476ec_54ab0407",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 120,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "015fec91_c74b0d34",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94f31deb_92cef34b",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 120,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "321476ec_54ab0407",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f86e3ae8_e983cb1d",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 139,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Typo",
      "range": {
        "startLine": 139,
        "startChar": 8,
        "endLine": 139,
        "endChar": 36
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31d9bd5f_a4161d77",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 139,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "f86e3ae8_e983cb1d",
      "range": {
        "startLine": 139,
        "startChar": 8,
        "endLine": 139,
        "endChar": 36
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10a59e97_60847e15",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 139,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T13:30:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31d9bd5f_a4161d77",
      "range": {
        "startLine": 139,
        "startChar": 8,
        "endLine": 139,
        "endChar": 36
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39a78188_90d08327",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 165,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "I don\u0027t find these abstractions  very helpful in practice.  They obfuscate a lot of what\u0027s going on here, and don\u0027t handle errors properly, by returning a 500 if the properties doesn\u0027t exist, or explicitly noting that the error is not handled and why.\n\nAlso, taking a json value by operator[] will create the key in the map, even if it doesn\u0027t exist, so this in practice has the effect of \"assign if present or null)\" which isn\u0027t expected.\n\nPlease inline the logic for handling properties here.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5962ed63_a7994e36",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 165,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39a78188_90d08327",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "520b4560_a6bfc97f",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 173,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Again, this is another case where the code to handle this is about as much code as the helper, and would be much clearer.\n\nAlso, in this case, you again, haven\u0027t handled the error branch, where this result might be false.  Please fix.",
      "range": {
        "startLine": 168,
        "startChar": 0,
        "endLine": 173,
        "endChar": 35
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad5f0816_ad3c734e",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 173,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "This will introduce a lot of duplicated code which will make it much harder\nto read.\n\nWe will change error handling of assignIfPresent to not return success.",
      "parentUuid": "520b4560_a6bfc97f",
      "range": {
        "startLine": 168,
        "startChar": 0,
        "endLine": 173,
        "endChar": 35
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e661b4c4_782604ce",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 173,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "\"This will introduce a lot of duplicated code which will make it much harder to read.\"\n\nHaving built many of these over several years, including several times trying to build similar functions to the utils functions you\u0027re trying, I disagree.  This is much harder to read than what the existing handlers do.\n\n\"We will change error handling of assignIfPresent to not return success.\"\nTo be clear, I\u0027m asking you to remove assignIfPresent.  It is not a userful abstraction.  You\u0027ve also not responded to the fact this codes doesn\u0027t seem to understand how operator[] works in c++.  Adding the correct handling with find will bloat this code even more.",
      "parentUuid": "ad5f0816_ad3c734e",
      "range": {
        "startLine": 168,
        "startChar": 0,
        "endLine": 173,
        "endChar": 35
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13736c42_8e108949",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 173,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e661b4c4_782604ce",
      "range": {
        "startLine": 168,
        "startChar": 0,
        "endLine": 173,
        "endChar": 35
      },
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e5295b3_7bfa974a",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 189,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "DOes this really need to be public?",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cfb3be5_17738222",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 189,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "6e5295b3_7bfa974a",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13f056d7_07ba14ab",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 26
      },
      "lineNbr": 189,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3cfb3be5_17738222",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ff10cf6_98ce5926",
        "filename": "redfish-core/lib/telemetry_service.hpp",
        "patchSetId": 26
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "considering getMonitoringServiceProperties is only used here, on the line below it, does it make sense to just inline it?  That would also let you declare asyncResp at the top.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "726b765c_9cc5b5f6",
        "filename": "redfish-core/lib/telemetry_service.hpp",
        "patchSetId": 26
      },
      "lineNbr": 61,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "We don’t want to inline it because it will make method calling it much bigger and harder to read. With this you know that this 20 lines of code is doing getMonitoringServiceProperties.",
      "parentUuid": "5ff10cf6_98ce5926",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "076f8275_b589ee1c",
        "filename": "redfish-core/lib/telemetry_service.hpp",
        "patchSetId": 26
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "I disagree that it\u0027s more readable, but if you want it that way, I\u0027m not going to argue.  personally, I think that breaking it up into 2 functions instead of 1, just adds extra readability problems.",
      "parentUuid": "726b765c_9cc5b5f6",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01989e14_a9d2974f",
        "filename": "redfish-core/lib/telemetry_service.hpp",
        "patchSetId": 26
      },
      "lineNbr": 61,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "076f8275_b589ee1c",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "476a8015_62228431",
        "filename": "redfish-core/lib/telemetry_service.hpp",
        "patchSetId": 26
      },
      "lineNbr": 73,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "If the path doesn\u0027t exist, it is 404, not absent.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca46399e_41bd9c5f",
        "filename": "redfish-core/lib/telemetry_service.hpp",
        "patchSetId": 26
      },
      "lineNbr": 73,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "It is expected by redfish.",
      "parentUuid": "476a8015_62228431",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8e28929_e5d87100",
        "filename": "redfish-core/lib/telemetry_service.hpp",
        "patchSetId": 26
      },
      "lineNbr": 73,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca46399e_41bd9c5f",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5604d63c_ed48b319",
        "filename": "redfish-core/lib/telemetry_service.hpp",
        "patchSetId": 26
      },
      "lineNbr": 85,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-07T06:31:50Z",
      "side": 1,
      "message": "Again, this line is very hard to grok, and would by much simpler written out without templates, and for the types expected.",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2d0d86b_b8b46431",
        "filename": "redfish-core/lib/telemetry_service.hpp",
        "patchSetId": 26
      },
      "lineNbr": 85,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-13T11:48:18Z",
      "side": 1,
      "message": "We are doing this to remove code duplication.",
      "parentUuid": "5604d63c_ed48b319",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63e67f16_9e39a6f3",
        "filename": "redfish-core/lib/telemetry_service.hpp",
        "patchSetId": 26
      },
      "lineNbr": 85,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-14T08:12:17Z",
      "side": 1,
      "message": "There is no code duplication here if the code is properly handling all your errors, which this code currently isn\u0027t.",
      "parentUuid": "f2d0d86b_b8b46431",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "369303c3_bdd6046e",
        "filename": "redfish-core/lib/telemetry_service.hpp",
        "patchSetId": 26
      },
      "lineNbr": 85,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-12T14:29:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "63e67f16_9e39a6f3",
      "revId": "39f50f7fa28f4eec1c38bd1e3f65cbb5e8029e8e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}
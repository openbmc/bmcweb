{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f21e623c_6f21df26",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-08-20T11:30:00Z",
      "side": 1,
      "message": "The big issue I take with this is that you\u0027ve said \"instead\" of the primary portion.  We should _always_ be showing the primary portion.\n\nA better name for the secondary portion probably would have been \"extended\".  The purpose of it is for systems like the SBMR that use more than can fit in an 8 byte field; the remainder go into the array.  The hope was that vendors would still use the first 8 bytes as having the most useful information so that, if necessary, people could easily code reactions to the first 8 bytes.  [As an example, AMD processors require looking for specific post codes as failure indications which can only be reported by their hardware and not through BIOS SELs.]\n\nIf you\u0027re leaving the primary post code as 0s, this is a wrong implementation.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 37
      },
      "revId": "44a17df8ac205f964eaf8f7af398091fd5082a2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d457b84_d97c01dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-12T06:30:54Z",
      "side": 1,
      "message": "It feels to me, like we are pushing backend design into bmcweb.",
      "revId": "44a17df8ac205f964eaf8f7af398091fd5082a2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3ef6bf0_a22c4e2e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-15T18:10:50Z",
      "side": 1,
      "message": "@cchoux any updates here?  Comments have been open for several months with no replies.  If you\u0027re working on changes, please let us know, otherwise I\u0027ll close this.",
      "revId": "44a17df8ac205f964eaf8f7af398091fd5082a2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e8b1823_7925c1d1",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 3708,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2024-08-15T18:05:56Z",
      "side": 1,
      "message": "Instead of a compile time flag, can we just tag on std::get\u003c1\u003e to std::get\u003c0\u003e?\nSomething like\n```\nhexCode \u003c\u003c \"0x\" \u003c\u003c std::setfill(\u00270\u0027) \u003c\u003c std::setw(2) \u003c\u003c std::hex\n                    \u003c\u003c std::get\u003c0\u003e(code.second);\nif (std::get\u003c1\u003e(code.second).size() \u003e 0) {\n  hexCode \u003c\u003c bytesToHexString(std::get\u003c1\u003e(code.second));\n}\n```\nThat way if the platform has no secondary code, the vector would be 0 size and things work as is. If it does have a secondary code, it gets tagged onto the primary post code.",
      "revId": "44a17df8ac205f964eaf8f7af398091fd5082a2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c91050a_577e2b68",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 3708,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-15T18:10:13Z",
      "side": 1,
      "message": "\u003e If it does have a secondary code, it gets tagged onto the primary post code.\n\nIf the service expects the primary code in the primary slot, why didn\u0027t the backend put it there in the first place?\n\nIn your case, you can only check if the secondary was PROVIDED.  But that doesn\u0027t mean that the secondary post code is the \"primary\".",
      "parentUuid": "7e8b1823_7925c1d1",
      "revId": "44a17df8ac205f964eaf8f7af398091fd5082a2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e6be360_d49b4df3",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 3708,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2024-08-15T21:25:00Z",
      "side": 1,
      "message": "Some processors have a 9 byte post code :-(. So, the existing 64bit (8byte) post code is insufficient. At least for the ARM platform this is the reason to use the secondary post code. But for the original intention of the introduction might be a hardware specific feature of an IBM platform.\nIn the ARM case, worst case scenario, the post code ends up with a 0x00\u003cactual 9 byte code\u003e if the back end puts a stock 0 in the primary post code.",
      "parentUuid": "2c91050a_577e2b68",
      "revId": "44a17df8ac205f964eaf8f7af398091fd5082a2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a1f2d2a_4210bb8f",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 3708,
      "author": {
        "id": 1001264
      },
      "writtenOn": "2024-08-16T05:51:18Z",
      "side": 1,
      "message": "Hi @Ed, as Amithash mentioned, current primary postcode insufficient for new systems (ARM platform). \n\nWhat if we change the primary postcode type from `uint64_t` to `std::vector\u003cuint8_t\u003e` ? this will ensure primary code can fill in any size of postcode.\n\nPlease kindly let me know if you have any concerns of this modification, thank you.",
      "parentUuid": "8e6be360_d49b4df3",
      "revId": "44a17df8ac205f964eaf8f7af398091fd5082a2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "531fda38_1f922765",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 3708,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-16T14:54:42Z",
      "side": 1,
      "message": "You\u0027re proposing dbus interface changes;  A bcmweb code review isn\u0027t the right place to do that, although what you proposed looks like it would work.",
      "parentUuid": "9a1f2d2a_4210bb8f",
      "revId": "44a17df8ac205f964eaf8f7af398091fd5082a2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ab25fe0_eeda8629",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 3708,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-08-20T11:30:00Z",
      "side": 1,
      "message": "I don\u0027t think a dbus interface change is necessary here or warranted.  IBM, if I recall, uses something like 32 _byte_ post codes, but the most informative are in the first 64 bits.\n\nI agree this should not be a configuration flag.\n\nThe \"setfill(\u00270\u0027)\" in the original code is, in my opinion, wrong for everything except for original 8 bit Intel post codes.  We probably should start with fixing that (so that only 8 bit post codes have a prefixed 0).  Once we do that, emitting the whole post code as one is probably the right thing to do.\n\nAs I mentioned in the commit message review, we probably should have called it \"Extended\" rather than \"Secondary\".\n\nI checked with what IBM was doing downstream, since they\u0027re the ones who originally requested the \"Secondary\" field, but I don\u0027t think it is too helpful for this discussion.  They\u0027ve come up with their own MessageRegistry entry (violating the use of \"OpenBMC\" but...) and add the whole post code as a new message argument.  https://github.com/ibm-openbmc/bmcweb/blame/1110/redfish-core/lib/log_services.hpp#L5253",
      "parentUuid": "531fda38_1f922765",
      "revId": "44a17df8ac205f964eaf8f7af398091fd5082a2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
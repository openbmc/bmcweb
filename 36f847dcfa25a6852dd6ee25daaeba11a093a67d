{
  "comments": [
    {
      "key": {
        "uuid": "1dc2272f_4c60b752",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 4
      },
      "lineNbr": 1486,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-27T16:21:16Z",
      "side": 1,
      "message": "Doesn\u0027t this new property need to be optional, based on whether or not the correct interface exists on the object?",
      "range": {
        "startLine": 1483,
        "startChar": 0,
        "endLine": 1486,
        "endChar": 52
      },
      "revId": "36f847dcfa25a6852dd6ee25daaeba11a093a67d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9e86d43_ce155ba8",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 4
      },
      "lineNbr": 1486,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2021-01-27T21:50:00Z",
      "side": 1,
      "message": "Done. Checking for the FilePath interface and adding new field if Path property exists.",
      "parentUuid": "1dc2272f_4c60b752",
      "range": {
        "startLine": 1483,
        "startChar": 0,
        "endLine": 1486,
        "endChar": 52
      },
      "revId": "36f847dcfa25a6852dd6ee25daaeba11a093a67d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa5fd37b_1d08d026",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 4
      },
      "lineNbr": 1743,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-22T22:19:54Z",
      "side": 1,
      "message": "This seems a little odd that we\u0027re relying on another service to do the serialization for us.  Why would we not just use the same serializer we have, and set the appropriate flags to get downloaded?\n\nI\u0027m a little worried about keeping consistency here.  This is one of the only APIs in redfish that would be operating on unstructured data, but I\u0027m not really following why we\u0027re avoiding the structure here and inventing a new API?\n\nAlso, with the privileges work being done, this is yet another set of files that would have to have their privileges migrated, which also seems a little problematic to me when we could just use the existing dbus apis, and build the \"file\" ourselves.\n\nMaybe there\u0027s more to this than I understand?",
      "range": {
        "startLine": 1704,
        "startChar": 0,
        "endLine": 1743,
        "endChar": 59
      },
      "revId": "36f847dcfa25a6852dd6ee25daaeba11a093a67d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b30a910_7ed679bc",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 4
      },
      "lineNbr": 1743,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2021-01-25T16:38:23Z",
      "side": 1,
      "message": "Hi Ed, the idea is to be able to download the file specified by the FilePath property in the error log entry. I used the bmc dump download as an example, although I know you\u0027re in the middle of adding an openFile function - https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/35992/10/include/openbmc_dbus_rest.hpp\n\nI\u0027m not familiar with the current serializer in bmcweb. Is it \"boost::beast::http::response_serializer\"? Or what\u0027s the function you mentioned that should be use for this case?",
      "parentUuid": "aa5fd37b_1d08d026",
      "range": {
        "startLine": 1704,
        "startChar": 0,
        "endLine": 1743,
        "endChar": 59
      },
      "revId": "36f847dcfa25a6852dd6ee25daaeba11a093a67d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "060cbbc2_7105978f",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 4
      },
      "lineNbr": 1743,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-26T15:59:13Z",
      "side": 1,
      "message": "\u003e Hi Ed, the idea is to be able to download the file specified by the FilePath property in the error log entry. I used the bmc dump download as an example, although I know you\u0027re in the middle of adding an openFile function - https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/35992/10/include/openbmc_dbus_rest.hpp\n\u003e \n\u003e I\u0027m not familiar with the current serializer in bmcweb. Is it \"boost::beast::http::response_serializer\"? Or what\u0027s the function you mentioned that should be use for this case?\n\nNo, in general it\u0027s the nlohmann::json serializer.  Dumps have this same problem, in that because the data is unstructured, unfortunately I wasn\u0027t on that review, or I would\u0027ve pointed that out there as well.\n\nAs a general rule, bmcweb takes the opinion that all non-build time data should be \"touched\" within the serializer, to remove the possibility of injection attacks, or other things within services compromising security, and making it much harder to break.  Having a \"download this file created at runtime\" uri breaks that paradyme, and opens the security envelope up to all applications that publish a file, not just bmcweb.",
      "parentUuid": "6b30a910_7ed679bc",
      "range": {
        "startLine": 1704,
        "startChar": 0,
        "endLine": 1743,
        "endChar": 59
      },
      "revId": "36f847dcfa25a6852dd6ee25daaeba11a093a67d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b56773ea_531a0b1b",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 4
      },
      "lineNbr": 1743,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2021-01-27T15:42:35Z",
      "side": 1,
      "message": "Per discussion in Discord, we\u0027ve agreed to encode the data into base64, set the http header to text/base64 instead of octet, and send it out. The receiving end (caller) would then need to decode the data to get the binary file back.",
      "parentUuid": "060cbbc2_7105978f",
      "range": {
        "startLine": 1704,
        "startChar": 0,
        "endLine": 1743,
        "endChar": 59
      },
      "revId": "36f847dcfa25a6852dd6ee25daaeba11a093a67d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd8b190d_75f6706a",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 4
      },
      "lineNbr": 1743,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-27T16:21:16Z",
      "side": 1,
      "message": "That\u0027s a good start.  I still haven\u0027t seen an answer to why this is a physical file, and isn\u0027t being read from dbus.",
      "parentUuid": "b56773ea_531a0b1b",
      "range": {
        "startLine": 1704,
        "startChar": 0,
        "endLine": 1743,
        "endChar": 59
      },
      "revId": "36f847dcfa25a6852dd6ee25daaeba11a093a67d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a474d5ed_247d9485",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 4
      },
      "lineNbr": 1743,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2021-01-27T21:50:00Z",
      "side": 1,
      "message": "If the question is about why there\u0027s not a phosphor-logging dbus method to get the file, I assume it was determined to add the file path property to phosphor-logging instead of an offload/read-file method. Just guessing that maybe there\u0027s not a desire to expose the ability to extract the log files using dbus, only through bmcweb.\n\nAdding encoder with: https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/40067",
      "parentUuid": "fd8b190d_75f6706a",
      "range": {
        "startLine": 1704,
        "startChar": 0,
        "endLine": 1743,
        "endChar": 59
      },
      "revId": "36f847dcfa25a6852dd6ee25daaeba11a093a67d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "747d1084_69744cb6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-20T19:43:03Z",
      "side": 1,
      "message": "Work... in .... limbo?  ðŸ˜„",
      "range": {
        "startLine": 9,
        "startChar": 16,
        "endLine": 9,
        "endChar": 19
      },
      "revId": "554ba91d617cd911cfc6ccdeb074e045bc3b1152",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28795d94_b1b8d38f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-22T20:46:27Z",
      "side": 1,
      "message": "Unintentional, but not inaccurate haha",
      "parentUuid": "747d1084_69744cb6",
      "range": {
        "startLine": 9,
        "startChar": 16,
        "endLine": 9,
        "endChar": 19
      },
      "revId": "554ba91d617cd911cfc6ccdeb074e045bc3b1152",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbfc9dd5_5c1a8918",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-20T19:43:03Z",
      "side": 1,
      "message": "Scenario I\u0027m imagining here given this design, and something we need to consider:\n\n1. User boots up bmc, works great, it returns urls without main_.\n2. User plugs in a device that has aggregation supported, and BAM\nsuddenly all the URIs for things that didn\u0027t change now change.\n\nThis doesn\u0027t really match up with the redfish \"should\" statements around stability of URI in this regard, so I don\u0027t think as stated, this is going to work.\n\nNow, we could add \"main_\" to all local resources in all cases, but then we make people made by changing URIs, which is technically legal to do, but we have enough docs and examples that did it wrong, I don\u0027t really want to hold up your patch for doing all that work, nor do I want to push you in charge of cleaning up a mess you didn\u0027t cause.\n\n\nMy thinking in this regard is:\n1. Leave the existing resources alone.  this has the least impact to users.\n2. Come up with a unique prefix that we can reasonably assume a user wouldn\u0027t put in their device name (some magic garbage characters might be good here).\n3. if an ID starts with \"magic string\" we know that it\u0027s coming from the aggregated resource, otherwise we forward to the existing handlers.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 19
      },
      "revId": "554ba91d617cd911cfc6ccdeb074e045bc3b1152",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d14d9281_c2048e0e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-20T20:37:21Z",
      "side": 1,
      "message": "What if we just include \"main_\" if the aggregation compilation option is enabled?  The existence (or lack thereof) of satellite configs would have no bearing on if we include the prefix.\n\nIn this way the URIs on the aggregating BMC don\u0027t change when a new device is plugged in.  Plus, the prefix addition is hidden behind a compiler option so you\u0027d have to purposefully opt into changing the URIs.",
      "parentUuid": "cbfc9dd5_5c1a8918",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 19
      },
      "revId": "554ba91d617cd911cfc6ccdeb074e045bc3b1152",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25fd4085_dbcf7bdb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-20T20:45:30Z",
      "side": 1,
      "message": "\u003e What if we just include \"main_\" if the aggregation compilation option is enabled? \n\u003e The existence (or lack thereof) of satellite configs would have no bearing on if we include the prefix.\n\n\nI like your thought process, and I did think about that, but it has the same problem.  User flashes their BMC with a newer openbmc that supports aggregation, and BAM, suddenly all the IDs change.\n\n\n\u003e \n\u003e In this way the URIs on the aggregating BMC don\u0027t change when a new device is plugged in.  Plus, the prefix addition is hidden behind a compiler option so you\u0027d have to purposefully opt into changing the URIs.\n\nOur general rule is that all options are enabled by default, and should have no impact in the cases where they\u0027re not configured or you don\u0027t have the hardware.  This is to help development having to update 6000 systems and forks every time we add a new option.  Aggregation is disabled by default right now because it\u0027s arguably not stable, but that will change at some point as you keep working it.",
      "parentUuid": "d14d9281_c2048e0e",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 19
      },
      "revId": "554ba91d617cd911cfc6ccdeb074e045bc3b1152",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4b9ffb9_8d1f6ef0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-20T22:26:47Z",
      "side": 1,
      "message": "\u003e 1. User boots up bmc, works great, it returns urls without main_.\n\u003e 2. User plugs in a device that has aggregation supported, and BAM suddenly all the URIs for things that didn\u0027t change now change.\n\u003e \n\u003e This doesn\u0027t really match up with the redfish \"should\" statements around stability of URI in this regard, so I don\u0027t think as stated, this is going to work.\nAlright so we can\u0027t add \"main_\" depending on if satellite configs exist.\n\n\u003e I like your thought process, and I did think about that, but it has the same problem.  User flashes their BMC with a newer openbmc that supports aggregation, and BAM, suddenly all the IDs change.\nAlways adding \"main_\" seems like the only other option.  It sounds like there isn\u0027t a way to include \"main_\" in this context without breaking everything at the point aggregation becomes the default.\n\nUpsetting a lot of people would not be the only issue with always including \"main_\".  If we were to eventually add main_ by default then things will get hairy since the aggregated satellites would include main_ as well.  Aggregated URIs would like /redfish/v1/Chassis/aggregated0_main_someID and that\u0027s not very appealing.\n\nBased on this it sounds like there isn\u0027t an avenue to add \"main_\".  Really the only reason to add main is to avoid a collision where the aggregating BMC has a resource called something like \"/redfish/v1/Chassis/aggregated0_someID\" and the satellite has a Chassis called someID.  It would also appear as \"/redfish/v1/Chassis/aggregated0_someID\".\n\nI think you could make the argument that presumably you have control over the aggregating BMC so you would have to purposefully begin the name of a resource on your machine with \"aggregated0_\"",
      "parentUuid": "25fd4085_dbcf7bdb",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 19
      },
      "revId": "554ba91d617cd911cfc6ccdeb074e045bc3b1152",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "720a797b_264afe05",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-21T00:39:15Z",
      "side": 1,
      "message": "\u003e \u003e 1. User boots up bmc, works great, it returns urls without main_.\n\u003e \u003e 2. User plugs in a device that has aggregation supported, and BAM suddenly all the URIs for things that didn\u0027t change now change.\n\u003e \u003e \n\u003e \u003e This doesn\u0027t really match up with the redfish \"should\" statements around stability of URI in this regard, so I don\u0027t think as stated, this is going to work.\n\u003e Alright so we can\u0027t add \"main_\" depending on if satellite configs exist.\n\u003e \n\u003e \u003e I like your thought process, and I did think about that, but it has the same problem.  User flashes their BMC with a newer openbmc that supports aggregation, and BAM, suddenly all the IDs change.\n\u003e Always adding \"main_\" seems like the only other option.  It sounds like there isn\u0027t a way to include \"main_\" in this context without breaking everything at the point aggregation becomes the default.\n\u003e \n\u003e Upsetting a lot of people would not be the only issue with always including \"main_\".  If we were to eventually add main_ by default then things will get hairy since the aggregated satellites would include main_ as well.\n\u003e  Aggregated URIs would like /redfish/v1/Chassis/aggregated0_main_someID and that\u0027s not very appealing.\n\nReason #193763 why URIs are supposed to be opaque, and not represent any actual information.\n\n\u003e \n\u003e Based on this it sounds like there isn\u0027t an avenue to add \"main_\".  Really the only reason to add main is to avoid a collision where the aggregating BMC has a resource called something like \"/redfish/v1/Chassis/aggregated0_someID\" and the satellite has a Chassis called someID.  It would also appear as \"/redfish/v1/Chassis/aggregated0_someID\".\n\n\nThat is a very valid concern, and why I would probably argue we shouldn\u0027t use \"aggregated\" either, we should use something more.... special\n\n\u003e \n\u003e I think you could make the argument that presumably you have control over the aggregating BMC so you would have to purposefully begin the name of a resource on your machine with \"aggregated0_\"\n\nYep, that\u0027s the thinking, and even that, in theory we can mitigate against.  We could just have the existing dbus collections outright reject any resources that start with whatever magic keyword we use, then there\u0027s no way you can even attack it if you were nefarious and doing it on purpose, your resources just wouldn\u0027t\u0027 show up.",
      "parentUuid": "d4b9ffb9_8d1f6ef0",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 19
      },
      "revId": "554ba91d617cd911cfc6ccdeb074e045bc3b1152",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "681c117a_ceb80e91",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-22T20:46:27Z",
      "side": 1,
      "message": "\u003e \u003e Based on this it sounds like there isn\u0027t an avenue to add \"main_\".  Really the only reason to add main is to avoid a collision where the aggregating BMC has a resource called something like \"/redfish/v1/Chassis/aggregated0_someID\" and the satellite has a Chassis called someID.  It would also appear as \"/redfish/v1/Chassis/aggregated0_someID\".\n\u003e That is a very valid concern, and why I would probably argue we shouldn\u0027t use \"aggregated\" either, we should use something more.... special\nIt\u0027s not very special, but I like that it obviously shows that the resource belongs to a satellite BMC.  Off the top of my head I can\u0027t think of a reason that a user would arbitrary choose a local identifier that begins with aggregated.  If we enforce this through the dbus collections like you describe later then it feels like that reduces need to pick a keyword that is overly special.  Saying to users \"don\u0027t begin resource names with \u0027aggregated\u0027\" seems reasonable.\n\n\n\u003e \u003e I think you could make the argument that presumably you have control over the aggregating BMC so you would have to purposefully begin the name of a resource on your machine with \"aggregated0_\"\n\u003e Yep, that\u0027s the thinking, and even that, in theory we can mitigate against.  We could just have the existing dbus collections outright reject any resources that start with whatever magic keyword we use, then there\u0027s no way you can even attack it if you were nefarious and doing it on purpose, your resources just wouldn\u0027t\u0027 show up.\nAlong these lines we could change aggregated resource IDs into \"aggregated\u003cvalue chosen at runtime\u003e_\u003coriginal ID\u003e\".  The aggregated prefixes would become \"aggregated0_\", \"aggregated1_\", etc.  It\u0027s the same form as before, but we don\u0027t allow the HW config to set the prefix value.  We\u0027d just increment that value as we found satellite configs.  We could match against \"aggregated\" and ignore the value for the purpose of D-Bus matching.",
      "parentUuid": "720a797b_264afe05",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 19
      },
      "revId": "554ba91d617cd911cfc6ccdeb074e045bc3b1152",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ff4865a_f4638a48",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-23T16:00:24Z",
      "side": 1,
      "message": "\u003e \u003e \u003e Based on this it sounds like there isn\u0027t an avenue to add \"main_\".  Really the only reason to add main is to avoid a collision where the aggregating BMC has a resource called something like \"/redfish/v1/Chassis/aggregated0_someID\" and the satellite has a Chassis called someID.  It would also appear as \"/redfish/v1/Chassis/aggregated0_someID\".\n\u003e \u003e That is a very valid concern, and why I would probably argue we shouldn\u0027t use \"aggregated\" either, we should use something more.... special\n\u003e It\u0027s not very special, but I like that it obviously shows that the resource belongs to a satellite BMC.  Off the top of my head I can\u0027t think of a reason that a user would arbitrary choose a local identifier that begins with aggregated.\n\nLots of sensors are called \"aggregated\" for margin sensors today (we call them fleeting, but regardless).  If aggregated is what we want, that probably works.\n\n\u003e  If we enforce this through the dbus collections like you describe later then it feels like that reduces need to pick a keyword that is overly special.  Saying to users \"don\u0027t begin resource names with \u0027aggregated\u0027\" seems reasonable.\n\nAgreed.  I\u0027d like us to come up with at least a couple other names just so we can say we tried and thought about it hard, because realistically once we pick the name, it\u0027s forever.\n\n\u003e \n\u003e \n\u003e \u003e \u003e I think you could make the argument that presumably you have control over the aggregating BMC so you would have to purposefully begin the name of a resource on your machine with \"aggregated0_\"\n\u003e \u003e Yep, that\u0027s the thinking, and even that, in theory we can mitigate against.  We could just have the existing dbus collections outright reject any resources that start with whatever magic keyword we use, then there\u0027s no way you can even attack it if you were nefarious and doing it on purpose, your resources just wouldn\u0027t\u0027 show up.\n\u003e Along these lines we could change aggregated resource IDs into \"aggregated\u003cvalue chosen at runtime\u003e_\u003coriginal ID\u003e\".  The aggregated prefixes would become \"aggregated0_\", \"aggregated1_\", etc.  It\u0027s the same form as before, but we don\u0027t allow the HW config to set the prefix value.  We\u0027d just increment that value as we found satellite configs.  We could match against \"aggregated\" and ignore the value for the purpose of D-Bus matching.\n\nYup, you got it.  That gives us a way to identify an aggregated resource without,  having to hit dbus or the cache, which means the 404 handler can be smarter, and we can have separate paths for \"aggregated resource 404ed\", versus \"this route 404ed\"",
      "parentUuid": "681c117a_ceb80e91",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 19
      },
      "revId": "554ba91d617cd911cfc6ccdeb074e045bc3b1152",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d874f36e_dbcd545d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-25T17:52:40Z",
      "side": 1,
      "message": "\u003e \u003e \u003e \u003e Based on this it sounds like there isn\u0027t an avenue to add \"main_\".  Really the only reason to add main is to avoid a collision where the aggregating BMC has a resource called something like \"/redfish/v1/Chassis/aggregated0_someID\" and the satellite has a Chassis called someID.  It would also appear as \"/redfish/v1/Chassis/aggregated0_someID\".\n\u003e \u003e \u003e That is a very valid concern, and why I would probably argue we shouldn\u0027t use \"aggregated\" either, we should use something more.... special\n\u003e \u003e It\u0027s not very special, but I like that it obviously shows that the resource belongs to a satellite BMC.  Off the top of my head I can\u0027t think of a reason that a user would arbitrary choose a local identifier that begins with aggregated.\n\u003e Lots of sensors are called \"aggregated\" for margin sensors today (we call them fleeting, but regardless).  If aggregated is what we want, that probably works.\nSounds good.\n\n\u003e \u003e  If we enforce this through the dbus collections like you describe later then it feels like that reduces need to pick a keyword that is overly special.  Saying to users \"don\u0027t begin resource names with \u0027aggregated\u0027\" seems reasonable.\n\u003e Agreed.  I\u0027d like us to come up with at least a couple other names just so we can say we tried and thought about it hard, because realistically once we pick the name, it\u0027s forever.\nFair enough, a few others ones I can think of are \"satellite\", \"remote\", \"external\".  My preference is still \"aggregated\".\n\n\u003e \u003e \u003e \u003e I think you could make the argument that presumably you have control over the aggregating BMC so you would have to purposefully begin the name of a resource on your machine with \"aggregated0_\"\n\u003e \u003e \u003e Yep, that\u0027s the thinking, and even that, in theory we can mitigate against.  We could just have the existing dbus collections outright reject any resources that start with whatever magic keyword we use, then there\u0027s no way you can even attack it if you were nefarious and doing it on purpose, your resources just wouldn\u0027t\u0027 show up.\n\u003e \u003e Along these lines we could change aggregated resource IDs into \"aggregated\u003cvalue chosen at runtime\u003e_\u003coriginal ID\u003e\".  The aggregated prefixes would become \"aggregated0_\", \"aggregated1_\", etc.  It\u0027s the same form as before, but we don\u0027t allow the HW config to set the prefix value.  We\u0027d just increment that value as we found satellite configs.  We could match against \"aggregated\" and ignore the value for the purpose of D-Bus matching.\n\u003e Yup, you got it.  That gives us a way to identify an aggregated resource without,  having to hit dbus or the cache, which means the 404 handler can be smarter, and we can have separate paths for \"aggregated resource 404ed\", versus \"this route 404ed\"\nI don\u0027t think we\u0027d necessarily even need an explicit separate path for \"aggregated resource 404ed\".  If it\u0027s for an individual resource then we\u0027d not need to actually handle it on the aggregator since we don\u0027t want to write a 404 to AsyncResp because we know AsyncResp is going to be overwritten by the response from the satellite.  We could just return right after we begin the process of forwarding the request to the satellite BMC.  This also saves us from having to create duplicate BMCWEB_ROUTE()\u0027s for each supported resource like \"/redfish/v1/Chassis/aggregated\u003cstr\u003e/\".\n\nIf the request is for a resource collection then we\u0027d just use the normal handler since the prefixes wouldn\u0027t be included in the URI.",
      "parentUuid": "4ff4865a_f4638a48",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 19
      },
      "revId": "554ba91d617cd911cfc6ccdeb074e045bc3b1152",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
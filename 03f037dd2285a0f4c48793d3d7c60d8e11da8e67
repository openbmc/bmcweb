{
  "comments": [
    {
      "key": {
        "uuid": "bdffc168_4c473f02",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1019,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-22T19:12:49Z",
      "side": 1,
      "message": "operator[] creates the key if it doesn\u0027t exist.  This is almost certainly not the behavior you want.  Use find.",
      "range": {
        "startLine": 1019,
        "startChar": 36,
        "endLine": 1019,
        "endChar": 72
      },
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37eb41fe_4df12e6c",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1019,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2021-05-11T14:58:02Z",
      "side": 1,
      "message": "Now when we use chain \"BootSource-\u003eBootMode-\u003eBootType\"\nThis would be always created in \"dbusToRfBootSource\" function",
      "parentUuid": "bdffc168_4c473f02",
      "range": {
        "startLine": 1019,
        "startChar": 36,
        "endLine": 1019,
        "endChar": 72
      },
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67f01af4_9511ad02",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1024,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-22T19:12:49Z",
      "side": 1,
      "message": "common error #12.",
      "range": {
        "startLine": 1024,
        "startChar": 49,
        "endLine": 1024,
        "endChar": 57
      },
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9aed4bc7_da96a10a",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1024,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2021-04-22T19:40:09Z",
      "side": 1,
      "message": "Isn\u0027t it a percise matching?\nOr am I looking at the wrong API:\nhttps://json.nlohmann.me/api/basic_json/contains/",
      "parentUuid": "67f01af4_9511ad02",
      "range": {
        "startLine": 1024,
        "startChar": 49,
        "endLine": 1024,
        "endChar": 57
      },
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b4c0b60_d91dd095",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1027,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-04-22T18:54:54Z",
      "side": 1,
      "message": "This is all asynch stuff, are we really guaranteed that getBootType() has completed by the time we get here?",
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a3a6ab2_aabfdd17",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1027,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-22T19:12:49Z",
      "side": 1,
      "message": "+1.  This is an instance of common error #7.",
      "parentUuid": "5b4c0b60_d91dd095",
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21b0a26d_a4d1477e",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1027,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2021-04-22T19:57:28Z",
      "side": 1,
      "message": "How should I handle this check in this case?\nCan you provide me some help of how I should resolve this problem.",
      "parentUuid": "8a3a6ab2_aabfdd17",
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3cec1a7_430bdd22",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1027,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-04-28T15:25:40Z",
      "side": 1,
      "message": "If both are really needed then you\u0027ll need to embed the asynch call within the other asynch call and execute this logic in the callback at the bottom of the stack that has both variables figured out.",
      "parentUuid": "21b0a26d_a4d1477e",
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41d71603_cfe8eb0a",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1027,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2021-05-11T12:49:51Z",
      "side": 1,
      "message": "If it is needed to be done the check above also has this mistake. I mean:\n```\nif (aResp-\u003eres.jsonValue[\"Boot\"][\"BootSourceOverrideTarget\"] \u003d\u003d \"None\"\n```\nBecause this code checks against \"None\" value which can be obtained only from the `dbusToRfBootSource` function which is executed in a separate async call for the Dbus \"xyz.openbmc_project.Control.Boot.Source\" interface.\n\nIn this case it seems like all the calls should be chainloaded:\n```\nBootSource-\u003eBootMode-\u003eBootType\n```\n_____________\n\nThis is the example of the flaws in a current OpenBMC boot override design that I\u0027ve tried to highlight recently in a Discord.\nBecause there is no Enable/Disable flag for the boot override object on a Dbus, bmcweb and phosphor-ipmid have to do weird stuff like this. And they solve this problem in a separate ways: (speaking in terms of bmcweb)\n\nbmcweb:\n```\n\"BootSourceOverrideEnabled\u003dDisabled\" \u003d \"BootSourceOverrideMode\u003dUEFI\" + \"BootSourceOverrideTarget\u003dNone\"\n```\nipmid:\n```\n\"BootSourceOverrideEnabled\" can\u0027t be \"Disabled\", it is always \"Once\" or \"Continuous\"\n```",
      "parentUuid": "c3cec1a7_430bdd22",
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "361d043f_8c21a5e7",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1027,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2021-05-11T14:58:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "41d71603_cfe8eb0a",
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19e90649_cae64297",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1031,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-22T19:12:49Z",
      "side": 1,
      "message": "?  If the mode isn\u0027t UEFI, we completely ignore the param?  That doesn\u0027t seem right at all.",
      "range": {
        "startLine": 1031,
        "startChar": 0,
        "endLine": 1031,
        "endChar": 31
      },
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b28283a5_75d9bf07",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1031,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2021-04-22T19:26:30Z",
      "side": 1,
      "message": "This part of code is trying to describe \"BootSourceOverrideEnabled\u003dDisabled\" state.\nCurrently there is no interface in the Settings object that can provide such functionality.\nSo the code that was here before used a logic that if the \"BootSourceOverrideTarget\" equals \"None\" (\u003dis in the default state) then \"BootSourceOverrideEnabled\" should be reported as \"Disabled\".\nIf we add Legacy/EFI selector to this context, we can report \"BootSourceOverrideTarget\u003dDisabled\" only when both \"BootSourceOverrideTarget\u003dNone\" and \"BootSourceOverrideMode\u003dUEFI\" (as it is our new default state).",
      "parentUuid": "19e90649_cae64297",
      "range": {
        "startLine": 1031,
        "startChar": 0,
        "endLine": 1031,
        "endChar": 31
      },
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d83340f_336e5417",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1375,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-04-22T18:54:54Z",
      "side": 1,
      "message": "In case someone just directly tries to write this, and it\u0027s unsupported, should probably have some code like this (host_unreachable is what\u0027s returned when the D-Bus API is not found):\n\n                      if (ec.value() \u003d\u003d boost::asio::error::host_unreachable)\n                      {\n                          messages::resourceNotFound(asyncResp-\u003eres, \"Set\",\n                                                     \"BootType\");\n                          return;\n                      }\n  \n                      messages::internalError(asyncResp-\u003eres);\n                      return;",
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1da898bd_d4757682",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1375,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-22T19:12:49Z",
      "side": 1,
      "message": "+1.  Common error #11.",
      "parentUuid": "4d83340f_336e5417",
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3d767c9_1dbf21f5",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1375,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2021-05-11T14:58:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1da898bd_d4757682",
      "revId": "03f037dd2285a0f4c48793d3d7c60d8e11da8e67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
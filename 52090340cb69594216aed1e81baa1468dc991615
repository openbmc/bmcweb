{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "14935ebf_b3ff787e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2025-03-11T20:53:10Z",
      "side": 1,
      "message": "I rebased to resolve the merge conflict",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86979111_6662c5eb",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2025-03-12T21:25:01Z",
      "side": 1,
      "message": "With this, the accidental copy by doing lambda capture can be prevented. This is good.\n\nHowever, it makes also difficult to do the lambda capture (not for the purpose of copy).\n\n\nPreviously it can be done like\n```\n     [req, ...]() {    \n          // access via req. \n     }\n    or, \n     [req\u003dstd::move(req.copy(), ...](){ }\n```\n\nThis wouldn\u0027t work.\n\n\nSo, after this, to capture, it needs to create a shared_ptr\u003c\u003e to hold the copy of it.\n```\n     [req\u003dstd::make_shared\u003cRequest\u0026\u003e(req.copy(), ...]()\n     {  \n        // access via req-\u003e \n     }\n```\n\n\nOR \nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/78759 can make the lambda capture easier without duplicating it.\n\n```\n     [req{req.shared_from_this()}, ...]()\n     {  \n        // access via req-\u003e \n     }\n```",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f68e48c_444eaac9",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-03-12T21:39:00Z",
      "side": 1,
      "message": "\u003e With this, the accidental copy by doing lambda capture can be prevented. This is good.\n\u003e \n\u003e However, it makes also difficult to do the lambda capture (not for the purpose of copy).\n\u003e \n\u003e \n\u003e Previously it can be done like\n\u003e ```\n\u003e      [req, ...]() {    \n\u003e           // access via req. \n\u003e      }\n\u003e     or, \n\u003e      [req\u003dstd::move(req.copy(), ...](){ }\n\u003e ```\n\u003e \n\u003e This wouldn\u0027t work.\n\nRight....  That is roughly the point of this patch.  We should never really be capturing a full request in an async callback.  We know the structures that exist, it should not require IO to be able to parse a request to a more specific data structure.\n\n\u003e \n\u003e \n\u003e So, after this, to capture, it needs to create a shared_ptr\u003c\u003e to hold the copy of it.\n\u003e ```\n\u003e      [req\u003dstd::make_shared\u003cRequest\u0026\u003e(req.copy(), ...]()\n\u003e      {  \n\u003e         // access via req-\u003e \n\u003e      }\n\u003e ```\n\u003e \n\u003e \n\u003e OR \n\u003e https://gerrit.openbmc.org/c/openbmc/bmcweb/+/78759 can make the lambda capture easier without duplicating it.\n\u003e \n\u003e ```\n\u003e      [req{req.shared_from_this()}, ...]()\n\u003e      {  \n\u003e         // access via req-\u003e \n\u003e      }\n\u003e ```\n\nor\n\n[req \u003d req.copy()] ()....",
      "parentUuid": "86979111_6662c5eb",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0162c4d_22c1f909",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-03-12T21:39:58Z",
      "side": 1,
      "message": "I\u0027d also point out, it\u0027s intentional that we make this harder.  I see a large number of patches that make copies.  Even in our own code we have a few places where we make request copies that I didn\u0027t catch.  Every one of them is an opportunity to reduce our peak memory usage.",
      "parentUuid": "1f68e48c_444eaac9",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b50e6c9_30451f63",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2025-03-12T22:40:43Z",
      "side": 1,
      "message": "Understood and agreed -- about \"intentional that we make this harder\".\n\nHowever, my question is how can we capture it if needed (for the purpose of the lifetime of the request, not necessary for the copy) ?  With this copy() approach, the only way is to create a copy of it and make it as shared_ptr.",
      "parentUuid": "b0162c4d_22c1f909",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f96d82b1_60761386",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-03-26T23:44:38Z",
      "side": 1,
      "message": "\u003e Understood and agreed -- about \"intentional that we make this harder\".\n\u003e \n\u003e However, my question is how can we capture it if needed (for the purpose of the lifetime of the request, not necessary for the copy) ?\n\nWhen would that be needed?  The current lifetime of the request is however long the first callback handler lasts.  Once it\u0027s done, request is burned.\n\nSo I think the answer to your question is that you\u0027d just pass by reference in the first caller.  If you want to CHANGE the lifetime, that\u0027s a different question.\n\n\u003e  With this copy() approach, the only way is to create a copy of it and make it as shared_ptr.",
      "parentUuid": "0b50e6c9_30451f63",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7824d709_ff44e120",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-01T17:09:23Z",
      "side": 1,
      "message": "Myung,",
      "parentUuid": "f96d82b1_60761386",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db7a0782_47b3cab0",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-01T17:09:46Z",
      "side": 1,
      "message": "does this answer your question?  I\u0027m happy to chat more in another forum about this, and if there\u0027s changes needed, please let me know.",
      "parentUuid": "7824d709_ff44e120",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "857f1356_500e7bdb",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2025-04-01T19:26:05Z",
      "side": 1,
      "message": "Ed,\n\nUnfortunately, this does not work\n`[req \u003d req.copy()] ()....`\n\nIt is because\n```\noperator\u003d(const Request\u0026) \u003d delete\nprivate:L Request(const Request\u0026 other) \u003d default;\n```\n\nThen, the method that I can think of is\n```\n     [req\u003dstd::make_shared\u003cRequest\u0026\u003e(req.copy(), ...]()\n     {  \n        // access via req-\u003e \n     }\n```\n\nIt may look like a little awkward, but overall, I think this commit seems still better as we can prevent the undesired copy.\n\nIf you agree it, let merge this.",
      "parentUuid": "db7a0782_47b3cab0",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11855055_013f8231",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-01T19:50:25Z",
      "side": 1,
      "message": "[req(req.copy())] ()\n\nis what I would expect to work.",
      "parentUuid": "857f1356_500e7bdb",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88311ae0_460e4ec7",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2025-04-01T20:46:41Z",
      "side": 1,
      "message": "n my experiment, it does not work as the matching constructor is private.",
      "parentUuid": "11855055_013f8231",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a8db13d_0995b2ba",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-01T21:27:10Z",
      "side": 1,
      "message": "The error I see when I try that is that std::function is required to be copyable, and passing a non-copyable request into it violates that.  most of our utility functions capture by std::function now, and FWIW, this is EXACTLY the kind of bug we\u0027re trying to catch, where we\u0027re making expensive copies of large objects without realizing it (because the std::function is copied).\n\nIdeally we\u0027d move most of our helper functions to std::move_only_function, which would fix that.\n\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/79346\n\nbuilds, and is an example of copy working.",
      "parentUuid": "88311ae0_460e4ec7",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9361c6d4_b7b28d8e",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2025-04-02T17:34:52Z",
      "side": 1,
      "message": "It seems good after moving to std::move_only_function (https://gerrit.openbmc.org/c/openbmc/bmcweb/+/79347), and then this can be merged.",
      "parentUuid": "8a8db13d_0995b2ba",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1dab91c_5a53c266",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2025-04-02T17:40:52Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "9361c6d4_b7b28d8e",
      "revId": "52090340cb69594216aed1e81baa1468dc991615",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
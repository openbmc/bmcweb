{
  "comments": [
    {
      "key": {
        "uuid": "10302b2d_384d1d71",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 32,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T20:16:06Z",
      "side": 1,
      "message": "whitespace error, highlighted in bright pink on gerrit.",
      "range": {
        "startLine": 32,
        "startChar": 49,
        "endLine": 32,
        "endChar": 50
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b2e0dda_4fc38e0e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 32,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-25T10:53:33Z",
      "side": 1,
      "message": "I see, thank you.",
      "parentUuid": "10302b2d_384d1d71",
      "range": {
        "startLine": 32,
        "startChar": 49,
        "endLine": 32,
        "endChar": 50
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91663c05_a691b9d7",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 84,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T20:16:06Z",
      "side": 1,
      "message": "no need to initialize a variable, then immediately set it on the next line.  Just declare and set in a single line.",
      "range": {
        "startLine": 84,
        "startChar": 11,
        "endLine": 84,
        "endChar": 30
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42957c20_9b42a64e",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 84,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-25T10:53:33Z",
      "side": 1,
      "message": "Thank you for the suggestion.",
      "parentUuid": "91663c05_a691b9d7",
      "range": {
        "startLine": 84,
        "startChar": 11,
        "endLine": 84,
        "endChar": 30
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0819776a_58a008c5",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 85,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T20:16:06Z",
      "side": 1,
      "message": "Use bufferStr.size() to make clear that there isn\u0027t an overflow condition possible here.",
      "range": {
        "startLine": 85,
        "startChar": 60,
        "endLine": 85,
        "endChar": 75
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bba84ea4_e8218b36",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 85,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-25T10:53:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0819776a_58a008c5",
      "range": {
        "startLine": 85,
        "startChar": 60,
        "endLine": 85,
        "endChar": 75
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd4c285d_33bbe747",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 94,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T20:16:06Z",
      "side": 1,
      "message": "does this otherwise ever get hit in practice?  Could we just omit this branch?",
      "range": {
        "startLine": 94,
        "startChar": 14,
        "endLine": 94,
        "endChar": 49
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc28c8e8_cba58869",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 94,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-25T10:53:33Z",
      "side": 1,
      "message": "I didn\u0027t occur this issue in common use. We already handle the errors that gzread() return a value less than 0. I think it is fine to remove this branch.",
      "parentUuid": "bd4c285d_33bbe747",
      "range": {
        "startLine": 94,
        "startChar": 14,
        "endLine": 94,
        "endChar": 49
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9da0dbf_d4e05662",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 111,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T20:16:06Z",
      "side": 1,
      "message": "nit.  Declare this first to ensure that RVO can fire here.",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 111,
        "endChar": 44
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2569c4ce_2662ac33",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 111,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2021-08-23T21:24:53Z",
      "side": 1,
      "message": "Sorry I don\u0027t quite get this comment. Does the declare order affect RVO? I guess this is NRVO, so are you saying moving this declaration first will give the compiler more chance to do NRVO?\n\nBTW, we should move \"logEntry\" inside the loop, closer to where it is used.",
      "parentUuid": "e9da0dbf_d4e05662",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 111,
        "endChar": 44
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "621d699c_99e23234",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 111,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2021-08-26T04:50:13Z",
      "side": 1,
      "message": "Please move \"logEntry\" inside the loop.",
      "parentUuid": "2569c4ce_2662ac33",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 111,
        "endChar": 44
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dd21973_990f9f42",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 111,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-26T15:47:41Z",
      "side": 1,
      "message": "you should move log entry.  Last I understood, return value optimization will only fire if the returned variable is the first declaration in the function, so if you swap line 110 and 111, then RVO can work.",
      "parentUuid": "621d699c_99e23234",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 111,
        "endChar": 44
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7494b4c5_448ebb0f",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 111,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2021-08-27T05:47:09Z",
      "side": 1,
      "message": "Reading from https://docs.microsoft.com/en-us/previous-versions/ms364057(v\u003dvs.80)?redirectedfrom\u003dMSDN#sample-2-more-complex-sample, seems like NRVO doesn\u0027t rely on being the first declaration.",
      "parentUuid": "9dd21973_990f9f42",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 111,
        "endChar": 44
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd16fa4a_c5ea707b",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 111,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-27T07:16:48Z",
      "side": 1,
      "message": "Already move \"logEntry\" inside the loop and keep \"logEntries\" as the first declaration.",
      "parentUuid": "7494b4c5_448ebb0f",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 111,
        "endChar": 44
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "436b76c3_8feda81f",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 111,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-09-10T18:45:49Z",
      "side": 1,
      "message": "Nan,\nyou\u0027re reading from the MSVC compiler documentation.  We use gcc, which takes different paths to optimization, although my understanding could be wrong, I thought RVO required the return value to be the first value because otherwise the stack order would be wrong, which would require a move, thus defeating the optimization.",
      "parentUuid": "fd16fa4a_c5ea707b",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 111,
        "endChar": 44
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50d6ffb9_4b47ab0f",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 123,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T20:16:06Z",
      "side": 1,
      "message": "Wouldn\u0027t this cause our logs to be missing when multiple newlines are emitted in a row?",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 123,
        "endChar": 39
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9db61e1_02e0770f",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 123,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-25T10:53:33Z",
      "side": 1,
      "message": "I think this case has been handled. If the string is like \"Message1\\nMessage2\\n\\n\", then it will be split as \"Message1\", \"Message2\", and \"\", and the last one \"\" will be filtered.",
      "parentUuid": "50d6ffb9_4b47ab0f",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 123,
        "endChar": 39
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69ef4b7f_34ae2db8",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 123,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2021-08-25T19:17:46Z",
      "side": 1,
      "message": "I guess Ed\u0027s point is about whether we should keep consecutive newlines. There\u0027s no guarantee that console or kernel logs don\u0027t output consecutive newlines.\n\n```\nwhatever logs go here, followed by 3 newlines\\n\n\\n\nwhatever logs go here\n```\n\nIn this code, the above logs become\n\n```\nwhatever logs go here, followed by 3 newlines\\n\nwhatever logs go here\n```\n\nI suggest we not delete these newlines. \n\nTo do that, IIUC, we can store the previous delimiter, when logEntry is empty \u0026\u0026 the previous delimiter is not \u0027\\r\u0027 \u0026\u0026 the current delimiter is not \u0027\\n\u0027, we just push back a \"\\n\".\n\nSo we have\n1. \"\\r\\n\": act as a single delimiter\n2. \"\\n\\n\": a \"\\n\" is collected as a log\n3. \"\\n\\r\": a \"\\n\" is collected as a log\n4. \"\\r\\r\": a \"\\n\" is collected as a log",
      "parentUuid": "b9db61e1_02e0770f",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 123,
        "endChar": 39
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfa61371_6a261bae",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 15
      },
      "lineNbr": 123,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-27T07:16:48Z",
      "side": 1,
      "message": "Add a checker to handle consecutive delimiters.",
      "parentUuid": "69ef4b7f_34ae2db8",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 123,
        "endChar": 39
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23f966a6_69f318e2",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1836,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T20:16:06Z",
      "side": 1,
      "message": "Doesn\u0027t this fail if the number of files is \u003e 10?\n\n\nie log2 will be sorted after log12.  Are we guaranteed that these are zero padded?  if so, how many pad digits?",
      "range": {
        "startLine": 1832,
        "startChar": 0,
        "endLine": 1836,
        "endChar": 17
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a7dfbdf_f94a3284",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1836,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-25T10:53:33Z",
      "side": 1,
      "message": "We use logrotate to handle the log files. they are appended with a \".#\" that is higher for the older logs. In our settings we don\u0027t expect more than 10 log files, so I just sort the list to get them in order.",
      "parentUuid": "23f966a6_69f318e2",
      "range": {
        "startLine": 1832,
        "startChar": 0,
        "endLine": 1836,
        "endChar": 17
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36291bed_dc003fba",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1836,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2021-08-26T04:50:13Z",
      "side": 1,
      "message": "This should be fixed. The codes running here shouldn\u0027t make assumption on the number of log files. Reading from https://github.com/logrotate/logrotate/issues/224, seems like logrotate doesn\u0027t pad zip files. If that\u0027s the case, we should implement codes to compare numeric strings without padding, which should be straightforward: \n\n```\n// No leading zeros\n[](const std::string\u0026 suffix1, const std::string\u0026 suffix2) -\u003e bool {\n  return std::forward_as_tuple(suffix1.size(), suffix1) \u003e std::forward_as_tuple(suffix2.size(), suffix2);\n}; \n```",
      "parentUuid": "3a7dfbdf_f94a3284",
      "range": {
        "startLine": 1832,
        "startChar": 0,
        "endLine": 1836,
        "endChar": 17
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "134044f2_dda994ec",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1836,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-27T07:16:48Z",
      "side": 1,
      "message": "Follow the comment to modify the sort algorithm.",
      "parentUuid": "36291bed_dc003fba",
      "range": {
        "startLine": 1832,
        "startChar": 0,
        "endLine": 1836,
        "endChar": 17
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8474dac0_f13663e5",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1853,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T20:16:06Z",
      "side": 1,
      "message": "I didn\u0027t think we generally added \"Entries\" to our logger names.  considering this is a single entry, the plural doesn\u0027t seem like it makes sense.",
      "range": {
        "startLine": 1853,
        "startChar": 29,
        "endLine": 1853,
        "endChar": 36
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c8c76c1_b5a0104a",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1853,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T20:16:06Z",
      "side": 1,
      "message": "Why camel case in a user-facing string?",
      "range": {
        "startLine": 1853,
        "startChar": 18,
        "endLine": 1853,
        "endChar": 28
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "095795fc_721f5938",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1853,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-25T10:53:33Z",
      "side": 1,
      "message": "I agree about that. Modify the name of log entry.",
      "parentUuid": "8474dac0_f13663e5",
      "range": {
        "startLine": 1853,
        "startChar": 29,
        "endLine": 1853,
        "endChar": 36
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d2e1bd5_5d30b7a2",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1853,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-25T10:53:33Z",
      "side": 1,
      "message": "Modify the name here.",
      "parentUuid": "9c8c76c1_b5a0104a",
      "range": {
        "startLine": 1853,
        "startChar": 18,
        "endLine": 1853,
        "endChar": 28
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fb3d174_df8fadee",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1856,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T20:16:06Z",
      "side": 1,
      "message": "Are we sure this is right?",
      "range": {
        "startLine": 1856,
        "startChar": 23,
        "endLine": 1856,
        "endChar": 28
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "708ac1f1_fce0e5b3",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1856,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-25T10:53:33Z",
      "side": 1,
      "message": "After I do more search about entry type, I think host logs are more like OEM-defined format. Modify the level to \"Oem\".",
      "parentUuid": "8fb3d174_df8fadee",
      "range": {
        "startLine": 1856,
        "startChar": 23,
        "endLine": 1856,
        "endChar": 28
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd9883bd_d83d55fa",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1927,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T20:16:06Z",
      "side": 1,
      "message": "This reads in all files in all cases;  What happens if these logs get too big to read into memory?  I suspect we need some arbitrary limits on the output size here so that we can quit early.",
      "range": {
        "startLine": 1917,
        "startChar": 0,
        "endLine": 1927,
        "endChar": 17
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b08a68c_d37ce2d7",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1927,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-25T10:53:33Z",
      "side": 1,
      "message": "I defined the limit as 256k which calculate from double of 8 files * 16kb, and the value is based on our logrotate settings.",
      "parentUuid": "cd9883bd_d83d55fa",
      "range": {
        "startLine": 1917,
        "startChar": 0,
        "endLine": 1927,
        "endChar": 17
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e66dbb0_e69d1192",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1932,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T20:16:06Z",
      "side": 1,
      "message": "This would imply that we\u0027re going to push back a partially constructed message?  This might be ok, but we should call this out explicitly to make sure we\u0027re not disobeying crud semantics.",
      "range": {
        "startLine": 1929,
        "startChar": 0,
        "endLine": 1932,
        "endChar": 17
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc030b69_f62a86b1",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1932,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-25T10:53:33Z",
      "side": 1,
      "message": "Sorry I’m not sure I understand. I added a comment on the code here to describe that we use a getter to get last message.",
      "parentUuid": "1e66dbb0_e69d1192",
      "range": {
        "startLine": 1929,
        "startChar": 0,
        "endLine": 1932,
        "endChar": 17
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58bda000_238063ca",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1938,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T20:16:06Z",
      "side": 1,
      "message": "please read and understand COMMON_ERRORS.md.  This method (std::vector::at) is literally called out by name",
      "range": {
        "startLine": 1938,
        "startChar": 47,
        "endLine": 1938,
        "endChar": 49
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd7e432d_c61944a9",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1938,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2021-08-23T21:09:18Z",
      "side": 1,
      "message": "Hi Ed, do you mean this can leads to out_of_range? But we have boundary check above,\n\n```\nid \u003c std::min\u003cuint64_t\u003e(skip + top, logEntries.size())\n```",
      "parentUuid": "58bda000_238063ca",
      "range": {
        "startLine": 1938,
        "startChar": 47,
        "endLine": 1938,
        "endChar": 49
      },
      "revId": "83cfe7df311741791a13bd483348a38ac13b1eb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
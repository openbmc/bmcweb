{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a8c4ff8c_ff6009c5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 34,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-12-18T23:19:37Z",
      "side": 1,
      "message": "Can we test this latest patchset? \n@Abhilash can you help?",
      "revId": "b714df99e4713498a48c13931ad89f04c4730e41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10342d57_94a2b9eb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 34,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-18T23:30:12Z",
      "side": 1,
      "message": "Lets make sure everyone is ok with the changes I\u0027ve made before we spend a lot of time testing.  it\u0027s possible a trivialized a problem, but I think the patchset is right.",
      "parentUuid": "a8c4ff8c_ff6009c5",
      "revId": "b714df99e4713498a48c13931ad89f04c4730e41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1085cdb_86d77de7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 34,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-03T05:28:49Z",
      "side": 1,
      "message": "Since the move assignment worked in the testing, I am okay with the unique_ptr removal.",
      "parentUuid": "10342d57_94a2b9eb",
      "revId": "b714df99e4713498a48c13931ad89f04c4730e41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "015e2c79_123d9cfd",
        "filename": "http/http_client.hpp",
        "patchSetId": 6
      },
      "lineNbr": 387,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-03T05:28:49Z",
      "side": 1,
      "message": "I am still not convinced about the stream_truncated case. Is there any possibility for both stream_truncated error and parser-\u003eis_done() to be true? If not the simplest fix would be changing line 365 by removing the \"ec !\u003d stream_tucated check\".",
      "revId": "b714df99e4713498a48c13931ad89f04c4730e41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28f4adfe_bbe6691f",
        "filename": "http/http_client.hpp",
        "patchSetId": 6
      },
      "lineNbr": 387,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-03T18:11:05Z",
      "side": 1,
      "message": "\u003e Is there any possibility for both stream_truncated error and parser-\u003eis_done() to be true\n\nYes.  There are a number of webservers that do not close the TLS stream properly.  That\u0027s why this check was in there in the first place.  If you backtrack in the git blame logs, there might be more information in the commit that added it.",
      "parentUuid": "015e2c79_123d9cfd",
      "revId": "b714df99e4713498a48c13931ad89f04c4730e41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db0e82b5_e95b94ff",
        "filename": "http/http_client.hpp",
        "patchSetId": 6
      },
      "lineNbr": 387,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-04T05:04:02Z",
      "side": 1,
      "message": "That is my point. This happens only if one side closes the connection. Aren\u0027t we supposed to restart the connection in this case? If not what do we do with the pending redfish events for the server?",
      "parentUuid": "28f4adfe_bbe6691f",
      "revId": "b714df99e4713498a48c13931ad89f04c4730e41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af53de9e_2ed2385e",
        "filename": "http/http_client.hpp",
        "patchSetId": 6
      },
      "lineNbr": 387,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-04T21:02:57Z",
      "side": 1,
      "message": "we do restart the connection though?\n\n\u003e             state \u003d ConnState::recvFailed;\n            waitAndRetry();\n\n\nThe current pending event from the server is done, right?",
      "parentUuid": "db0e82b5_e95b94ff",
      "revId": "b714df99e4713498a48c13931ad89f04c4730e41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "775600d9_02f328e4",
        "filename": "http/http_client.hpp",
        "patchSetId": 6
      },
      "lineNbr": 387,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-05T05:19:02Z",
      "side": 1,
      "message": "The Current pending event may or may not reach the server. As long as there is no positive ack we should keep trying right? Moreover, there may be other events pending in the queue that require to be sent. So we should keep retrying anyway. To me, a stream truncation error should be considered a broken connection scenario and the retry should happen according to the retry policy.  \nIn the current implementation, if both parser-\u003eis_done() and stream truncation error are true, there is the possibility of not sending all pending events including(possibly) the current event.",
      "parentUuid": "af53de9e_2ed2385e",
      "revId": "b714df99e4713498a48c13931ad89f04c4730e41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0afbd7fb_15e0b6a5",
        "filename": "http/http_client.hpp",
        "patchSetId": 6
      },
      "lineNbr": 387,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-05T17:05:30Z",
      "side": 1,
      "message": "\u003e The Current pending event may or may not reach the server.\n\nIf the parser is done, that means that the server sent a response, which means that the server for SURE received the request, and just chose to drop the connection rather than cleanly closing ssl.\n\n\u003e As long as there is no positive ack we should keep trying right?\n\nGetting a positive return code from the server is a positive ACK.\n\n\u003e Moreover, there may be other events pending in the queue that require to be sent. So we should keep retrying anyway. To me, a stream truncation error should be considered a broken connection scenario and the retry should happen according to the retry policy.  \n\n\nKeep in mind, at one point in time we did not special case stream_truncated, and it caused issues for folks, so unless we have something backing up that what they found is no longer an issue, I\u0027d prefer we keep it.\n\nFWIW, at one point bmcweb itself didn\u0027t cleanly close ssl connections (and still doesn\u0027t in some cases).\n\n\u003e In the current implementation, if both parser-\u003eis_done() and stream truncation error are true, there is the possibility of not sending all pending events including(possibly) the current event.\n\nI\u0027m not following.  if is_done() is set, it means the server got the request, parsed it, did the action, and sent back a 2XX reply.  That certainly means that the server processed the event if it was able to formulate a reply.",
      "parentUuid": "775600d9_02f328e4",
      "revId": "b714df99e4713498a48c13931ad89f04c4730e41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b2313b6_3068742c",
        "filename": "http/http_client.hpp",
        "patchSetId": 6
      },
      "lineNbr": 387,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-08T07:22:31Z",
      "side": 1,
      "message": "understood. It was my mistake to assume that the pending request queue was held by the connection info class. It was part of the connection pool. So connection pool will take care of sending all requests in the queue eventually.",
      "parentUuid": "0afbd7fb_15e0b6a5",
      "revId": "b714df99e4713498a48c13931ad89f04c4730e41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d3f9ec0_8c2991bd",
        "filename": "http/http_client.hpp",
        "patchSetId": 6
      },
      "lineNbr": 628,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-12-19T06:25:03Z",
      "side": 1,
      "message": "don\u0027t know why waitAndRetry for ssl context creation failure. Will it succeed next time?",
      "revId": "b714df99e4713498a48c13931ad89f04c4730e41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ac0a266_26b7f8eb",
        "filename": "http/http_client.hpp",
        "patchSetId": 6
      },
      "lineNbr": 628,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-19T18:52:49Z",
      "side": 1,
      "message": "Given that connections can\u0027t be destroyed, we don\u0027t really have a way to mark a connection as in an error state and reset.\n\nwe would need something like this to have connections \"fail\" and destroy themselves automatically.\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/56711",
      "parentUuid": "3d3f9ec0_8c2991bd",
      "revId": "b714df99e4713498a48c13931ad89f04c4730e41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf2d62ca_14a5dba6",
        "filename": "http/http_client.hpp",
        "patchSetId": 6
      },
      "lineNbr": 628,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-03T05:28:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7ac0a266_26b7f8eb",
      "revId": "b714df99e4713498a48c13931ad89f04c4730e41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
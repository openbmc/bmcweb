{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "67603119_206748e4",
        "filename": "http/http_response.hpp",
        "patchSetId": 15
      },
      "lineNbr": 177,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-02T16:14:36Z",
      "side": 1,
      "message": "Is this important here that we construct a single string and append twice?\n\nDoes this chained concat generate temporary multiple strings?",
      "range": {
        "startLine": 177,
        "startChar": 8,
        "endLine": 177,
        "endChar": 19
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5282e259_c778907d",
        "filename": "http/http_response.hpp",
        "patchSetId": 15
      },
      "lineNbr": 177,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-02T17:04:37Z",
      "side": 1,
      "message": "In this case, I don\u0027t believe it does given the operator rules in c++, and clang-tidy doesn\u0027t warn on it.",
      "parentUuid": "67603119_206748e4",
      "range": {
        "startLine": 177,
        "startChar": 8,
        "endLine": 177,
        "endChar": 19
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d643ca7_fd25907c",
        "filename": "http/http_response.hpp",
        "patchSetId": 15
      },
      "lineNbr": 177,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-02T17:28:38Z",
      "side": 1,
      "message": "Ask a further question, do you know hwy this doesn\u0027t apply\n\nhttps://clang.llvm.org/extra/clang-tidy/checks/performance/inefficient-string-concatenation.html",
      "parentUuid": "5282e259_c778907d",
      "range": {
        "startLine": 177,
        "startChar": 8,
        "endLine": 177,
        "endChar": 19
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae101e71_4793742f",
        "filename": "http/http_response.hpp",
        "patchSetId": 15
      },
      "lineNbr": 177,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-02T18:58:04Z",
      "side": 1,
      "message": "Yes, but it requires understanding how the compiler breaks down the request.\n\n\"\\\"\" + intToHexString(hashval, 8) + \"\\\"\";\nis the line of code\n\nwhich decomposes into something like\n\n(OP std::string::operator+(const char*) (OP std::string::operator+(const char*)))\n\noperator+ has move semantics, which doesn\u0027t require a string copy, and it can reuse the memory in the meantime.  If I had instead written\n\nstd::string quote \u003d \"\\\"\";\nquote + intToHexString(hashval, 8) + quote;\n\nClang would\u0027ve triggered the warning.",
      "parentUuid": "1d643ca7_fd25907c",
      "range": {
        "startLine": 177,
        "startChar": 8,
        "endLine": 177,
        "endChar": 19
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b5af705_2a1fd065",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-02T16:14:36Z",
      "side": 1,
      "message": "Hmm, is this really indented to be in this patch? You +2ed this patch? To me these changes are not relevant.",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78287bbd_1d95e927",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-02T17:06:25Z",
      "side": 1,
      "message": "I\u0027m not following how they\u0027re not relevant.  This function needed to be broken out so that we could do a comparison of the user values on line 2001, which is required for implementing this feature.  Can you elaborate on why this isn\u0027t relevant to this patch?",
      "parentUuid": "8b5af705_2a1fd065",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b37a094_e78e6156",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-02T17:28:38Z",
      "side": 1,
      "message": "Okay, rephrased. \"This commit implements that behavior for one handler ManagerAccount.\", do we expect every handler implement similar logic?\n\nThe previous if-none-match header handles all the resources, right?",
      "parentUuid": "78287bbd_1d95e927",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f47ab7b2_dd3c12a8",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-02T18:58:04Z",
      "side": 1,
      "message": "\u003e Okay, rephrased. \"This commit implements that behavior for one handler ManagerAccount.\", do we expect every handler implement similar logic?\n\nNot necessarily.  The spec doesn\u0027t REQUIRE it in all cases.\n\n\u003e \n\u003e The previous if-none-match header handles all the resources, right?\n\nCorrect, but that was able to be done generically for all requests with a direct comparison.  It\u0027s not clear to me in code how to implement if-none-match generically, and because it\u0027s only required for ManagerAccount, I did the minimum required to get us to pass protocol validator.",
      "parentUuid": "8b37a094_e78e6156",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3edeeca_49733fc0",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-02T19:00:54Z",
      "side": 1,
      "message": "That should\u0027ve read:\n\"It\u0027s not clear to me in code how to implement if-match generically\"",
      "parentUuid": "f47ab7b2_dd3c12a8",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb43a4ea_11e7903d",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-02T19:18:59Z",
      "side": 1,
      "message": "\u003e Not necessarily.  The spec doesn\u0027t REQUIRE it in all cases.\n\u003e  because it\u0027s only required for ManagerAccount\n\nHmm, where is that? Isn\u0027t If-Match an HTTP requirement?\n\nIIUC, Redfish-Protocol-Validator just happens to use certain resource to test this header. Like what they have done in Usercase-Validator: they don\u0027t test expand on every URL.\n\n\u003e I did the minimum required to get us to pass protocol validator\n\nI understood this that this commit can pass the test case in Redfish-Protocol-Validator",
      "parentUuid": "e3edeeca_49733fc0",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
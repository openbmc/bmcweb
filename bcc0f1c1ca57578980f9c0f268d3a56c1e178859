{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "67603119_206748e4",
        "filename": "http/http_response.hpp",
        "patchSetId": 15
      },
      "lineNbr": 177,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-02T16:14:36Z",
      "side": 1,
      "message": "Is this important here that we construct a single string and append twice?\n\nDoes this chained concat generate temporary multiple strings?",
      "range": {
        "startLine": 177,
        "startChar": 8,
        "endLine": 177,
        "endChar": 19
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5282e259_c778907d",
        "filename": "http/http_response.hpp",
        "patchSetId": 15
      },
      "lineNbr": 177,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-02T17:04:37Z",
      "side": 1,
      "message": "In this case, I don\u0027t believe it does given the operator rules in c++, and clang-tidy doesn\u0027t warn on it.",
      "parentUuid": "67603119_206748e4",
      "range": {
        "startLine": 177,
        "startChar": 8,
        "endLine": 177,
        "endChar": 19
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d643ca7_fd25907c",
        "filename": "http/http_response.hpp",
        "patchSetId": 15
      },
      "lineNbr": 177,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-02T17:28:38Z",
      "side": 1,
      "message": "Ask a further question, do you know hwy this doesn\u0027t apply\n\nhttps://clang.llvm.org/extra/clang-tidy/checks/performance/inefficient-string-concatenation.html",
      "parentUuid": "5282e259_c778907d",
      "range": {
        "startLine": 177,
        "startChar": 8,
        "endLine": 177,
        "endChar": 19
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae101e71_4793742f",
        "filename": "http/http_response.hpp",
        "patchSetId": 15
      },
      "lineNbr": 177,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-02T18:58:04Z",
      "side": 1,
      "message": "Yes, but it requires understanding how the compiler breaks down the request.\n\n\"\\\"\" + intToHexString(hashval, 8) + \"\\\"\";\nis the line of code\n\nwhich decomposes into something like\n\n(OP std::string::operator+(const char*) (OP std::string::operator+(const char*)))\n\noperator+ has move semantics, which doesn\u0027t require a string copy, and it can reuse the memory in the meantime.  If I had instead written\n\nstd::string quote \u003d \"\\\"\";\nquote + intToHexString(hashval, 8) + quote;\n\nClang would\u0027ve triggered the warning.",
      "parentUuid": "1d643ca7_fd25907c",
      "range": {
        "startLine": 177,
        "startChar": 8,
        "endLine": 177,
        "endChar": 19
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9a8f642_f76dcd35",
        "filename": "http/http_response.hpp",
        "patchSetId": 15
      },
      "lineNbr": 177,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-02T20:08:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ae101e71_4793742f",
      "range": {
        "startLine": 177,
        "startChar": 8,
        "endLine": 177,
        "endChar": 19
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b5af705_2a1fd065",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-02T16:14:36Z",
      "side": 1,
      "message": "Hmm, is this really indented to be in this patch? You +2ed this patch? To me these changes are not relevant.",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78287bbd_1d95e927",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-02T17:06:25Z",
      "side": 1,
      "message": "I\u0027m not following how they\u0027re not relevant.  This function needed to be broken out so that we could do a comparison of the user values on line 2001, which is required for implementing this feature.  Can you elaborate on why this isn\u0027t relevant to this patch?",
      "parentUuid": "8b5af705_2a1fd065",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b37a094_e78e6156",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-02T17:28:38Z",
      "side": 1,
      "message": "Okay, rephrased. \"This commit implements that behavior for one handler ManagerAccount.\", do we expect every handler implement similar logic?\n\nThe previous if-none-match header handles all the resources, right?",
      "parentUuid": "78287bbd_1d95e927",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f47ab7b2_dd3c12a8",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-02T18:58:04Z",
      "side": 1,
      "message": "\u003e Okay, rephrased. \"This commit implements that behavior for one handler ManagerAccount.\", do we expect every handler implement similar logic?\n\nNot necessarily.  The spec doesn\u0027t REQUIRE it in all cases.\n\n\u003e \n\u003e The previous if-none-match header handles all the resources, right?\n\nCorrect, but that was able to be done generically for all requests with a direct comparison.  It\u0027s not clear to me in code how to implement if-none-match generically, and because it\u0027s only required for ManagerAccount, I did the minimum required to get us to pass protocol validator.",
      "parentUuid": "8b37a094_e78e6156",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3edeeca_49733fc0",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-02T19:00:54Z",
      "side": 1,
      "message": "That should\u0027ve read:\n\"It\u0027s not clear to me in code how to implement if-match generically\"",
      "parentUuid": "f47ab7b2_dd3c12a8",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb43a4ea_11e7903d",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-02T19:18:59Z",
      "side": 1,
      "message": "\u003e Not necessarily.  The spec doesn\u0027t REQUIRE it in all cases.\n\u003e  because it\u0027s only required for ManagerAccount\n\nHmm, where is that? Isn\u0027t If-Match an HTTP requirement?\n\nIIUC, Redfish-Protocol-Validator just happens to use certain resource to test this header. Like what they have done in Usercase-Validator: they don\u0027t test expand on every URL.\n\n\u003e I did the minimum required to get us to pass protocol validator\n\nI understood this that this commit can pass the test case in Redfish-Protocol-Validator",
      "parentUuid": "e3edeeca_49733fc0",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3d8209d_8b8ea83f",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-02T20:04:52Z",
      "side": 1,
      "message": "\u003e \u003e Not necessarily.  The spec doesn\u0027t REQUIRE it in all cases.\n\u003e \u003e  because it\u0027s only required for ManagerAccount\n\u003e \n\u003e Hmm, where is that? Isn\u0027t If-Match an HTTP requirement?\n\nThe HTTP RFC does not specify it as a requirement on all endpoints.  There are LOTS of web servers that don\u0027t implement it.\n\n\u003e \n\u003e IIUC, Redfish-Protocol-Validator just happens to use certain resource to test this header. Like what they have done in Usercase-Validator: they don\u0027t test expand on every URL.\n\n\nThat\u0027s a really good point, we would have to add similar code elsewhere if we wanted to do this in more cases.  Can you think of a cleaner way to implement this?  That\u0027s why I originally put it up for review months ago.  I\u0027m happy to refactor if there\u0027s a cleaner way, but I\u0027m not seeing one at this moment.\n\n\u003e \n\u003e \u003e I did the minimum required to get us to pass protocol validator\n\u003e \n\u003e I understood this that this commit can pass the test case in Redfish-Protocol-Validator",
      "parentUuid": "bb43a4ea_11e7903d",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3b54460_e133ca44",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-02T20:15:18Z",
      "side": 1,
      "message": "\u003e Can you think of a cleaner way to implement this? \n\nI haven\u0027t thought into details, just throw my comments. Why do other maintainers think?\n\nIt\u0027s weird to me that users see different header behaviors across resources.",
      "parentUuid": "f3d8209d_8b8ea83f",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4961fc71_945ee6a8",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-02T20:41:56Z",
      "side": 1,
      "message": "kryzysztof already +1ed it.  I guess Gunnar hasn\u0027t looked at it yet.",
      "parentUuid": "e3b54460_e133ca44",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23b521f2_40acbf01",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-08T17:53:44Z",
      "side": 1,
      "message": "\u003e It\u0027s weird to me that users see different header behaviors across resources.\n\nNan, any more input here on what you think we should do?",
      "parentUuid": "4961fc71_945ee6a8",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e5dba20_dd748a35",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-08T18:39:50Z",
      "side": 1,
      "message": "I will let you decide. This inconsistency is bad. Just throw my rough ideas of a cleaner way: user can register a callback, like |updateUserValues| here, then most codes in |handleIfMatch| can be shared.\n\nI don\u0027t like blocking people because of some imperfection as I believe things can evolve with more iterations, as long as it doesn\u0027t introduce fatal mistakes. So I +1 this change.",
      "parentUuid": "23b521f2_40acbf01",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13044c22_30c910d4",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-08T19:11:41Z",
      "side": 1,
      "message": "So handleIfMatch should be put in a common layer?  That makes some sense to me, I can try to make that change.",
      "parentUuid": "7e5dba20_dd748a35",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "742e0f38_1b0eead7",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-08T21:41:51Z",
      "side": 1,
      "message": "👍",
      "parentUuid": "13044c22_30c910d4",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c95d0d4_688b4b3a",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-11T19:59:48Z",
      "side": 1,
      "message": "Take a look at what\u0027s up there now.  It has other compromises in that we have to make some copies of the Request object, but I think is more in line with what you were thinking?",
      "parentUuid": "742e0f38_1b0eead7",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5e22ea3_10136da5",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-14T23:45:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5c95d0d4_688b4b3a",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d5213bd_6a4400dd",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-12-06T21:09:27Z",
      "side": 1,
      "message": "I thought we hit problems in the past copying the Request object since it includes the body payload?\n\nhttps://github.com/openbmc/bmcweb/commit/a3e65892add97ce68816c1544c0aa21591239fc7\n\nhttps://discord.com/channels/775381525260664832/855566794994221117/888171699625934908",
      "parentUuid": "f5e22ea3_10136da5",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33285d6e_c22d6619",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-12-06T21:55:06Z",
      "side": 1,
      "message": "\u003e I thought we hit problems in the past copying the Request object since it includes the body payload?\n\nThat was because the Request payload for firmware update was quite large for non-tree updates (ie firmware) and was running the bmc out of ram.  I agree, the Request object copy isn\u0027t great.....  but I don\u0027t see a good way to effect a non-copy non-move without first cleaning up the mess in http/router authorization (which I\u0027ve been trying to do unsuccessfully for a while now), or making a copy.  In this case, we only make a copy if we\u0027re doing If-Match, and we should only do if-match on Redfish-tree operations, never on firmware update payloads, so I think we\u0027re safe as far as the external interface is concerned.  I can look at trying to clean up and get a copy-less version of this going, but this patch is already pretty large, and the external interface is correct, even if the code is sub-optimal.\n\nSeem reasonable?",
      "parentUuid": "8d5213bd_6a4400dd",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c66ed7f_ffca4be9",
        "filename": "redfish-core/lib/account_service.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1951,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-12-06T22:02:53Z",
      "side": 1,
      "message": "Yeah I am good. Getting Redfish protocol validator passes is great, we can incrementally improve this. Great work. Thanks!",
      "parentUuid": "33285d6e_c22d6619",
      "range": {
        "startLine": 1951,
        "startChar": 4,
        "endLine": 1951,
        "endChar": 20
      },
      "revId": "bcc0f1c1ca57578980f9c0f268d3a56c1e178859",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
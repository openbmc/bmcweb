{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "03473d1a_9d9f3a98",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 21
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-18T20:21:46Z",
      "side": 1,
      "message": "Sorry, I meant this one.  Technically this is incorrect to use the file_body here, as we should be decoding base64.  I suspect we can just remove it?",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 57
      },
      "revId": "97d205b5bc937518e7e210d08297debf2c598bbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aeb4e59a_cff6bf3b",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 21
      },
      "lineNbr": 13,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-08T08:44:47Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "03473d1a_9d9f3a98",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 57
      },
      "revId": "97d205b5bc937518e7e210d08297debf2c598bbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b222503e_0b2a52e9",
        "filename": "http/http_response.hpp",
        "patchSetId": 21
      },
      "lineNbr": 407,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-18T20:34:37Z",
      "side": 1,
      "message": "please use using here.",
      "range": {
        "startLine": 407,
        "startChar": 0,
        "endLine": 407,
        "endChar": 54
      },
      "revId": "97d205b5bc937518e7e210d08297debf2c598bbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3644fe4_93d3da1c",
        "filename": "http/http_response.hpp",
        "patchSetId": 21
      },
      "lineNbr": 407,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-09T07:22:36Z",
      "side": 1,
      "message": "done",
      "parentUuid": "b222503e_0b2a52e9",
      "range": {
        "startLine": 407,
        "startChar": 0,
        "endLine": 407,
        "endChar": 54
      },
      "revId": "97d205b5bc937518e7e210d08297debf2c598bbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0358585_abdfd185",
        "filename": "test/http/http_response_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-18T20:34:37Z",
      "side": 1,
      "message": "Why do we need a generator callback here?  I suspect this api can just accept a std::string_view for the content?\n\nI see one place where we use this callback with non static data, and that just generates a std::string.  Is suspect we cam make this simpler.",
      "range": {
        "startLine": 25,
        "startChar": 21,
        "endLine": 25,
        "endChar": 67
      },
      "revId": "97d205b5bc937518e7e210d08297debf2c598bbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bb85bf6_58e37026",
        "filename": "test/http/http_response_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 25,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-09T07:22:36Z",
      "side": 1,
      "message": "done",
      "parentUuid": "d0358585_abdfd185",
      "range": {
        "startLine": 25,
        "startChar": 21,
        "endLine": 25,
        "endChar": 67
      },
      "revId": "97d205b5bc937518e7e210d08297debf2c598bbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5c6383f_066da466",
        "filename": "test/http/http_response_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 74,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-18T20:34:37Z",
      "side": 1,
      "message": "several coding standard violations here.  Please take a pass at simplifying this code block, and once you\u0027ve gone through that, we can start address individual issues.",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 74,
        "endChar": 1
      },
      "revId": "97d205b5bc937518e7e210d08297debf2c598bbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8cf65da_586c5e70",
        "filename": "test/http/http_response_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 74,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-12-19T07:22:51Z",
      "side": 1,
      "message": "wanted to collect data from the buffer sequence. Since it is accumulating data from a buffer sequence, I used std::accumulate. Are you suggesting replacing it with a for loop?",
      "parentUuid": "c5c6383f_066da466",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 74,
        "endChar": 1
      },
      "revId": "97d205b5bc937518e7e210d08297debf2c598bbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "790dd68c_f7a2df8e",
        "filename": "test/http/http_response_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 74,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-03T20:06:52Z",
      "side": 1,
      "message": "If you think that would make this block easier to read.  as is, it\u0027s tough to read, so take your first pass at making it easier to read, and we can go from there.",
      "parentUuid": "b8cf65da_586c5e70",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 74,
        "endChar": 1
      },
      "revId": "97d205b5bc937518e7e210d08297debf2c598bbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a397ab0_22b051bc",
        "filename": "test/http/http_response_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 74,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-09T07:22:36Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "790dd68c_f7a2df8e",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 74,
        "endChar": 1
      },
      "revId": "97d205b5bc937518e7e210d08297debf2c598bbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01237e9a_dd905c8f",
        "filename": "test/http/http_response_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 192,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-03T20:06:52Z",
      "side": 1,
      "message": "Can we use something like https://www.boost.org/doc/libs/1_83_0/libs/beast/doc/html/beast/ref/boost__beast__file_posix.html\n\nso that we get RAII cleanup, instead of having to call fclose?",
      "revId": "97d205b5bc937518e7e210d08297debf2c598bbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38cde5da_81c1688d",
        "filename": "test/http/http_response_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 192,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-09T07:22:36Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "01237e9a_dd905c8f",
      "revId": "97d205b5bc937518e7e210d08297debf2c598bbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1e6165f_926fde68",
        "filename": "test/http/http_response_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 193,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-03T20:06:52Z",
      "side": 1,
      "message": "Why fileno on all of these?",
      "range": {
        "startLine": 193,
        "startChar": 23,
        "endLine": 193,
        "endChar": 29
      },
      "revId": "97d205b5bc937518e7e210d08297debf2c598bbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fe3c39aa_12d15596",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-29T19:20:32Z",
      "side": 1,
      "message": "In this example you gave, req is of type Request, but you\u0027ve made a shared pointer of boost::beast::http::request\u003cbmcweb::HttpBody\u003e (which is also called Request::req, so the confusion is warranted).\n\nWhy does making a member pointer shared help us here?",
      "range": {
        "startLine": 30,
        "startChar": 8,
        "endLine": 30,
        "endChar": 29
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25b2f578_3603ca40",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-30T21:56:28Z",
      "side": 1,
      "message": "The current code is already using the same naming.\n\nCurrent code:\n\n```\nstruct Request\n{\n      boost::beast::http::request\u003cbmcweb::HttpBody\u003e req;\n}\n```\nMany parts use `req` for `crow::Request` which makes `req.req` to be used.\n\nI think I\u0027ll not create `req()` but use only `req` as `Request` (and all internal body references are limited inside `Request`.\n\n```\nstruct Request\n{\n      std::shared_ptr\u003cboost::beast::http::request\u003cbmcweb::HttpBody\u003e\u003e reqPtr;\n}\n```\n\n\u003e Why does making a member pointer shared help us here?\n\nSame as using `std::shared_ptr\u003ccrow::Request\u003e`, this allows the content to be valid until all Requests are needed.\n\n```\nClass Connection\n{\n   crow::Request req;\n\n...\n  void handle()\n  {\n    req \u003d crow::Request(parser-\u003erelease(), reqEc);\n    \n    ....many depths...\n     crow::connections::systemBus-\u003easync_method_call(\n        [req, asyncResp, \u0026rule, ...]() {\n              ... (B) this part will still need \u003creq\u003e\n        });\n    ...\n    (A)\n    .... req may be no longer used (e.g. req.clear()).\n  }\n}\n ```\n\nIf not using `shared_ptr\u003c\u003e` (either in Request or its body), (B) would need a deep copy of Request (i.e. body will need to be kept).",
      "parentUuid": "fe3c39aa_12d15596",
      "range": {
        "startLine": 30,
        "startChar": 8,
        "endLine": 30,
        "endChar": 29
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13da2689_bd5cd646",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-29T19:20:32Z",
      "side": 1,
      "message": "But it\u0027s still a copy.  Why are we making a copy at all?",
      "range": {
        "startLine": 56,
        "startChar": 44,
        "endLine": 57,
        "endChar": 17
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5fdfb76_23559df0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 57,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-30T21:56:28Z",
      "side": 1,
      "message": "I meant - there are places that use copy operations of `Request` to keep the content valid for all related logics are done.\n(I think we\u0027ve tried to use \u0026req, or std::move(req), but those are not sufficiently covering all cases).\n\nIf so, it is better to make Request to be less overhead (esp, for the cases that have a larger content - e.g. code update image).\n\nFor it, this commit is suggesting to use shared_ptr\u003c\u003e in the body (`req`) of `Request`.\n\n```\nstruct Request\n{\n-    boost::beast::http::request\u003cbmcweb::HttpBody\u003e req;\n+    std::shared_ptr\u003cboost::beast::http::request\u003cbmcweb::HttpBody\u003e\u003e reqPtr;\n}\n```\n\nWith previous code, copy of Request is expensive, but copy of Request with the new code is not (as it is only incrementing a ref count of a shared_ptr).\n\nI\u0027ll rephrase the commit message.",
      "parentUuid": "13da2689_bd5cd646",
      "range": {
        "startLine": 56,
        "startChar": 44,
        "endLine": 57,
        "endChar": 17
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f558359a_be2adda1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-29T19:31:04Z",
      "side": 1,
      "message": "What is \"audit\"?",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 22
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0efa4e8e_59ee297c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-30T21:56:28Z",
      "side": 1,
      "message": "I meant it as a logging inside `completeRequest()` in our downstream.\nI\u0027ll remove this.",
      "parentUuid": "f558359a_be2adda1",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 22
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02b24c83_40c5bed9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 84,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-29T19:31:04Z",
      "side": 1,
      "message": "what is stmt?",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 84,
        "endChar": 14
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4e37423_0ec368e3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 84,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-30T21:56:28Z",
      "side": 1,
      "message": "I meant it as Debug logging statement",
      "parentUuid": "02b24c83_40c5bed9",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 84,
        "endChar": 14
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b586633_a4579344",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-29T19:31:04Z",
      "side": 1,
      "message": "We\u0027re making a pretty core change here, so in terms of testing I would expect:\n1. Redfish protocol validator to have no regressions (after a few patches get on master it\u0027s failing one test, that\u0027s fine).\n2. Redfish service validator to pass\n3. Http1 and Http2 requests to pass for GET/PATCH/POST\n4. the Webui to load without any new errors and work properly.\n5. KVM (Or some other websocket thing) to be working.\n\nThat seems like the minimum set of tests for a change this core.",
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94388e06_8acbddb9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-30T21:56:28Z",
      "side": 1,
      "message": "I\u0027ve tried \n- redfish service validator\n- http1/http2 GET/PATCH/POST\n- Webui\n\nI\u0027ll further look at the others.",
      "parentUuid": "5b586633_a4579344",
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af10a4b7_70ed9145",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-31T18:56:17Z",
      "side": 1,
      "message": "Redfish protocol validator is going to be important here.  It tests 404 handler, if-match handlers, and a bunch of other stuff.",
      "parentUuid": "94388e06_8acbddb9",
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e50580b_2c17b026",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-29T19:20:32Z",
      "side": 1,
      "message": "We already went through this same thing with Response, when we changed from everywhere using\n\nResponse\u0026\n\nto\n\nstd::shared_ptr\u003cResponse\u003e\n\nI\u0027m not sure why we\u0027re proposing something different here, where the internals make copies of objects instead of the externals.  We shouldn\u0027t be making copies at all (unless a copy is explicitly required).",
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b4bf15d_8af574ed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-30T21:56:28Z",
      "side": 1,
      "message": "I haven\u0027t investigated `Response` handling and I haven\u0027t changed it.  (I also did not observed the issue related to it).\n\nWhat I found is `Request` which seems copying \u0026 moving depending on the flows.\nIn one case, it causes the invalid content of it (i.e. `completeRequest()` esp on PATCH) as it is moved to `validatePrivilege()` async-call.\n\nAlthough the issue can be avoided by copying it, but it becomes too costly especially when `Request.req` is large (i.e. Code update).",
      "parentUuid": "6e50580b_2c17b026",
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56218a44_ebf959c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-31T18:28:59Z",
      "side": 1,
      "message": "\u003e I haven\u0027t investigated `Response` handling and I haven\u0027t changed it.  (I also did not observed the issue related to it).\n\nRight, because it was fixed a long time ago, but Response had this same lifetime problem, but to a much larger degree.\n\n\u003e \n\u003e What I found is `Request` which seems copying \u0026 moving depending on the flows.\n\u003e In one case, it causes the invalid content of it (i.e. `completeRequest()` esp on PATCH) as it is moved to `validatePrivilege()` async-call.\n\u003e \n\u003e Although the issue can be avoided by copying it, but it becomes too costly especially when `Request.req` is large (i.e. Code update).\n\nYep, so make everywhere that needs a copy use\n\nstd::shared_ptr\u003ccrow::Request\u003e\n\nand the issue is solved.",
      "parentUuid": "3b4bf15d_8af574ed",
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fecb434b_5641bf15",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-04-01T13:44:31Z",
      "side": 1,
      "message": "I agree.  I\u0027ll work on it",
      "parentUuid": "56218a44_ebf959c3",
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5d9f5d5_ebc8f39b",
        "filename": "http/http_request.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-29T19:20:32Z",
      "side": 1,
      "message": "Why would we make this a pointer instead of Request?",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 74
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f88daeae_ec1775dc",
        "filename": "http/http_request.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-30T21:56:28Z",
      "side": 1,
      "message": "You mean - `std::shared_ptr\u003ccrow::Request\u003e` and use it at the references areas.\nI have thought it, but there are so many places to change.\n\nChanging its body of Request to shared_ptr would cause less code change impacts to code change, but have the same/similar effects.\n\nIf we change to `std::shared_ptr\u003ccrow::Request\u003e`, the code changes would be\n- all or most `crow::Request\u0026` (esp on function args) would need to be changed to `std::shared_ptr\u003ccrow::Request\u003e\u0026`\u0027.\n- the code that use `req.` would need to be like `req-\u003e`.\n\nIf that\u0027s still preferred, I think we can do it after this.",
      "parentUuid": "f5d9f5d5_ebc8f39b",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 74
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e219cea2_5ebf48ad",
        "filename": "http/http_request.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-31T18:56:17Z",
      "side": 1,
      "message": "\u003e You mean - `std::shared_ptr\u003ccrow::Request\u003e` and use it at the references areas.\n\nYes, very similar to what\u0027s been done with Response.\n\n\u003e I have thought it, but there are so many places to change.\n\nIn theory none of the handlers have to change, right?  Just the core code?\n\n\u003e \n\u003e Changing its body of Request to shared_ptr would cause less code change impacts to code change, but have the same/similar effects.\n\nNo, it doesn\u0027t have similar effects, because it\u0027s still making a copy of Request for every invocation.  When we use shared_ptr, we make no copies.\n\n\u003e \n\u003e If we change to `std::shared_ptr\u003ccrow::Request\u003e`, the code changes would be\n\u003e - all or most `crow::Request\u0026` (esp on function args) would need to be changed to `std::shared_ptr\u003ccrow::Request\u003e\u0026`\u0027.\n\u003e - the code that use `req.` would need to be like `req-\u003e`.\n\nOnly in the core, not in handlers, right?\n\n\u003e \n\u003e If that\u0027s still preferred, I think we can do it after this.\n\nIf we do shared_ptr\u003cRequest\u003e, this change isn\u0027t required at all.",
      "parentUuid": "f88daeae_ec1775dc",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 74
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "515a7dcf_cf57a5aa",
        "filename": "http/http_request.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-04-01T13:44:31Z",
      "side": 1,
      "message": "\u003eYes, very similar to what\u0027s been done with Response.\n\nRight. It will be similar to asyncResp.\n\n\u003eOnly in the core, not in handlers, right?\n\nNot the main logics, but the places would be the area to hold it, and the areas of passing args etc.\n\n\u003eIf we do shared_ptr\u003cRequest\u003e, this change isn\u0027t required at all.\n\nYou mean - the change of body as shared_ptr is not needed if we do change req to shared_ptr.\nYes, I agree.  That was my original thought too. (I just chose this to reduce the total code changes).\n\nI\u0027ll work on making it as shared_ptr\u003ccrow::Request\u003e.",
      "parentUuid": "e219cea2_5ebf48ad",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 74
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5edd6baf_ded880d4",
        "filename": "http/http_request.hpp",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-01T17:00:08Z",
      "side": 1,
      "message": "\u003e \u003eYes, very similar to what\u0027s been done with Response.\n\u003e \n\u003e Right. It will be similar to asyncResp.\n\u003e \n\u003e \u003eOnly in the core, not in handlers, right?\n\u003e \n\u003e Not the main logics, but the places would be the area to hold it, and the areas of passing args etc.\n\u003e \n\u003e \u003eIf we do shared_ptr\u003cRequest\u003e, this change isn\u0027t required at all.\n\u003e \n\u003e You mean - the change of body as shared_ptr is not needed if we do change req to shared_ptr.\n\u003e Yes, I agree.  That was my original thought too. (I just chose this to reduce the total code changes).\n\u003e \n\nLets focus on making sure the end code is as correct as we can make it, not reducing the total # of lines changed.\n\n\u003e I\u0027ll work on making it as shared_ptr\u003ccrow::Request\u003e.\n\nSounds good.",
      "parentUuid": "515a7dcf_cf57a5aa",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 74
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b65ca950_728dfad4",
        "filename": "http/http_request.hpp",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-29T19:20:32Z",
      "side": 1,
      "message": "this is going to force a malloc every clear, which isn\u0027t the intent of clear().  Maybe you want reqPtr-\u003eclear()?",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 78
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc93415b_b520eda2",
        "filename": "http/http_request.hpp",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-30T21:56:28Z",
      "side": 1,
      "message": "This semantic of `clear()` is to release the original Request in this current flow of the logic.\nHowever, if there are references of it, the content will need be available for those.\nSo, reqPtr-\u003eclear() would not be correct as it will clear out its content for all references. (It may become same as simple pointer reference - \u0026Request).\n\nSo, I\u0027ve changed to do reqPtr\u003dnullptr (although reqPtr\u003dstd::make_shared() is correct).  (By doing it, the other referencing code will still have the valid content - e..g above (B)).\n\n```\n   reqPtr \u003d nullptr;\n```\n\nThis would be similar to do like if we do\n\n```\n   std::shared_ptr\u003ccrow::Request\u003e req;\n    ...\n   req \u003d nullptr;\n```",
      "parentUuid": "b65ca950_728dfad4",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 78
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8830c9e_779a28b4",
        "filename": "http/http_request.hpp",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-31T18:56:17Z",
      "side": 1,
      "message": "\u003e This semantic of `clear()` is to release the original Request in this current flow of the logic.\n\u003e However, if there are references of it, the content will need be available for those.\n\u003e So, reqPtr-\u003eclear() would not be correct as it will clear out its content for all references. (It may become same as simple pointer reference - \u0026Request).\n\nIn the context that clear is called, there should be no references.  Arguably, we could check if use_count \u003e 1, and close the connection if the request is still being used after the request is complete to denote that someone extended the lifetime of Request beyond what they should\u0027ve.\n\n\u003e \n\u003e So, I\u0027ve changed to do reqPtr\u003dnullptr (although reqPtr\u003dstd::make_shared() is correct).  (By doing it, the other referencing code will still have the valid content - e..g above (B)).\n\nIt\u0027s still going to require a second malloc, which defeats the intent of reusing the object in most cases.\n\n\u003e \n\u003e ```\n\u003e    reqPtr \u003d nullptr;\n\u003e ```\n\u003e \n\u003e This would be similar to do like if we do\n\u003e \n\u003e ```\n\u003e    std::shared_ptr\u003ccrow::Request\u003e req;\n\u003e     ...\n\u003e    req \u003d nullptr;\n\u003e ```",
      "parentUuid": "cc93415b_b520eda2",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 78
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eeb6cf1b_1e6e9003",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-29T19:22:27Z",
      "side": 1,
      "message": "This should be using req.method()",
      "range": {
        "startLine": 77,
        "startChar": 8,
        "endLine": 77,
        "endChar": 26
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0615b897_8d8e077f",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-30T21:56:28Z",
      "side": 1,
      "message": "It was originally `req.req.method()` and I replaced to map it to *req.reqPtr [i.e., req.req()] .\n\nSince `method()` is also under `req.method()`, it makes sense to change `req.method()`.\nI\u0027ll make those changes.",
      "parentUuid": "eeb6cf1b_1e6e9003",
      "range": {
        "startLine": 77,
        "startChar": 8,
        "endLine": 77,
        "endChar": 26
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a4141bd_edcafe5a",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-31T18:56:17Z",
      "side": 1,
      "message": "Lets just do that in another patch ahead of this one, as that\u0027s arguably a cleanup.",
      "parentUuid": "0615b897_8d8e077f",
      "range": {
        "startLine": 77,
        "startChar": 8,
        "endLine": 77,
        "endChar": 26
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67c22e66_e28e7088",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-04-01T13:44:31Z",
      "side": 1,
      "message": "Ok, I\u0027ll do.",
      "parentUuid": "9a4141bd_edcafe5a",
      "range": {
        "startLine": 77,
        "startChar": 8,
        "endLine": 77,
        "endChar": 26
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "004ea231_48514fa2",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 5
      },
      "lineNbr": 564,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-29T19:22:27Z",
      "side": 1,
      "message": "This doesn\u0027t have to be a copy anymore, right?",
      "range": {
        "startLine": 564,
        "startChar": 0,
        "endLine": 564,
        "endChar": 65
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86b151ba_ed7aa9ba",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 5
      },
      "lineNbr": 564,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-30T21:56:28Z",
      "side": 1,
      "message": "Looking at the logic again, I think we can share thisReq?\nSo, I\u0027ll make the changes accordingly.",
      "parentUuid": "004ea231_48514fa2",
      "range": {
        "startLine": 564,
        "startChar": 0,
        "endLine": 564,
        "endChar": 65
      },
      "revId": "2ebde16133c7407ba10f0e1c2f231e0b242d16d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
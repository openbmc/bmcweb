{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "97815ae6_f5723be2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-24T16:31:21Z",
      "side": 1,
      "message": "Could you point me to where the overflow happens?",
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ef660c3_1b5b649f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001252
      },
      "writtenOn": "2022-06-24T18:01:54Z",
      "side": 1,
      "message": "https://github.com/openbmc/bmcweb/blob/fdd26906ef8884977df85c915444206c8a183639/redfish-core/lib/log_services.hpp#L1204\n\nHere, having any non-zero skip with top not provided overflows",
      "parentUuid": "97815ae6_f5723be2",
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e8fc7ab_50afe91c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-27T18:12:38Z",
      "side": 1,
      "message": "Wait, I realize this might cause bugs.\n\nIf top is initialized to 1000. If `delegatedQuery.skip` is 0 and people are querying logs after 1001, the following codes will just bypass these logs. Right? \n\n```\nif (entryCount \u003c\u003d delegatedQuery.skip ||\n                    entryCount \u003e delegatedQuery.skip + delegatedQuery.top)\n{\n  continue;\n}\n```",
      "parentUuid": "4ef660c3_1b5b649f",
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e2b466f_6eb8894e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-27T22:13:54Z",
      "side": 1,
      "message": "That\u0027s a really good point, I missed that.  hmm.... that makes me wonder if we need a way to have an \"unspecified\" value.",
      "parentUuid": "2e8fc7ab_50afe91c",
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "943869c9_5d5eed23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001252
      },
      "writtenOn": "2022-06-28T00:50:04Z",
      "side": 1,
      "message": "Yes but previously it\u0027s the same behavior. bmcweb itself limits GET request to LogService return at most 1000 logs at once. Previously this limit is only checked when top is specified.\n\nSee my comment on that part.",
      "parentUuid": "1e2b466f_6eb8894e",
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49eee577_2b248647",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-07-01T01:05:10Z",
      "side": 1,
      "message": "Understood.\n\nIs it possible that we fix the actual bug. I would imagine we use std::optional for these two query parameters and check they are set or not before using?",
      "parentUuid": "943869c9_5d5eed23",
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95b14b9c_47837cc3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001252
      },
      "writtenOn": "2022-07-01T07:16:49Z",
      "side": 1,
      "message": "Even use std::optional, these parameter still need to have a default value, and the default value of $top cannot be UINT32_MAX",
      "parentUuid": "49eee577_2b248647",
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20137904_9da00677",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-07T04:03:45Z",
      "side": 1,
      "message": "\u003e Is it possible that we fix the actual bug. I would imagine we use std::optional for these two query parameters and check they are set or not before using?\n\nThat seems reasonable.\n\n\n\u003e Even use std::optional, these parameter still need to have a default value\n\nWhy?  std::optional would mean it doesn\u0027t need a default int value.  The default value would be std::nullopt",
      "parentUuid": "95b14b9c_47837cc3",
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "355088ea_e601b888",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001252
      },
      "writtenOn": "2022-07-07T05:59:20Z",
      "side": 1,
      "message": "I think there need to be a default value for $top which limits how much log entries are responded in single request. Currently that default value is 1000. If std::nullopt means \"get all logs at once\", and there are lots of log entries on system, it will result in an denial of service in bmcweb.",
      "parentUuid": "20137904_9da00677",
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c114ad5_70674b74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-07T19:57:31Z",
      "side": 1,
      "message": "\u003e I think there need to be a default value for $top which limits how much log entries are responded in single request. \n\nWhy?  In the current version of the code, it actually generates as many entries as the collection allows anyway, so setting a default limit doesn\u0027t actually save any memory (it does make the return size smaller).  Is there a case where a log service would return more than the default number of logs (1000) but not delegate the top/skip calls to efficient routes?",
      "parentUuid": "355088ea_e601b888",
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6010b11_5fb33d5c",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-24T16:28:00Z",
      "side": 1,
      "message": "Is 1000 consistent across the Redfish tree?",
      "range": {
        "startLine": 18,
        "startChar": 24,
        "endLine": 18,
        "endChar": 41
      },
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d76efab1_d7f25c79",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-24T16:31:21Z",
      "side": 1,
      "message": "nit: I prefer inline constexpr.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 6
      },
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b78787e7_5a7b9bc5",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1001252
      },
      "writtenOn": "2022-06-24T18:01:54Z",
      "side": 1,
      "message": "Yes all $top are checked in getTopParam()\n\nhttps://github.com/openbmc/bmcweb/blob/b66cf2a2f10aab3bd21e8be60b7fb0894d342c05/redfish-core/include/utils/query_param.hpp#L186",
      "parentUuid": "b6010b11_5fb33d5c",
      "range": {
        "startLine": 18,
        "startChar": 24,
        "endLine": 18,
        "endChar": 41
      },
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "821f6c06_82c2b772",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1001252
      },
      "writtenOn": "2022-06-24T18:01:54Z",
      "side": 1,
      "message": "`static constexpr` is widely used in bmcweb, while `inline constexpr` not, and this line is moved from previous file. I prefer keep it here.",
      "parentUuid": "d76efab1_d7f25c79",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 6
      },
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44c3c0b8_ab1dd037",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-27T15:59:48Z",
      "side": 1,
      "message": "Arguably this would normally be \"constexpr const size_t\"\n\nFor const parameters, it\u0027s not clear the difference is all that important.  Up to the submitter if they want to change it.",
      "parentUuid": "821f6c06_82c2b772",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 6
      },
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89d11f51_2b5336f5",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-27T15:59:48Z",
      "side": 1,
      "message": "This is likely something we\u0027ll need to evolve over time, but 1000 as a default seems resonable.",
      "parentUuid": "b78787e7_5a7b9bc5",
      "range": {
        "startLine": 18,
        "startChar": 24,
        "endLine": 18,
        "endChar": 41
      },
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c7dd33a_02df0535",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-27T18:06:56Z",
      "side": 1,
      "message": "https://abseil.io/tips/168\n\nPlease see this.",
      "parentUuid": "44c3c0b8_ab1dd037",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 6
      },
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c54a097a_08955d6b",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-27T18:06:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "89d11f51_2b5336f5",
      "range": {
        "startLine": 18,
        "startChar": 24,
        "endLine": 18,
        "endChar": 41
      },
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d77955f_4e535125",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1001252
      },
      "writtenOn": "2022-06-28T00:59:35Z",
      "side": 1,
      "message": "Done. Changed to \"inline constexpr\"\n\nThanks Nan for the information",
      "parentUuid": "3c7dd33a_02df0535",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 6
      },
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea8fc988_40d909c2",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 1
      },
      "lineNbr": 609,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-24T15:09:58Z",
      "side": 1,
      "message": "this should be \u003c\u003d",
      "range": {
        "startLine": 609,
        "startChar": 18,
        "endLine": 609,
        "endChar": 20
      },
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ead614d_f8394260",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 1
      },
      "lineNbr": 609,
      "author": {
        "id": 1001252
      },
      "writtenOn": "2022-06-24T18:01:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea8fc988_40d909c2",
      "range": {
        "startLine": 609,
        "startChar": 18,
        "endLine": 609,
        "endChar": 20
      },
      "revId": "6604b718fc50d069722a8aaa5e057aaa89d75fbf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
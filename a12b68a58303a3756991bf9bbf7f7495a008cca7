{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d52eda3a_5da0be60",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-11-02T15:57:55Z",
      "side": 1,
      "message": "It seems good",
      "revId": "a12b68a58303a3756991bf9bbf7f7495a008cca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e59514f0_156ec0ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-11-03T20:31:42Z",
      "side": 1,
      "message": "Can this go?",
      "revId": "a12b68a58303a3756991bf9bbf7f7495a008cca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3e0c2dd_7542df00",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-11-03T20:33:07Z",
      "side": 1,
      "message": "CI has been broke for some time so I vote we merge this and can keep discussing if wanted",
      "parentUuid": "e59514f0_156ec0ec",
      "revId": "a12b68a58303a3756991bf9bbf7f7495a008cca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4b2c579_cb9c6ce3",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 4
      },
      "lineNbr": 2763,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-11-03T16:54:13Z",
      "side": 1,
      "message": "On second thought, instead of using `std::move()` on callback, or making/using template and `std::forward\u003cCallback\u003e()`, can it be done using the simple lambda capture as value like this?\n\n```\n    auto callback \u003d [asyncResp, mapCompleteCb{std::move(mapComplete)}](\n--\u003e\n    auto callback \u003d [asyncResp, mapCompleteCb{mapComplete}](\n```\n\n----\n\nThe caller `setReportMetrics()` is calling `retrieveUriToDbusMap()` in a loop. As the result, lambda-callback may be moved on the first loop and it may be invalidated on the second loop?\n\n```\nsetReportMetrics()\n{\n...\n        for (const auto\u0026 [chassis, sensorType] : chassisSensors)\n        {\n            retrieveUriToDbusMap(\n                chassis, sensorType,\n                \u003clambda-func\u003e);\n                \n```",
      "range": {
        "startLine": 2763,
        "startChar": 0,
        "endLine": 2763,
        "endChar": 73
      },
      "revId": "a12b68a58303a3756991bf9bbf7f7495a008cca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6351045c_6317f0f7",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 4
      },
      "lineNbr": 2763,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-03T17:07:17Z",
      "side": 1,
      "message": "\u003e On second thought, instead of using `std::move()` on callback, or making/using template and `std::forward\u003cCallback\u003e()`, can it be done using the simple lambda capture as value like this?\n\u003e \n\u003e ```\n\u003e     auto callback \u003d [asyncResp, mapCompleteCb{std::move(mapComplete)}](\n\u003e --\u003e\n\u003e     auto callback \u003d [asyncResp, mapCompleteCb{mapComplete}](\n\u003e ```\n\nWhat you suggested makes a copy.  I\u0027m not sure we want that.\n\n\u003e \n\u003e ----\n\u003e \n\u003e The caller `setReportMetrics()` is calling `retrieveUriToDbusMap()` in a loop. As the result, lambda-callback may be moved on the first loop and it may be invalidated on the second loop?\n\nACK.  This is very likely the root cause of this problem.\n\n\n\u003e \n\u003e ```\n\u003e setReportMetrics()\n\u003e {\n\u003e ...\n\u003e         for (const auto\u0026 [chassis, sensorType] : chassisSensors)\n\u003e         {\n\u003e             retrieveUriToDbusMap(\n\u003e                 chassis, sensorType,\n\u003e                 \u003clambda-func\u003e);\n\u003e                 \n\u003e ```",
      "parentUuid": "c4b2c579_cb9c6ce3",
      "range": {
        "startLine": 2763,
        "startChar": 0,
        "endLine": 2763,
        "endChar": 73
      },
      "revId": "a12b68a58303a3756991bf9bbf7f7495a008cca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dee0e4c1_2b548b76",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 4
      },
      "lineNbr": 2763,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-03T17:10:05Z",
      "side": 1,
      "message": "Actually, thinking about it more, the lambda callback is constructed each loop, so moving it shouldn\u0027t matter.  So long as we\u0027re not moving any captures into it, I think we\u0027re ok?",
      "parentUuid": "6351045c_6317f0f7",
      "range": {
        "startLine": 2763,
        "startChar": 0,
        "endLine": 2763,
        "endChar": 73
      },
      "revId": "a12b68a58303a3756991bf9bbf7f7495a008cca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e93c685a_a0955306",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 4
      },
      "lineNbr": 2763,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-11-03T18:39:47Z",
      "side": 1,
      "message": "I think so in general.\nHowever, I\u0027m not sure how the compiler generates the code and how async_call (deep inside `retrieveUriToDbusMap()`) may be being played-out?\n\nWhat if it is captured by reference like this?\n```\n--- a/redfish-core/lib/sensors.hpp\n+++ b/redfish-core/lib/sensors.hpp\n@@ -2757,10 +2757,10 @@ inline void retrieveUriToDbusMap(const std::string\u0026 chassis,\n     }\n     \n     auto asyncResp \u003d std::make_shared\u003cbmcweb::AsyncResp\u003e();\n-    auto callback \u003d [asyncResp, mapCompleteCb{std::move(mapComplete)}](\n+    auto callback \u003d [asyncResp, \u0026mapComplete](\n                         const boost::beast::http::status status,\n                         const std::map\u003cstd::string, std::string\u003e\u0026 uriToDbus) {\n-        mapCompleteCb(status, uriToDbus);\n+        mapComplete(status, uriToDbus);\n     };\n\n```",
      "parentUuid": "dee0e4c1_2b548b76",
      "range": {
        "startLine": 2763,
        "startChar": 0,
        "endLine": 2763,
        "endChar": 73
      },
      "revId": "a12b68a58303a3756991bf9bbf7f7495a008cca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "deb03aa5_e8220cf3",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 4
      },
      "lineNbr": 2763,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-03T20:25:46Z",
      "side": 1,
      "message": "\u003e What if it is captured by reference like this?\n\nThat will result in a use after free when the callback is called.",
      "parentUuid": "e93c685a_a0955306",
      "range": {
        "startLine": 2763,
        "startChar": 0,
        "endLine": 2763,
        "endChar": 73
      },
      "revId": "a12b68a58303a3756991bf9bbf7f7495a008cca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
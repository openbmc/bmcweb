{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e4b65e2c_6ef52395",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-06-16T04:45:16Z",
      "side": 1,
      "message": "It is only a partial review, I am not familiar enough with the json, so recursive section took longer then I thought.",
      "revId": "e15322e72b77c1b9d54a2a4573f6b23b73db8d94",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9de4a59c_b5bf5c7b",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 15
      },
      "lineNbr": 221,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-06-16T04:45:16Z",
      "side": 1,
      "message": "do you need this?\n\n```\n[](char c) { return c\u003d\u003d\u0027,\u0027;}\n```\nmight be better",
      "range": {
        "startLine": 221,
        "startChar": 50,
        "endLine": 221,
        "endChar": 66
      },
      "revId": "e15322e72b77c1b9d54a2a4573f6b23b73db8d94",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9a6fdce_a72d4cf8",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 15
      },
      "lineNbr": 221,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-27T17:44:32Z",
      "side": 1,
      "message": "I thought compiler will do some optimization here. If you search \"is_any_of\", you can find a lot of other boost lib is using it for a single character.\n\nhttps://github.com/boostorg/fiber/blob/71f5b89bd195b5fe24225d80aaf0649744bc8c59/src/numa/linux/topology.cpp#L104",
      "parentUuid": "9de4a59c_b5bf5c7b",
      "range": {
        "startLine": 221,
        "startChar": 50,
        "endLine": 221,
        "endChar": 66
      },
      "revId": "e15322e72b77c1b9d54a2a4573f6b23b73db8d94",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be7a8098_11ddae85",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 15
      },
      "lineNbr": 268,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-06-16T04:45:16Z",
      "side": 1,
      "message": "nit:\nThere are two statements (lines), in this \"if\" condition, and I dis-prefer it",
      "range": {
        "startLine": 268,
        "startChar": 55,
        "endLine": 268,
        "endChar": 56
      },
      "revId": "e15322e72b77c1b9d54a2a4573f6b23b73db8d94",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f622ba4_2ffcfb6a",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 15
      },
      "lineNbr": 268,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-27T16:55:09Z",
      "side": 1,
      "message": "This check is arguably in the wrong spot.  We shouldn\u0027t do a second iteration of the query params.\n\nPlease move this check to line 331, and make it use ret.selectedParams to determine if both expand and select are enabled.",
      "parentUuid": "be7a8098_11ddae85",
      "range": {
        "startLine": 268,
        "startChar": 55,
        "endLine": 268,
        "endChar": 56
      },
      "revId": "e15322e72b77c1b9d54a2a4573f6b23b73db8d94",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f97f5c80_b04cfdb3",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 15
      },
      "lineNbr": 268,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-27T18:59:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f622ba4_2ffcfb6a",
      "range": {
        "startLine": 268,
        "startChar": 55,
        "endLine": 268,
        "endChar": 56
      },
      "revId": "e15322e72b77c1b9d54a2a4573f6b23b73db8d94",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd4cf246_f55f2523",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 15
      },
      "lineNbr": 679,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-06-16T04:45:16Z",
      "side": 1,
      "message": "Is it a safe assumption, that all non-array and non-objects are properties.\n(It probably is, but it is not clear to me)",
      "range": {
        "startLine": 679,
        "startChar": 26,
        "endLine": 679,
        "endChar": 58
      },
      "revId": "e15322e72b77c1b9d54a2a4573f6b23b73db8d94",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30eaf352_32816cac",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 15
      },
      "lineNbr": 679,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-27T17:44:32Z",
      "side": 1,
      "message": "I believe so, if you look at all the JSON types, https://json.nlohmann.me/api/basic_json/type/, only array and objects can contain children JSON nodes.",
      "parentUuid": "dd4cf246_f55f2523",
      "range": {
        "startLine": 679,
        "startChar": 26,
        "endLine": 679,
        "endChar": 58
      },
      "revId": "e15322e72b77c1b9d54a2a4573f6b23b73db8d94",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e41ec63_e269eaac",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 15
      },
      "lineNbr": 679,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-27T17:50:42Z",
      "side": 1,
      "message": "in that list you linked, discarded and binary types aren\u0027t properties in this context, so johns question is valid;  With that said, bmcweb should never be producing either of those types, so it seems like a reasonable assumption.  Even if we did produce those types, this code doesn\u0027t break.",
      "parentUuid": "30eaf352_32816cac",
      "range": {
        "startLine": 679,
        "startChar": 26,
        "endLine": 679,
        "endChar": 58
      },
      "revId": "e15322e72b77c1b9d54a2a4573f6b23b73db8d94",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "73b2b913_813bb4dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1001386
      },
      "writtenOn": "2022-04-06T22:03:59Z",
      "side": 1,
      "message": "Ready for review. ",
      "revId": "b9b1c43fdb608ea098d17df55e199dea2f476715",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03501b85_81ced9c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1001386
      },
      "writtenOn": "2022-04-07T16:25:50Z",
      "side": 1,
      "message": "Friendly ping.",
      "revId": "b9b1c43fdb608ea098d17df55e199dea2f476715",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69c3b8d5_d881f333",
        "filename": "include/google/dbus_utils.hpp",
        "patchSetId": 13
      },
      "lineNbr": 59,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-04-07T16:43:59Z",
      "side": 1,
      "message": "if it is all public, then this should just be a struct.\n\nalso, toDbusMethodAddr can be a constructor instead of having this method.",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 59,
        "endChar": 1
      },
      "revId": "b9b1c43fdb608ea098d17df55e199dea2f476715",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6913d7ca_61e44529",
        "filename": "include/google/dbus_utils.hpp",
        "patchSetId": 13
      },
      "lineNbr": 59,
      "author": {
        "id": 1001386
      },
      "writtenOn": "2022-04-08T21:32:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69c3b8d5_d881f333",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 59,
        "endChar": 1
      },
      "revId": "b9b1c43fdb608ea098d17df55e199dea2f476715",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcf31975_665f17c0",
        "filename": "include/google/google_service_root.hpp",
        "patchSetId": 13
      },
      "lineNbr": 45,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-04-07T16:43:59Z",
      "side": 1,
      "message": "these follow the Google C++ sytle, but I think we want it to follow OpenBMC style in https://github.com/openbmc/docs/blob/master/cpp-style-and-conventions.md#constants.\n\nUp to Ed.",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 45,
        "endChar": 75
      },
      "revId": "b9b1c43fdb608ea098d17df55e199dea2f476715",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "548fdc0a_c91ef531",
        "filename": "include/google/google_service_root.hpp",
        "patchSetId": 13
      },
      "lineNbr": 45,
      "author": {
        "id": 1001386
      },
      "writtenOn": "2022-04-08T21:39:26Z",
      "side": 1,
      "message": "I prefer Google C++ style of constants easy to follow but given openBMC project, I\u0027m ok to change either way.",
      "parentUuid": "dcf31975_665f17c0",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 45,
        "endChar": 75
      },
      "revId": "b9b1c43fdb608ea098d17df55e199dea2f476715",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f9ded78_76e821e0",
        "filename": "include/google/google_service_root.hpp",
        "patchSetId": 13
      },
      "lineNbr": 45,
      "author": {
        "id": 1000233
      },
      "writtenOn": "2022-04-12T21:48:33Z",
      "side": 1,
      "message": "You should be using the OpenBMC style guide since this code lives in OpenBMC",
      "parentUuid": "548fdc0a_c91ef531",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 45,
        "endChar": 75
      },
      "revId": "b9b1c43fdb608ea098d17df55e199dea2f476715",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07c09e61_b07450f6",
        "filename": "include/google/google_service_root.hpp",
        "patchSetId": 13
      },
      "lineNbr": 50,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-04-07T16:43:59Z",
      "side": 1,
      "message": "is this the only way to do this?\n\nI don\u0027t think we really want global variable like this.\n\nI think normally we want to create a new class that inherient AsyncResp and have the variables in there like with SensorAsyncResp https://github.com/openbmc/bmcweb/blob/master/redfish-core/lib/sensors.hpp#L160",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 50,
        "endChar": 0
      },
      "revId": "b9b1c43fdb608ea098d17df55e199dea2f476715",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b3bafa1_3fcc56c4",
        "filename": "include/google/google_service_root.hpp",
        "patchSetId": 13
      },
      "lineNbr": 50,
      "author": {
        "id": 1001386
      },
      "writtenOn": "2022-04-08T21:32:29Z",
      "side": 1,
      "message": "LGTM. Thanks for pointing this.\nI looked at the pattern for dbus_singleton.hpp where there is one instance of systemBus and thought it is standard/applicable.\n\nWe can totally avoid global variables as you point out.",
      "parentUuid": "07c09e61_b07450f6",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 50,
        "endChar": 0
      },
      "revId": "b9b1c43fdb608ea098d17df55e199dea2f476715",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
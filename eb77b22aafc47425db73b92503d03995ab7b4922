{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9c966417_183d5fde",
        "filename": "redfish-core/lib/virtual_media.hpp",
        "patchSetId": 5
      },
      "lineNbr": 452,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2023-08-30T20:46:28Z",
      "side": 1,
      "message": "does std::move on a string zero out the source? I am not sure how that works. It is very tricky to get all the passwords zero\u0027d out.",
      "revId": "eb77b22aafc47425db73b92503d03995ab7b4922",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e030a09_a31c1f7b",
        "filename": "redfish-core/lib/virtual_media.hpp",
        "patchSetId": 5
      },
      "lineNbr": 452,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-30T22:49:23Z",
      "side": 1,
      "message": "it doesn\u0027t zero out the source, but it moves the malloced pointer over to be zeroed out later rather than making a copy.  I suspect it very much depends on the implementation of string on what it does.  I guess we could also explicit_bzero username.data() and password.data() just to be sure?  I wonder if we should be doing\n\nexplicit_bzero(username.data(), username.capacity()) instead of using size?\n\n\nFWIW, the password exists in more buffers than just here.  Zeroing out here I suspect doesn\u0027t actually do anything, as several copies of the password string are made over the course of reading in the request (like in the json payload) in buffers that aren\u0027t zeroed out.\n\nIf you have any ideas on how this could be done better, I\u0027m open to them.",
      "parentUuid": "9c966417_183d5fde",
      "revId": "eb77b22aafc47425db73b92503d03995ab7b4922",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8fc3519_28de0eda",
        "filename": "redfish-core/lib/virtual_media.hpp",
        "patchSetId": 5
      },
      "lineNbr": 452,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-05T20:47:31Z",
      "side": 1,
      "message": "I would also point out that std::move was also what the old code did (line 457) so this either works, or we are just as broken as we were before.",
      "parentUuid": "9e030a09_a31c1f7b",
      "revId": "eb77b22aafc47425db73b92503d03995ab7b4922",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d580acaf_87a57752",
        "filename": "redfish-core/lib/virtual_media.hpp",
        "patchSetId": 5
      },
      "lineNbr": 452,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-07T20:37:03Z",
      "side": 1,
      "message": "Vernon, does this work for you?",
      "parentUuid": "d8fc3519_28de0eda",
      "revId": "eb77b22aafc47425db73b92503d03995ab7b4922",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aebce508_f3c97240",
        "filename": "redfish-core/lib/virtual_media.hpp",
        "patchSetId": 5
      },
      "lineNbr": 452,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-25T17:50:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d580acaf_87a57752",
      "revId": "eb77b22aafc47425db73b92503d03995ab7b4922",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11d9f795_9dcb952b",
        "filename": "redfish-core/lib/virtual_media.hpp",
        "patchSetId": 5
      },
      "lineNbr": 479,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2023-08-30T20:46:28Z",
      "side": 1,
      "message": "What about buffer? does async_write zero it?\n\n        // Add +1 to ensure that the null terminator is included.\n        std::array\u003cboost::asio::const_buffer, 2\u003e buffer{\n            {{user.data(), user.size() + 1}, {pass.data(), pass.size() + 1}}};\n        boost::asio::async_write(impl, buffer,\n              [hndlr{std::forward\u003cWriteHandler\u003e}, \u0026buffer] (const boost::system::error_code\u0026 ec, std::size_t s)\n              {\n                  explicit_bzero(buffer.data(), buffer.size());\n                  hndlr(ec, s);\n              });\n    }",
      "revId": "eb77b22aafc47425db73b92503d03995ab7b4922",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25582710_8482cb7a",
        "filename": "redfish-core/lib/virtual_media.hpp",
        "patchSetId": 5
      },
      "lineNbr": 479,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-30T22:49:23Z",
      "side": 1,
      "message": "\"buffer\" doesn\u0027t actually contain the password data, it contains two pointers to the std::strings that contain the password data, because it\u0027s using scatter gather IO to avoid having to copy into a common buffer like the old way did, there\u0027s no real need to securely clean up buffer, because the data structure never contained the data.\n\nThe password likely exists in some kernel buffers along the way, but I\u0027m not sure there\u0027s much we can do about that.",
      "parentUuid": "11d9f795_9dcb952b",
      "revId": "eb77b22aafc47425db73b92503d03995ab7b4922",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9c966417_183d5fde",
        "filename": "redfish-core/lib/virtual_media.hpp",
        "patchSetId": 5
      },
      "lineNbr": 452,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2023-08-30T20:46:28Z",
      "side": 1,
      "message": "does std::move on a string zero out the source? I am not sure how that works. It is very tricky to get all the passwords zero\u0027d out.",
      "revId": "eb77b22aafc47425db73b92503d03995ab7b4922",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11d9f795_9dcb952b",
        "filename": "redfish-core/lib/virtual_media.hpp",
        "patchSetId": 5
      },
      "lineNbr": 479,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2023-08-30T20:46:28Z",
      "side": 1,
      "message": "What about buffer? does async_write zero it?\n\n        // Add +1 to ensure that the null terminator is included.\n        std::array\u003cboost::asio::const_buffer, 2\u003e buffer{\n            {{user.data(), user.size() + 1}, {pass.data(), pass.size() + 1}}};\n        boost::asio::async_write(impl, buffer,\n              [hndlr{std::forward\u003cWriteHandler\u003e}, \u0026buffer] (const boost::system::error_code\u0026 ec, std::size_t s)\n              {\n                  explicit_bzero(buffer.data(), buffer.size());\n                  hndlr(ec, s);\n              });\n    }",
      "revId": "eb77b22aafc47425db73b92503d03995ab7b4922",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
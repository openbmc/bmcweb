{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "77073552_b65e84bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-08-09T18:51:57Z",
      "side": 1,
      "message": "Unaddressed comments",
      "revId": "11be10274b17eba271ccb6742487abd788f32632",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6334294_db7cee8b",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 327,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-09T17:20:47Z",
      "side": 1,
      "message": "Can we make this matcher more specific?  We\u0027d probably use something like arg0namespace\u003dxyz.openbmc_project.Software.  Ignoring messages in code is an anti pattern.",
      "range": {
        "startLine": 325,
        "startChar": 0,
        "endLine": 327,
        "endChar": 46
      },
      "revId": "11be10274b17eba271ccb6742487abd788f32632",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02fd71f2_66096c08",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 327,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-08-09T17:33:06Z",
      "side": 1,
      "message": "Thanks.\nI\u0027ll take look.",
      "parentUuid": "c6334294_db7cee8b",
      "range": {
        "startLine": 325,
        "startChar": 0,
        "endLine": 327,
        "endChar": 46
      },
      "revId": "11be10274b17eba271ccb6742487abd788f32632",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed2fea03_714afa00",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 327,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-08-09T20:23:32Z",
      "side": 1,
      "message": "Based on my further investigation and experiment, it seems not the case with arg0namespace or other filtering like \u0027arg0path\u0027 etc.\n\nThe code is parsing the body of the logging message and check whether it is Software error message or not.\n\n```\n    fwUpdateErrorMatcher \u003d std::make_unique\u003csdbusplus::bus::match_t\u003e(\n        *crow::connections::systemBus,\n        \"interface\u003d\u0027org.freedesktop.DBus.ObjectManager\u0027,type\u003d\u0027signal\u0027,\"\n        \"member\u003d\u0027InterfacesAdded\u0027,\"\n        \"path\u003d\u0027/xyz/openbmc_project/logging\u0027\",\n        [asyncResp, url](sdbusplus::message_t\u0026 m) {\n....\n\n        for (const std::pair\u003cstd::string, dbus::utility::DBusPropertiesMap\u003e\u0026\n                 interface : interfacesProperties)\n        {\n            BMCWEB_LOG_DEBUG \u003c\u003c \"TEST: interface.first \u003d \" \u003c\u003c interface.first;\n            if (interface.first \u003d\u003d \"xyz.openbmc_project.Logging.Entry\")\n            {\n                for (const std::pair\u003cstd::string,\n                                     dbus::utility::DbusVariantType\u003e\u0026 value :\n                     interface.second)\n                     ...\n                     const std::string* type \u003d\n                        std::get_if\u003cstd::string\u003e(\u0026value.second);\n```\n\n\n\nobj path \u003d /xyz/openbmc_project/logging/entry/33\n   interface.first \u003d xyz.openbmc_project.Logging.Entry\n   ...\n   value.first\u003dMessage\n   value.second \u003d \u003cerror-types\u003e  \u003c\u003d\u003d *type\n\nFor example, the valid/expected ones may be\nxyz.openbmc_project.Software.Image.Error.UnTarFailure\nxyz.openbmc_project.Software.Image.Error.ImageFailure\nxyz.openbmc_project.Software.*\n\nHowever, if we see like this, we want to ignore.\n      value.second \u003d xyz.openbmc_project.Host.Error.Event\n      \n      \nThis can happen by PLDM - https://github.com/openbmc/pldm/blob/82257922c1442d3bee1a3d2a42885c7e1d5908e3/oem/ibm/libpldmresponder/file_io_type_pel.cpp#L268\n\n\nHow can we filter out those cases -- handle only the error messages which are related to xyz.openbmc_project.Software.* ?",
      "parentUuid": "02fd71f2_66096c08",
      "range": {
        "startLine": 325,
        "startChar": 0,
        "endLine": 327,
        "endChar": 46
      },
      "revId": "11be10274b17eba271ccb6742487abd788f32632",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e10fb95e_0cb03a85",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 327,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-08-15T20:10:01Z",
      "side": 1,
      "message": "Okay, so becaus the \"Message\" property is the one with the xyz.openbmc_project.Software.Image.*,  arg0namespace doesn\u0027t work?",
      "parentUuid": "ed2fea03_714afa00",
      "range": {
        "startLine": 325,
        "startChar": 0,
        "endLine": 327,
        "endChar": 46
      },
      "revId": "11be10274b17eba271ccb6742487abd788f32632",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26301b5d_a69cd264",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-09T17:20:47Z",
      "side": 1,
      "message": "common error.  Please don\u0027t use starts_with for this kind of check.",
      "range": {
        "startLine": 394,
        "startChar": 29,
        "endLine": 394,
        "endChar": 79
      },
      "revId": "11be10274b17eba271ccb6742487abd788f32632",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fceeffb0_836698a0",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-08-09T17:33:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "26301b5d_a69cd264",
      "range": {
        "startLine": 394,
        "startChar": 29,
        "endLine": 394,
        "endChar": 79
      },
      "revId": "11be10274b17eba271ccb6742487abd788f32632",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c81b564_5f3b240b",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-08-09T21:34:42Z",
      "side": 1,
      "message": "Perhaps, until we have a generic way of filtering out the body of error message, I think we can explicitly handle all known ignorable error types - at this time  \u0027xyz.openbmc_project.Host.Error.Event\u0027 \n\n```\nelse if(*type \u003d \"xyz.openbmc_project.Host.Error.Event\")\n{\n   // ignore\n} \nelse\n{\n   internalError();\n} \n```\n\nAnother approach may be keeping the same behavior (failing CodeUpdate) but giving more detail return message - i.e. Host.Error is happening during CodeUpdate?",
      "parentUuid": "fceeffb0_836698a0",
      "range": {
        "startLine": 394,
        "startChar": 29,
        "endLine": 394,
        "endChar": 79
      },
      "revId": "11be10274b17eba271ccb6742487abd788f32632",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b6b8340_a69311d3",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-08-15T20:10:01Z",
      "side": 1,
      "message": "What errors are these?\nWhat if we just made sure to map all the errors https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Software/Version.errors.yaml and https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Software/Version.errors.yaml and ignore the rest ? \n\nThe else would look like: \n\n                    else\n                    {\n                        // Unrelated error types. Ignored\n                        BMCWEB_LOG_INFO(\n                            \"Non-Software-related Error type\u003d{}. Ignored\",\n                            *type);\n                    }",
      "parentUuid": "8c81b564_5f3b240b",
      "range": {
        "startLine": 394,
        "startChar": 29,
        "endLine": 394,
        "endChar": 79
      },
      "revId": "11be10274b17eba271ccb6742487abd788f32632",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06f4f7b1_8c677b08",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 406,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-09T17:20:47Z",
      "side": 1,
      "message": "This few lines of code has pushed this lambda longer than any lambda should be.  Please roll it out into a method.",
      "revId": "11be10274b17eba271ccb6742487abd788f32632",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9fd63f4_5cd9cba1",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 406,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-08-09T17:33:06Z",
      "side": 1,
      "message": "I think we may need to refactor this part of the code first and then fix the issue.",
      "parentUuid": "06f4f7b1_8c677b08",
      "revId": "11be10274b17eba271ccb6742487abd788f32632",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ef1b5f0_69012924",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 406,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-08-09T18:51:57Z",
      "side": 1,
      "message": "Sure, I am fine with doing the refactor first",
      "parentUuid": "b9fd63f4_5cd9cba1",
      "revId": "11be10274b17eba271ccb6742487abd788f32632",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
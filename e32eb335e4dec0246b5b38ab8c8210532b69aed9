{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ff118625_dc02ca41",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-16T03:36:08Z",
      "side": 1,
      "message": "Can you please check your numbers?  When I did the compressed arm binary size I got\n\nbefore: 889140\nafter: 889300\n\n\nWe\u0027re talking about an inconsequential amount of code difference.\n\n\nUncompressed I get\nBefore: 3477336\nAfter: 3477320\n\n\nKeep in mind, arm linux is running LTO, so saying that functions wont\u0027 inline between compile boundaries isn\u0027t really true.  It\u0027s possibly harder, but considering we\u0027re looking at a 16 BYTE difference in generated code, I\u0027m assuming one of the functions was just ever so slightly different, rather than optimization being done differently.\n\nIf you\u0027re still getting different numbers, please share how you got them.  Based on the size (170 MB?) I\u0027m assuming you were building debug binaries?  we don\u0027t really optimize for those, especially unstripped.",
      "revId": "e32eb335e4dec0246b5b38ab8c8210532b69aed9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e42ac1ef_fe629d11",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-11-18T15:28:32Z",
      "side": 1,
      "message": "Thanks.\n\nI may have used the wrong bmcwebd for measurement after the build.\nI\u0027ve re-read the build files.  I think the right one is `/rootfs/usr/libexec/bmcwebd`?\n\nAs you showed, the size difference of `rootfs/usr/libexec/bmcwebd` seems not increased much. So, size seems not an issue.\n\nHowever, I\u0027m still wondering about the compiler optimization, as I\u0027m not sure whether Link-time optimization can do as much as the compile time optimization can do(?).\n\nSo, perhaps, would \"unity builds\" still be useful (after the breaking up header \u0026 body of the classes)?\n\nI\u0027ve done a quick experiment -- by simply enabling `unity builds`, I got this result (rootfs/usr/libexec/bmcwebd)\n- 3393668 (before unity build)\n- 3332196 (with unity build) \u003c-- This reduces the size of `61472`\n\nI submit the quick experimental unity build enablement by the next patchset of this change.",
      "parentUuid": "ff118625_dc02ca41",
      "revId": "e32eb335e4dec0246b5b38ab8c8210532b69aed9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb13a539_d4d87954",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-16T03:03:24Z",
      "side": 1,
      "message": "on this patchset I\u0027d like to see:\n\n1. The xz compressed binary size.  This is what we measure.  The 1.7MB reported value is about double what I\u0027d expect.\n2. Some discussion of these compiler optimizations we\u0027re worried about?  Do they matter in practice?\n\nIs this problem better solved by enabling unity builds in meson?\n\nThere\u0027s currently lots of things that are compile units, including in a bunch of our dependencies.  If this is truly a problem, it\u0027s a much bigger problem than just subscription.cpp.",
      "revId": "e32eb335e4dec0246b5b38ab8c8210532b69aed9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bbc64a7_8066f4b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-11-17T22:01:07Z",
      "side": 1,
      "message": "The xz compressed sizes of bmcwebd.xz are:\n- 18184684 (before)\n- 17748332 (after this)\n\nThe file `subscription.hpp` is included by `event_service_manager.hpp`, and the member functions of Subscription are used in many places (e.g. `event_service.hpp`, etc).\n\nI think this implies that the compiler may loose the opportunities like inline of the short funcs, and/or size or speed optimizations.\n\nI also think this issue could be addressed or may be loosened via unity builds.",
      "parentUuid": "bb13a539_d4d87954",
      "revId": "e32eb335e4dec0246b5b38ab8c8210532b69aed9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b735a2f_b38cfce0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-17T22:11:02Z",
      "side": 1,
      "message": "\u003e The xz compressed sizes of bmcwebd.xz are:\n\u003e - 18184684 (before)\n\u003e - 17748332 (after this)\n\n18MB would be HUGE, and take up 1/3rd of the flash.  Are you sure you\u0027re building optmized?  See my other comment for the numbers I\u0027m seeing, which are in the \u003c1MB compressed and \u003c3MB uncompressed.\n\n\u003e \n\u003e The file `subscription.hpp` is included by `event_service_manager.hpp`, and the member functions of Subscription are used in many places (e.g. `event_service.hpp`, etc).\n\u003e \n\u003e I think this implies that the compiler may loose the opportunities like inline of the short funcs, and/or size or speed optimizations.\n\nI\u0027m not seeing that in my testing.  See other comment.",
      "parentUuid": "8bbc64a7_8066f4b7",
      "revId": "e32eb335e4dec0246b5b38ab8c8210532b69aed9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3986411d_873cc2d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-11-18T15:28:32Z",
      "side": 1,
      "message": "ACK",
      "parentUuid": "0b735a2f_b38cfce0",
      "revId": "e32eb335e4dec0246b5b38ab8c8210532b69aed9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
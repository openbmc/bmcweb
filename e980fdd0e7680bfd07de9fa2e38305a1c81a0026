{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "18a572cf_a7bb5f5a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-18T15:12:53Z",
      "side": 1,
      "message": "Can you add more details here?  ObjectMapper is async, and should always respond in a timely manner.  If it\u0027s not, something is broken internally in the mapper, and we probably shouldn\u0027t be covering it up.",
      "range": {
        "startLine": 10,
        "startChar": 31,
        "endLine": 10,
        "endChar": 64
      },
      "revId": "e980fdd0e7680bfd07de9fa2e38305a1c81a0026",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4654663f_87554485",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-07-20T07:34:26Z",
      "side": 1,
      "message": "sdbusplus has a timeout mechanism for async_method_call. Since ObjectMapper response is not received in sdbusplus before timer expires callback is called with timeout error.\n\nThis error is likely to happen on slower systems or systems with many objects and interfaces.",
      "parentUuid": "18a572cf_a7bb5f5a",
      "range": {
        "startLine": 10,
        "startChar": 31,
        "endLine": 10,
        "endChar": 64
      },
      "revId": "e980fdd0e7680bfd07de9fa2e38305a1c81a0026",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24a548ac_eae4c498",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-20T14:25:51Z",
      "side": 1,
      "message": "\u003e sdbusplus has a timeout mechanism for async_method_call. Since ObjectMapper response is not received in sdbusplus before timer expires callback is called with timeout error.\n\u003e \n\u003e This error is likely to happen on slower systems or systems with many objects and interfaces.\n\nThat still seems like a mapper bug.  The mapper is pretty darn efficient code, and is operating on a dataset entirely in memory.  I\u0027m really surprised it can\u0027t respond in all cases unless something else is going wrong.",
      "parentUuid": "4654663f_87554485",
      "range": {
        "startLine": 10,
        "startChar": 31,
        "endLine": 10,
        "endChar": 64
      },
      "revId": "e980fdd0e7680bfd07de9fa2e38305a1c81a0026",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "542b5d6d_33da63e0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1001549
      },
      "writtenOn": "2022-07-21T06:39:44Z",
      "side": 1,
      "message": "In our testing PMT is adding over 4000 sensors on dbus. When those objects are added or removed mapperx process utilizes about 45% of cpu for about 2-3 minutes and is not responding to any dbus calls. Same situation can be observed when the objects are already present and ObjectMapper service is restarted.",
      "parentUuid": "24a548ac_eae4c498",
      "range": {
        "startLine": 10,
        "startChar": 31,
        "endLine": 10,
        "endChar": 64
      },
      "revId": "e980fdd0e7680bfd07de9fa2e38305a1c81a0026",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd437d69_bd63274f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-07-21T11:11:47Z",
      "side": 1,
      "message": "So object mapper is parsing all objects on dbus during first request, then it keeps data in memory so it can respond much faster. Pawel does this timeout occurs only one time after starting/restarting object mapper or does it happens all the time?",
      "parentUuid": "542b5d6d_33da63e0",
      "range": {
        "startLine": 10,
        "startChar": 31,
        "endLine": 10,
        "endChar": 64
      },
      "revId": "e980fdd0e7680bfd07de9fa2e38305a1c81a0026",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73894577_2b5c9ea4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1001549
      },
      "writtenOn": "2022-07-21T11:25:52Z",
      "side": 1,
      "message": "It happens after each start of ObjectMapper service or after adding/removing many dbus objects.\n\u003e So object mapper is parsing all objects on dbus during first request\nI\u0027m not sure if it\u0027s related to any request. mapperx process utilizes CPU for 2-3 minutes after restart even without sending requests to it (might be some other process sending the request, but that seems unlikely) Looks like it\u0027s some initialization phase that gets stuck with many dbus objects.",
      "parentUuid": "bd437d69_bd63274f",
      "range": {
        "startLine": 10,
        "startChar": 31,
        "endLine": 10,
        "endChar": 64
      },
      "revId": "e980fdd0e7680bfd07de9fa2e38305a1c81a0026",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb21a2d1_8e869565",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-21T15:35:34Z",
      "side": 1,
      "message": "\u003e In our testing PMT is adding over 4000 sensors on dbus. \n\nYes, if you intentionally overload dbus, things will have problems, and IMO, the system is giving the right error message here.  Something went wrong internally (the mapper didn\u0027t reply because it was locked up).  The current sensor subsystem was designed for ipmi limits of 256, although it\u0027s likely good to about 1000 sensors.\n\nAlso, in the future, when you do testing like this, PLEASE add it to your commit message.  It helps to explain what you\u0027re trying to accomplish and that this didn\u0027t occur in a \"normal\" system.\n\n\n\u003e When those objects are added or removed mapperx process utilizes about 45% of cpu for about 2-3 minutes and is not responding to any dbus calls\n\nI\u0027m guessing you added 4000 objects to one daemon?  That\u0027s well outside the limits of what the mapper is intended to handle (but could be made to handle more).  Have you tried 40 daemons with 100 sensors each (which is more likely in this scenario).\n\n\nI\u0027m still of the position that this is a mapper bug.  If we want to make it parse single-daemons with lots of objects, that\u0027s pretty doable to make work, we just need to pause the XML parsing, and return control to the io_context once in a while so that it can answer dbus messages in a timely manner.  That\u0027s the patch that needs added, not something that tells the user to try again later.  What if the mapper is completely locked up forever?  We shouldn\u0027t tell the user to try again later forever.\n\n\n\u003e Looks like it\u0027s some initialization phase that gets stuck with many dbus objects.\n\nWithout seeing your code, it\u0027s hard to speculate.  Can you try running your tests with this test tool? https://github.com/openbmc/openbmc-tools/tree/master/dbus_sensor_tester\nIt\u0027s likely parsing the gigantic XML that would be generated from a 4000 sensor daemon, and that takes a little time (although 2-3 minutes seems high).",
      "parentUuid": "73894577_2b5c9ea4",
      "range": {
        "startLine": 10,
        "startChar": 31,
        "endLine": 10,
        "endChar": 64
      },
      "revId": "e980fdd0e7680bfd07de9fa2e38305a1c81a0026",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
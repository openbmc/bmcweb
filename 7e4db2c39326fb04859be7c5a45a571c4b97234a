{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "24b6136b_107df1e9",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-08-21T21:47:30Z",
      "side": 1,
      "message": "Since the message response is the same for the error here and for below L267-272, I think it would be helpful to add a BMCWEB_LOG_DEBUG() message here.",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "459b0997_4f8db38e",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 313,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-08-21T21:47:30Z",
      "side": 1,
      "message": "Is sdbusplus::message::object_path.filename() ever going to return something with a \u0027/\u0027 character still in it?\n\nSeems like could just check if (systemId \u003d\u003d systemName) here and skip the split above.",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 313,
        "endChar": 8
      },
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee8f74bc_4d1af210",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 313,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-22T14:55:12Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "459b0997_4f8db38e",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 313,
        "endChar": 8
      },
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "692def5d_298d6e39",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 313,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2024-08-22T17:48:15Z",
      "side": 1,
      "message": "You are right. Changed accordingly and removed the splitting part.",
      "parentUuid": "459b0997_4f8db38e",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 313,
        "endChar": 8
      },
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae269863_fb45af61",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-08-21T21:47:30Z",
      "side": 1,
      "message": "Why is this wrapper needed? I.e. why not just call getValidSystemPaths() directly from the callers?",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "790f2e69_c83c9dcf",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2024-08-22T17:48:15Z",
      "side": 1,
      "message": "This function should be called in various header files in redfish-core, not only systems.hpp. The wrapper serves solely the reason to provide a clear name that indicates what is going to happen.\nI could rename getValidSystemPaths to getComputerSystemDBusResources, but I felt doing it this way we end up having a  well named entry point to be used in other header files, and every subsequent call in the flow has a clear functionname-\u003efunctionality mapping.",
      "parentUuid": "ae269863_fb45af61",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e015e95_e672d973",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-08-22T20:56:02Z",
      "side": 1,
      "message": "I don\u0027t have a strong opinion on this one. I suppose the compiler will probably optimize out the additional stack anyway.",
      "parentUuid": "790f2e69_c83c9dcf",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f39871a_f9c3f0b5",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-08-21T21:47:30Z",
      "side": 1,
      "message": "Missing \u0027interface\u0027 param description",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef510c22_8cde6e80",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2024-08-22T17:48:15Z",
      "side": 1,
      "message": "Done. Added missing param description.",
      "parentUuid": "5f39871a_f9c3f0b5",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6b6676c_dd9290a5",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-22T14:55:12Z",
      "side": 1,
      "message": "This function doesn\u0027t look used anywhere.   I\u0027m not really clear on why it\u0027s so complex.\n\nGor examples:\nWhat is reqParams, and why is it passed all the way through?\nWhy are we calling the mapper 3 times?  (GetSubTreePaths, GetSubTree, and GetObject).  This should be 1, but it\u0027s not clear what we\u0027re attempting enough to give you a way to solve it.\nWhy are we writing a function for a one line call?\n\nNo need to answer these questions, lets just get an example of this being used, and we can burn it down.",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48d9eec8_698417d0",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2024-08-22T17:48:15Z",
      "side": 1,
      "message": "I provided some uses in systems.hpp. Also you are right the reqParams don\u0027t need to be passed to the callback, removed it.",
      "parentUuid": "c6b6676c_dd9290a5",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "048fff58_0703fefd",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2024-09-09T11:29:49Z",
      "side": 1,
      "message": "In order to revive the discussion, I will answer your question on the dbus usage (the other two questions I have already answered): \nFor context, on single-host we typically know three things ahead of the request: the dbus interface, service name and object path. I.e:\n\niface:   xyz.openbmc_project.State.Host \nservice: xyz.openbmc_project.State.Host \npath:   /xyz/openbmc_project/state/host0 \n\nOn multi-host we only know the interface ahead of the request. Dbus service name is unclear what it is called exactly (we could assume it is xyz.openbmc_project.State.Host$idx, but then we would end up with constructing service names by appending indices, also I am not sure if it is guaranteed that this works for other services aswell). Same for object paths, we could construct them manually, i.e /xyz/openbmc_project/state/host + $idx, which was the initial approach but as I understood, is not the method we are looking for. So we end up with getting all the missing dbus resources via dbus calls. The complexity mainly comes from the fact that service name and object path to the requested interface are unknown ahead of the request, when we are on multi-host. \nOn top of that, before we can find any of those, we need to retrieve the HostIndex property, so we can do the mapping correctly.",
      "parentUuid": "48d9eec8_698417d0",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca650220_4ade9648",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-09T15:55:12Z",
      "side": 1,
      "message": "\u003e In order to revive the discussion, I will answer your question on the dbus usage (the other two questions I have already answered): \n\u003e For context, on single-host we typically know three things ahead of the request: the dbus interface, service name and object path. I.e:\n\u003e \n\u003e iface:   xyz.openbmc_project.State.Host \n\u003e service: xyz.openbmc_project.State.Host \n\u003e path:   /xyz/openbmc_project/state/host0 \n\u003e \n\u003e On multi-host we only know the interface ahead of the request. Dbus service name is unclear what it is called exactly (we could assume it is xyz.openbmc_project.State.Host$idx, but then we would end up with constructing service names by appending indices, also I am not sure if it is guaranteed that this works for other services aswell).\n\u003e Same for object paths, we could construct them manually, i.e /xyz/openbmc_project/state/host + $idx, which was the initial approach but as I understood, is not the method we are looking for.\n\u003e So we end up with getting all the missing dbus resources via dbus calls. The complexity mainly comes from the fact that service name and object path to the requested interface are unknown ahead of the request, when we are on multi-host. \n\u003e On top of that, before we can find any of those, we need to retrieve the HostIndex property, so we can do the mapping correctly.\n\n\nGenerally we use the mapper to find service names and object paths to make any sort of URL construction moot.\n\nSomething like:\nGetSubtreePaths(\"xyz.openbmc_project.State.Host\", \"/xyz/openbmc_project/state\", 0);\n\nWhich would return you all the paths that have state interfaces.  The catch is that because the ManagedHost is an inventory item, and you\u0027re using that to build the collection, you need an association to determine \"this is the correct power object for this managed host\".  I suspect we\u0027ll need to come up with a \"power control for\" association to be able to identify which power controller to use for which managed host.  The interface name could be made more generic possibly, but that\u0027s something we should discuss in a PDI review.\n\nAs this patchset stands, you\u0027re proposing doing a lot of that using path manipulation, and relying on things following a preset naming pattern (integer indexes at the end, filename{} of the dbus path matches between inventory and state namespace) that aren\u0027t well defined in our current DBus specs.",
      "parentUuid": "048fff58_0703fefd",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30da95db_c7837dc9",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-09T22:44:19Z",
      "side": 1,
      "message": "FYI, here\u0027s an example of doing a similar lookup for Inventory -\u003e Sensor\nhttps://github.com/openbmc/bmcweb/blob/e3142e80dc05632d04a1cc4c9539225afa4ab391/redfish-core/lib/sensors.hpp#L454",
      "parentUuid": "ca650220_4ade9648",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd47caff_b2bd6dad",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2024-09-10T12:57:40Z",
      "side": 1,
      "message": "Hi Ed, thank you for the input! yes I thought about dbus associations aswell, will look further into that, and the example you have provided. From my current understanding this would solve excessive dbus calls quite well. I would continue to come up with a solution for pdi, unless this is something somebody else normally handles? \nAlso, I would expect, we would like to do it in a similar fashion for single host aswell then?",
      "parentUuid": "30da95db_c7837dc9",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6c9556d_55d20c6b",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-09-10T15:14:45Z",
      "side": 1,
      "message": "I don\u0027t really think we want to add associations at this point for all of these operations.  It requires every daemon to now understand how their states are related to the inventory, which might be \"better\" but it isn\u0027t how we\u0027ve already done things and it is quite a bit of extra code to put in every other daemon.\n\nThere was already a number of pre-existing design documentation that suggests \"fooN means it is related to hostN\", so we\u0027re leveraging that with the ManagedHost inventory decorator to make it easier for `bmcweb` (as had been previously requested).\n\nIt seems to me, asking for every other daemon to be re-written to incorporate [currently undefined] associations is way outside the scope here and yet another \"go in a different direction now that the code is here\".",
      "parentUuid": "bd47caff_b2bd6dad",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
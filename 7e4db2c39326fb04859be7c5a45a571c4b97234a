{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "24b6136b_107df1e9",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-08-21T21:47:30Z",
      "side": 1,
      "message": "Since the message response is the same for the error here and for below L267-272, I think it would be helpful to add a BMCWEB_LOG_DEBUG() message here.",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3caafd5a_e7765d80",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2025-03-27T15:23:25Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "24b6136b_107df1e9",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "459b0997_4f8db38e",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 313,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-08-21T21:47:30Z",
      "side": 1,
      "message": "Is sdbusplus::message::object_path.filename() ever going to return something with a \u0027/\u0027 character still in it?\n\nSeems like could just check if (systemId \u003d\u003d systemName) here and skip the split above.",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 313,
        "endChar": 8
      },
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee8f74bc_4d1af210",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 313,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-22T14:55:12Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "459b0997_4f8db38e",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 313,
        "endChar": 8
      },
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "692def5d_298d6e39",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 313,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2024-08-22T17:48:15Z",
      "side": 1,
      "message": "You are right. Changed accordingly and removed the splitting part.",
      "parentUuid": "459b0997_4f8db38e",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 313,
        "endChar": 8
      },
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae269863_fb45af61",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-08-21T21:47:30Z",
      "side": 1,
      "message": "Why is this wrapper needed? I.e. why not just call getValidSystemPaths() directly from the callers?",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "790f2e69_c83c9dcf",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2024-08-22T17:48:15Z",
      "side": 1,
      "message": "This function should be called in various header files in redfish-core, not only systems.hpp. The wrapper serves solely the reason to provide a clear name that indicates what is going to happen.\nI could rename getValidSystemPaths to getComputerSystemDBusResources, but I felt doing it this way we end up having a  well named entry point to be used in other header files, and every subsequent call in the flow has a clear functionname-\u003efunctionality mapping.",
      "parentUuid": "ae269863_fb45af61",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e015e95_e672d973",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-08-22T20:56:02Z",
      "side": 1,
      "message": "I don\u0027t have a strong opinion on this one. I suppose the compiler will probably optimize out the additional stack anyway.",
      "parentUuid": "790f2e69_c83c9dcf",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdce064a_7107b1d1",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2025-03-27T15:23:25Z",
      "side": 1,
      "message": "Done. Not using this type of wrapper anymore.",
      "parentUuid": "5e015e95_e672d973",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f39871a_f9c3f0b5",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-08-21T21:47:30Z",
      "side": 1,
      "message": "Missing \u0027interface\u0027 param description",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef510c22_8cde6e80",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2024-08-22T17:48:15Z",
      "side": 1,
      "message": "Done. Added missing param description.",
      "parentUuid": "5f39871a_f9c3f0b5",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6b6676c_dd9290a5",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-22T14:55:12Z",
      "side": 1,
      "message": "This function doesn\u0027t look used anywhere.   I\u0027m not really clear on why it\u0027s so complex.\n\nGor examples:\nWhat is reqParams, and why is it passed all the way through?\nWhy are we calling the mapper 3 times?  (GetSubTreePaths, GetSubTree, and GetObject).  This should be 1, but it\u0027s not clear what we\u0027re attempting enough to give you a way to solve it.\nWhy are we writing a function for a one line call?\n\nNo need to answer these questions, lets just get an example of this being used, and we can burn it down.",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48d9eec8_698417d0",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2024-08-22T17:48:15Z",
      "side": 1,
      "message": "I provided some uses in systems.hpp. Also you are right the reqParams don\u0027t need to be passed to the callback, removed it.",
      "parentUuid": "c6b6676c_dd9290a5",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "048fff58_0703fefd",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2024-09-09T11:29:49Z",
      "side": 1,
      "message": "In order to revive the discussion, I will answer your question on the dbus usage (the other two questions I have already answered): \nFor context, on single-host we typically know three things ahead of the request: the dbus interface, service name and object path. I.e:\n\niface:   xyz.openbmc_project.State.Host \nservice: xyz.openbmc_project.State.Host \npath:   /xyz/openbmc_project/state/host0 \n\nOn multi-host we only know the interface ahead of the request. Dbus service name is unclear what it is called exactly (we could assume it is xyz.openbmc_project.State.Host$idx, but then we would end up with constructing service names by appending indices, also I am not sure if it is guaranteed that this works for other services aswell). Same for object paths, we could construct them manually, i.e /xyz/openbmc_project/state/host + $idx, which was the initial approach but as I understood, is not the method we are looking for. So we end up with getting all the missing dbus resources via dbus calls. The complexity mainly comes from the fact that service name and object path to the requested interface are unknown ahead of the request, when we are on multi-host. \nOn top of that, before we can find any of those, we need to retrieve the HostIndex property, so we can do the mapping correctly.",
      "parentUuid": "48d9eec8_698417d0",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca650220_4ade9648",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-09T15:55:12Z",
      "side": 1,
      "message": "\u003e In order to revive the discussion, I will answer your question on the dbus usage (the other two questions I have already answered): \n\u003e For context, on single-host we typically know three things ahead of the request: the dbus interface, service name and object path. I.e:\n\u003e \n\u003e iface:   xyz.openbmc_project.State.Host \n\u003e service: xyz.openbmc_project.State.Host \n\u003e path:   /xyz/openbmc_project/state/host0 \n\u003e \n\u003e On multi-host we only know the interface ahead of the request. Dbus service name is unclear what it is called exactly (we could assume it is xyz.openbmc_project.State.Host$idx, but then we would end up with constructing service names by appending indices, also I am not sure if it is guaranteed that this works for other services aswell).\n\u003e Same for object paths, we could construct them manually, i.e /xyz/openbmc_project/state/host + $idx, which was the initial approach but as I understood, is not the method we are looking for.\n\u003e So we end up with getting all the missing dbus resources via dbus calls. The complexity mainly comes from the fact that service name and object path to the requested interface are unknown ahead of the request, when we are on multi-host. \n\u003e On top of that, before we can find any of those, we need to retrieve the HostIndex property, so we can do the mapping correctly.\n\n\nGenerally we use the mapper to find service names and object paths to make any sort of URL construction moot.\n\nSomething like:\nGetSubtreePaths(\"xyz.openbmc_project.State.Host\", \"/xyz/openbmc_project/state\", 0);\n\nWhich would return you all the paths that have state interfaces.  The catch is that because the ManagedHost is an inventory item, and you\u0027re using that to build the collection, you need an association to determine \"this is the correct power object for this managed host\".  I suspect we\u0027ll need to come up with a \"power control for\" association to be able to identify which power controller to use for which managed host.  The interface name could be made more generic possibly, but that\u0027s something we should discuss in a PDI review.\n\nAs this patchset stands, you\u0027re proposing doing a lot of that using path manipulation, and relying on things following a preset naming pattern (integer indexes at the end, filename{} of the dbus path matches between inventory and state namespace) that aren\u0027t well defined in our current DBus specs.",
      "parentUuid": "048fff58_0703fefd",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30da95db_c7837dc9",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-09T22:44:19Z",
      "side": 1,
      "message": "FYI, here\u0027s an example of doing a similar lookup for Inventory -\u003e Sensor\nhttps://github.com/openbmc/bmcweb/blob/e3142e80dc05632d04a1cc4c9539225afa4ab391/redfish-core/lib/sensors.hpp#L454",
      "parentUuid": "ca650220_4ade9648",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd47caff_b2bd6dad",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2024-09-10T12:57:40Z",
      "side": 1,
      "message": "Hi Ed, thank you for the input! yes I thought about dbus associations aswell, will look further into that, and the example you have provided. From my current understanding this would solve excessive dbus calls quite well. I would continue to come up with a solution for pdi, unless this is something somebody else normally handles? \nAlso, I would expect, we would like to do it in a similar fashion for single host aswell then?",
      "parentUuid": "30da95db_c7837dc9",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6c9556d_55d20c6b",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-09-10T15:14:45Z",
      "side": 1,
      "message": "I don\u0027t really think we want to add associations at this point for all of these operations.  It requires every daemon to now understand how their states are related to the inventory, which might be \"better\" but it isn\u0027t how we\u0027ve already done things and it is quite a bit of extra code to put in every other daemon.\n\nThere was already a number of pre-existing design documentation that suggests \"fooN means it is related to hostN\", so we\u0027re leveraging that with the ManagedHost inventory decorator to make it easier for `bmcweb` (as had been previously requested).\n\nIt seems to me, asking for every other daemon to be re-written to incorporate [currently undefined] associations is way outside the scope here and yet another \"go in a different direction now that the code is here\".",
      "parentUuid": "bd47caff_b2bd6dad",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a26db894_0f636d2c",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-11T15:46:57Z",
      "side": 1,
      "message": "\u003e I don\u0027t really think we want to add associations at this point for all of these operations.  It requires every daemon to now understand how their states are related to the inventory, which might be \"better\" but it isn\u0027t how we\u0027ve already done things and it is quite a bit of extra code to put in every other daemon.\n\u003e \n\u003e There was already a number of pre-existing design documentation that suggests \"fooN means it is related to hostN\", so we\u0027re leveraging that with the ManagedHost inventory decorator to make it easier for `bmcweb` (as had been previously requested).\n\n\nMost daemons already do this (bind associations to inventory items), so I\u0027m not really following why this is a heavy lift?  Knowing X inventory/log/whatever applies to Y host is an important requirement for the whole ComputerSystems collection, not just power control.  My primary worry here is that we\u0027ve only considered power control in this patch, and there\u0027s not something general that gets us to where the remaining items in computer system collection are multi-host.\n\nThere\u0027s a lot more than Power control in ComputerSystem, and to my understanding the above design would _only_ work for power control.  Just to rehash what was talked about a year ago when this effort started, these are all the URIs under ComputerSystemCollection.  Each needs to have a mechanism to make them multihost before we can remove the experimental option and rely on DBus.\n\n/redfish/v1/Systems/\u003cstr\u003e/Actions/ComputerSystem.Reset/\n/redfish/v1/Systems/\u003cstr\u003e/Bios/\n/redfish/v1/Systems/\u003cstr\u003e/Bios/Actions/Bios.ResetBios/\n/redfish/v1/Systems/\u003cstr\u003e/FabricAdapters/\n/redfish/v1/Systems/\u003cstr\u003e/FabricAdapters/\u003cstr\u003e/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/Crashdump/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/Crashdump/Actions/LogService.ClearLog/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/Crashdump/Actions/LogService.CollectDiagnosticData/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/Crashdump/Entries/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/Crashdump/Entries/\u003cstr\u003e/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/Crashdump/Entries/\u003cstr\u003e/\u003cstr\u003e/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/Dump/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/Dump/Actions/LogService.ClearLog/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/Dump/Actions/LogService.CollectDiagnosticData/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/Dump/Entries/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/Dump/Entries/\u003cstr\u003e/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/EventLog/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/EventLog/Actions/LogService.ClearLog/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/EventLog/Entries/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/EventLog/Entries/\u003cstr\u003e/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/EventLog/Entries/\u003cstr\u003e/attachment/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/HostLogger/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/HostLogger/Entries/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/HostLogger/Entries/\u003cstr\u003e/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/PostCodes/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/PostCodes/Actions/LogService.ClearLog/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/PostCodes/Entries/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/PostCodes/Entries/\u003cstr\u003e/\n/redfish/v1/Systems/\u003cstr\u003e/LogServices/PostCodes/Entries/\u003cstr\u003e/attachment/\n/redfish/v1/Systems/\u003cstr\u003e/Memory/\n/redfish/v1/Systems/\u003cstr\u003e/Memory/\u003cstr\u003e/\n/redfish/v1/Systems/\u003cstr\u003e/PCIeDevices/\n/redfish/v1/Systems/\u003cstr\u003e/PCIeDevices/\u003cstr\u003e/\n/redfish/v1/Systems/\u003cstr\u003e/PCIeDevices/\u003cstr\u003e/PCIeFunctions/\n/redfish/v1/Systems/\u003cstr\u003e/PCIeDevices/\u003cstr\u003e/PCIeFunctions/\u003cstr\u003e/\n/redfish/v1/Systems/\u003cstr\u003e/Processors/\n/redfish/v1/Systems/\u003cstr\u003e/Processors/\u003cstr\u003e/\n/redfish/v1/Systems/\u003cstr\u003e/Processors/\u003cstr\u003e/OperatingConfigs/\n/redfish/v1/Systems/\u003cstr\u003e/Processors/\u003cstr\u003e/OperatingConfigs/\u003cstr\u003e/\n/redfish/v1/Systems/\u003cstr\u003e/ResetActionInfo/\n/redfish/v1/Systems/\u003cstr\u003e/Storage/\n/redfish/v1/Systems/\u003cstr\u003e/Storage/1/Controllers/\n/redfish/v1/Systems/\u003cstr\u003e/Storage/1/Drives/\u003cstr\u003e/\n/redfish/v1/Systems/\u003cstr\u003e/Storage/\u003cstr\u003e/\n\nIf we\u0027d like to use fixed interface/path naming holistically for all of the above, and have a common system based on names for logs/sensors/power, I\u0027m happy to have that discussion, but to my understanding that\u0027s not what this patch is proposing, it\u0027s _just_ a change to state manager.\n\n\u003e \n\u003e It seems to me, asking for every other daemon to be re-written to incorporate [currently undefined] associations is way outside the scope here and yet another \"go in a different direction now that the code is here\".\n\nGoing back to relying on known dbus object paths, names, or path hiearchy was discussed during https://github.com/openbmc/technical-oversight-forum/issues/18\n\nI don\u0027t think anything has changed since then?",
      "parentUuid": "f6c9556d_55d20c6b",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2992b03_bbf8fd6e",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-09-11T16:31:10Z",
      "side": 1,
      "message": "\u003e Going back to relying on known dbus object paths, names, or path hiearchy was discussed during https://github.com/openbmc/technical-oversight-forum/issues/18\n\nI was not thinking that far back in time.  I was thinking in terms of the earlier versions of this patch set.  https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/72414 was added to satisfy your earlier concerns, and you +1\u0027d the dbus interface.  Now that we\u0027re trying to use it, you want yet another direction...\n\nIssue 18 was specifically scoped to inventory because nobody signed up to fix all the other daemons.\n\n`ComputerSystem.Reset` is handled by this approach.\n`Bios.ResetBios` only works on IBM systems anyhow and the software design already has architecture around \"slots\".\nMost of the elements you posted are Inventory related, which probably work with associations per the issue#18 you posted.\n`Crashdump` design doesn\u0027t handle multi-host at all yet so it is hard to reason about.\n`EventLog` design internals also do not explicitly handle multi-host; there is one big log for the BMC.\n`PostCodes` is handled by this approach.\n`HostLogger` is handled by this approach.\n\nSo, it seems to me like this approach covers most of the necessary end-points beyond just \"state management\".",
      "parentUuid": "a26db894_0f636d2c",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "855eadff_0de30bea",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-11T16:56:32Z",
      "side": 1,
      "message": "\u003e \u003e Going back to relying on known dbus object paths, names, or path hiearchy was discussed during https://github.com/openbmc/technical-oversight-forum/issues/18\n\u003e \n\u003e I was not thinking that far back in time.  I was thinking in terms of the earlier versions of this patch set.  https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/72414 was added to satisfy your earlier concerns, and you +1\u0027d the dbus interface.  Now that we\u0027re trying to use it, you want yet another direction...\n\u003e \n\nThis issue was pointed out in that review.  To quote myself:\n```I\u0027m not sure bmcweb needs this parameter, it\u0027s going to rely on the dbus path to build unique references similar to how we handle sensors and other inventory, but if it\u0027s useful to other systems, rock on.```\n\nIt looks like that comment series was closed the same day that thread was opened without anyone responding to the fact that this isn\u0027t how bmcweb deals with dbus, so I had assumed I was heard.  Seems like a simple miscommunication, nbd.  Lets try to improve on that in the future, but I like to think I made this clear in that review, and I was surprised to see this patch show up in its current form.\n\n\u003e Issue 18 was specifically scoped to inventory because nobody signed up to fix all the other daemons.\n\nACK, true, it was related to inventory, but changing Redfish ComputerSystem does deal with Inventory, which is why I assumed it was related.\n\n\u003e \n\u003e `ComputerSystem.Reset` is handled by this approach.\n\u003e `Bios.ResetBios` only works on IBM systems anyhow and the software design already has architecture around \"slots\".\n\u003e Most of the elements you posted are Inventory related, which probably work with associations per the issue#18 you posted.\n\u003e `Crashdump` design doesn\u0027t handle multi-host at all yet so it is hard to reason about.\n\u003e `EventLog` design internals also do not explicitly handle multi-host; there is one big log for the BMC.\n\u003e `PostCodes` is handled by this approach.\n\u003e `HostLogger` is handled by this approach.\n\u003e \n\u003e So, it seems to me like this approach covers most of the necessary end-points beyond just \"state management\".\n\n\nThe above is exactly the point I\u0027m making.  We\u0027re going to do 1 thing for power control, and something completely different for inventory tracking, and we have to make a 6 bullet item list to determine which resource is using which method.  That flow wasn\u0027t documented anywhere that i\u0027m aware of, nor was the idea of ignoring some of them in porting over the ComputerSystem object.  If that 6 bullet item list is truly what we\u0027re trying to design generally, and we\u0027re using 3 mechanisms, slots, associations, and fixed dbus path naming, lets get that mapped out somewhere which things are using which, and lets see what needs to live behind an option flag, because I\u0027m confused how that would work between existing hosts and multi-host.\n\nThe way Refish works as a tree, you can\u0027t have one mechanism for determining the \"hosts\" at the ComputerSystemCollection level, then have a different mechanism for determining hosts deeper down the tree.  It would be good to see at least one example of each slots, inventory associations, and fixed naming working in tandem under a dbus-owned ComputerSystem.",
      "parentUuid": "c2992b03_bbf8fd6e",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fac2207_2e89b504",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-09-11T17:43:21Z",
      "side": 1,
      "message": "From that discussion in PDI commit:\n\n\u003e Ideally they\u0027d be an association look up but until we can get a handle around all the missing associations, we\u0027d use this index.\n\nI thought we were previously aligned through earlier renditions of this commit and that discussion that the use of any kind of Index isn\u0027t intended to be the ideal long-term solution, but enough to be able to gauge what all the work is on the other existing daemons (by a series of commits like this one showing up using the index).\n\n\u003e The way Refish works as a tree, you can\u0027t have one mechanism for determining the \"hosts\" at the ComputerSystemCollection level, then have a different mechanism for determining hosts deeper down the tree. It would be good to see at least one example of each slots, inventory associations, and fixed naming working in tandem under a dbus-owned ComputerSystem.\n\nI\u0027m not understanding what this is referring to.  Everything that isn\u0027t supported with associations today (ie. everything outside inventory and _maybe_ sensors) uses an index-based identifier for the host.\n\n\u003e we\u0027re using 3 mechanisms\n\nMaybe I mis-worded something.  It should only be \"static paths + index\" or \"associations\".  The firmware update design talks to \"slots\" because it also has to handle dual flash banks, CPLDs, etc. but when it comes to the host firmware entities I believe they\u0027re all index based in the current implementation.",
      "parentUuid": "855eadff_0de30bea",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b508087_685166de",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-11T17:55:53Z",
      "side": 1,
      "message": "\u003e From that discussion in PDI commit:\n\u003e \n\u003e \u003e Ideally they\u0027d be an association look up but until we can get a handle around all the missing associations, we\u0027d use this index.\n\u003e \n\u003e I thought we were previously aligned through earlier renditions of this commit and that discussion that the use of any kind of Index isn\u0027t intended to be the ideal long-term solution, but enough to be able to gauge what all the work is on the other existing daemons (by a series of commits like this one showing up using the index).\n\nI\u0027m fine with that so long as we don\u0027t break the existing single-host systems.  Right now, there\u0027s not enough implemented in the backend daemons, so this series currently breaks single-host systems.  If we need to use the existing experimental option flag as a crutch longer than it was intended to make progress, I\u0027m happy to have that discussion.\n\n\u003e \n\u003e \u003e The way Refish works as a tree, you can\u0027t have one mechanism for determining the \"hosts\" at the ComputerSystemCollection level, then have a different mechanism for determining hosts deeper down the tree. It would be good to see at least one example of each slots, inventory associations, and fixed naming working in tandem under a dbus-owned ComputerSystem.\n\u003e \n\u003e I\u0027m not understanding what this is referring to.  Everything that isn\u0027t supported with associations today (ie. everything outside inventory and _maybe_ sensors) uses an index-based identifier for the host.\n\nI don\u0027t think there\u0027s an association for \"this component belongs to ManagedHost X\".  Maybe I missed it in the reviews?\n\n\u003e \n\u003e \u003e we\u0027re using 3 mechanisms\n\u003e \n\u003e Maybe I mis-worded something.  It should only be \"static paths + index\" or \"associations\".  The firmware update design talks to \"slots\" because it also has to handle dual flash banks, CPLDs, etc. but when it comes to the host firmware entities I believe they\u0027re all index based in the current implementation.\n\nAH, that\u0027s what slots meant.  Ok.  So we\u0027re down to 2, index and association.  Lets get examples of both in this series and I think the technical issues will be things that we can solve over time.\n\nLong term, I think we\u0027re in agreement that everything related to a \"host\" needs an association?\n\n@Oliver, if you\u0027re on discord, we can probably uplevel some of this chat there and get faster response times.",
      "parentUuid": "6fac2207_2e89b504",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad57e5bf_a5d85560",
        "filename": "redfish-core/include/utils/systems_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1002065
      },
      "writtenOn": "2025-03-27T15:23:25Z",
      "side": 1,
      "message": "Marking this as resolved, the discussion moved to discord: \nhttps://discord.comchannels/775381525260664832/1291015132851212330\nThe initial comment was referring to code that no longer exists in that form.",
      "parentUuid": "4b508087_685166de",
      "revId": "7e4db2c39326fb04859be7c5a45a571c4b97234a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
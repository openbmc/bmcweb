{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0985d6c4_2bf18a05",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-18T17:36:54Z",
      "side": 1,
      "message": "Minor changes.",
      "revId": "00d63b2ee81d7e4b29ccebad87ceea2f657fb40e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e09bd1f4_edcad216",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 880,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-18T17:36:54Z",
      "side": 1,
      "message": "\"memfd\" is an internal detail that shouldn\u0027t be exposed to users.  I think this is supposed to be a URI?",
      "range": {
        "startLine": 880,
        "startChar": 56,
        "endLine": 880,
        "endChar": 61
      },
      "revId": "00d63b2ee81d7e4b29ccebad87ceea2f657fb40e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9baceb5_efb1dbac",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 880,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-18T17:49:46Z",
      "side": 1,
      "message": "\u003e I think this is supposed to be a URI?\n\nI do not see how to construct a unique URI here, since no task has yet been created and i assume we discard the package on failure to discard the update.\n\nmessage registry spec for `UpdateSkipped` says\n```\n2. string: The identifier for the image.\n◦ This argument shall contain the identifier for the image\n```\n\nNow that `memfd` identifier is not unique so it does not `identify` anything.\nDo you think it makes sense to compute the hash of the pldm package blob we receive?\n\nThat way we could refer to it, uniquely, without having to keep it around, but there may be some delay while computing the hash.",
      "parentUuid": "e09bd1f4_edcad216",
      "range": {
        "startLine": 880,
        "startChar": 56,
        "endLine": 880,
        "endChar": 61
      },
      "revId": "00d63b2ee81d7e4b29ccebad87ceea2f657fb40e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "212e459b_a2a25cff",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 880,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-18T17:59:07Z",
      "side": 1,
      "message": "\u003e \u003e I think this is supposed to be a URI?\n\u003e \n\u003e I do not see how to construct a unique URI here, since no task has yet been created and i assume we discard the package on failure to discard the update.\n\u003e \n\u003e message registry spec for `UpdateSkipped` says\n\u003e ```\n\u003e 2. string: The identifier for the image.\n\u003e ◦ This argument shall contain the identifier for the image\n\u003e ```\n\u003e \n\u003e Now that `memfd` identifier is not unique so it does not `identify` anything.\n\nYep, that\u0027s the problem.\n\n\u003e Do you think it makes sense to compute the hash of the pldm package blob we receive?\n\nI don\u0027t really think so given that the hash doesn\u0027t actually mean anything.  Ideally the error message would contain enough information that we can construct a correct message.  Otherwise we should stick with the more generic error message.\n\n\u003e \n\u003e That way we could refer to it, uniquely, without having to keep it around, but there may be some delay while computing the hash.",
      "parentUuid": "c9baceb5_efb1dbac",
      "range": {
        "startLine": 880,
        "startChar": 56,
        "endLine": 880,
        "endChar": 61
      },
      "revId": "00d63b2ee81d7e4b29ccebad87ceea2f657fb40e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffa3b331_bbda0ffa",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 880,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-18T18:00:12Z",
      "side": 1,
      "message": "The message here is: \"Message\": \"Device \u0027%1\u0027 skipped the update with image \u0027%2\u0027.\",\n\nSo presumably the second arg should be some kind of version information.",
      "parentUuid": "212e459b_a2a25cff",
      "range": {
        "startLine": 880,
        "startChar": 56,
        "endLine": 880,
        "endChar": 61
      },
      "revId": "00d63b2ee81d7e4b29ccebad87ceea2f657fb40e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac8fe11d_b8660d84",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 880,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-19T10:30:15Z",
      "side": 1,
      "message": "But the version information is inside the PLDM packgage, right?\n\nSo we do not have the version information here.\n\n\u003e Ideally the error message would contain enough information that we can construct a correct message. Otherwise we should stick with the more generic error message.\n\nThe intent is to give the redfish client some idea about what went wrong and to figure out if there is a temporary failure (update in progress), a fixable failure requiring change of update strategy (incorrect apply time) or an non-fixable failure if there is some issue with the update package itself.\n\nThat way an automated redfish update client can recover from some of these failures.\n\n\u003e I don\u0027t really think so given that the hash doesn\u0027t actually mean anything.\n\nThe hash allows the redfish client to map that back to whichever update package it sent. We just have to choose a hash algorithm for which there is a convenient cli tool to run it, so it works for interactive users as-well.\n\n\nIMO the package hash is *identifying* the update package better than any version string since the version string can be the *same* even if the component image is different in the PLDM package.\n\nWhat do you think?",
      "parentUuid": "ffa3b331_bbda0ffa",
      "range": {
        "startLine": 880,
        "startChar": 56,
        "endLine": 880,
        "endChar": 61
      },
      "revId": "00d63b2ee81d7e4b29ccebad87ceea2f657fb40e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cab12b4_20a9b22f",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 880,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-23T03:21:59Z",
      "side": 1,
      "message": "\u003e So we do not have the version information here.\n\nThat might be something to fix in PLDM?  Yes, differentiating errors is good.\n\nA hash isn\u0027t really human readable, so it doesn\u0027t hit the intent.\n\nStill \"memfd\" isn\u0027t something a user should be aware of, and isn\u0027t a correct construction of the error code.  If we need to extract more properties from the error to properly create the redfish, so be it.",
      "parentUuid": "ac8fe11d_b8660d84",
      "range": {
        "startLine": 880,
        "startChar": 56,
        "endLine": 880,
        "endChar": 61
      },
      "revId": "00d63b2ee81d7e4b29ccebad87ceea2f657fb40e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf0e4e85_05d0b7bc",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 880,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-23T15:08:10Z",
      "side": 1,
      "message": "\u003e A hash isn\u0027t really human readable, so it doesn\u0027t hit the intent.\n\n```\n2. string: The identifier for the image.\n◦ This argument shall contain the identifier for the image.\n```\n\nIn case of `messages::verificationFailed` the pldm package could be corrupted, right?\n\nIn which case we cannot parse it.\n\nWhich implies we have no version string in that case.\n\nNow, is it allowed to identify the package by different kinds of information in the different error messages?\n\nThat would mean the redfish client has to look up each error and based on that map back to which kind of identifying information is to be used.\n\n\u003e That might be something to fix in PLDM? Yes, differentiating errors is good.\n\nThe errors we get from fw update code do not have space for a custom message, at least not from what i have seen.\n\nSo there is no space to add any extra information there. bmcweb would have to parse the pldm package itself to extract a version string.\n\nSo we need some identifying information which everyone understands, and which works consistently in all error cases, which is the hash.\n\nWhat if we made it \n\n`${hash}_${optional_version_string}`. \n\nThat would allow clients to uniquely identify a file via the hash and then have optional version string later on in case\nit is possible to do that in the future.\n\nWe can separate with underscore. So the automated redfish client would be able to deal with errors via the hash, without having to parse the pldm package.\n\nAnd the optional version string could be shown to a human in case it\u0027s present.\n\nIMO showing a fancy message could also be confusing to the user.\n\nThey may just be uploading a pldm package and not necessarily able to parse it due to lack of tool in their environment.\n\nIn which case showing any information from inside the package could actually be confusing to the user since they would not know what you are referring to.\n\nIf you say `\"Device xyz skipped the update with image b2sum(0x1234abcd...)_v1.34\"`\nthat is something someone may be able to map back to an actual file from logs alone.\n\nIf it\u0027s only some string from inside the package you are already assuming knowledge about PLDM from the user.\n\nAnd then it gets confusing. Let\u0027s compare 2 messages\n`\"Device xyz skipped the update with image b2sum(0x1234abcd...)_v1.34\"`\n`\"Device xyz skipped the update with image b2sum(0x9448abe7...)_v1.34\"`\n\nand \n\n`\"Device xyz skipped the update with image v1.34\"`\n`\"Device xyz skipped the update with image v1.34\"`\n\nso if we only show the version string, the message is no longer properly *identifying* the update package. We need the hash to do that.\n\nWhat do you think? Is `b2sum` the right approach ?\n\nhttps://www.blake2.net/",
      "parentUuid": "9cab12b4_20a9b22f",
      "range": {
        "startLine": 880,
        "startChar": 56,
        "endLine": 880,
        "endChar": 61
      },
      "revId": "00d63b2ee81d7e4b29ccebad87ceea2f657fb40e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7ca69f2_99201cc3",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 880,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-23T18:43:54Z",
      "side": 1,
      "message": "These are not decisions to be made by the webserver.  The point is that the identifier should not be hardcoded, and should be coming from the backend OR we should use a less specific message that doesn\u0027t require a human facing identifier.  The webserver should not be hardcoding arguments like \"memfd\".\n\nThe specific implementation of that belongs in a review for whatever backend you\u0027re using.\n\n\n\u003e And the optional version string could be shown to a human in case it\u0027s present.\n\nThis is kind of the point.  in the message you\u0027ve used, this version string IS NOT optional.",
      "parentUuid": "cf0e4e85_05d0b7bc",
      "range": {
        "startLine": 880,
        "startChar": 56,
        "endLine": 880,
        "endChar": 61
      },
      "revId": "00d63b2ee81d7e4b29ccebad87ceea2f657fb40e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d56fa755_fc728311",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 923,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-18T17:36:54Z",
      "side": 1,
      "message": "dbus object paths are not filesystem object paths.  Please use the appropriate class.",
      "range": {
        "startLine": 923,
        "startChar": 10,
        "endLine": 923,
        "endChar": 31
      },
      "revId": "00d63b2ee81d7e4b29ccebad87ceea2f657fb40e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e33669b4_26ad603e",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 923,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-23T15:08:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d56fa755_fc728311",
      "range": {
        "startLine": 923,
        "startChar": 10,
        "endLine": 923,
        "endChar": 31
      },
      "revId": "00d63b2ee81d7e4b29ccebad87ceea2f657fb40e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
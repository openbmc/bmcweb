{
  "comments": [
    {
      "key": {
        "uuid": "e4fd3b64_644460d8",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1343,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2021-10-07T10:30:32Z",
      "side": 1,
      "message": "I have generally seen that in bmcweb we avoid using try-catch?\nJust wanted to know",
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2871615_46d24ddd",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1343,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-10-08T19:09:12Z",
      "side": 1,
      "message": "we do, but because we still have exceptions enabled, we do have to have some barriers in case users call methods that throw.\n\nFWIW, this check is removed in: https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/46841",
      "parentUuid": "e4fd3b64_644460d8",
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2391d406_519f7b5a",
        "filename": "http/routing.hpp",
        "patchSetId": 9
      },
      "lineNbr": 1343,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2021-10-11T09:42:05Z",
      "side": 1,
      "message": "Thanks for the info.",
      "parentUuid": "f2871615_46d24ddd",
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "943f475a_fb00a920",
        "filename": "include/nbd_proxy.hpp",
        "patchSetId": 9
      },
      "lineNbr": 329,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-08-26T18:43:57Z",
      "side": 1,
      "message": "nit: would it be faster to iternate through sessions first? \nI would expect fewer sessions then object paths",
      "range": {
        "startLine": 329,
        "startChar": 16,
        "endLine": 329,
        "endChar": 19
      },
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec9e145d_47d2faef",
        "filename": "include/nbd_proxy.hpp",
        "patchSetId": 9
      },
      "lineNbr": 329,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-26T18:50:11Z",
      "side": 1,
      "message": "I think in this context they\u0027re the same size, right?  As-is, there\u0027s no backend for this code, so it\u0027s kind of hard to optimize.",
      "parentUuid": "943f475a_fb00a920",
      "range": {
        "startLine": 329,
        "startChar": 16,
        "endLine": 329,
        "endChar": 19
      },
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e9caf1a_44aa592a",
        "filename": "include/nbd_proxy.hpp",
        "patchSetId": 9
      },
      "lineNbr": 329,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-08-26T21:36:09Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ec9e145d_47d2faef",
      "range": {
        "startLine": 329,
        "startChar": 16,
        "endLine": 329,
        "endChar": 19
      },
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0306a58_34f91ace",
        "filename": "include/sessions.hpp",
        "patchSetId": 9
      },
      "lineNbr": 44,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-08-26T18:43:57Z",
      "side": 1,
      "message": "why make this a struct and not a class?",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 6
      },
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ae80169_f510e9f0",
        "filename": "include/sessions.hpp",
        "patchSetId": 9
      },
      "lineNbr": 44,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-26T18:55:15Z",
      "side": 1,
      "message": "Probably not any good reason;  The only difference between struct and class is the default visibility;  This could probably be a class with an explicit public below it and be roughly the same.\n\nIn concept, yeah, this could probably be a class.",
      "parentUuid": "c0306a58_34f91ace",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 6
      },
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29c923e3_4018744a",
        "filename": "include/sessions.hpp",
        "patchSetId": 9
      },
      "lineNbr": 44,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-08-26T21:36:09Z",
      "side": 1,
      "message": "Sounds good. I just wanted to know.",
      "parentUuid": "6ae80169_f510e9f0",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 6
      },
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29a3cb48_41a26a6e",
        "filename": "include/sessions.hpp",
        "patchSetId": 9
      },
      "lineNbr": 108,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2021-10-07T10:30:32Z",
      "side": 1,
      "message": "same\ndo we prefer to use?",
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f29c289d_e614f970",
        "filename": "include/sessions.hpp",
        "patchSetId": 9
      },
      "lineNbr": 108,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-10-08T19:10:18Z",
      "side": 1,
      "message": "sdbusplus doesn\u0027t support return codes for this usecase, so while we prefer to not use try/catch, it is the only option here to avoid throwing into a C library, which is undefined behavior.",
      "parentUuid": "29a3cb48_41a26a6e",
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0c33dfa_18ba703b",
        "filename": "include/sessions.hpp",
        "patchSetId": 9
      },
      "lineNbr": 108,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2021-10-11T09:42:05Z",
      "side": 1,
      "message": "Okay. Thanks!",
      "parentUuid": "f29c289d_e614f970",
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d5432df_375bb156",
        "filename": "include/sessions.hpp",
        "patchSetId": 9
      },
      "lineNbr": 258,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-08-26T18:43:57Z",
      "side": 1,
      "message": "why are the object being sorted? \nIt is not obvious (to me) that sorting this way adds anything.",
      "range": {
        "startLine": 258,
        "startChar": 57,
        "endLine": 258,
        "endChar": 67
      },
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db202158_6b8ad4db",
        "filename": "include/sessions.hpp",
        "patchSetId": 9
      },
      "lineNbr": 258,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-26T18:55:15Z",
      "side": 1,
      "message": "flat_map is a sorted vector implementation of a map.  Sorting it allows to do binary lookups on the map (like at line 67), instead of linear time lookups (ie, logN vs N), while still keeping the values relatively packed in ram.  Normally, we\u0027d just leave this as the default comparison operator, but explicitly declaring std::less here allows us to directly compare std::string_view to a list of strings without making a std::string copy like we do on line 67.\n\nGood question.",
      "parentUuid": "9d5432df_375bb156",
      "range": {
        "startLine": 258,
        "startChar": 57,
        "endLine": 258,
        "endChar": 67
      },
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23b849e5_17590162",
        "filename": "include/sessions.hpp",
        "patchSetId": 9
      },
      "lineNbr": 258,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-08-26T21:36:09Z",
      "side": 1,
      "message": "Sounds pretty clever. Thanks for the explanation",
      "parentUuid": "db202158_6b8ad4db",
      "range": {
        "startLine": 258,
        "startChar": 57,
        "endLine": 258,
        "endChar": 67
      },
      "revId": "60d44d873768d04bf6d0aa6e7aaeb3b5e90bacfd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}
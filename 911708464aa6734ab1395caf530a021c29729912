{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c0a4c153_30e4a7e0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-30T18:17:57Z",
      "side": 1,
      "message": "typo.  Space.",
      "range": {
        "startLine": 10,
        "startChar": 18,
        "endLine": 10,
        "endChar": 21
      },
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad1b5621_dc5e510b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-30T18:17:57Z",
      "side": 1,
      "message": "This looks like it\u0027s still WIP.  It comments out TLS support entirely, which I don\u0027t see mention of in the commit message?  If this is WIP, please mark it as such.",
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fb91c3f_04d8f07e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-30T18:26:02Z",
      "side": 1,
      "message": "I was looking into issues like this a while back.  I don\u0027t remember where I left them, but you might take a look at the two patches at https://gerrit.openbmc.org/c/openbmc/bmcweb/+/56711",
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac4f99e0_0d499518",
        "filename": "http/http_client.hpp",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-30T18:17:57Z",
      "side": 1,
      "message": "This is already available through the socket.  Do we need to store it?",
      "range": {
        "startLine": 158,
        "startChar": 4,
        "endLine": 158,
        "endChar": 33
      },
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9663d414_706d2f72",
        "filename": "http/http_client.hpp",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-30T18:17:57Z",
      "side": 1,
      "message": "This as lifetime problems now that you\u0027ve declared conn after sslConn (which is a reference here).  I\u0027m not following why this was changed.  Can you elaborate?",
      "range": {
        "startLine": 161,
        "startChar": 50,
        "endLine": 161,
        "endChar": 54
      },
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bb4a20d_57086f8a",
        "filename": "http/http_client.hpp",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-12-02T07:09:38Z",
      "side": 1,
      "message": "It is an Optional stream. We are supposed to emplace a new SSL stream once the TCP object is available. Earlier code tried to reuse both TCP object and SSL stream, which is invalid once the connection is broken. We are supposed to recreate atleast the SSL stream. This patch set recreates both TCP object and SSL stream. That is why the TCP object is a unique_ptr now. So as per the current code the declaration order is correct.",
      "parentUuid": "9663d414_706d2f72",
      "range": {
        "startLine": 161,
        "startChar": 50,
        "endLine": 161,
        "endChar": 54
      },
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6097381d_608bb5bc",
        "filename": "http/http_client.hpp",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-30T18:24:47Z",
      "side": 1,
      "message": "I\u0027m not following why this has an impact.  If the server broke the connection, won\u0027t the response code on line 383 fail?\n\nI wonder if on line 381 we need to be checking parser.is_done().  That way if we get a truly truncated response (rather than just the server closing the connection uncleanly, which some servers do)\n\nwe can still hit the error path.\n\nhttps://www.boost.org/doc/libs/1_82_0/libs/beast/doc/html/beast/ref/boost__beast__http__parser/is_done.html\n\nSeem reasonable?",
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "176ae9e1_d9c6bd9b",
        "filename": "http/http_client.hpp",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-12-01T09:19:56Z",
      "side": 1,
      "message": "No. The response code is usually set by the application. But the connection is broken due to TCP keep_alive timeout. \nThis is happening at TCP layer and is done by any intermediate proxies. \nThe server will not set any HTTP response code in this case. It is kind of an abrupt connection termination. \nSince http_client is not waiting by reading the socket, it is not aware of the connection termination. \nThe http_client get to know about the connection failure when it tries to send next event. \nWhich can happen very long time after the connection termination. So the way to know about the broken coonection  is from error code.\nSslstream truncation is the error we usually get in this case.",
      "parentUuid": "6097381d_608bb5bc",
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "079c4afa_989001e1",
        "filename": "http/http_client.hpp",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-01T18:31:15Z",
      "side": 1,
      "message": "Right, the response code is set by the application, but if a lower layer fails, the response code won\u0027t get transfered, right?\n\n\u003e Since http_client is not waiting by reading the socket.\n\nAh, so maybe that\u0027s the issue.  I wonder if we set up a wait type of wait_error, if this would fix the issue?\n\nhttps://live.boost.org/doc/libs/1_83_0/doc/html/boost_asio/reference/basic_stream_socket/async_wait.html\n\nOr should we rearrange the code so that we\u0027re always reading, and if we read bytes when we don\u0027t expect them, we should just abort?\n\nI do still think we should check that the parser finished in this code, but maybe that doesn\u0027t matter.",
      "parentUuid": "176ae9e1_d9c6bd9b",
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dccf0f8_6a9cacf4",
        "filename": "http/http_client.hpp",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-12-02T07:09:38Z",
      "side": 1,
      "message": "Yes, we can use async wait. But it makes code a bit complicated I guess. The eventing semantics do not expect to wait for anything from the server before sending an event. \nIn my opinion, we can handle the error reactively as we do now. It is just that we are reusing the SSL stream improperly and escaping some error conditions. Fixing those will give completeness to the current solution I guess.",
      "parentUuid": "079c4afa_989001e1",
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5c3d0d8_ece362da",
        "filename": "http/http_client.hpp",
        "patchSetId": 1
      },
      "lineNbr": 619,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-30T18:17:57Z",
      "side": 1,
      "message": "You\u0027ve completely disabled SSL?  This looks like it\u0027s still WIP?",
      "range": {
        "startLine": 604,
        "startChar": 0,
        "endLine": 619,
        "endChar": 16
      },
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc10ae81_a2c2c078",
        "filename": "http/http_client.hpp",
        "patchSetId": 1
      },
      "lineNbr": 619,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-12-01T09:19:56Z",
      "side": 1,
      "message": "my mistake. Copy-paste error from downstream.  Ssl is still used, but the context may not have all details. That is why the error is not shown up in my test",
      "parentUuid": "c5c3d0d8_ece362da",
      "range": {
        "startLine": 604,
        "startChar": 0,
        "endLine": 619,
        "endChar": 16
      },
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a7a592f_e5228246",
        "filename": "http/http_client.hpp",
        "patchSetId": 1
      },
      "lineNbr": 619,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-01T18:31:15Z",
      "side": 1,
      "message": "All good.  Let me know when you\u0027ve fixed your patchset.",
      "parentUuid": "bc10ae81_a2c2c078",
      "range": {
        "startLine": 604,
        "startChar": 0,
        "endLine": 619,
        "endChar": 16
      },
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "198644fb_3937dfbc",
        "filename": "http/http_client.hpp",
        "patchSetId": 1
      },
      "lineNbr": 619,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-12-02T07:09:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0a7a592f_e5228246",
      "range": {
        "startLine": 604,
        "startChar": 0,
        "endLine": 619,
        "endChar": 16
      },
      "revId": "911708464aa6734ab1395caf530a021c29729912",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
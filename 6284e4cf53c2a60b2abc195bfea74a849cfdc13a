{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "84d0f9ad_70dff72b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T17:53:15Z",
      "side": 1,
      "message": "Partial review.",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39c617ad_cb1c0bea",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T17:53:15Z",
      "side": 1,
      "message": "Why did this need to move?",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a77cc882_f2b8042e",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-02T20:23:28Z",
      "side": 1,
      "message": "Ultimately I was trying to limit the amount of code that I needed to account for due to #ifdef\u0027s.\n\nIt did not seem like it mattered in what order we perform this check and the \"OData-Version\" check.  I moved this one first because I only wanted to write the \"OData-Version\" to the header if we\u0027re not supposed to forward a request to a satellite BMC.",
      "parentUuid": "39c617ad_cb1c0bea",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "123ea00e_494cd91d",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T00:19:36Z",
      "side": 1,
      "message": "I reverted this in patchset 4.",
      "parentUuid": "a77cc882_f2b8042e",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00076ef6_778b3c7f",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-03T15:46:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "123ea00e_494cd91d",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cad1567_1e7e1c0f",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T17:53:15Z",
      "side": 1,
      "message": "What am I looking at here?  Doesn\u0027t anything within the redfish tree require the OData-Version headers?  Presumably because we\u0027re eventually going to rewrite them, it doesn\u0027t really hurt to have our parameters here?",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34b2a26a_1b2aaa53",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-02T20:23:28Z",
      "side": 1,
      "message": "I thought we wanted completely to avoid writing anything to the response if it was later going to be overwritten by the response from the satellite BMC?  If that\u0027s not the case then I can restore this to its previous behavior.",
      "parentUuid": "8cad1567_1e7e1c0f",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00407b81_e03d1b54",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T00:19:36Z",
      "side": 1,
      "message": "I\u0027ve preemptively restored this in patchset 4",
      "parentUuid": "34b2a26a_1b2aaa53",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "889f2d6d_1559994d",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-03T15:46:15Z",
      "side": 1,
      "message": "\u003e I thought we wanted completely to avoid writing anything to the response\n\nGenerally this rule applies to things where we expect differences between handlers;  Everything within the Redfish tree should be setting Odata.Version, so I have a minor preference for simpler code here, but it\u0027s not strong.\n\nThe main places we tend to get bugs are when people overwrite status codes, and overwrite json objects.",
      "parentUuid": "00407b81_e03d1b54",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44bc58e2_786db134",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T22:19:30Z",
      "side": 1,
      "message": "Understood.  I\u0027m going to mark this as resolved now that I\u0027ve reverted the initial change.",
      "parentUuid": "889f2d6d_1559994d",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f3c030e_1e3a2a2e",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T17:53:15Z",
      "side": 1,
      "message": "Having this variable inside the ifdef makes this code really hard to read.  Is it required?  Couldn\u0027t we just return on line 48 and get the same result?",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b0fbf0e_f24b5e57",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-02T20:23:28Z",
      "side": 1,
      "message": "I don\u0027t think we can return early at line 48 because we need to process the query params at the end of this function.\n\nIt is awkward with the variable inside of the #ifdef.  I can clean this up a lot by introducing the variable outside of the #ifdef.  It\u0027ll also get cleaner if you confirm in the above thread that it is alright to write to the response when we are going to later overwrite it with the response from the satellite BMC.",
      "parentUuid": "9f3c030e_1e3a2a2e",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5638d6cd_bbd877a9",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-03T22:47:37Z",
      "side": 1,
      "message": "How about this?\n\nbool needToCallHandlers \u003d true;\n\n#ifdef BMCWEB_ENABLE_REDFISH_AGGREGATION\n    needToCallHandlers \u003d RedfishAggregator::getInstance().beginAggregation(req, asyncResp) !\u003d\n        Result::NoLocalHandle;\n    \n        // The request should be forwarded to a satellite BMC.  Don\u0027t write\n        // anything to the asyncResp since it will get overwritten later.\n#endif\n\n    // If this isn\u0027t a get, no need to do anything with parameters\n    if (req.method() !\u003d boost::beast::http::verb::get)\n    {\n        return needToCallHandlers;\n    }\n\n    delegated \u003d query_param::delegate(queryCapabilities, *queryOpt);\n    std::function\u003cvoid(crow::Response\u0026)\u003e handler \u003d\n        asyncResp-\u003eres.releaseCompleteRequestHandler();\n    asyncResp-\u003eres.setCompleteRequestHandler(\n        [\u0026app, handler(std::move(handler)),\n         query{*queryOpt}](crow::Response\u0026 resIn) mutable {\n        processAllParams(app, query, handler, resIn);\n    });\n\n    return needToCallHandlers;\n\n\nI think it gives the same logic, but removes a bunch of ifdefs, and makes the double negative on the bool go away.\n\nWDYT?",
      "parentUuid": "8b0fbf0e_f24b5e57",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87e5103c_740af2bf",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T23:37:47Z",
      "side": 1,
      "message": "\u003e I think it gives the same logic, but removes a bunch of ifdefs, and makes the double negative on the bool go away.\n\u003e \n\u003e WDYT?\nI was really wanting to avoid adding any code outside of #ifdef\u0027s, but I think it doing so just makes everything so much cleaner.  I\u0027ll implement your suggestion.",
      "parentUuid": "5638d6cd_bbd877a9",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b337bc57_3406eb82",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-04T17:24:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87e5103c_740af2bf",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9eabfe1_d33c9cc5",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T17:53:15Z",
      "side": 1,
      "message": "Unintentional copy.",
      "range": {
        "startLine": 247,
        "startChar": 25,
        "endLine": 247,
        "endChar": 32
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8a2b9db_78793340",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T17:05:04Z",
      "side": 1,
      "message": "It was intentional.  I wanted to end up with boost::urls::segments instead of boost::urls::segments_view because segments allow me to perform array style lookup while segments_view requires using an iterator.  I wasn\u0027t able to get boost::urls::segments from boost::urls::url_view so that\u0027s why I made this copy.",
      "parentUuid": "a9eabfe1_d33c9cc5",
      "range": {
        "startLine": 247,
        "startChar": 25,
        "endLine": 247,
        "endChar": 32
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "743ef6c8_b29f51ff",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-03T19:56:19Z",
      "side": 1,
      "message": "..... I\u0027m not quite following, and would really prefer we not copy.  Even if we have to do iterator++; 3 times, that seems better than making a complete copy, although it really surprises me that there\u0027s this limitation in boost url.",
      "parentUuid": "e8a2b9db_78793340",
      "range": {
        "startLine": 247,
        "startChar": 25,
        "endLine": 247,
        "endChar": 32
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6f37965_dfcc1f3c",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T22:19:30Z",
      "side": 1,
      "message": "\u003e Even if we have to do iterator++; 3 times, that seems better than making a complete copy,\nI can go that route, but boost::urls::segments_view is read only so I will not be able to normalize the path and simplify the comparisons as mentioned below https://gerrit.openbmc.org/c/openbmc/bmcweb/+/56062/comments/6fa9dfe1_513e1873.\n\nWhat if just create a vector of strings to represent up to the first 5 segments?\n\n\u003e although it really surprises me that there\u0027s this limitation in boost url.\nI\u0027m possible I\u0027m not doing it correctly, but this is the only method I\u0027ve been able to come up with to create boost::urls::segments when starting with boost::urls::url_view.",
      "parentUuid": "743ef6c8_b29f51ff",
      "range": {
        "startLine": 247,
        "startChar": 25,
        "endLine": 247,
        "endChar": 32
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5893d24d_08abd9d5",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-03T22:47:37Z",
      "side": 1,
      "message": "\u003e \u003e Even if we have to do iterator++; 3 times, that seems better than making a complete copy,\n\u003e I can go that route, but boost::urls::segments_view is read only so I will not be able to normalize the path and simplify the comparisons as mentioned below https://gerrit.openbmc.org/c/openbmc/bmcweb/+/56062/comments/6fa9dfe1_513e1873.\n\u003e \n\u003e What if just create a vector of strings to represent up to the first 5 segments?\n\nGroan... I didn\u0027t think about that.  Yeah, normalization requires the copy, and is probably worth it.\n\nSure if you wanted a string array, that would work too.\n\n\u003e \n\u003e \u003e although it really surprises me that there\u0027s this limitation in boost url.\n\u003e I\u0027m possible I\u0027m not doing it correctly, but this is the only method I\u0027ve been able to come up with to create boost::urls::segments when starting with boost::urls::url_view.",
      "parentUuid": "b6f37965_dfcc1f3c",
      "range": {
        "startLine": 247,
        "startChar": 25,
        "endLine": 247,
        "endChar": 32
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f1a3ba9_061d189a",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T23:37:47Z",
      "side": 1,
      "message": "\u003e Sure if you wanted a string array, that would work too.\nI\u0027m going to opt for that since I ultimately need strings anyway, I can remove this initial copy, and I\u0027ll still get to normalize the path.",
      "parentUuid": "5893d24d_08abd9d5",
      "range": {
        "startLine": 247,
        "startChar": 25,
        "endLine": 247,
        "endChar": 32
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53497b40_9f4eec4b",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-04T17:24:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f1a3ba9_061d189a",
      "range": {
        "startLine": 247,
        "startChar": 25,
        "endLine": 247,
        "endChar": 32
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fa9dfe1_513e1873",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T17:53:15Z",
      "side": 1,
      "message": "Can we normalize these two options first?  something like\n// change checks\nif (thisUrl.segments.back() \u003d\u003d \"/\"){\n   // I think this API exists?\n   thisUrl.segments().pop_back();\n}",
      "range": {
        "startLine": 252,
        "startChar": 11,
        "endLine": 252,
        "endChar": 33
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d2fa443_784d387e",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T00:19:36Z",
      "side": 1,
      "message": "Yeah that general idea is supported by the API and normalizing would make things waaaay easier to deal with.  I assumed there was a reason the URI had had not been previously normalized so I was trying to preserve it as is.  If that\u0027s not a concern then I\u0027ll add normalization to make this easier to follow.",
      "parentUuid": "6fa9dfe1_513e1873",
      "range": {
        "startLine": 252,
        "startChar": 11,
        "endLine": 252,
        "endChar": 33
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03049502_885605a5",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-03T15:46:15Z",
      "side": 1,
      "message": "it’s not normalized because there’s literally one use case where ending with a / has to return different behavior than without a /.  otherwise we would’ve fixed this in the core long ago.",
      "parentUuid": "1d2fa443_784d387e",
      "range": {
        "startLine": 252,
        "startChar": 11,
        "endLine": 252,
        "endChar": 33
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d23ed7c2_649d7c93",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T17:05:04Z",
      "side": 1,
      "message": "ACK.  I\u0027ll normalize and clean up the comparisons.",
      "parentUuid": "03049502_885605a5",
      "range": {
        "startLine": 252,
        "startChar": 11,
        "endLine": 252,
        "endChar": 33
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4aefcb3e_9663bf24",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T22:19:30Z",
      "side": 1,
      "message": "I\u0027ve normalized and cleaned up the comparisons.  That might be temporary though.  It directly depends on the outcome of this thread https://gerrit.openbmc.org/c/openbmc/bmcweb/+/56062/comments/a9eabfe1_d33c9cc5.  \n\nI\u0027ll leave this thread open until that one is resolved.",
      "parentUuid": "d23ed7c2_649d7c93",
      "range": {
        "startLine": 252,
        "startChar": 11,
        "endLine": 252,
        "endChar": 33
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c61fae6d_c4c1875f",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-04T19:07:17Z",
      "side": 1,
      "message": "That thread was resolved by creating an array of strings to represent the segments.  That allowed me to still normalize the path and simplify the comparisons.",
      "parentUuid": "4aefcb3e_9663bf24",
      "range": {
        "startLine": 252,
        "startChar": 11,
        "endLine": 252,
        "endChar": 33
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "837a73a8_71e2b554",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T17:53:15Z",
      "side": 1,
      "message": "Possible nullptr dereference.  Range check your requests please.",
      "range": {
        "startLine": 253,
        "startChar": 40,
        "endLine": 253,
        "endChar": 48
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85b74ea5_af449e28",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T00:19:36Z",
      "side": 1,
      "message": "I do check it.  The \"segments.size() \u003d\u003d 4\" gets checked before \"segments[3].empty()\"",
      "parentUuid": "837a73a8_71e2b554",
      "range": {
        "startLine": 253,
        "startChar": 40,
        "endLine": 253,
        "endChar": 48
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48df6bfa_9880b7b6",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-03T15:46:15Z",
      "side": 1,
      "message": "Yes you do....  ignore.  I was reviewing quickly and missed it.",
      "parentUuid": "85b74ea5_af449e28",
      "range": {
        "startLine": 253,
        "startChar": 40,
        "endLine": 253,
        "endChar": 48
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45246507_503286c8",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T17:53:15Z",
      "side": 1,
      "message": "Aren\u0027t there several things in the ServiceRoot definition that aren\u0027t Collections?  Hardcoding update service here seems error prone.",
      "range": {
        "startLine": 258,
        "startChar": 25,
        "endLine": 258,
        "endChar": 38
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9af98a96_2b5923b9",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T00:19:36Z",
      "side": 1,
      "message": "There definitely are, however the later patch that implements aggregating collections will ignore responses that do not contain a \"Members\" array so that\u0027s enough to catch false positives.  UpdateService is hardcoded in because it contains collections and we want to make sure we handle those correctly.\n\nThis is ultimately the right way to handle determining what is and isn\u0027t a collection https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55215.  When that\u0027s finished then it will provide a more reliable method of determining what is and isn\u0027t a collection.  The hard coding can go away.",
      "parentUuid": "45246507_503286c8",
      "range": {
        "startLine": 258,
        "startChar": 25,
        "endLine": 258,
        "endChar": 38
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f966148_fa30b9db",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-03T15:46:15Z",
      "side": 1,
      "message": "\u003e There definitely are, however the later patch that implements aggregating collections will ignore responses that do not contain a \"Members\" array so that\u0027s enough to catch false positives. \n\nACK.\n\n\u003e UpdateService is hardcoded in because it contains collections and we want to make sure we handle those correctly.\n\nI\u0027m not following this.  Aren\u0027t there other collections that might exist 2 levels deep?\n\n\u003e \n\u003e This is ultimately the right way to handle determining what is and isn\u0027t a collection https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55215.  When that\u0027s finished then it will provide a more reliable method of determining what is and isn\u0027t a collection.  The hard coding can go away.\n\nACK.",
      "parentUuid": "9af98a96_2b5923b9",
      "range": {
        "startLine": 258,
        "startChar": 25,
        "endLine": 258,
        "endChar": 38
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2b5b874_25702c7b",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T17:05:04Z",
      "side": 1,
      "message": "\u003e \u003e UpdateService is hardcoded in because it contains collections and we want to make sure we handle those correctly.\n\u003e I\u0027m not following this.  Aren\u0027t there other collections that might exist 2 levels deep?\nThere are some other collections that exist 2 or more levels deep, but I don\u0027t think we\u0027d want to aggregate those.  A number of them exist within another collection (e.g. Sensors under a Chassis).  Roles and Accounts exist under Account Service.  I figured we\u0027d need to implement some special handling if we want to correctly enable satellite Roles and Accounts.",
      "parentUuid": "7f966148_fa30b9db",
      "range": {
        "startLine": 258,
        "startChar": 25,
        "endLine": 258,
        "endChar": 38
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa148d6e_e85819d1",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-03T19:56:19Z",
      "side": 1,
      "message": "\u003e \u003e \u003e UpdateService is hardcoded in because it contains collections and we want to make sure we handle those correctly.\n\u003e \u003e I\u0027m not following this.  Aren\u0027t there other collections that might exist 2 levels deep?\n\u003e There are some other collections that exist 2 or more levels deep, but I don\u0027t think we\u0027d want to aggregate those.\n\nWhy not?\n\n\u003e  A number of them exist within another collection (e.g. Sensors under a Chassis).  Roles and Accounts exist under Account Service.  I figured we\u0027d need to implement some special handling if we want to correctly enable satellite Roles and Accounts.\n\nAgreed, Roles and Accounts is weird, and probably shouldn\u0027t be aggregated at all, but I\u0027d much rather we make a list of \"things that don\u0027t make sense to aggregate\" and then just aggregate all the rest.  That seems far less brittle than an allow list.",
      "parentUuid": "f2b5b874_25702c7b",
      "range": {
        "startLine": 258,
        "startChar": 25,
        "endLine": 258,
        "endChar": 38
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70549ca1_8b397371",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T23:37:47Z",
      "side": 1,
      "message": "\u003e I\u0027d much rather we make a list of \"things that don\u0027t make sense to aggregate\" and then just aggregate all the rest.  That seems far less brittle than an allow list.\nI\u0027m not sure I agree that an allow list is that brittle.  It\u0027s certainly not preferable for long term viability, but there\u0027s a better solution for that in the pipeline.\n\nWe\u0027ll catch /redfish/v1/\u003cnot collection\u003e/ by virtue of the later aggregating collections patch that will ignore \"collection\" responses that don\u0027t include a Members array.  We\u0027re really just concerned about URIs that deviate from the general form of /redfish/v1/\u003ccollection\u003e/\u003cid\u003e.\n\nI think a block list would become a massive headache and it might even be more brittle.  We can\u0027t individually identify for certain if a request is for a collection.  It wouldn\u0027t be sufficient for the block list to just contain the non-top level collections that we don\u0027t want to aggregate.  We would end up with a massive number of false positives.  \n\nLet\u0027s say we have a URI like /redfish/v1/Chassis/Phony.  It doesn\u0027t have a prefix so we know it\u0027s not for a satellite resource.  Phony doesn\u0027t show up in the list of blocked collections so we\u0027d send the request to the satellite.\n\nAnother consideration is a block list would be much larger than an allow list.  That could introduce significant latency due to all of the additional string comparisons.",
      "parentUuid": "fa148d6e_e85819d1",
      "range": {
        "startLine": 258,
        "startChar": 25,
        "endLine": 258,
        "endChar": 38
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8fe2f1b_1b1ab16d",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-04T20:41:05Z",
      "side": 1,
      "message": "\u003e \u003e I\u0027d much rather we make a list of \"things that don\u0027t make sense to aggregate\" and then just aggregate all the rest.  That seems far less brittle than an allow list.\n\u003e I\u0027m not sure I agree that an allow list is that brittle.  It\u0027s certainly not preferable for long term viability, but there\u0027s a better solution for that in the pipeline.\n\u003e \n\u003e We\u0027ll catch /redfish/v1/\u003cnot collection\u003e/ by virtue of the later aggregating collections patch that will ignore \"collection\" responses that don\u0027t include a Members array.\n\nbut for say, /redfish/v1/Facilities that the bmc doesn\u0027t implement, we won\u0027t have a \"members\" to check, right?\n\n\u003e  We\u0027re really just concerned about URIs that deviate from the general form of /redfish/v1/\u003ccollection\u003e/\u003cid\u003e.\n\u003e \n\u003e I think a block list would become a massive headache and it might even be more brittle.  We can\u0027t individually identify for certain if a request is for a collection.  It wouldn\u0027t be sufficient for the block list to just contain the non-top level collections that we don\u0027t want to aggregate.  We would end up with a massive number of false positives.\n\u003e \n\u003e Let\u0027s say we have a URI like /redfish/v1/Chassis/Phony.  It doesn\u0027t have a prefix so we know it\u0027s not for a satellite resource.  Phony doesn\u0027t show up in the list of blocked collections so we\u0027d send the request to the satellite.\n\nACK.  The above makes sense to me.\n\n\n\u003e \n\u003e Another consideration is a block list would be much larger than an allow list.  That could introduce significant latency due to all of the additional string comparisons.\n\nOne thing I realized is that UpdateService needs explicit handling right?  The elements within the collection needs special handling to support the HttpPushURI I think?  Is the thing here that we just need explicit code for in the future, and this hardcoded bit goes away?",
      "parentUuid": "70549ca1_8b397371",
      "range": {
        "startLine": 258,
        "startChar": 25,
        "endLine": 258,
        "endChar": 38
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dbb1824_297f2fd8",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-04T21:14:12Z",
      "side": 1,
      "message": "\u003e \u003e \u003e I\u0027d much rather we make a list of \"things that don\u0027t make sense to aggregate\" and then just aggregate all the rest.  That seems far less brittle than an allow list.\n\u003e \u003e I\u0027m not sure I agree that an allow list is that brittle.  It\u0027s certainly not preferable for long term viability, but there\u0027s a better solution for that in the pipeline.\n\u003e \u003e \n\u003e \u003e We\u0027ll catch /redfish/v1/\u003cnot collection\u003e/ by virtue of the later aggregating collections patch that will ignore \"collection\" responses that don\u0027t include a Members array.\n\u003e but for say, /redfish/v1/Facilities that the bmc doesn\u0027t implement, we won\u0027t have a \"members\" to check, right?\nRight.  /redfish/v1/Facilities is not a collection, but it\u0027ll get forwarded like it is one.  However, when we process the response we just need to make sure the response has a \"Members\" array.  It won\u0027t since it\u0027s not a collection and that\u0027ll be our cue that we should ignore the response.\n\nIt\u0027s a slight issue that we send the request in the first place, but for the most part I think it\u0027s unavoidable until that patch I linked earlier in the thread where we\u0027ll be able to generate a list of all valid collections at runtime.  We could hard code that list ourselves, but we don\u0027t want to go down that road as discussed before.\n\n\u003e One thing I realized is that UpdateService needs explicit handling right?  The elements within the collection needs special handling to support the HttpPushURI I think?  Is the thing here that we just need explicit code for in the future, and this hardcoded bit goes away?\nI think you\u0027re referring to this discussion https://discord.com/channels/775381525260664832/855566794994221117/991035841633718395?  We wouldn\u0027t have to do anything special for HttpPushURI since it\u0027s only supposed to work on the local BMC.  We\u0027d have to do something special for MultipartHttpPushUri whenever support for that is added.  The handling for that might not even go in this aggregation flow.  So yes we\u0027ll need explicit code for it in the future, but I think the UpdateService hard coding will go away",
      "parentUuid": "e8fe2f1b_1b1ab16d",
      "range": {
        "startLine": 258,
        "startChar": 25,
        "endLine": 258,
        "endChar": 38
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "006f2bc5_d8c84dd2",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-11T05:06:29Z",
      "side": 1,
      "message": "\u003e It won\u0027t since it\u0027s not a collection and that\u0027ll be our cue that we should ignore the response.\n\nAh, I didn\u0027t realize we were relying on the other systems response.  Sure, this seems somewhat reasonable.\n\n\u003e It\u0027s a slight issue that we send the request in the first place\n\nAgreed, and agree with the conclusion.  ACK.",
      "parentUuid": "5dbb1824_297f2fd8",
      "range": {
        "startLine": 258,
        "startChar": 25,
        "endLine": 258,
        "endChar": 38
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed9d16c9_529bcdaf",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 266,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T17:53:15Z",
      "side": 1,
      "message": "Maybe an enum would be better here?  false and true aren\u0027t very descriptive, and having a tristate seems a lot more readable\n\nSomething like\n\nenum class Result {\n    AggregationStarted,\n    AggregationStartedBmcStillNeeded,\n    AggregationNotRequired,\n}\n\n?  \n\n\nThose names are kinda lame, but you get the idea.",
      "range": {
        "startLine": 266,
        "startChar": 23,
        "endLine": 266,
        "endChar": 28
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9261f2b_a2553b76",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 266,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T00:19:36Z",
      "side": 1,
      "message": "An enum would be more descriptive, but it\u0027s not really a tristate.  There are three paths like you mention, but really there are only two end results: do or don\u0027t handle request locally.  \"AggregationStartedBmcStillNeeded\" and \"AggregationNotRequired\" would still be handled the same way by whatever calls beginAggregation().\n\nIn future patches we will call the forward request or forward collection request methods before we actually hit these return statements.\n\nIf still prefer an enum then I think it should just be something like \"LocalHandle\", \"NoLocalHandle\".  Either way, for an enum are you suggesting I would just have this function return the enum itself instead of the bool?",
      "parentUuid": "ed9d16c9_529bcdaf",
      "range": {
        "startLine": 266,
        "startChar": 23,
        "endLine": 266,
        "endChar": 28
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41497563_f23ee144",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 266,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-03T15:46:15Z",
      "side": 1,
      "message": "\u003e An enum would be more descriptive, but it\u0027s not really a tristate.  There are three paths like you mention, but really there are only two end results: do or don\u0027t handle request locally.  \"AggregationStartedBmcStillNeeded\" and \"AggregationNotRequired\" would still be handled the same way by whatever calls beginAggregation().\n\u003e \n\u003e In future patches we will call the forward request or forward collection request methods before we actually hit these return statements.\n\u003e \n\u003e If still prefer an enum then I think it should just be something like \"LocalHandle\", \"NoLocalHandle\".  Either way, for an enum are you suggesting I would just have this function return the enum itself instead of the bool?\n\nI still would like the enum, even if it\u0027s two state, as it makes this code more readable.  bool is error prone for things that aren\u0027t \"this is an error\"",
      "parentUuid": "f9261f2b_a2553b76",
      "range": {
        "startLine": 266,
        "startChar": 23,
        "endLine": 266,
        "endChar": 28
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afbc1c64_ae523768",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 266,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T22:19:30Z",
      "side": 1,
      "message": "\u003e I still would like the enum, even if it\u0027s two state, as it makes this code more readable.  bool is error prone for things that aren\u0027t \"this is an error\"\nAlright no problem.  I\u0027ve added an enum and now we return the enum instead of the bool.  Let me know if this looks acceptable.",
      "parentUuid": "41497563_f23ee144",
      "range": {
        "startLine": 266,
        "startChar": 23,
        "endLine": 266,
        "endChar": 28
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be887ba4_0f83ebdd",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 266,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-04T20:41:05Z",
      "side": 1,
      "message": "LGTM",
      "parentUuid": "afbc1c64_ae523768",
      "range": {
        "startLine": 266,
        "startChar": 23,
        "endLine": 266,
        "endChar": 28
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d0ec192_52bde85c",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 273,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T17:53:15Z",
      "side": 1,
      "message": "how can we avoid all this special casing?  It seems fairly brittle in that it\u0027s not coming from the standard.  As a perfect example, FirmwareInventory wasn\u0027t added to the standard until later.",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cefcfb0_ff97629f",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 273,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T00:19:36Z",
      "side": 1,
      "message": "The way will be when this patch is completed https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55215.  At that point we\u0027ll always be able to know what the collections are without having to implement all of this special hard coding.",
      "parentUuid": "4d0ec192_52bde85c",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a973f158_2266a230",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 273,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-03T15:46:15Z",
      "side": 1,
      "message": "👍",
      "parentUuid": "4cefcfb0_ff97629f",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95a5c493_856979b9",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 273,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T22:19:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a973f158_2266a230",
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c2708c0_de26a503",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 331,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T17:53:15Z",
      "side": 1,
      "message": "common error #12.",
      "range": {
        "startLine": 331,
        "startChar": 30,
        "endLine": 331,
        "endChar": 34
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9e5f981_2fbb2c5d",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 331,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T00:19:36Z",
      "side": 1,
      "message": "I didn\u0027t think I was violating that error because I\u0027m making sure the segment begins with \"aggregated\" rather than checking if find() returns true like in that example.  I\u0027ll just switch to std::string::starts_with().",
      "parentUuid": "9c2708c0_de26a503",
      "range": {
        "startLine": 331,
        "startChar": 30,
        "endLine": 331,
        "endChar": 34
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "892d1f36_0a756960",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 331,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-03T15:46:15Z",
      "side": 1,
      "message": "what is the device is fooaggregated_node ? Won\u0027t this code fail?\n\nI suspect you want boost::starts_with, then to set pos by hand.",
      "parentUuid": "b9e5f981_2fbb2c5d",
      "range": {
        "startLine": 331,
        "startChar": 30,
        "endLine": 331,
        "endChar": 34
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aed79988_a7d238e9",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 331,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T17:05:04Z",
      "side": 1,
      "message": "No it would handle it correctly if seg4 is \"fooaggregated_node\".  find(\"aggregated\") returns the starting position of \"aggregated\" so for that example it would be 3.  pos can only be 0 when \"aggregated\" appears at the start of the string.",
      "parentUuid": "892d1f36_0a756960",
      "range": {
        "startLine": 331,
        "startChar": 30,
        "endLine": 331,
        "endChar": 34
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45a2b9ad_a181c5e1",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 331,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-03T19:56:19Z",
      "side": 1,
      "message": "Ah, good point, but I\u0027m still going to hold the position that starts_with declares your intent better, and it\u0027s what we should use here.  std::string::starts_with I\u0027m pretty sure is what we should be doing.",
      "parentUuid": "aed79988_a7d238e9",
      "range": {
        "startLine": 331,
        "startChar": 30,
        "endLine": 331,
        "endChar": 34
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2244bd5b_65647b59",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 3
      },
      "lineNbr": 331,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-03T22:19:30Z",
      "side": 1,
      "message": "That\u0027s fine, I\u0027ve changed these instances of find() to starts_with().",
      "parentUuid": "45a2b9ad_a181c5e1",
      "range": {
        "startLine": 331,
        "startChar": 30,
        "endLine": 331,
        "endChar": 34
      },
      "revId": "6284e4cf53c2a60b2abc195bfea74a849cfdc13a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5ace342d_22a65b68",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-12T17:46:48Z",
      "side": 1,
      "message": "This was not always the case, and prior to the LDAP patches, only required PAM, which doesn\u0027t have this race condition.  It\u0027s not clear that all systems actually need this dependency, so I\u0027m a little worried we\u0027re adding things unnecessarily.  This also puts openbmc-specific services in the core, which prevents bmcweb from being used by other projects, like openrmc.",
      "range": {
        "startLine": 10,
        "startChar": 26,
        "endLine": 13,
        "endChar": 0
      },
      "revId": "5aae27367fa9cf03b50c4ac039bb0cab241f5b68",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e7fbca4_d3cfc7df",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-01-12T18:43:57Z",
      "side": 1,
      "message": "The \"After\" will only take affect if that service happens to be started on the particular system. It doesn\u0027t require the service be present (i.e. the Wants/Requires). But...bmcweb has a lot of dependencies. Do we add them all? We definitely hit an issue related to this specific dependency on our p10bmc system (client was trying to connect before user-manager was available and client ended up reporting an error). What\u0027s the right answer for our clients to handle this scenario if we can\u0027t guarantee authentication will work?",
      "parentUuid": "5ace342d_22a65b68",
      "range": {
        "startLine": 10,
        "startChar": 26,
        "endLine": 13,
        "endChar": 0
      },
      "revId": "5aae27367fa9cf03b50c4ac039bb0cab241f5b68",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b3749a6_67b486ed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-12T20:26:09Z",
      "side": 1,
      "message": "\u003e The \"After\" will only take affect if that service happens to be started on the particular system. It doesn\u0027t require the service be present (i.e. the Wants/Requires). But...bmcweb has a lot of dependencies. Do we add them all?\n\nPer the original design, no.  The only thing bmcweb circa 2019 required was pam, and that was guaranteed to be up at all times, so in practice, during bootup, what you got was a possibly incomplete, but still fully functional redfish tree, which there were a lot of good use cases for when things failed (ie, if a daemon fails to launch, it\u0027s nice to go to the journal and figure out why).\n\n\u003e We definitely hit an issue related to this specific dependency on our p10bmc system (client was trying to connect before user-manager was available and client ended up reporting an error). What\u0027s the right answer for our clients to handle this scenario if we can\u0027t guarantee authentication will work?\n\nIMO, we should guarantee authentication works at all times, like it used to prior to the ldap lookup-role-for-every-user-request model.",
      "parentUuid": "8e7fbca4_d3cfc7df",
      "range": {
        "startLine": 10,
        "startChar": 26,
        "endLine": 13,
        "endChar": 0
      },
      "revId": "5aae27367fa9cf03b50c4ac039bb0cab241f5b68",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d2639d4_5842a32e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-01-31T11:26:28Z",
      "side": 1,
      "message": "Authentication worked fine. We saw issues with authorization part of the incoming requests. There is no \"breakage\" of any initialization process at BMC if we don\u0027t have this. \nBut we saw some incoming command failures during bmc reset scenarios; which was due to GetUserInfo failures",
      "parentUuid": "5b3749a6_67b486ed",
      "range": {
        "startLine": 10,
        "startChar": 26,
        "endLine": 13,
        "endChar": 0
      },
      "revId": "5aae27367fa9cf03b50c4ac039bb0cab241f5b68",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bcc70b5_3bef91f2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000235
      },
      "writtenOn": "2022-01-31T16:40:43Z",
      "side": 1,
      "message": "\u003e we should guarantee authentication works at all times\n\nI agree in principle and have questions about the design.\n\nThe authentication provided by Linux-PAM is immediately followed by getting the user\u0027s Redfish RoleId (Administrator, ReadOnly, etc.) which is provided solely by the phosphor user manager (xyz.openbmc_project.User.Manager) service.\n\nSo if the information provided by this service is not available, then BMCWeb\u0027s Redfish service will not know the authenticated user\u0027s role, so it cannot assign privileges which are needed for the authority checks.\n\nWhat should BMCWeb do in that case?  One of? (1) Return HTTP status 503 (Service Unavailable)?  (2) Check authority with secure defaults (that is, no privileges)?  (3) Other ideas?\nI\u0027m leaning toward status 503.  What are your thoughts?",
      "parentUuid": "7d2639d4_5842a32e",
      "range": {
        "startLine": 10,
        "startChar": 26,
        "endLine": 13,
        "endChar": 0
      },
      "revId": "5aae27367fa9cf03b50c4ac039bb0cab241f5b68",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c51178e5_e8dab452",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-02-02T05:09:46Z",
      "side": 1,
      "message": "Returning 503 is good. \nBut we should have a way to differentiate between the actual internal failure of the dbus-500 and service unavailable-503. Both the cases, the dbus call with fail in similar way",
      "parentUuid": "2bcc70b5_3bef91f2",
      "range": {
        "startLine": 10,
        "startChar": 26,
        "endLine": 13,
        "endChar": 0
      },
      "revId": "5aae27367fa9cf03b50c4ac039bb0cab241f5b68",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4999708_886fe488",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000235
      },
      "writtenOn": "2022-01-12T03:14:48Z",
      "side": 1,
      "message": "Seems okay to me.\nAnd I wonder if other services should also depend on the user manager service.",
      "revId": "5aae27367fa9cf03b50c4ac039bb0cab241f5b68",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
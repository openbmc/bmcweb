{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6ca5d1b3_03fadc63",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-05-12T17:56:06Z",
      "side": 1,
      "message": "Noticed a small issue while testing a related feature.",
      "revId": "c2f5138abbfd17f56b2b0cdf534078deff055b38",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e125563b_da839523",
        "filename": "redfish-core/lib/chassis.hpp",
        "patchSetId": 4
      },
      "lineNbr": 167,
      "author": {
        "id": 1001633
      },
      "writtenOn": "2023-05-09T17:29:30Z",
      "side": 1,
      "message": "\"contained_by/containing\" are generic associations. If there are multiple \"contained_by\" associations, then \"getAssociationEndPoints\" returns multiple associations that include the the association we are looking for. Currently, we are failing if there are multiple associations, but it may be better to use \"getAssociatedSubTreePaths\" which will walk through the list and return the association that we are looking for.",
      "revId": "c2f5138abbfd17f56b2b0cdf534078deff055b38",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fed90c92_b8bd1a77",
        "filename": "redfish-core/lib/chassis.hpp",
        "patchSetId": 4
      },
      "lineNbr": 167,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-05-09T17:50:35Z",
      "side": 1,
      "message": "Isn\u0027t this only getting the \"contained_by\" association for a single Chassis?  In that case we want to fail if we find multiple \"contained_by\" associations since the Redfish spec does not allow a given Chassis to be contained by more than one Chassis.\n\nhttps://www.dmtf.org/sites/default/files/standards/documents/DSP2046_2022.3.pdf#page\u003d185",
      "parentUuid": "e125563b_da839523",
      "revId": "c2f5138abbfd17f56b2b0cdf534078deff055b38",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e5cf470_c788204b",
        "filename": "redfish-core/lib/chassis.hpp",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 1001633
      },
      "writtenOn": "2023-05-09T16:47:17Z",
      "side": 1,
      "message": "ec should be passed by reference.",
      "revId": "c2f5138abbfd17f56b2b0cdf534078deff055b38",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fc7a4c3_204c5906",
        "filename": "redfish-core/lib/chassis.hpp",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 1001633
      },
      "writtenOn": "2023-05-09T16:47:17Z",
      "side": 1,
      "message": "Check if ec is not EBADR and return internal error the way we do other places:\nhttps://github.com/openbmc/bmcweb/blob/master/redfish-core/lib/power_supply.hpp#LL57C31-L57C31",
      "revId": "c2f5138abbfd17f56b2b0cdf534078deff055b38",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44fdad93_4ee3794b",
        "filename": "redfish-core/lib/chassis.hpp",
        "patchSetId": 4
      },
      "lineNbr": 206,
      "author": {
        "id": 1001633
      },
      "writtenOn": "2023-05-09T16:47:17Z",
      "side": 1,
      "message": "ec should pass by reference.",
      "revId": "c2f5138abbfd17f56b2b0cdf534078deff055b38",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59404fb3_a993d20a",
        "filename": "redfish-core/lib/chassis.hpp",
        "patchSetId": 4
      },
      "lineNbr": 210,
      "author": {
        "id": 1001633
      },
      "writtenOn": "2023-05-09T16:47:17Z",
      "side": 1,
      "message": "Check if ec is not EBADR and return internal error.",
      "revId": "c2f5138abbfd17f56b2b0cdf534078deff055b38",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbf91569_38414000",
        "filename": "redfish-core/lib/chassis.hpp",
        "patchSetId": 4
      },
      "lineNbr": 217,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-05-12T17:56:06Z",
      "side": 1,
      "message": "This is going to always create an empty Contains array and overwrite the array if it already exists.  That\u0027s fine while this is the only way to generate that array.  It won\u0027t play well when we add other methods for adding a Contains/ContainedBy relationship.  One example is adding them via Redfish Aggregation (https://gerrit.openbmc.org/c/openbmc/bmcweb/+/57006).  In that scenario it would overwrite the Contains array that holds a satellite Chassis.\n\nCan you change this line to something like?\n\nif (!jValue.is_array()) { jvalue \u003d nlohmann::json::array();}\n\nThat way it won\u0027t create a Contains relationship that\u0027s been generated elsewhere.",
      "revId": "c2f5138abbfd17f56b2b0cdf534078deff055b38",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60ad15b5_38a105d6",
        "filename": "redfish-core/lib/chassis.hpp",
        "patchSetId": 4
      },
      "lineNbr": 217,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-05-12T18:01:45Z",
      "side": 1,
      "message": "That last line was supposed to read \"...it won\u0027t delete a Contains relationship...\".",
      "parentUuid": "cbf91569_38414000",
      "revId": "c2f5138abbfd17f56b2b0cdf534078deff055b38",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0ea0ea0_75e73607",
        "filename": "redfish-core/lib/chassis.hpp",
        "patchSetId": 4
      },
      "lineNbr": 233,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-05-12T17:56:06Z",
      "side": 1,
      "message": "Change to jValue.size().\n\nThis is related to my earlier comment, but I think needs to happen regardless.  In the previous for loop you won\u0027t add a given downstreamChassis if it\u0027s empty.  When that happens the size of Contains will not be the same as the size of downstreamChassisPath.",
      "revId": "c2f5138abbfd17f56b2b0cdf534078deff055b38",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ba7e1803_a5459841",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 65
      },
      "lineNbr": 0,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-02-01T21:43:11Z",
      "side": 1,
      "message": "Looks good to me.",
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a3ac97e_7bb3b792",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 65
      },
      "lineNbr": 0,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-02-07T04:57:08Z",
      "side": 1,
      "message": "Can this go?",
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d8302d0_2120a0f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 65
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-07T05:00:04Z",
      "side": 1,
      "message": "Still has bugs, so no, I don\u0027t think it can go.",
      "parentUuid": "6a3ac97e_7bb3b792",
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "268e1910_09b01369",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 65
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-07T05:00:04Z",
      "side": 1,
      "message": "s",
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fa0232b_51a07125",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 65
      },
      "lineNbr": 0,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-20T13:52:28Z",
      "side": 1,
      "message": "I\u0027ve refactored the code.\nPlease review again.",
      "parentUuid": "7d8302d0_2120a0f6",
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87dc7f79_05c9e040",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 41,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-07T04:58:55Z",
      "side": 1,
      "message": "Name is rarely the same as the ID.",
      "range": {
        "startLine": 41,
        "startChar": 39,
        "endLine": 41,
        "endChar": 45
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3aaa0ee9_099a26d6",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 41,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-02-07T14:39:24Z",
      "side": 1,
      "message": "It looks like the CPU is just \"Processor.\" Can we just do \"FabricAdapter\" here?\nhttps://github.com/openbmc/bmcweb/blob/master/redfish-core/lib/processor.hpp#L242",
      "parentUuid": "87dc7f79_05c9e040",
      "range": {
        "startLine": 41,
        "startChar": 39,
        "endLine": 41,
        "endChar": 45
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ce563f8_94d8058d",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 41,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-07T16:26:32Z",
      "side": 1,
      "message": "Done.\nI\u0027ve updated it as \"Fabric Port\", and also \"Fabric Port Collection\" for collection.",
      "parentUuid": "3aaa0ee9_099a26d6",
      "range": {
        "startLine": 41,
        "startChar": 39,
        "endLine": 41,
        "endChar": 45
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "108197bf_305c1608",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 41,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-07T18:06:14Z",
      "side": 1,
      "message": "Yep, those are correct (with the spaces).  Name is human readable.",
      "parentUuid": "8ce563f8_94d8058d",
      "range": {
        "startLine": 41,
        "startChar": 39,
        "endLine": 41,
        "endChar": 45
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ecd952a_7198a980",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-07T04:58:55Z",
      "side": 1,
      "message": "\u003e     This defines a Port of a switch, controller, chassis, or any other device\n\n\nWhere is the code that checks that the connected device is a FabricAdapter?",
      "range": {
        "startLine": 57,
        "startChar": 30,
        "endLine": 57,
        "endChar": 40
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0dc47d73_6cdeaac4",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 57,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-07T13:13:51Z",
      "side": 1,
      "message": "This `getFabricAssociatedPortSubTree()` is called by `getFabricPortSubTree()` which checks the validity of the fabric adapter using `getValidFabricAdapterPath()` in L69-L76.\n\n```\ninline void\n    getFabricPortSubTree(const std::shared_ptr\u003cbmcweb::AsyncResp\u003e\u0026 asyncResp,\n                         const std::string\u0026 systemName,\n                         const std::string\u0026 adapterId, Callback\u0026\u0026 callback)\n{\n    getValidFabricAdapterPath(\n        adapterId, systemName, asyncResp,\n        std::bind_front(getFabricAssociatedPortSubTree, asyncResp,\n                        std::forward\u003cCallback\u003e(callback)));\n}\n```",
      "parentUuid": "8ecd952a_7198a980",
      "range": {
        "startLine": 57,
        "startChar": 30,
        "endLine": 57,
        "endChar": 40
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5e8c1a3_857c37cb",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 131,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-07T04:58:55Z",
      "side": 1,
      "message": "nullptr dereference.  if portIter-\u003esecond.empty()",
      "range": {
        "startLine": 131,
        "startChar": 54,
        "endLine": 131,
        "endChar": 56
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c0f0eba_efe1a553",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 131,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-07T13:13:51Z",
      "side": 1,
      "message": "This `portIter-\u003esecond` is the service names for Port.\nIs it possible to have an empty service for the obtained subtree element? \n\nIn bmcweb, many other places are doing like this.\nhttps://github.com/openbmc/bmcweb/blob/aaf08ac7cd355341499453fc8677c2976a4e5464/redfish-core/lib/systems.hpp#L2805",
      "parentUuid": "f5e8c1a3_857c37cb",
      "range": {
        "startLine": 131,
        "startChar": 54,
        "endLine": 131,
        "endChar": 56
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f48d505_c44db5df",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 131,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-07T16:26:32Z",
      "side": 1,
      "message": "Done.\nI\u0027ve added the checks for both `first.empty()` and `second.empty()`.",
      "parentUuid": "4c0f0eba_efe1a553",
      "range": {
        "startLine": 131,
        "startChar": 54,
        "endLine": 131,
        "endChar": 56
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02c08afb_8b7dc1e1",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-07T04:58:55Z",
      "side": 1,
      "message": "The flow here needs to be:\n\nFind the port that matches the name of this entry.\nVerify that the port is connected to the expected FabricAdapter.",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb86fed5_60273973",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-07T13:13:51Z",
      "side": 1,
      "message": "I think this has been discussed in the previous comments/responses.\n\nPort can also be associated for the other types - e.g. Network etc.\n\nSo, assuming bmcweb implements port for the other types in addition to FabricAdapter, if we find the matching Ports first, the associated endpoints potentially may be the mix of the different inventory types (besides FabricAdapter) if port name happens to be same.   This could result in the multiple dbus calls to verify the endpoints (additional calls per each matching port).\n\nHowever, if we search fabric adapter first (using the given input `adapterId`), all associated ports to the fabric adapters will be returned using `getAssociatedSubtree()` without needing any more dbus calls.",
      "parentUuid": "02c08afb_8b7dc1e1",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2ab19e2_cbdeb38d",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-07T22:14:08Z",
      "side": 1,
      "message": "\u003e I think this has been discussed in the previous comments/responses.\n\u003e \n\u003e Port can also be associated for the other types - e.g. Network etc.\n\u003e \n\u003e So, assuming bmcweb implements port for the other types in addition to FabricAdapter, if we find the matching Ports first, the associated endpoints potentially may be the mix of the different inventory types (besides FabricAdapter) if port name happens to be same.\n\nRight, but that can happen regardless, you need to verify that the thing attached to the other end of the association matches the type you expect.  I suspect that given the change a year ago to non-type specific associations we need another mapper call added that can answer:\n\n\"Find me the entries with type X associated with type Y on association connected_by\"\n\nPutting all this logic in bmcweb and doing a triple tiered mapper call is complexity that we can\u0027t really handle in bmcweb, as we start getting into business logic.\n\n\u003e   This could result in the multiple dbus calls to verify the endpoints (additional calls per each matching port).\n\u003e \n\u003e However, if we search fabric adapter first (using the given input `adapterId`), all associated ports to the fabric adapters will be returned using `getAssociatedSubtree()` without needing any more dbus calls.\n\nWe still have multiple dbus calls though?",
      "parentUuid": "fb86fed5_60273973",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1bcd091_c3459636",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-08T15:41:49Z",
      "side": 1,
      "message": "Here, the query is to get ports of the given/specific adapter (e.g. `disk_backplane0`), not all ports in the system.\n\n```\ncurl -k -X GET https://${bmc}:18080/redfish/v1/Systems/system/FabricAdapters/disk_backplane0/Ports\n```\n\n\nApproach A)\n\nSo, the logic flow (by `getValidFabricPortSubTree()`) here is\n1) validate the give adapter (`disk_backplane0`) where is it a valid fabric adapter using `getValidFabricAdapterPath()`.  \n\n2) With the validate fabric adapter, the find ports (with the type of `Connector.Port`) that are associated by \u0027connecting\u0027 with the fabric adapter (`disk_backplane0`) in `getFabricAssociatedPortSubTree()`\n\n```\ngetFabricAssociatedPortSubTree()\n{\n\n    dbus::utility::getAssociatedSubTree(\n        fabricAdapterPath + \"/connecting\", \n        ...\n}\n```\nThis will return all valid ports of type `Connector.Port` that are associated by `connecting` for the given fabric adapter.  We don\u0027t need to validate each port\u0027s type again as they are already valid.\n\n---\n\nApproach B)\n\nHowever, if we do the other way arounds like\n1) find all ports with the types of \u0027Connector.Port\u0027.  This may return the the mix of the ports that may be associated with the other types (e.g. Network).\n\n2) Then, for each port, we need to call \u0027getAssociatedSubTreePaths()` using `connected_to` for FabricAdapter.\n\n- For example, if (1) returns N items, the step (2) will invoke `getAssociatedSubTreePaths()\u0027  N times.\n\n```\n     for(port : subtreepaths)\n     {\n         getAssociatedSubTreePaths( .. port + \"/connected_to\", )\n     }\n```\n\n---\n\nI think Approach (A) is correct and more efficient than (B).\nIt is because the query is for the already-scoped input (e.g. given adapter).",
      "parentUuid": "c2ab19e2_cbdeb38d",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daad0514_1ec1c793",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-08T16:38:33Z",
      "side": 1,
      "message": "in nowhere above are you verifying that an item is item.FabricAdapter\n\nthe reality here is that this is all business logic that needs to go in the mapper.  we shouldn’t be chaining together multiple calls to dump all ports and all fabric adapters just to get a single port.\n\nbecause this is the first use of a 2 tiered association (fabric adapter -\u003e association -\u003e port) where we don’t know the type on the other side, it’s not surprising the mapper doesn’t have a method that does what we need here.  making complex code like this in bmcweb is not the answer.  let’s get the mapper updated with a call that does what we need, and returns a single value.  I’m assuming we’ll need the association equivalent of GetObject.\n\nfwiw, I’m sorry it took so long to come to this conclusion.  I really was hoping there was a clean way to do this in bmcweb that I could live with, but there isn’t, so let’s get the capability added to the mapper and go from there.",
      "parentUuid": "e1bcd091_c3459636",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca2adfb7_13549ab0",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-09T14:30:40Z",
      "side": 1,
      "message": "The current code is first checking the valid fabric adapter using `getValidFabricAdapterPath()` (which validates Item.FabricAdapter), and then get the associated Ports (which are Connector.Port).\n\nLet me try to change the logic flow like this.\n- Given `adapterId`\n- validate adapterId as Item.FabricAdapter, and get its dbus path - fabricAdapterPath\n- (a) Get Connector.Port subtree. (all Connector.Port items).\n- (b) Get connecting Connector.Ports for the given fabricAdapterPath.\n- (c) Collect the only match Connector.Ports which are in (b). This would validate the result ports are associated with fabricAdapterPath.\n- Use this (c) Connector.Ports for the further processing.\n\nWould this be okay?\nI think this logic would also be more clearer and easier to read.",
      "parentUuid": "daad0514_1ec1c793",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f004e8e6_03054e30",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-09T17:02:53Z",
      "side": 1,
      "message": "\u003e The current code is first checking the valid fabric adapter using `getValidFabricAdapterPath()` (which validates Item.FabricAdapter), and then get the associated Ports (which are Connector.Port).\n\u003e \n\u003e Let me try to change the logic flow like this.\n\u003e - Given `adapterId`\n\u003e - validate adapterId as Item.FabricAdapter, and get its dbus path - fabricAdapterPath\n\nDoing one mapper call\n\n\u003e - (a) Get Connector.Port subtree. (all Connector.Port items).\n\nDoing a second mapper call\n\n\u003e - (b) Get connecting Connector.Ports for the given fabricAdapterPath.\n\ndoing a third mapper call.\n\n\u003e - (c) Collect the only match Connector.Ports which are in (b). This would validate the result ports are associated with fabricAdapterPath.\n\nCalling the daemon.\n\n\u003e - Use this (c) Connector.Ports for the further processing.\n\u003e \n\u003e Would this be okay?\n\nNo, it is 2 mapper calls too many.  The generalized procedure for any bmcweb operation is:\n\nCall the mapper, get the result, call the connections the mapper returns that implement those interfaces.\n\n\u003e I think this logic would also be more clearer and easier to read.",
      "parentUuid": "ca2adfb7_13549ab0",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "026d5426_f1691186",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-09T18:32:50Z",
      "side": 1,
      "message": "There are 2 types of URIs of interests.\na) `/redfish/v1/.../FabricAdapters/\u003cstr\u003e/Ports/`        # for given adadapterId\nb) `/redfish/v1/.../FabricAdapters/\u003cstr\u003e/Ports/\u003cstr\u003e/`   # for given (adapterId,portId)\n\nI\u0027m not sure how to get the result in one mapper call  to get ports which are associated with a given `adapterId`.  \nTo deal with the association, the first step would be to find a dbus path from `adapterId\u0027. This would already require 2 steps.\n\nCan this be done in 1 mapper call?\n\nI think - the possible approach would be.\n\n- 1st  mapper-call is to validate the adapterId \u0026 get `adapterPath` (via `getValidFabricAdapterPath()`).\n\n- 2nd mapper call: getAssociatedSubTree using `adapterPath` to obtain Ports.",
      "parentUuid": "f004e8e6_03054e30",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85954ca4_d0710129",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-09T19:03:55Z",
      "side": 1,
      "message": "\u003e There are 2 types of URIs of interests.\n\u003e a) `/redfish/v1/.../FabricAdapters/\u003cstr\u003e/Ports/`        # for given adadapterId\n\u003e b) `/redfish/v1/.../FabricAdapters/\u003cstr\u003e/Ports/\u003cstr\u003e/`   # for given (adapterId,portId)\n\u003e \n\u003e I\u0027m not sure how to get the result in one mapper call  to get ports which are associated with a given `adapterId`.  \n\u003e To deal with the association, the first step would be to find a dbus path from `adapterId\u0027. This would already require 2 steps.\n\u003e \n\u003e Can this be done in 1 mapper call?\n\nThe mapper has ALL of the information above in its dbus map.  None of the above would rely on intermediate data from bmcweb, so yes, it can do it in one call.\n\n\u003e \n\u003e I think - the possible approach would be.\n\u003e \n\u003e - 1st  mapper-call is to validate the adapterId \u0026 get `adapterPath` (via `getValidFabricAdapterPath()`).\n\u003e \n\u003e - 2nd mapper call: getAssociatedSubTree using `adapterPath` to obtain Ports.\n\nWhat information does bmcweb have between calls 1 and 2 that it doesn\u0027t have before call 1?  I suspect the answer is nothing aside from business logic (especially given that the HTTP request is completed at that point), which means that the logic goes in the mapper.\n\n\nI really do appreciate you thinking about this in depth.",
      "parentUuid": "026d5426_f1691186",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "946c4d0a_981516d3",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-09T19:59:33Z",
      "side": 1,
      "message": "Thanks for the hints and suggestions.\n\n\u003e What information does bmcweb have between calls 1 and 2 that it doesn\u0027t have before call 1? \n\n2nd call is the main one to get the associated ports, but I needed the dbus `fabricAdapterPath` from the input `adapterId` (1st call).\n\nI\u0027ll investigate more to try it done by one call, e.g. subtree which are all related to Item.FabricAdapter \u0026 Connector.Port, and resolve the them.",
      "parentUuid": "85954ca4_d0710129",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d0a3bd8_9e0c5f0e",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-09T20:04:53Z",
      "side": 1,
      "message": "\u003e Thanks for the hints and suggestions.\n\u003e \n\u003e \u003e What information does bmcweb have between calls 1 and 2 that it doesn\u0027t have before call 1? \n\u003e \n\u003e 2nd call is the main one to get the associated ports, but I needed the dbus `fabricAdapterPath` from the input `adapterId` (1st call).\n\nfabricAdapterPath originated from the mapper.\n\n\u003e \n\u003e I\u0027ll investigate more to try it done by one call, e.g. subtree which are all related to Item.FabricAdapter \u0026 Connector.Port, and resolve the them.\n\nKeep in mind, this might require a new API on the mapper (very likely does).  I don\u0027t think we\u0027ve had a case where we\u0027ve done a two tiered mapper association call yet.",
      "parentUuid": "946c4d0a_981516d3",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "087a8230_f5d019ea",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-20T13:52:28Z",
      "side": 1,
      "message": "I added the logic to verify port object via `dbus::utility::getDbusObject()` like\n\n```\ninline void afterGetValidFabricPortPath( portId, fabricPortPaths)\n{\n   ...\n   //Check this as Connector.Port\n   dbus::utility::getDbusObject(portPath ...). \n}\n\ninline void getValidFabricPortPath(fabricAdapterPath, portId)\n{\n    // Get associated PortPaths to fabricAdapter\n    getFabricPortPaths( [](fabricPortPaths) {\n          afterGetValidFabricPortPath(portId, fabricPortPaths);  \n    });\n}\n\ninline void handleFabricPortGet(adapterId, portId)\n{\n    // Find fabricAdapterPath\n    getValidFabricAdapterPath( [](fabricAdapterPath) {\n          getValidFabricPortPath(portId, fabricPortPaths);\n    });\n}\n```",
      "parentUuid": "8d0a3bd8_9e0c5f0e",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98e35d79_66226c63",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-21T17:12:18Z",
      "side": 1,
      "message": "I still see multiple tiers of mapper calls in the above.",
      "parentUuid": "087a8230_f5d019ea",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc1d163b_35e1d74b",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-21T18:40:40Z",
      "side": 1,
      "message": "Yes, but I\u0027m not sure how to avoid those multiple tiers of mapper calls.\n\nFor a given `/redfish/v1/Systems/systemsFabricAdapters/\u003cadapterId\u003e/Ports/\u003cportId\u003e`,  we need to do a few things.\n- find `fabricAdapterPath` for given `adapterId`\n- find the associated PortPaths and match with `portId`\n- Check the found `portPath` whether it is `Connector.Port`.\n\nWith the currently available mapper calls, I think it will require at least 3 calls.  \nOne of the reasons is because the mapper calls use dbus path as an input, and thus the first step would always be getSubTree to find its path from `adapterId` or `portId` (if we choose to search it first).\n\nTo squeeze these steps, I think it may be better to make a mapper call using `Id` as input, but that\u0027s not available.\n(This approach may create its own questions - e.g. can `Id` always be matched the leaf of the path?).\n\n----\n\nSame number of steps may happen for like  `/redfish/v1/Chassis/\u003cstr\u003e/ThermalSubsystem/Fans/\u003cstr\u003e/` as it needs to do\n- Find `validChassisPath` from `chassId`\n- Get associated validFanPaths \u0026 match it with `fanId`\n- Check it as Item.Fan.\n\nI think the similar case is  `/redfish/v1/Chassis/\u003cstr\u003e/Drives/\u003cstr\u003e/`",
      "parentUuid": "98e35d79_66226c63",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42f5fde2_77425490",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-22T17:36:28Z",
      "side": 1,
      "message": "\u003e \n\u003e With the currently available mapper calls\n\nIt\u0027s VERY likely we need a new mapper call for this two tiered type of lookup.\n\n\n\u003e, I think it will require at least 3 calls.  \n\u003e One of the reasons is because the mapper calls use dbus path as an input, and thus the first step would always be getSubTree to find its path from `adapterId` or `portId` (if we choose to search it first).\n\u003e \n\u003e To squeeze these steps, I think it may be better to make a mapper call using `Id` as input, but that\u0027s not available.\n\nSo write it?\n\n\u003e (This approach may create its own questions - e.g. can `Id` always be matched the leaf of the path?).\n\nIf it can\u0027t then bmcweb shouldn\u0027t be doing it either?",
      "parentUuid": "dc1d163b_35e1d74b",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "255b731a_59cf5bae",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-22T20:50:49Z",
      "side": 1,
      "message": "Ok, I\u0027ll try to make a new mapper method separately from this commit.\n\nLater once we have the new mapper method, we can refactor this part.",
      "parentUuid": "42f5fde2_77425490",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99d6749f_b2ceaa8f",
        "filename": "redfish-core/lib/fabric_ports.hpp",
        "patchSetId": 65
      },
      "lineNbr": 296,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-29T19:04:54Z",
      "side": 1,
      "message": "Cool, please mark this commit WIP while that work happens if you don\u0027t intend on doing it right away.",
      "parentUuid": "255b731a_59cf5bae",
      "range": {
        "startLine": 296,
        "startChar": 4,
        "endLine": 296,
        "endChar": 29
      },
      "revId": "3d73c5862a0a64e87ff1f07b468ab7ce91d6af67",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
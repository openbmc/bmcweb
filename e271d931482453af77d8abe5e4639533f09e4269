{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "63ccb233_4a69b0ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-07T21:00:16Z",
      "side": 1,
      "message": "What backend was this tested against?  I don\u0027t see any implementations of FabricAdapter Ports in Entity Manager.",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "580ca5d9_d7da94af",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-12-08T14:51:06Z",
      "side": 1,
      "message": "IBM uses PLDM (using openpower-vpd-parser) to implement this instead of usign EM.\nThe related commits are:\n- https://gerrit.openbmc.org/c/openbmc/openpower-vpd-parser/+/66540\n- https://gerrit.openbmc.org/c/openbmc/openbmc/+/66541",
      "parentUuid": "63ccb233_4a69b0ff",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e27c495_9cb98dee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-08T23:02:18Z",
      "side": 1,
      "message": "How can PLDM detect a fabric adapter?  Wouldn\u0027t a fabric adapter be based on an eeprom fru connected to the BMC?\n\nIn the commit you linked, I see:\n\n\"xyz.openbmc_project.Inventory.Connector.Port\": null,\n\n\nSo it\u0027s not filing out any of the port properties?",
      "parentUuid": "580ca5d9_d7da94af",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c743f21_497a7dec",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-12-08T23:55:39Z",
      "side": 1,
      "message": "What I learned about it is that hypervisor is sending down the fabric adapter via pldm.",
      "parentUuid": "0e27c495_9cb98dee",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f25c7a0c_9ccf6108",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-12-18T21:48:43Z",
      "side": 1,
      "message": "From https://en.wikipedia.org/wiki/Hypervisor\n\n\"IBM provides virtualization partition technology known as logical partitioning (LPAR) on System/390, zSeries, pSeries and IBM AS/400 systems. For IBM\u0027s Power Systems, the POWER Hypervisor (PHYP) is a native (bare-metal) hypervisor in firmware and provides isolation between LPARs. .... \"",
      "parentUuid": "1c743f21_497a7dec",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd699ca0_8a92144c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-19T00:02:31Z",
      "side": 1,
      "message": "So, we\u0027re talking about virtualized Fabric adapters.  Shouldn\u0027t those go into hypervisor_system?",
      "parentUuid": "f25c7a0c_9ccf6108",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41cbfaf4_5b50681a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-01-03T21:59:35Z",
      "side": 1,
      "message": "Even if the fabric adapters/ports are created by the hypervisor, wouldn\u0027t the fabric adapters still be classified as FabricAdapters and their ports?\n\n(I also think the physical Fabric Adapters may provide the ways to create virtual ports for the VMs?)",
      "parentUuid": "bd699ca0_8a92144c",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f495067_9f503973",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-03T23:39:04Z",
      "side": 1,
      "message": "\u003e Even if the fabric adapters/ports are created by the hypervisor, wouldn\u0027t the fabric adapters still be classified as FabricAdapters and their ports?\n\nIf they\u0027re created by the hypervisor, they would go in the hypervisor system, not the physical system, as you\u0027ve put them here.\n\n\u003e \n\u003e (I also think the physical Fabric Adapters may provide the ways to create virtual ports for the VMs?)\n\nRight, that\u0027s the difference.  Physical fabric adapters go in the physical system, virtual fabric adapters go in the hypervisor system.  Because these are created by the hypervisor, they would go in the hypervisor system.",
      "parentUuid": "41cbfaf4_5b50681a",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1175a0f_0983348b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-01-08T13:15:55Z",
      "side": 1,
      "message": "Isn\u0027t the elements under `/System/hypervisor/` to describe the `hypervisor` itself, not necessarily the elements that are created by the hypervisor?\n\nHere, I think hypervisor (like a PLDM) would be the actor that manages the elements (e.g. FabricAdapters) for the LPARs (VM), not for hypervisor.\n\nUnless they are under System/system, how can System/system find the related FabricAdapters?",
      "parentUuid": "1f495067_9f503973",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1cc7431_ac103ac0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-01-08T21:03:33Z",
      "side": 1,
      "message": "\u003e If they\u0027re created by the hypervisor, they would go in the hypervisor system, not the physical system, as you\u0027ve put them here.\n\nI am hoping the /System/hypervisor/ eventually goes away. \nRedfish has since put out an OS model (PR 4504) \nThe mockup mockups/public-applications/Systems/437XR1138R2/OperatingSystem/index.json \" an OperatingSystem resource and shows that it acts as a hypervisor.\" \n\nI feel putting these Fabric Adapters under hypervisor doesn\u0027t make sense long or short term.",
      "parentUuid": "d1175a0f_0983348b",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48e09f31_3a6bf4c4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-08T21:58:12Z",
      "side": 1,
      "message": "\u003e \u003e If they\u0027re created by the hypervisor, they would go in the hypervisor system, not the physical system, as you\u0027ve put them here.\n\u003e \n\u003e I am hoping the /System/hypervisor/ eventually goes away. \n\nLets make that more widely known, and start working toward that end.  As written, this doesn\u0027t implement that intent.\n\n\u003e Redfish has since put out an OS model (PR 4504) \n\u003e The mockup mockups/public-applications/Systems/437XR1138R2/OperatingSystem/index.json \" an OperatingSystem resource and shows that it acts as a hypervisor.\" \n\u003e \n\u003e I feel putting these Fabric Adapters under hypervisor doesn\u0027t make sense long or short term.\n\nIf we adopt the operating system model, they would go under OperatingSystem, right?  Accepting this patch would go backward toward that intent, right?",
      "parentUuid": "a1cc7431_ac103ac0",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf6e98a7_ff07a8e7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-01-09T02:06:20Z",
      "side": 1,
      "message": "In this case, I think FabricAdapters are still a system\u0027s properties, not a OperatingSystem(or hypervisor).",
      "parentUuid": "48e09f31_3a6bf4c4",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fe722d1_b56c3746",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-09T16:36:00Z",
      "side": 1,
      "message": "not if they\u0027re virtual.  If they\u0027re virtual Fabric adapters, they belong to the OS/hypervisor.",
      "parentUuid": "cf6e98a7_ff07a8e7",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b0861d5_98baedf8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-01-09T19:42:01Z",
      "side": 1,
      "message": "They aren\u0027t virtual. \n\n\u003e If we adopt the operating system model, they would go under OperatingSystem, right? Accepting this patch would go backward toward that intent, right?\n\nI don\u0027t think they should go under OperatingSystem. We think of these Fabric adapters as other System resources like Processors or Dimms. \n\nAccepting this patch, adds another resource under system (like processors and dimms). This must be solved one day when multiple host support is added. This patch doesn\u0027t touch virtual fabric adapters or a fabric adapter owned by the OS/hypervisor, but I find that fair.",
      "parentUuid": "6fe722d1_b56c3746",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6863ed48_8817eafd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-10T18:30:11Z",
      "side": 1,
      "message": "\u003e They aren\u0027t virtual. \n\nThen why is the hypervisor reporting them, instead of a physical interface (i2c, etc)?  I\u0027m pretty confused.  If they\u0027re physical, I would expect to see an entity-manager config for the physical fabric card.",
      "parentUuid": "5b0861d5_98baedf8",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f69b7ba_bd68871a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-01-11T14:14:40Z",
      "side": 1,
      "message": "IBM currently uses PLDM (instead of EM) working with PHYP (which may handle allocations dynamically). \n\nhttps://en.wikipedia.org/wiki/Hypervisor\n\u003e Input/Output (I/O) adapters can be exclusively \"owned\" by LPARs or shared by LPARs through an appliance partition known as the Virtual I/O Server (VIOS). The Power Hypervisor provides for high levels of reliability, availability and serviceability (RAS) by facilitating hot add/replace of many parts (model dependent: processors, memory, I/O adapters, blowers, power units, disks, system controllers, etc.)",
      "parentUuid": "6863ed48_8817eafd",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4b6586e_5e779853",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-11T17:48:25Z",
      "side": 1,
      "message": "\u003e IBM currently uses PLDM (instead of EM) working with PHYP (which may handle allocations dynamically). \n\nIs there a design for PLDM implementing yet another inventory system?  I don\u0027t remember seeing that.\n\n\u003e (which may handle allocations dynamically)\n\nIf a fabric adapter can be allocated dynamically, it\u0027s a virtual fabric adapter, not a physical one, and needs to be reported as such.  A systems physical hierarchy (which is what this ComputerSystem represents) doesn\u0027t change due to software.\n\n\u003e \n\u003e https://en.wikipedia.org/wiki/Hypervisor\n\u003e \u003e Input/Output (I/O) adapters can be exclusively \"owned\" by LPARs or shared by LPARs through an appliance partition known as the Virtual I/O Server (VIOS). The Power Hypervisor provides for high levels of reliability, availability and serviceability (RAS) by facilitating hot add/replace of many parts (model dependent: processors, memory, I/O adapters, blowers, power units, disks, system controllers, etc.)",
      "parentUuid": "0f69b7ba_bd68871a",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12cc4164_06ce5886",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-01-11T18:03:07Z",
      "side": 1,
      "message": "\u003e Then why is the hypervisor reporting them, instead of a physical interface (i2c, etc)? I\u0027m pretty confused. If they\u0027re physical, I would expect to see an entity-manager config for the physical fabric card.\n\nOne example of where we are using a fabric adapter is this cable card for the i/o expansion drawers\n\nhttps://www.ibm.com/docs/en/power10?topic\u003ddetails-pcie4-cable-adapter-fc-ej24-ccin-6b92\n\nThe hypervisor sends information for the PCIe cable card attached external i/o drawers because the BMC cannot detect that as the only connection to it is through the PCIe cable, which is configured and owned by the hypervisor.",
      "parentUuid": "c4b6586e_5e779853",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57ebde8c_649fa124",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-01-11T18:06:08Z",
      "side": 1,
      "message": "\u003e\u003e  IBM currently uses PLDM (instead of EM) working with PHYP (which may handle allocations dynamically). \n\n\u003e Is there a design for PLDM implementing yet another inventory system? I don\u0027t remember seeing that.\n\nIBM doesn\u0027t completely use EM; it still uses https://github.com/openbmc/phosphor-inventory-manager.\nIBM is using PLDM for communication between the BMC and the host. \nThere is not a new inventory. \nIBM plans to move completely to EM.",
      "parentUuid": "12cc4164_06ce5886",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4147e610_b4b445fe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-11T18:49:28Z",
      "side": 1,
      "message": "I see no mention of PIM on this thread, only PLDM?  Which is it?  Also, I see VPD parser is ALSO producing inventory for the PortCollection, which I\u0027m really not following.  That\u0027s kind of why I asked for some kind of design here.  It doesn\u0027t seem to follow what already exists.\n\n\nMy concern is that there\u0027s no way for anyone to use this code, given so many hardcoded interfaces, and custom ibm-specific and possibly downstream things.  We already went through that for months where the interfaces weren\u0027t even documented.\n\nWith that in mind, lets go about this another way: Lets say I wanted to support a mellanox connectx5 card (which has an IPMI compatible FRU) and have it produce a FabricAdapterCollection and PortCollection.\nhttps://www.nvidia.com/en-us/networking/ethernet/connectx-5/\n\nIt is plugged into a PCIe riser on an S7106 motherboard (already supported by openbmc):\nhttps://gerrit.openbmc.org/plugins/gitiles/openbmc/openbmc/+/08e263a38923a9696fee9e7887cd771624f7f074/meta-tyan/meta-s7106/\n\nHow would I do that and utilize this code?  If all the backends are present and working, it should just be a matter of adding that card FRU definition somewhere, right?  Where would I add that?  I only mention those specific devices because they are what I have access to, and they\u0027re representative of the simplest fabric adapter I can think of.",
      "parentUuid": "57ebde8c_649fa124",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35bba57e_1573a192",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-01-17T22:32:39Z",
      "side": 1,
      "message": "BTW, the related VPD parser for FabricAdapter can be found in https://github.com/openbmc/openpower-vpd-parser/blob/0eb8cacc07375beb3c0b6008dc5d5b6c7090ae37/config/ibm/50001001.json#L2254C1-L2267C15\n```\n      \"/sys/bus/i2c/drivers/at24/13-0050/eeprom\": [\n            {\n                \"inventoryPath\": \"/system/chassis/motherboard/disk_backplane0\",\n                \"extraInterfaces\": {\n                    \"xyz.openbmc_project.Inventory.Item.DiskBackplane\": null,\n                    \"xyz.openbmc_project.Inventory.Item.FabricAdapter\": null,\n                    \"com.ibm.ipzvpd.Location\": {\n                        \"LocationCode\": \"Ufcs-P1\"\n                    },\n                    \"xyz.openbmc_project.Inventory.Item\": {\n                        \"PrettyName\": \"NVMe Backplane\"\n                    }\n                }\n            },\n```\n\nOne of its ports is defined in https://github.com/openbmc/openpower-vpd-parser/blob/0eb8cacc07375beb3c0b6008dc5d5b6c7090ae37/config/ibm/50001001.json#L2434C1-L2434C1\n\nWouldn\u0027t it be good enough for FabricAdapter and Port backends for PLDM (which is currently used by IBM)?",
      "parentUuid": "4147e610_b4b445fe",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a904609_fb256614",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-17T23:10:31Z",
      "side": 1,
      "message": "\u003e How would I do that and utilize this code?\n\nThis question seems to be unanswered.",
      "parentUuid": "35bba57e_1573a192",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "260ec8f8_b89a96e8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-01-18T22:07:32Z",
      "side": 1,
      "message": "\u003e I see no mention of PIM on this thread, only PLDM? Which is it? \n\nPIM only came up in response to current inventory apps. I think this is a tangent. The thing to know here is that not everyone is using Entity Manager, although I hope we all do one day. Having multiple apps doing the same thing (although supported by Mapper, our architecture) has caused much pain. I think we will always have https://github.com/openbmc/x86-power-control, etc, but hopefully, inventory can be like state/user management in the fact we all use it. This is tangent to the conversation. \n\n\u003e How would I do that and utilize this code?\n\nEither use \nopenpower-vpd-parser (or PLDM; I think this PLDM example for a fabric adapter has caused more confusion, the commit msg just links the openpower-vpd-parser examples) \nor\nIn Entity Manager follow the interfaces documented in https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Inventory/Item/FabricAdapter.interface.yaml\n\nWe have done this in the past for other inventory/associations/etc. \n\n\u003e Lets say I wanted to support a mellanox connectx5 card (which has an IPMI compatible FRU) and have it produce a FabricAdapterCollection and PortCollection.\nhttps://www.nvidia.com/en-us/networking/ethernet/connectx-5/\n\n\u003eIt is plugged into a PCIe riser on an S7106 motherboard (already supported by openbmc):\nhttps://gerrit.openbmc.org/plugins/gitiles/openbmc/openbmc/+/08e263a38923a9696fee9e7887cd771624f7f074/meta-tyan/meta-s7106/\n\nBelow is an attempt by me to model this.\n\nhttps://www.nvidia.com/en-us/networking/ethernet/connectx-5/ is a fabricAdapter at  /redfish/v1/Systems/system/FabricAdapters/connectx-5 (it implements the     xyz.openbmc_project.Inventory.Item.FabricAdapter )\n\n\u003e and PortCollection\n\nAny ports you want to model must implement xyz.openbmc_project.Inventory.Connector.Port and have that connecting association. Again this is similar to other inventory. \nThe ports would be at /redfish/v1/Systems/system/FabricAdapters/connectx-5/Ports/\u003cport id\u003e\n\n\n\u003e PCIe riser on an S7106 motherboard\n\nI am missing something here because I didn\u0027t know how to properly dig through the files in that link\nbut I am assuming the PCIe riser is a PCIeDevice (Redfish is moving away from PCIeSlots and to a PCIeSlot being an empty PCIeDevice).. \nThe Fabric Adapter schema has a link to a PCIeDevice\n                \"PCIeDevices\": {\n\nI don\u0027t see anything in https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Inventory/Item/FabricAdapter.interface.yaml describing this association, but it should be pretty straightforward. I also don\u0027t think an association is required to get this merged. (It seems like a further enhancement, we downstream do use this https://github.com/ibm-openbmc/bmcweb/blob/1060/redfish-core/lib/fabric_adapters.hpp#L191 so something we would like to see as well)\n\n\u003e My concern is that there\u0027s no way for anyone to use this code, given so many hardcoded interfaces, and custom ibm-specific and possibly downstream things. \n\nI don\u0027t see how this is any different than other inventory like Dimms/Processors. \nFor those we are using more ibm specific apps too like openpower-vpd-parser\nhttps://github.com/openbmc/openpower-vpd-parser/blob/0eb8cacc07375beb3c0b6008dc5d5b6c7090ae37/config/ibm/50001001.json#L2720\n\nAnd that is supported by our OpenBMC architecture because we are using https://github.com/openbmc/phosphor-dbus-interfaces to doucment this",
      "parentUuid": "6a904609_fb256614",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20c84352_b2f8eaf1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-07T04:58:55Z",
      "side": 1,
      "message": "If this is expected to run through openpower-vpu-parser, shouldn\u0027t there be an entity-manager config that probes on it like this?\n\nhttps://github.com/openbmc/entity-manager/blob/500cab25a42142eb483119c75fc028179221d8cf/configurations/everest.json#L23\n\nIt seems odd that we\u0027re directly enumerating inventory devices directly from the VPD parser to bmcweb.  I wouldn\u0027t expect vpd parser to create inventory items, I would expect that of PIM or entity-manager.",
      "parentUuid": "260ec8f8_b89a96e8",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcc519c3_77ba8c83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-07T18:06:14Z",
      "side": 1,
      "message": "So, back to my original thread, if I wanted to get an nvidia card supported, where would I go add config?  So far as I\u0027m aware, PIM isn\u0027t capable of detecting a FRU, and entity-manager isn\u0027t capable of adding port associations.  How would you recommend I go about adding support for this trivial example?\n\nIf you\u0027d rather a different example, the yosemite 4 card that just got added to EM.  it has (I think) two ports on it.  how would one add support for that?  (exact locations in code, example config stanzas to add would be appreciated).",
      "parentUuid": "20c84352_b2f8eaf1",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36c5cf4b_9178b034",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-07T20:58:12Z",
      "side": 1,
      "message": "\"/sys/bus/i2c/drivers/at24/13-0050/eeprom\": [\n            {\n                \"inventoryPath\": \"/system/chassis/motherboard/disk_backplane0\",\n                \"extraInterfaces\": {\n                    \"xyz.openbmc_project.Inventory.Item.DiskBackplane\": null,\n                    \"xyz.openbmc_project.Inventory.Item.FabricAdapter\": null,\n                    \"com.ibm.ipzvpd.Location\": {\n                        \"LocationCode\": \"Ufcs-P1\"\n                    },\n                    \"xyz.openbmc_project.Inventory.Item\": {\n                        \"PrettyName\": \"NVMe Backplane\"\n                    }\n                }\n            },\n            \n            \nI see no mention of ports here?  This looks like a backplane?  Why is VPD hosting inventory information directly?  I thought the whole point was it was supposed to pass through EM or PIM, like in the example I gave above?",
      "parentUuid": "bcc519c3_77ba8c83",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fa13c56_827bdd3f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-02-08T22:28:38Z",
      "side": 1,
      "message": "\u003e So far as I\u0027m aware, PIM isn\u0027t capable of detecting a FRU, and entity-manager isn\u0027t capable of adding port associations. How would you recommend I go about adding support for this trivial example?\n\nIf you aren\u0027t using openpower-vpu-parser, and instead using something like entity-manager, port associations will have to be added to entity-manager like other associations.\nJust like the contained_by / containing associations, would need to add the connected_to, connecting associations \nhttps://github.com/search?q\u003drepo%3Aopenbmc%2Fentity-manager%20contained_by\u0026type\u003dcode\n\n\n\u003e If you\u0027d rather a different example, the yosemite 4 card that just got added to EM. it has (I think) two ports on it. how would one add support for that? (exact locations in code, example config stanzas to add would be appreciated).\n\n\nCreate a https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Inventory/Item/FabricAdapter.interface.yaml (I am not familiar with this card, but some subassembly on it could be a FabricAdapter or the yosemite 4 card itself?) \nCreate the contained_by / containing associations as documented. \nCreate the Inventory.Connector.Port \n\n\n\n\u003e I see no mention of ports here? This looks like a backplane? Why is VPD hosting inventory information directly?\n\nThese fabric adapters have vpd and BMC can read them. That is the fabric adapter you are pointing at. The Ports are later in the file at https://github.com/openbmc/openpower-vpd-parser/blob/0eb8cacc07375beb3c0b6008dc5d5b6c7090ae37/config/ibm/50001001.json#L2439 \nIt is both an inventory,item.fabricadapter and an inventory.item.backplane",
      "parentUuid": "36c5cf4b_9178b034",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab096f66_6cbecd27",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-09T00:41:38Z",
      "side": 1,
      "message": "Can you point me at the PIM code that consumes that interface for that card and produces the inventory item?",
      "parentUuid": "2fa13c56_827bdd3f",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45d65af4_7529280b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-02-12T17:21:18Z",
      "side": 1,
      "message": "PIM doesn\u0027t put out interfaces directly, other apps put interfaces into PIM.\n\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Inventory/Manager.interface.yaml\n\nopenpower-vpd-parser putting out FabricAdatper / Ports after reading VPD. \n\nhttps://github.com/openbmc/openpower-vpd-parser/blob/0eb8cacc07375beb3c0b6008dc5d5b6c7090ae37/config/ibm/50001001.json#L1570\n\nhttps://github.com/openbmc/openpower-vpd-parser/blob/0eb8cacc07375beb3c0b6008dc5d5b6c7090ae37/config/ibm/50001001.json#L2439",
      "parentUuid": "ab096f66_6cbecd27",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b342cfc8_81f57e7d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 64
      },
      "lineNbr": 26,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-02-12T17:32:21Z",
      "side": 1,
      "message": "https://github.com/openbmc/docs/blob/master/designs/vpd-collection.md",
      "parentUuid": "45d65af4_7529280b",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80052248_60696b37",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 64
      },
      "lineNbr": 3,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-07T21:00:16Z",
      "side": 1,
      "message": "Why was this added?",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b7753a5_d25cbd2d",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 64
      },
      "lineNbr": 3,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-12-08T14:22:18Z",
      "side": 1,
      "message": "Line 357  `handleFabricAdapterHead()` uses `bmcwebEnableMultiHost` which is defined in `bmcweb_config.h`.\n\n```\nL367: if constexpr (bmcwebEnableMultiHost)\n    {\n        // Option currently returns no systems. TBD\n        messages::resourceNotFound(asyncResp-\u003eres, \"ComputerSystem\",\n                                   systemName);\n        return;\n    }\n```",
      "parentUuid": "80052248_60696b37",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3f77f01_02e4d773",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 64
      },
      "lineNbr": 178,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-07T21:00:16Z",
      "side": 1,
      "message": "This is a one line function.  Just put it inline with the other things setting up fabric adapter.  Unless you intend to unit test it or reuse it, there\u0027s not really any reason to have a one line function.",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81942441_00c30d12",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 64
      },
      "lineNbr": 178,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-12-08T14:22:18Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "e3f77f01_02e4d773",
      "revId": "e271d931482453af77d8abe5e4639533f09e4269",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
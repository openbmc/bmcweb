{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f590d278_1e7b6b8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2023-07-03T07:11:31Z",
      "side": 1,
      "message": "Sure, will do these test and continue work on this commit",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c347caa_000d68b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2023-07-03T07:14:38Z",
      "side": 1,
      "message": "Hi Ed\n\nThank you so much for your patchset.\ncan you please let me know if you are looking for any specific changes or tests with this commit?",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "908023a1_0672cdd2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-10T19:58:01Z",
      "side": 1,
      "message": "Sorry, you opened this comment as resolved, so I didn\u0027t see it.\n\nThis change I believe can merge now.  If you could re-run your tests with it, I would appreciate it, but as far as I\u0027m concerned, it seems to work.",
      "parentUuid": "0c347caa_000d68b6",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f10dce0_efdf1678",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2023-07-26T04:13:01Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "908023a1_0672cdd2",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f88957eb_70650136",
        "filename": "include/user_role_map.hpp",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-07-03T08:42:55Z",
      "side": 1,
      "message": "There are possibilities of concurrent access to useRolemap right? Why are we not serializing the access to userRolemap ?\n How do handle cases like \n while user authentication going on, some new user getting added via another bmcweb client instance?",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "274ba5b9_e98af2ec",
        "filename": "include/user_role_map.hpp",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-05T22:48:29Z",
      "side": 1,
      "message": "\u003e There are possibilities of concurrent access to useRolemap right?\n\nNo, there are not.\n\n\u003e Why are we not serializing the access to userRolemap ?\n\nBecause bmcweb is single threaded, and serialization of those actions occurs within the io_context object.\n\n\u003e  How do handle cases like \n\u003e  while user authentication going on, some new user getting added via another bmcweb client instance?\n\nThis can\u0027t happen in practice.  there is only one thread, running actions.  Each action will complete before another action is started.",
      "parentUuid": "f88957eb_70650136",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8a29eba_4ab767fb",
        "filename": "include/user_role_map.hpp",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-11T15:07:26Z",
      "side": 1,
      "message": "@Abhilash does the above make sense to you?",
      "parentUuid": "274ba5b9_e98af2ec",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83da0a7d_0efc8ca9",
        "filename": "include/user_role_map.hpp",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1000235
      },
      "writtenOn": "2023-07-11T17:11:16Z",
      "side": 1,
      "message": "I have no concerns with serializing access to the userRoleMap.  Because BMCWeb is \"single threaded\" it will always access the userRoleMap when nobody else is looking at it.",
      "parentUuid": "a8a29eba_4ab767fb",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65acb917_a434b90c",
        "filename": "include/user_role_map.hpp",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-11T18:14:29Z",
      "side": 1,
      "message": "Thanks Joesph.",
      "parentUuid": "83da0a7d_0efc8ca9",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bbcd89a_51c461bf",
        "filename": "include/user_role_map.hpp",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-07-12T03:10:26Z",
      "side": 1,
      "message": "as long as single io_context has been used, it works fine. Later if we decide to improve parallelism either by creating threads and io_context per client or by spawning some worker thread that uses userRoleMap map, then it is bound to fail. If we are not anticipating those changes I have no other concerns.",
      "parentUuid": "65acb917_a434b90c",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b1470b7_22c258eb",
        "filename": "include/user_role_map.hpp",
        "patchSetId": 23
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-12T03:11:37Z",
      "side": 1,
      "message": "Any effort to multithread bmcweb will need to take a holistic look at everywhere we have this singleton pattern, not just this one spot.\n\nThank you for your review.",
      "parentUuid": "3bbcd89a_51c461bf",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ba32c0e_be7169f3",
        "filename": "include/user_role_map.hpp",
        "patchSetId": 23
      },
      "lineNbr": 71,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-07-03T08:42:55Z",
      "side": 1,
      "message": "why can\u0027t we enclose all of the below code within this try block? it can improve the code readability. There are other petentially throwing functions called from below code (like out of memory). We could handle all cases in a single catch block.",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46a6db43_65757d82",
        "filename": "include/user_role_map.hpp",
        "patchSetId": 23
      },
      "lineNbr": 71,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-05T22:48:29Z",
      "side": 1,
      "message": "\u003e why can\u0027t we enclose all of the below code within this try block? it can improve the code readability.\n\nBecause nothing else below it is expected to throw an exception.\n\n\u003e There are other petentially throwing functions called from below code (like out of memory). We could handle all cases in a single catch block.\n\nOOM needs to be handled at a higher level, by throwing to main, and letting systemd restart the process (this is why bmcweb hosts no state that isn\u0027t persisted).",
      "parentUuid": "0ba32c0e_be7169f3",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0bb972f_2a5290cc",
        "filename": "include/user_role_map.hpp",
        "patchSetId": 23
      },
      "lineNbr": 71,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-11T15:07:26Z",
      "side": 1,
      "message": "@Abhilash Does that make sense to you?",
      "parentUuid": "46a6db43_65757d82",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ef7b1e5_c5403a91",
        "filename": "include/user_role_map.hpp",
        "patchSetId": 23
      },
      "lineNbr": 71,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-07-12T03:10:26Z",
      "side": 1,
      "message": "yes",
      "parentUuid": "c0bb972f_2a5290cc",
      "revId": "73364140ad25a742bc0fb7a8cbc508644642e47c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
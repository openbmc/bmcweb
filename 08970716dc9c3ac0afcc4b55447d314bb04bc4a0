{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4e0d9a0d_cb29914e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-27T16:22:50Z",
      "side": 1,
      "message": "bump",
      "revId": "08970716dc9c3ac0afcc4b55447d314bb04bc4a0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7ed9dd4_ffaaf407",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-27T19:00:24Z",
      "side": 1,
      "message": "bump. PTAL.",
      "revId": "08970716dc9c3ac0afcc4b55447d314bb04bc4a0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "807947cf_07ff7ec1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-27T22:33:58Z",
      "side": 1,
      "message": "Overall, I\u0027m struggling this a little because of its complexity.  We allowed the complexity into the Sensor subsystem because it improved the performance by 100X for something that we expect to be polled quite often, and to date, it has caused significant maintenance problems when new things are added, but in that case, it was probably worth it, as it dropped a 1 minute poll loop down to a couple seconds.\n\nArguably this is a different case, because we\u0027re talking about inventory items here, and anything we do is going to need to be copied to drives, storage, network interfaces, ect.  Given that as the future, I\u0027m a little worried about how little code is shared, given that it can lead to subtle bugs that are hard to catch (like the array ordering thing that I caught below.)\n\nGiven 2 second response time is well within what we allow, I wonder if 300 lines of complex code is worth the difference here, or if there\u0027s some improvements we can make to reuse more code between the expand case and the non.  Nan, is this something you\u0027ve thought about?",
      "revId": "08970716dc9c3ac0afcc4b55447d314bb04bc4a0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ba99882_c0563d41",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-27T23:43:15Z",
      "side": 1,
      "message": "Also, given the code duplication, this adds about 7KB (about 1%) to the compressed binary size of bmcweb.  That seems pretty high for just one handler, although I\u0027m not really sure what\u0027s causing it.",
      "revId": "08970716dc9c3ac0afcc4b55447d314bb04bc4a0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34b5d26c_700bbf39",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-27T23:45:03Z",
      "side": 1,
      "message": "\u003e Arguably this is a different case, because we\u0027re talking about inventory items here, and anything we do is going to need to be copied to drives, storage, network interfaces, ect.  \n\nThe improvement depends on the number of inventory items. For CPU, I would imagine it doesn\u0027t matter too much. For DIMMs can vary and increase in the future. For threads, I would imagine it will be another big improvement.\n\n\u003e Given that as the future, I\u0027m a little worried about how little code is shared, given that it can lead to subtle bugs that are hard to catch (like the array ordering thing that I caught below.)\n\u003e or if there\u0027s some improvements we can make to reuse more code between the expand case and the non.\n\nI have thought about this. My initial idea is to submit this as the first iteration. In the thread collection which we mostly like **have to** implement an efficient expand soon (there will be hundreds of threads), we then think about how these codes can be shared. We can also help clean up sensors.\n\nFrom what I can imagine, yes, many of the codes can be shared (e.g., search services, search ObjectManagers, call GetManagedObjects). The public interface will be something that takes functors to assemble JSON response from ManagedObjects dbus responses.\n\nWhat\u0027s your opinion? What I don\u0027t want to do is spend time working on a generic solution before the backend is even ready. Do we accept review this patch in details, resolve bugs if any, and then when developing backend for threads, share this code.",
      "parentUuid": "807947cf_07ff7ec1",
      "revId": "08970716dc9c3ac0afcc4b55447d314bb04bc4a0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7ca6ad3_f38bda95",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 19
      },
      "lineNbr": 829,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-27T22:33:58Z",
      "side": 1,
      "message": "typo.",
      "range": {
        "startLine": 829,
        "startChar": 22,
        "endLine": 829,
        "endChar": 32
      },
      "revId": "08970716dc9c3ac0afcc4b55447d314bb04bc4a0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3406a56d_003224c1",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 19
      },
      "lineNbr": 857,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-27T22:33:58Z",
      "side": 1,
      "message": "DO we do this check in the other health checks?  I didn\u0027t think so?",
      "range": {
        "startLine": 852,
        "startChar": 0,
        "endLine": 857,
        "endChar": 9
      },
      "revId": "08970716dc9c3ac0afcc4b55447d314bb04bc4a0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b90e093e_f1dbee82",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 19
      },
      "lineNbr": 1086,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-06-27T17:25:56Z",
      "side": 1,
      "message": "nit: just std::string here when we can specify it. (just something that bmcweb preferred)",
      "range": {
        "startLine": 1086,
        "startChar": 27,
        "endLine": 1086,
        "endChar": 31
      },
      "revId": "08970716dc9c3ac0afcc4b55447d314bb04bc4a0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb0a6110_0ce39152",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 19
      },
      "lineNbr": 1086,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-27T17:47:51Z",
      "side": 1,
      "message": "Thanks. Let me ask maintainers to double check.\n\nEd, Gunner, what\u0027s the convention?\n\nTo me, MapperGetSubTreeResponse is a well-known type and these types in the loop are also very clear. Using explicit type in this nested loop might introduce indent and hurt readability.",
      "parentUuid": "b90e093e_f1dbee82",
      "range": {
        "startLine": 1086,
        "startChar": 27,
        "endLine": 1086,
        "endChar": 31
      },
      "revId": "08970716dc9c3ac0afcc4b55447d314bb04bc4a0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58d47119_9b9e2553",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 19
      },
      "lineNbr": 1086,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-27T22:21:55Z",
      "side": 1,
      "message": "\u003e Ed, Gunner, what\u0027s the convention?\n\ndon\u0027t use auto unless it aids in the readability.  Where you use it on line 1084 aids in readability, because it reduces a significant amount of time reading the type (std::pair\u003c.... ect\u003e)\n\nIn this case, it doesn\u0027t help in readability:\n\nfor (const std::string\u0026\n\nis easier/faster to read than\n\nfor (const auto\u0026.",
      "parentUuid": "cb0a6110_0ce39152",
      "range": {
        "startLine": 1086,
        "startChar": 27,
        "endLine": 1086,
        "endChar": 31
      },
      "revId": "08970716dc9c3ac0afcc4b55447d314bb04bc4a0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eed876a_4863ae63",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 19
      },
      "lineNbr": 1086,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-06-29T04:38:37Z",
      "side": 1,
      "message": "I was actually pretty curious about best practice about auto - this seems in line with what I had in mind as well.",
      "parentUuid": "58d47119_9b9e2553",
      "range": {
        "startLine": 1086,
        "startChar": 27,
        "endLine": 1086,
        "endChar": 31
      },
      "revId": "08970716dc9c3ac0afcc4b55447d314bb04bc4a0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
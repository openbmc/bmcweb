{
  "comments": [
    {
      "key": {
        "uuid": "0a6d4131_37274e02",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 40
      },
      "lineNbr": 73,
      "author": {
        "id": 1000433
      },
      "writtenOn": "2020-12-11T10:04:47Z",
      "side": 1,
      "message": "Don\u0027t you just want to have a static map instead of ifs ?\nor something like this: if you need some default on non existing keys:\n     json j \u003d\n     {\n         {\"voltage\", \"Voltage\"},\n         {\"power\", \"Power\"},\n         ...\n     };\n  \n     // access existing values\n     return j.value(sensorType, \"\");",
      "revId": "d4c95745f8db6cadfe5aac16f6752f72e884a698",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d56d479_070ef498",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 40
      },
      "lineNbr": 73,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-12-11T12:21:23Z",
      "side": 1,
      "message": "It is a static map right now. All is based on memory that is stored in binary. It is not in elegant way, I agree with it. If I use std::map or nlohmann::json here than it requires additional dynamic memory allocation. \nMaybe it would be more nice to use std::array\u003cstd::pair\u003cconst char*, const char*\u003e\u003e and then do the for loop",
      "parentUuid": "0a6d4131_37274e02",
      "revId": "d4c95745f8db6cadfe5aac16f6752f72e884a698",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f58cf9be_05985844",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 40
      },
      "lineNbr": 73,
      "author": {
        "id": 1000433
      },
      "writtenOn": "2021-01-08T14:40:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d56d479_070ef498",
      "revId": "d4c95745f8db6cadfe5aac16f6752f72e884a698",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}
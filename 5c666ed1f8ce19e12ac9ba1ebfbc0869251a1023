{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7b185b6b_cd2730f9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-07-29T22:13:59Z",
      "side": 1,
      "message": "This doesn\u0027t convince me. Why is 30s too short if we already get a connection in the first place?",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 63
      },
      "revId": "5c666ed1f8ce19e12ac9ba1ebfbc0869251a1023",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c1dcbe8_81b2947b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-29T23:54:21Z",
      "side": 1,
      "message": "Because being able to establish a connection to a destination is independent from how quick the destination will generate a response to a received request.  If we\u0027re able to establish a connection then I feel we can reasonably expect the destination to respond to a response.\n\nIf you attempt to curl a non-existant IP then the connection attempt will timeout within two minutes.  However, you can launch netcat and then curl the port netcat is listening on. In that case curl will wait until it receives a response to its GET request rather than timing out in a similar manner.  I argue our HTTP client should be similar in the sense that it should wait longer to receive a response than it should wait to establish a connection.\n\nBefore the HTTP client refactor we actually didn\u0027t do anything with the responses to the requests sent by Event Service Manager so it didn\u0027t matter if we timed out before receiving a response.",
      "parentUuid": "7b185b6b_cd2730f9",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 63
      },
      "revId": "5c666ed1f8ce19e12ac9ba1ebfbc0869251a1023",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d0e897c_2403aa19",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-01T04:42:30Z",
      "side": 1,
      "message": "120 seconds is way too long for any sort of responsive UI.  The guideline in bmcweb is that APIs that return 200 should respond within 15 seconds, under the assumption that a 30 second timeout should be double what\u0027s needed if the system gets under load, and 30 seconds is a timeout that a lot of common libraries set.  If a nominal API returns in \u003e 15 seconds, we should be returning a task service.\n\nLets talk through though.  Clearly you have an implementation that doesn\u0027t follow the rules, but I\u0027m not sure what to do about it, given that having really long timeouts will lead to people believing it\u0027s a bmcweb bug, not a bug in the aggregator.\n\nMaybe we have some mechanism where after a reasonable time (maybe 5-10 seconds) we return a Task so that the user can track the response taking its time in flight?\n\nNot really sure what to do here.  An API needing two minutes to return is pretty much unacceptable in any sort of scenario (I\u0027m pretty sure your SLOs on your program require all polled actions to take place in \u003c 1 minute), so if we have aggregated devices that are needing a 2 minute timeout, we need to discuss with those device manufacturers.",
      "parentUuid": "3c1dcbe8_81b2947b",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 63
      },
      "revId": "5c666ed1f8ce19e12ac9ba1ebfbc0869251a1023",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80bc6339_bb130a5c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-01T17:38:23Z",
      "side": 1,
      "message": "In my case the delay should eventually go away and the response time become less than the 15 second guideline.  In that respect this change isn\u0027t ultimately needed by us.\n\nI thought the 30 second timeout might\u0027ve been leftover from when the HTTP client had a much more limited usecase.  I did not know about the timing guidelines so I\u0027m alright with abandoning this patchset and keeping the timeout as-is.\n\n\u003e Maybe we have some mechanism where after a reasonable time (maybe 5-10 seconds) we return a Task so that the user can track the response taking its time in flight?\nI think that sounds reasonable.  Right now I\u0027m not sure if there\u0027s a true need for that.  Are there any other reasons beyond trying to paper over a satellite having issues?  Going forward a usecase might be created where a satellite will need more than 30 seconds to generate a response.",
      "parentUuid": "2d0e897c_2403aa19",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 63
      },
      "revId": "5c666ed1f8ce19e12ac9ba1ebfbc0869251a1023",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dddcddf_70902c67",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-01T22:02:43Z",
      "side": 1,
      "message": "\u003e In my case the delay should eventually go away and the response time become less than the 15 second guideline.  In that respect this change isn\u0027t ultimately needed by us.\n\u003e \n\u003e I thought the 30 second timeout might\u0027ve been leftover from when the HTTP client had a much more limited usecase.  I did not know about the timing guidelines so I\u0027m alright with abandoning this patchset and keeping the timeout as-is.\n\nACK.  That\u0027s something that I do need to document better.  TODO(ed)\n\n\u003e \n\u003e \u003e Maybe we have some mechanism where after a reasonable time (maybe 5-10 seconds) we return a Task so that the user can track the response taking its time in flight?\n\u003e I think that sounds reasonable.  Right now I\u0027m not sure if there\u0027s a true need for that.  Are there any other reasons beyond trying to paper over a satellite having issues?\n\nNot really, although we will eventually need to handle the case where the satellite itself gives us a taskservice.\n\n\u003e  Going forward a usecase might be created where a satellite will need more than 30 seconds to generate a response.\n\nLets talk about that when we get there.  IMO, anything that takes \u003e15 seconds to generate ONE response is broken against the user expectations, especially when there\u0027s async options available to the sattelite (top/skip reductions for large collections, and TaskService)",
      "parentUuid": "80bc6339_bb130a5c",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 63
      },
      "revId": "5c666ed1f8ce19e12ac9ba1ebfbc0869251a1023",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af7b4386_6765e103",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-02T15:35:40Z",
      "side": 1,
      "message": "\u003e Lets talk about that when we get there.  IMO, anything that takes \u003e15 seconds to generate ONE response is broken against the user expectations, especially when there\u0027s async options available to the sattelite (top/skip reductions for large collections, and TaskService)\nSounds good to me",
      "parentUuid": "6dddcddf_70902c67",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 63
      },
      "revId": "5c666ed1f8ce19e12ac9ba1ebfbc0869251a1023",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
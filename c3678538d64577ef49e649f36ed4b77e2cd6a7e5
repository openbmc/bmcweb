{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "325fb75f_818e4e64",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 39
      },
      "lineNbr": 1,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-19T17:28:42Z",
      "side": 1,
      "message": "will do one round of test",
      "revId": "c3678538d64577ef49e649f36ed4b77e2cd6a7e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f1b3240_cd345a11",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 39
      },
      "lineNbr": 1,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-19T18:05:43Z",
      "side": 1,
      "message": "thank you.",
      "parentUuid": "325fb75f_818e4e64",
      "revId": "c3678538d64577ef49e649f36ed4b77e2cd6a7e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cea35a4f_579e88d0",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 39
      },
      "lineNbr": 61,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-20T13:22:10Z",
      "side": 1,
      "message": "how about adding code as below. Some times we get handle that already moved certain amount. \noff_t currentPos \u003d lseek(fd, 0, SEEK_CUR);\nfileSize \u003d fileHandle.size(ec)-currentPos;",
      "revId": "c3678538d64577ef49e649f36ed4b77e2cd6a7e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c73f8d2d_28a54117",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 39
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-20T19:13:25Z",
      "side": 1,
      "message": "\u003e how about adding code as below. Some times we get handle that already moved certain amount. \n\nWhy would that happen in a way that\u0027s not a bug?  I would expect any FDs we open in process to be at the right place.  Any FDs sent over dbus should be the same.\n\n\u003e off_t currentPos \u003d lseek(fd, 0, SEEK_CUR);\n\u003e fileSize \u003d fileHandle.size(ec)-currentPos;",
      "parentUuid": "cea35a4f_579e88d0",
      "revId": "c3678538d64577ef49e649f36ed4b77e2cd6a7e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c573b3f_f761f726",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 39
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-20T19:45:46Z",
      "side": 1,
      "message": "My worry about calling lseek on an fd is that it can error (which the code above doesn\u0027t handle), and I can see a case where someone would want to send an fd that is an anonymous pipe.\n\nhttps://man7.org/linux/man-pages/man2/pipe.2.html\n\nwhich isn\u0027t going to support lseek, and would prevent using the pipe.",
      "parentUuid": "c73f8d2d_28a54117",
      "revId": "c3678538d64577ef49e649f36ed4b77e2cd6a7e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d811d2e_22c17edb",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 39
      },
      "lineNbr": 61,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-22T05:11:27Z",
      "side": 1,
      "message": "Yes, the code doesn\u0027t handle the error case. I wrote it just to state the intent.\n\nWhat I was expecting is an API that will help us to start read from an offset and specified size of data. This will help us to offload a part of a file. Once the API is available then a large file offload request can be broken into multiple requests requesting smaller parts of the file. A redfish client can stitch back the content from multiple requests into to single large file. This is not a standard redfish protocol. But downstream can make use of it to customize the large file offloading.\n\nThis can be part of another patch.",
      "parentUuid": "8c573b3f_f761f726",
      "revId": "c3678538d64577ef49e649f36ed4b77e2cd6a7e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e787b4b_97162238",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 39
      },
      "lineNbr": 121,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-19T17:28:42Z",
      "side": 1,
      "message": "should we add +2 here? I guess it will work with out that too but there is a possibility of realloc due to capacity overflow.",
      "revId": "c3678538d64577ef49e649f36ed4b77e2cd6a7e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed848344_4f15f259",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 39
      },
      "lineNbr": 121,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-19T18:05:43Z",
      "side": 1,
      "message": "At most we would do -2, right?  The encoded size from a chunk is going to be:\n\nsize % 3 \u003d 0;  EncodedSize is correct;\nsize % 3 \u003d 1; EncodedSize is 2 larger, because of missing trailing \u003d\u003d;\nsize % 3 \u003d 2; EncodedSize is 1 larger, because of missing trailing \u003d;\n\n\nWhile it\u0027s not technically correct (we might alloc 2 more characters than needed), I\u0027m ok with it for the moment, especially given that this is reused between buffers, it seems very unlikely that we\u0027d see a problem in practice.\n\n\nI realize that I commented this on a previous patchset, but decided it wasn\u0027t worth the effort to make technically correct.",
      "parentUuid": "3e787b4b_97162238",
      "revId": "c3678538d64577ef49e649f36ed4b77e2cd6a7e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
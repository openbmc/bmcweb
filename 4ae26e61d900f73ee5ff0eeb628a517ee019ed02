{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5850fb1f_6d1b86d1",
        "filename": "redfish-core/include/utils/collection.hpp",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-11-07T14:55:39Z",
      "side": 1,
      "message": "`static constexpr std::string zero \u003d \"0\"`",
      "revId": "4ae26e61d900f73ee5ff0eeb628a517ee019ed02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39125d53_404a84f7",
        "filename": "redfish-core/include/utils/collection.hpp",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1001093
      },
      "writtenOn": "2022-11-08T12:26:56Z",
      "side": 1,
      "message": "It results in compiler error. So I removed constexpr declaration.",
      "parentUuid": "5850fb1f_6d1b86d1",
      "revId": "4ae26e61d900f73ee5ff0eeb628a517ee019ed02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3ab61e4_b8acef28",
        "filename": "redfish-core/include/utils/collection.hpp",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-11-08T21:10:45Z",
      "side": 1,
      "message": "Can you elaborate?",
      "parentUuid": "39125d53_404a84f7",
      "revId": "4ae26e61d900f73ee5ff0eeb628a517ee019ed02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a723484_11c823f7",
        "filename": "redfish-core/include/utils/collection.hpp",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-08T21:45:57Z",
      "side": 1,
      "message": "wait, can we declare std:string constexpr now? I don\u0027t believe std::string satisfies \"non-trivial destructor\"\n\ncan we use std::string_view?",
      "parentUuid": "d3ab61e4_b8acef28",
      "revId": "4ae26e61d900f73ee5ff0eeb628a517ee019ed02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98cf6c86_12dcc41c",
        "filename": "redfish-core/include/utils/collection.hpp",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-11-08T21:50:52Z",
      "side": 1,
      "message": "Can you follow the model of what was used on the line above, for systemToken?\n\nYou need to use a std::string_view object instead of a std::string object. Although it would make the most logical sense, our compiler is not new enough to allow std::string to be constexpr.\n\nhttps://www.cppstories.com/2021/constexpr-vecstr-cpp20/\n\nThe string view will be viewing the literal \"0\" which is a C string literal. C string literals have static lifetime (equal to the program itself), so this is safe.\n\nhttps://stackoverflow.com/questions/9970295/life-time-of-a-string-literal-in-c",
      "parentUuid": "d3ab61e4_b8acef28",
      "revId": "4ae26e61d900f73ee5ff0eeb628a517ee019ed02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb639b6c_bf9612f5",
        "filename": "redfish-core/include/utils/collection.hpp",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1001093
      },
      "writtenOn": "2022-11-09T15:20:28Z",
      "side": 1,
      "message": "Ack, the string_view needs to be copied as a string while returning. this is because the result string will be concatenated with another string before usage.\nI hope it is fine to declare as string_view and convert to string before returning.",
      "parentUuid": "98cf6c86_12dcc41c",
      "revId": "4ae26e61d900f73ee5ff0eeb628a517ee019ed02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2ac8d94_0b92b299",
        "filename": "redfish-core/include/utils/collection.hpp",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-11-09T17:04:27Z",
      "side": 1,
      "message": "\u003e wait, can we declare std:string constexpr now? I don\u0027t believe std::string satisfies \"non-trivial destructor\"\n\nYes, std::string\u0027s constructor is now constexpr as of C++20.\n\n\u003e I hope it is fine to declare as string_view and convert to string before returning.\n\nYou shouldn\u0027t need an explicit conversion.  std::string can be converted from std::string_view, so just returning a string view will construct a string at the return site.\n\nIn any case, the issue you were running into was, unfortunately, with clang and not with gcc.  The clang-tidy stuff still doesn\u0027t correctly support constexpr strings.",
      "parentUuid": "eb639b6c_bf9612f5",
      "revId": "4ae26e61d900f73ee5ff0eeb628a517ee019ed02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2d7042e_7730fcee",
        "filename": "redfish-core/include/utils/collection.hpp",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-11-09T19:44:42Z",
      "side": 1,
      "message": "When this function returns, yes, it should still return as std::string, because as you said the caller will need to modify it further. You can construct a std::string from a std::string_view just fine, and it will perform the copy at that time.\n\nAt any case, this is somewhat of a micro-optimization, and I would caution against bikeshedding. Unless this function is a performance hotspot, I\u0027m OK with whatever, as long as the behavior is correct.",
      "parentUuid": "f2ac8d94_0b92b299",
      "revId": "4ae26e61d900f73ee5ff0eeb628a517ee019ed02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
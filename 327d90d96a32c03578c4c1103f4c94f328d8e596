{
  "comments": [
    {
      "key": {
        "uuid": "73c42a7e_18ec2706",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-12-16T16:05:01Z",
      "side": 1,
      "message": "I think we need a measurement on this before I am ready to support this. \nIf it is no measurable difference, then I am good here. \nBut if it is for example 2% slower across walking the complete tree or any commonly used request is 5% slower, I don\u0027t think it is worth it because there is several other things we can do to reduce size.",
      "range": {
        "startLine": 15,
        "startChar": 20,
        "endLine": 17,
        "endChar": 24
      },
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f4484d7_9cd57574",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-16T16:56:21Z",
      "side": 1,
      "message": "Have we looked at using unordered_map as well?  I\u0027m all for moving away from Boost stuff.\n\nThe algorithmic complexity of the 3 are:\n\nLookup:\n- unordered_map - O(1)\n- flat_map - O(lg n), but no pointers.\n- map - O(lg n), but pointers.\n\nIteration:\n- unordered_map - ~O(n)   (*)\n- flat_map - O(n)\n- map - O(n lg n)\n\n\nUnordered_map is certainly different in how iteration works.  If we\u0027re expecting an ordered and/or consistent iteration we should stay away from it.\n\n(*) due to possible collisions and the Birthday Problem, depending on the map size unordered_map is bigger than O(n).  For small maps I think it trends towards O(n sqrt n).  And yes, I know that saying \"for small maps ... O(n sqrt n)\" makes no sense anyhow because Big-O is about asymptotic behavior, but hopefully it makes sense in this context.",
      "parentUuid": "73c42a7e_18ec2706",
      "range": {
        "startLine": 15,
        "startChar": 20,
        "endLine": 17,
        "endChar": 24
      },
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0591b379_858548ba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-16T17:47:08Z",
      "side": 1,
      "message": "There are cases where we intentionally use flat_map because of its ordering guarantees, so unordered_map wouldn\u0027t be a drop in replacement, and would need a lot more thought put into the patch, but could be a replacement for some.  I suspect unordered_map has a negative effect on binary size, but that\u0027s just a guess.\n\nIn terms of algorithmic complexity, this stuff is hard to gauge, because the in-practice performance differs.  We originally (over) used flat_map because of a belief and measurements that it caused less memory fragmentation, and for systems without a lot of extra ram, it \"mattered\".  Also, given the abysmal memory bandwidth and tiny cache size on the aspeed 2400, pulling fewer cold memory pages to do this kind of thing seemed to help.\n\n\u003eIteration:\n\u003e map - O(n lg n)\n\nnit: Map is O(n) for iteration, isn\u0027t it? (writes down in interview notes ðŸ˜Š).\n\n\n\u003e But if it is for example 2% slower across walking the complete tree or any commonly used request is 5% slower, I don\u0027t think it is worth it because there is several other things we can do to reduce size.\n\nAgreed, although a 2% difference is going to be tough to measure given the noise in measuring such things.  I will fully admit, I haven\u0027t done anything other than compile this at this point, so agreed, more testing is needed.",
      "parentUuid": "2f4484d7_9cd57574",
      "range": {
        "startLine": 15,
        "startChar": 20,
        "endLine": 17,
        "endChar": 24
      },
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ee24af0_2dc765ad",
        "filename": "include/dbus_monitor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-16T16:56:21Z",
      "side": 1,
      "message": "This is one where std::unordered_map is probably better than map and the algorithm certainly doesn\u0027t care.",
      "range": {
        "startLine": 25,
        "startChar": 7,
        "endLine": 25,
        "endChar": 15
      },
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53c1fd1d_7a0bd8ee",
        "filename": "include/dbus_monitor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-16T17:56:13Z",
      "side": 1,
      "message": "Agreed.",
      "parentUuid": "8ee24af0_2dc765ad",
      "range": {
        "startLine": 25,
        "startChar": 7,
        "endLine": 25,
        "endChar": 15
      },
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d3e9e4a_b1e34a5e",
        "filename": "include/ibm/locks.hpp",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-16T16:56:21Z",
      "side": 1,
      "message": "Order likely doesn\u0027t matter.",
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec7d0766_ddd5cd43",
        "filename": "include/nbd_proxy.hpp",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-16T16:56:21Z",
      "side": 1,
      "message": "I was confused why the linter was so confused, but it doesn\u0027t even look like this code compiles (nor does the existing code).",
      "range": {
        "startLine": 260,
        "startChar": 0,
        "endLine": 261,
        "endChar": 75
      },
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acbeb3a9_7a9c697b",
        "filename": "include/nbd_proxy.hpp",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-16T17:56:13Z",
      "side": 1,
      "message": "cute..... yeah, this is the virtual media implementation that got checked in without a backend, and the option is currently commented out in the meson_options so it\u0027s not that surprising it doesn\u0027t compile.  (will fix shortly).",
      "parentUuid": "ec7d0766_ddd5cd43",
      "range": {
        "startLine": 260,
        "startChar": 0,
        "endLine": 261,
        "endChar": 75
      },
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95836595_1b84ff2a",
        "filename": "redfish-core/include/privileges.hpp",
        "patchSetId": 2
      },
      "lineNbr": 245,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-16T16:56:21Z",
      "side": 1,
      "message": "It is possible that verb doesn\u0027t have a std::hash and can\u0027t fit in an unordered_map.",
      "range": {
        "startLine": 245,
        "startChar": 13,
        "endLine": 245,
        "endChar": 37
      },
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b87249db_d82c5f70",
        "filename": "redfish-core/include/privileges.hpp",
        "patchSetId": 2
      },
      "lineNbr": 245,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-16T17:56:13Z",
      "side": 1,
      "message": "boost::beast::http::verb is just an instance of enum class, which I think gets a std::hash by default?",
      "parentUuid": "95836595_1b84ff2a",
      "range": {
        "startLine": 245,
        "startChar": 13,
        "endLine": 245,
        "endChar": 37
      },
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fdf3c14_7712b2fd",
        "filename": "redfish-core/lib/ethernet.hpp",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-16T16:56:21Z",
      "side": 1,
      "message": "This is a pretty awesome type. ðŸ˜ž",
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40fcb189_1736977d",
        "filename": "redfish-core/lib/ethernet.hpp",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-16T17:56:13Z",
      "side": 1,
      "message": "GetManagedObjects is a horrifying call to do.  If it didn\u0027t literally triple the performance of some of the endpoints, I would never advocate using it.\n\nIn the previous patches in the series I\u0027m starting to get all of these at least using common types so that we can start to consolidate them and hopefully apply some sanity to some of them.",
      "parentUuid": "9fdf3c14_7712b2fd",
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c53c46ed_46ab8eb7",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 3103,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-16T16:56:21Z",
      "side": 1,
      "message": "Order shouldn\u0027t matter on this one.  But ... didn\u0027t it matter??  I\u0027m surprised that the post codes went into a map because the order in time is more important than the postcode value.  Unless the \"key\" here is some time stamp?",
      "range": {
        "startLine": 3103,
        "startChar": 4,
        "endLine": 3103,
        "endChar": 28
      },
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "226bb8d7_8d6f82dd",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 3103,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-16T17:56:13Z",
      "side": 1,
      "message": "Yes, the key here is the timestamp.  This sturucture is coming from the method \"GetPostCodesWithTimeStamp\"",
      "parentUuid": "c53c46ed_46ab8eb7",
      "range": {
        "startLine": 3103,
        "startChar": 4,
        "endLine": 3103,
        "endChar": 28
      },
      "revId": "327d90d96a32c03578c4c1103f4c94f328d8e596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e7b50867_ee059792",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 34
      },
      "lineNbr": 0,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "I dislike the change from a clear state machine, to some logic that is more difficult to follow.\nI understand it is important for the pool, but it would be great if you could clean up the state flow.\n\nI don\u0027t like friend classes either. \n\nBut we do what we must.",
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d528361c_65fc50c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 34
      },
      "lineNbr": 0,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:27:31Z",
      "side": 1,
      "message": "I do see the value of your work, and thanks for working on the connection pooling\n\nThe first message sounded too negative, when I re read it :)",
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48baaee9_17840c62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 34
      },
      "lineNbr": 0,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-03T20:57:05Z",
      "side": 1,
      "message": "No worries, it didn\u0027t sound negative.  I appreciate any and all feedback :D",
      "parentUuid": "d528361c_65fc50c2",
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d211b77_5801fcf4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 34
      },
      "lineNbr": 0,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-03T20:57:05Z",
      "side": 1,
      "message": "Yeah the pool combined with queued requests and a retry policy makes it pretty ugly.  The same flow from before is there if you squint a bit.  I just replaced the handleConnState() calls with directly calling the next method in the chain and then the end behavior is handled the the callback.  \n\nUsing callbacks is ultimately what I came up with to handle having singular connection objects that are part of a pool with queued messages.  It also plays nice (I think) with future Redfish Aggregation plans where I will need to do additional processing on received responses.  Do you have some particular suggestions for spot it could be cleaned up?  I\u0027m game to try, but I don\u0027t see where to clean up the overall flow.",
      "parentUuid": "e7b50867_ee059792",
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2433abd6_8c7ee249",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 34
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "\u003e I dislike the change from a clear state machine, to some logic that is more difficult to follow.\n\nThis is super subjective, so I\u0027m open to opinion here, but IMO, the \"clear state machine\" was waaaaaaaaaaaaay less clear than it looked on the surface, given that there were multiple paths through he state machine, and a number of paths didn\u0027t even work the state machine.  This has caused several bugs over time when people assumed that the \"state\" variable in the class was kept up to date all the time.\n\nIMO, getting rid of the state machine is a good thing, given that it makes complex code look complex, instead of making complex code look simple in ways that people make bad assumptions when adding stuff.",
      "parentUuid": "5d211b77_5801fcf4",
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56c205dc_6fa6f52e",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 37,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "How were these figures selected.\nJust a quick statement on how they were picked could be very useful.\n\nThey will have different performance implications on different platforms. If they cause a performance issue users will want to tune them.",
      "range": {
        "startLine": 37,
        "startChar": 18,
        "endLine": 37,
        "endChar": 29
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e30b18ee_9efacca0",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 37,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-03T20:57:05Z",
      "side": 1,
      "message": "That was from discussion with Ed in which he said I needed to set a low max pool size and that not even Chrome opened more than 4 connections.  To allow user tuning I\u0027m assuming you mean via a compiler flag?",
      "parentUuid": "56c205dc_6fa6f52e",
      "range": {
        "startLine": 37,
        "startChar": 18,
        "endLine": 37,
        "endChar": 29
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c977f29_1e701a98",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 37,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-04T18:15:15Z",
      "side": 1,
      "message": "Some bmc\u0027s have 4 GB of ram and Dual-core Cortex-R, ARM Cortex A7.\nAnd some have 256 mB of ram, and some much older ARM9.\n\nThere is a wide spread of systems running this software, but you have to set actual values for application performance. \n\nYou can add a comment saying \n\"pool size was set based on reviewing other implementations of application software\". That sounds better then chrome does it this way.\n\nFor maxRequestQueueSize, I would want to the average size of a message, so I could take a guess at the total size used. (Or just add worst case which is 409.6 kilobytes)\n\nAnd I don\u0027t really care about \"httpReadBodyLimit\" as long as it throws appropriately.",
      "parentUuid": "e30b18ee_9efacca0",
      "range": {
        "startLine": 37,
        "startChar": 18,
        "endLine": 37,
        "endChar": 29
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a766066_91878b7c",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "From my perspective:\nGiven that bmcweb is a single threaded async event-driven reactor, the amount of connections we can simultaneously handle isn\u0027t really constrained by our CPU processing power, but instead governed by our available memory.  The sizeof(ConnectionInfo) is relatively small (I\u0027m guessing 1KB not including the request/response payloads).\n\nI said 4 as a starting point because most BMCs should be able to handle 4 parallel connections well, and in the case of bmcweb as a client (which is one of the main intended use cases for this) connection sizes above 4-8 tends to be the inflection point where we start losing performance.\n\n\u003e To allow user tuning I\u0027m assuming you mean via a compiler flag?\n\nLets avoid this for a moment until we have a better understanding of how people would use it.  I could definitely see some amount of tuning here if the bmc is talking to, say, a really fast x86 nginx server, but at some point we\u0027re over optimizing until we have a setup that works.\n\n\nAgree with John here that there could be a sentence about this in the commit message.\n\n\n\u003e And I don\u0027t really care about \"httpReadBodyLimit\" as long as it throws appropriately.\n\nWe don\u0027t throw in bmcweb.  A server responding with a larger-than-expected payload is not an exceptional case, and needs to return an appropriate error to the caller.",
      "parentUuid": "2c977f29_1e701a98",
      "range": {
        "startLine": 37,
        "startChar": 18,
        "endLine": 37,
        "endChar": 29
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91fe7fa3_737b9773",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 37,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "\u003e You can add a comment saying ...\n\n\u003e Agree with John here that there could be a sentence about this in the commit message.\nI added a comment about choosing the max pool size.  In the commit I mentioned that we may want to be able to tune these max values in the future.\n\n\u003e We don\u0027t throw in bmcweb.  A server responding with a larger-than-expected payload is not an exceptional case, and needs to return an appropriate error to the caller.\nDo I need to do some additional special handling for this sort of failure in recvMessage(), or is the existing general ec check for async_read() sufficient?",
      "parentUuid": "9a766066_91878b7c",
      "range": {
        "startLine": 37,
        "startChar": 18,
        "endLine": 37,
        "endChar": 29
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea225bd0_95183893",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-09T16:35:52Z",
      "side": 1,
      "message": "Ec check is sufficient generally.",
      "parentUuid": "91fe7fa3_737b9773",
      "range": {
        "startLine": 37,
        "startChar": 18,
        "endLine": 37,
        "endChar": 29
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e06cfd19_fd989a46",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 37,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-09T16:40:34Z",
      "side": 1,
      "message": "Ed is correct, returning an appropriate error to the caller, is better.",
      "parentUuid": "ea225bd0_95183893",
      "range": {
        "startLine": 37,
        "startChar": 18,
        "endLine": 37,
        "endChar": 29
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32ba31a9_f21b8a45",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 37,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-09T16:43:06Z",
      "side": 1,
      "message": "And the comment is okay. I do wonder what this does to bmcweb performance, being that bmcweb is io bound. But that is not a question for this thread.",
      "parentUuid": "e06cfd19_fd989a46",
      "range": {
        "startLine": 37,
        "startChar": 18,
        "endLine": 37,
        "endChar": 29
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ab2c274_f153f3df",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 51,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "remove, never entered.",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 51,
        "endChar": 19
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "295e4149_96858f5b",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 51,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "Rather than remove it I now set it as the state at the start of recvMessage().  This mimics how sendInProgress is used at the start of sendMessage().",
      "parentUuid": "3ab2c274_f153f3df",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 51,
        "endChar": 19
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c71f189_3b40ff82",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 67,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "std::chrono::seconds, rather then converting the std::chrono::seconds when used.",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 12
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f716289_928b3160",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "This type came from the old one.  I agree, seconds would be better here, but in terms of incremental progress, this is no worse than it was.  UP to Carson if he wants to make this change.",
      "parentUuid": "1c71f189_3b40ff82",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 12
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94dde30c_0ee63e08",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 67,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "I went ahead and changed it so that it doesn\u0027t have to be converted each time it\u0027s used.",
      "parentUuid": "5f716289_928b3160",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 12
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81e520f0_a7373dff",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 70,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "I\u0027m a little confused why this would be a global?  I could see maybe having 2-3 globals, but the RetryPolicyData class is super small (two uint32s and a string, and even the string could be an enum at some point)\n\nWoudl it be better if this were just owned as a member variable by each ConnectionInfo class?",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 70,
        "endChar": 66
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ee23881_7e4ae882",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 70,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "My reason for that is I wanted any changes in a retry policy to be reflected in messages that are actively being sent as ones that were queued before the policy was changed.  Giving each ConnectionInfo a reference meant I wouldn\u0027t have to iterate over every connection looking for ones using the policy so that I could update their retry info.\n\nEach ConnectionPool also needs to have access to this data so that it can set the retry parameters each time it prepare a ConnectionInfo to send a message.  It seemed like a waste of memory to queue the entire retry policy with each message.  \n\nIf retry policy changes should only apply to messages sent after the change, and queueing the entire policy is not a concern, then I can move this to be a member of HttpClient and perform the retry policy lookup as part of its sendData method.",
      "parentUuid": "81e520f0_a7373dff",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 70,
        "endChar": 66
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "accfc405_582ee4d2",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 70,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-09T16:44:05Z",
      "side": 1,
      "message": "\u003e My reason for that is I wanted any changes in a retry policy to be reflected in messages that are actively being sent as ones that were queued before the policy was changed.\n\nThis doesn\u0027t seem like what you would want I would think?  Is there a use case where we would change the policy at runtime and that would need to propogate to existing connections?\n\n\u003e  Giving each ConnectionInfo a reference meant I wouldn\u0027t have to iterate over every connection looking for ones using the policy so that I could update their retry info.\n\nBut now you have subtle safety issues.  Generally we would model this with something like a shared_ptr, so the ownership of the policy can be shared.\n\n\u003e \n\u003e Each ConnectionPool also needs to have access to this data so that it can set the retry parameters each time it prepare a ConnectionInfo to send a message.  It seemed like a waste of memory to queue the entire retry policy with each message.\n\nSee above;  RetryPolicy as a structure is trivially small\n  \n\u003e \n\u003e If retry policy changes should only apply to messages sent after the change, and queueing the entire policy is not a concern, then I can move this to be a member of HttpClient and perform the retry policy lookup as part of its sendData method.\n\nLets poke at why a retry policy would change a little;  It\u0027s quit possible I\u0027m not seeing the use case here.",
      "parentUuid": "7ee23881_7e4ae882",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 70,
        "endChar": 66
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e96c121_a390f86e",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 82,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "Pretty sure you don\u0027t want to move this.  Destructors are run in the order they\u0027re declared in the class, and in the case of async handlers (like the resolver or tcp_stream) the callbacks are called back with operation aborted on destruction, so if you capture buffer in one of your async operations, and this class gets destroyed, it\u0027s possible to have memory safety issues;  With that said, this class is already \"wrong\"  The ideal order would be\n\n//non-reference members\nport\nconnid\nect\n\n// Data buffers\ndata;\nbuffer;\nparser;\n\n// Async callables\ncallback;\nresolver;\nconn;\n\n\nThis way, when data buffers get captured by the async callables section, there\u0027s no way that they can have lifetime issues.",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 63
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "657d584e_2480176e",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 82,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "I rearranged the members.  Does this look correct now?",
      "parentUuid": "0e96c121_a390f86e",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 63
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9120b03_8f9d0709",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 82,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-09T16:44:05Z",
      "side": 1,
      "message": "Will take a look and comment if it\u0027s not resolved.",
      "parentUuid": "657d584e_2480176e",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 63
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2a7e476_b55328a6",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 98,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "This has some worrying consequences for lifetime, and the possibility that these change at runtime.  (what if someone deletes \"default\")  I suspect we\u0027d rather just keep a copy of these params, similar to what I mentioned above.",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 98,
        "endChar": 76
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43583b70_21c74937",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 98,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "I will change these to copies if the proposal on my response to your earlier comment sounds acceptable.",
      "parentUuid": "a2a7e476_b55328a6",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 98,
        "endChar": 76
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59ab2b23_399592ee",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 98,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-09T16:48:00Z",
      "side": 1,
      "message": "👍",
      "parentUuid": "43583b70_21c74937",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 98,
        "endChar": 76
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba75f2c2_bd1efa0e",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 117,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states.",
      "range": {
        "startLine": 117,
        "startChar": 20,
        "endLine": 117,
        "endChar": 59
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71544e7a_4bfa0ebb",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 117,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "\u003e Nit, you enter this state but never check it that you are in this state.\n\nThis is why the \"state machine\" pattern is subtle here;  Technically this code is correct, because there\u0027s no way to be in this handler if the state wasn\u0027t already resolveInProgress.\n\n\u003e It is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states.",
      "parentUuid": "ba75f2c2_bd1efa0e",
      "range": {
        "startLine": 117,
        "startChar": 20,
        "endLine": 117,
        "endChar": 59
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59ea1f16_8edb70db",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 133,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states.",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 133,
        "endChar": 45
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "033679d6_bb1ad141",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 133,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "You\u0027re pointing out essentially what I said earlier;  The state machine pattern doesn\u0027t really enforce anything, and even if we checked the state here..... What would we do if it weren\u0027t what was expected?  There really isn\u0027t much we can do at that point.",
      "parentUuid": "59ea1f16_8edb70db",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 133,
        "endChar": 45
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ec0937a_aa4bda7c",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 151,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states.",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 151,
        "endChar": 59
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae0ef27c_0d457753",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 159,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states.",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 159,
        "endChar": 51
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1638a96c_0d244377",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 166,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states.",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 42
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49377a5d_ae3451b2",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 183,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states.",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 183,
        "endChar": 56
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1880f526_344488e3",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 209,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states.",
      "range": {
        "startLine": 209,
        "startChar": 45,
        "endLine": 209,
        "endChar": 55
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bd37b58_885552bc",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 209,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "I too can copy-paste responses 😊  (but I choose not to in this case).",
      "parentUuid": "1880f526_344488e3",
      "range": {
        "startLine": 209,
        "startChar": 45,
        "endLine": 209,
        "endChar": 55
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e0dbaeb_43a058b5",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 244,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "doesn\u0027t need done in this patchset, but in this callback, should we be returning the whole parsed request, not just a single header?  It would seem like there\u0027s more a client would want to do with the result of the response in the future.",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 244,
        "endChar": 73
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45857c4f_d84bd47b",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 244,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "We will need that in the future.  I left that for the next patchset in the chain since that functionality wasn\u0027t needed by the original implementation https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/52633.",
      "parentUuid": "1e0dbaeb_43a058b5",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 244,
        "endChar": 73
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81546768_69dc2e87",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 244,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-09T16:44:05Z",
      "side": 1,
      "message": "👍",
      "parentUuid": "45857c4f_d84bd47b",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 244,
        "endChar": 73
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eabfc374_1f943da5",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 306,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states.",
      "range": {
        "startLine": 306,
        "startChar": 0,
        "endLine": 306,
        "endChar": 43
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8bb9ebc_e67163cb",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 349,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states.",
      "range": {
        "startLine": 349,
        "startChar": 0,
        "endLine": 349,
        "endChar": 37
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e0fe794_ba7a7da1",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 370,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "Connection Pool should get it\u0027s own file. \nbecause this file already long, and this is natural break.",
      "range": {
        "startLine": 370,
        "startChar": 0,
        "endLine": 370,
        "endChar": 20
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dfcaffc_679a0b3c",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 370,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-03T20:57:05Z",
      "side": 1,
      "message": "Does that include ConnectionInfo as well since they\u0027re pretty tightly coupled?",
      "parentUuid": "8e0fe794_ba7a7da1",
      "range": {
        "startLine": 370,
        "startChar": 0,
        "endLine": 370,
        "endChar": 20
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bec392a3_f0db2394",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 370,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-04T18:15:15Z",
      "side": 1,
      "message": "I would want ConnectionInfo and ConnectionPool in different translation units. I don\u0027t think there is any build performance increase (with smaller translations) b/c of bmcweb\u0027s linking. The file is only 650 lines, so it is fine to keep it. I prefer file less the 1,000 lines. \n\nI will back down, and say 650 lines is good.",
      "parentUuid": "9dfcaffc_679a0b3c",
      "range": {
        "startLine": 370,
        "startChar": 0,
        "endLine": 370,
        "endChar": 20
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17c15bac_e609253f",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 370,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "We\u0027re not super consistent (at all) about the \"one class per file\" rule, and basically all of bmcweb is one compile unit these days, just because we don\u0027t have a good abstraction for the beast templates, so separating compile units actually makes the incremental build take LONGER instead of shorter.  This is something we need to fix at some point.\n\nI\u0027m happy with whatever John and Carson want to agree on here.",
      "parentUuid": "bec392a3_f0db2394",
      "range": {
        "startLine": 370,
        "startChar": 0,
        "endLine": 370,
        "endChar": 20
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "271813de_4e807a4d",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 370,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "In that case I would like to leave all of these in the same file for the time being.",
      "parentUuid": "17c15bac_e609253f",
      "range": {
        "startLine": 370,
        "startChar": 0,
        "endLine": 370,
        "endChar": 20
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dc94853_03bacb34",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 378,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "I suspect we don\u0027t actually (in the end) want the headers for a given request to be connection global.  With that said, I realize that\u0027s how the old code worked, so if you don\u0027t want to do that right away, just make sure we capture this by value (to avoid seg faults on lifetime  issues) and that should be fine.\n\nThis being owned in the http client class is a holdover from Redfish EventService using essentially the same headers for all requests;  But for aggregator work, I wouldnt\u0027 expect that to be the case.",
      "range": {
        "startLine": 378,
        "startChar": 0,
        "endLine": 378,
        "endChar": 49
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82673999_32450631",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 378,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "Yeah I noticed that was going to be needed as well as being able to change the verb for each request.  I make those changes in a later patch (https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/53301) just to preserve the original functionality.  For this patch I changed it so that httpHeader is now captured by value.",
      "parentUuid": "1dc94853_03bacb34",
      "range": {
        "startLine": 378,
        "startChar": 0,
        "endLine": 378,
        "endChar": 49
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34da75c3_12e3b89a",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 378,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-09T16:44:05Z",
      "side": 1,
      "message": "👍",
      "parentUuid": "82673999_32450631",
      "range": {
        "startLine": 378,
        "startChar": 0,
        "endLine": 378,
        "endChar": 49
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98851ea3_059d72d0",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 383,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "It looks like these 3 things are all read, pushed and popped together.  Can this just be made into a class, something like\n\n\nstruct PendingRequest {\n   std::string requestData;\n   std::function\u003c...\u003e callback;\n   string retryPolicyName;\n}\n\n\nThen these devectors collapse into one\n\ndevector\u003cPendingRequest\u003e\n\n\nWhich IMO makes the code infinitely more readable.",
      "range": {
        "startLine": 380,
        "startChar": 0,
        "endLine": 383,
        "endChar": 65
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99e0b723_03bfa27d",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 383,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "Agreed, I\u0027ve made that change.",
      "parentUuid": "98851ea3_059d72d0",
      "range": {
        "startLine": 380,
        "startChar": 0,
        "endLine": 383,
        "endChar": 65
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52c686f8_bf468be5",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 385,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "gross, No action required.",
      "range": {
        "startLine": 385,
        "startChar": 4,
        "endLine": 385,
        "endChar": 10
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b74fead8_f2e253b8",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 385,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "We use this pattern elsewhere.  FWIW, public vs private methods are essentially a lie, because they\u0027re trivial to turn private to public in an open source project, so I\u0027m not super careful about that kind of thing.",
      "parentUuid": "52c686f8_bf468be5",
      "range": {
        "startLine": 385,
        "startChar": 4,
        "endLine": 385,
        "endChar": 10
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61faabfa_e2e35b9e",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 389,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "nit/style thing.  only pass an argument by shared_ptr if the method could potentially take shared ownership of it.  In this case, it just looks like it\u0027s setting some properties on ConnectionInfo, so this can just be passed by ConnectionInfo\u0026",
      "range": {
        "startLine": 389,
        "startChar": 4,
        "endLine": 389,
        "endChar": 66
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b97f64e9_b6216584",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 389,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "It just sets some properties.  setConnRetryPolicy() is similar.  I have removed the shared_ptr arguments from both.",
      "parentUuid": "61faabfa_e2e35b9e",
      "range": {
        "startLine": 389,
        "startChar": 4,
        "endLine": 389,
        "endChar": 66
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4478000_bca267ab",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 447,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "nit, fine as is.  In theory because the server is answering us, from here we can start over from after resolve.  It\u0027s only when we don\u0027t get a correct response that we need to re-resolve.\n\nWith that said, for servers that don\u0027t implement keepalive, peformance is clearly not a concern, so I don\u0027t have a problem here, just FYI.",
      "range": {
        "startLine": 447,
        "startChar": 30,
        "endLine": 447,
        "endChar": 62
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4144130b_26730e9b",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 462,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "Nit, you enter this state but never check it that you are in this state.\nIt is okay but not great. You left a state (to enter this one), and that is a legitimate way to use states.",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 462,
        "endChar": 53
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00c2608a_7876b21a",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 470,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "capture by weak_ptr please, in case this class gets destroyed in the middle of an operation",
      "range": {
        "startLine": 470,
        "startChar": 19,
        "endLine": 470,
        "endChar": 23
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d055cf26_8f68f026",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 470,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "I made the change to capture by weak_ptr.  Note that doing so required storing ConnectionPool shared_ptr\u0027s in HttpClient\u0027s connectionPools unordered map and slightly reworking the try_emplace() used within HttpClient.sendData().  Please let me know if there are issues with those changes.",
      "parentUuid": "00c2608a_7876b21a",
      "range": {
        "startLine": 470,
        "startChar": 19,
        "endLine": 470,
        "endChar": 23
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc0cc095_1547b480",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 470,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-09T16:44:05Z",
      "side": 1,
      "message": "Marking done;  If there are still issues I will comment on the new patch.",
      "parentUuid": "d055cf26_8f68f026",
      "range": {
        "startLine": 470,
        "startChar": 19,
        "endLine": 470,
        "endChar": 23
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "072ac715_64a580dd",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 486,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "bind_front doesn\u0027t have any effect if you\u0027re not binding anything.",
      "range": {
        "startLine": 486,
        "startChar": 33,
        "endLine": 486,
        "endChar": 49
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4129a375_810ec04b",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 486,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "It\u0027s been removed",
      "parentUuid": "072ac715_64a580dd",
      "range": {
        "startLine": 486,
        "startChar": 33,
        "endLine": 486,
        "endChar": 49
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad74fbd7_076da0de",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 498,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "same as above.",
      "range": {
        "startLine": 498,
        "startChar": 34,
        "endLine": 498,
        "endChar": 48
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a5805a7_4f1516ab",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 498,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ad74fbd7_076da0de",
      "range": {
        "startLine": 498,
        "startChar": 34,
        "endLine": 498,
        "endChar": 48
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca02bef0_6f191f80",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 499,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "This portion of both branches looks identical.  Can we combine the logic a little?",
      "range": {
        "startLine": 494,
        "startChar": 0,
        "endLine": 499,
        "endChar": 58
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "574a15fe_252f105e",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 499,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "I was able to combine most of it",
      "parentUuid": "ca02bef0_6f191f80",
      "range": {
        "startLine": 494,
        "startChar": 0,
        "endLine": 499,
        "endChar": 58
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03c5a3fb_cb068224",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 507,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "thinking out loud (ie, nothing to fix here) but I wonder how curl decides how multiple connections get assigned.",
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71e61193_2aa09b82",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 511,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "nit.  this-\u003e is redundant.",
      "range": {
        "startLine": 511,
        "startChar": 12,
        "endLine": 511,
        "endChar": 16
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffdbe659_aaf86a68",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 511,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "I don\u0027t remember what I did, but at some point while writing the code it wouldn\u0027t compile without me using \"this-\u003e\".  I\u0027ve removed it as well as the other instances.",
      "parentUuid": "71e61193_2aa09b82",
      "range": {
        "startLine": 511,
        "startChar": 12,
        "endLine": 511,
        "endChar": 16
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "937b6569_4cef7f01",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 512,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "I realize that addConnection just called emplace_back, so this is guaranteed to exist in the current flow, but in general, we require that code is memory safe in each scope.  Yes, it\u0027s a little pedantic here, but there have been cases where it has helped us a lot, so I try to enforce it in all cases.\n\nSo, in terms of this block, two options here.\n\n1. Return a reference to the newly created ConnectionInfo object.  Note, that emplace_back on line 535 actually has an overload that will give you a reference to the emplaced object, so this should be pretty doable, and not add a bunch of code.\n\n2. Check the range of connections.size() to make sure it\u0027s \u003e 1 before calling back()\n\n\nI personally think #1 is better, but it\u0027s debatable.\n\nThis would also help with the fact that connections.back() is called redundantly 4 times in this code block.",
      "range": {
        "startLine": 512,
        "startChar": 12,
        "endLine": 512,
        "endChar": 30
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c419f2f_14cd91a3",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 512,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "I went with the first option so now ConnectionInfo.addConnection() returns the reference to the newly emplaced object.  I now use that reference instead of repeatedly calling connections.back().",
      "parentUuid": "937b6569_4cef7f01",
      "range": {
        "startLine": 512,
        "startChar": 12,
        "endLine": 512,
        "endChar": 30
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f04f5f4_97e16444",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 512,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-09T16:44:05Z",
      "side": 1,
      "message": "👍",
      "parentUuid": "2c419f2f_14cd91a3",
      "range": {
        "startLine": 512,
        "startChar": 12,
        "endLine": 512,
        "endChar": 30
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "687c61ed_bcdf4a65",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 513,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "nit, more bind_front with one arg.  I will stop mentioning it, but please fix all of them.",
      "range": {
        "startLine": 513,
        "startChar": 43,
        "endLine": 513,
        "endChar": 62
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17b2e9ee_d8a04be7",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 513,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "They have all been removed",
      "parentUuid": "687c61ed_bcdf4a65",
      "range": {
        "startLine": 513,
        "startChar": 43,
        "endLine": 513,
        "endChar": 62
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d82e8948_16852019",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 520,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "nit, use emplace_back for consistency.\n\n\nnon-nit, please std::move(data) to avoid making a complete copy here.",
      "range": {
        "startLine": 520,
        "startChar": 29,
        "endLine": 520,
        "endChar": 38
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cccd2833_4709aa9e",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 520,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T16:33:28Z",
      "side": 1,
      "message": "I made those changes and also added std::move() in similar spots where it is missing.  I had to modify earlier functions in the callstack whose arguments were \"const std::string\u0026\" in order to use std::move().  This was all of the way up through functions calling the Subscription class\u0027s sendEvent() method.",
      "parentUuid": "d82e8948_16852019",
      "range": {
        "startLine": 520,
        "startChar": 29,
        "endLine": 520,
        "endChar": 38
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a49fe12d_f22b00ee",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 520,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-09T16:44:05Z",
      "side": 1,
      "message": "I wasn\u0027t expecting it would be that big of a change.... sorry for that, it probably could\u0027ve waited until another patchset, but it\u0027s done now, so it\u0027s all good.",
      "parentUuid": "cccd2833_4709aa9e",
      "range": {
        "startLine": 520,
        "startChar": 29,
        "endLine": 520,
        "endChar": 38
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d2da8dc_e0790842",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 549,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-03T01:22:43Z",
      "side": 1,
      "message": "which ioc does this setup? \n1)ConnectionPool\n2)the friend in HttpClient or your \n3) Both ?",
      "range": {
        "startLine": 549,
        "startChar": 8,
        "endLine": 549,
        "endChar": 11
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8553cbdd_c5aa7d63",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 549,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-03T20:57:05Z",
      "side": 1,
      "message": "That sets up the ioc in each connection pool contained by HttpClient.  It\u0027s later used to create each individual connection (ConnectionInfo) within the pool.",
      "parentUuid": "4d2da8dc_e0790842",
      "range": {
        "startLine": 549,
        "startChar": 8,
        "endLine": 549,
        "endChar": 11
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1821ef87_b8d644a6",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 549,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-04T18:15:15Z",
      "side": 1,
      "message": "I spent like 10 minutes trying to find what happens if you use a friend class to that has members with the same name, and I could not find anything conclusive. \n\nI trust you. But it would make everyone\u0027s life better if they had different names",
      "parentUuid": "8553cbdd_c5aa7d63",
      "range": {
        "startLine": 549,
        "startChar": 8,
        "endLine": 549,
        "endChar": 11
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56e068d5_32c25d6e",
        "filename": "http/http_client.hpp",
        "patchSetId": 34
      },
      "lineNbr": 549,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T19:16:52Z",
      "side": 1,
      "message": "\u003e  if you use a friend class to that has members with the same name\n\n\nFriend class just means \"I trust this friend to call my private methods\".  Having two classes that have similar naming doesn\u0027t really have any effect, as everything is namespaced based on the class name.",
      "parentUuid": "1821ef87_b8d644a6",
      "range": {
        "startLine": 549,
        "startChar": 8,
        "endLine": 549,
        "endChar": 11
      },
      "revId": "1d4737d802bd7b6a416cfc21d60c256131717f2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
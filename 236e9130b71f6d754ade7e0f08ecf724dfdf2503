{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4ab3a2a3_c7306998",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-08T16:26:27Z",
      "side": 1,
      "message": "Looking much closer.",
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "686a798c_ab93617c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-08T17:44:53Z",
      "side": 1,
      "message": "Thanks for comments, I will answer the rest of them once I prepare new patch-set tomorrow.",
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b169e5f_40d50f22",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 728,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-08T16:26:27Z",
      "side": 1,
      "message": "typename please.",
      "range": {
        "startLine": 728,
        "startChar": 10,
        "endLine": 728,
        "endChar": 15
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84fac00c_2a4df388",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 728,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-09T16:50:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b169e5f_40d50f22",
      "range": {
        "startLine": 728,
        "startChar": 10,
        "endLine": 728,
        "endChar": 15
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efc61b16_5db3baa8",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 729,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-08T16:26:27Z",
      "side": 1,
      "message": "One thing we learned is that this unpack method generates quite a bit of code duplication and binary size.  One thing I suspect that would improve this quite a bit would be to accept by std::variant\u003cstd::reference_wrapper(std::string), std::string_view\u003e then call visit appropriately, which would remove the template duplication per call site.  If you need help putting together an example, let me know, I realize the above is non-trivial to build.  I suspect that would also clean up your pointer decay NOLINT issue, as the string_view would be constructed at the call site, which wouldn\u0027t throw a warning.",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 729,
        "endChar": 65
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93d2915a_539ed3b3",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 729,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-08T17:44:53Z",
      "side": 1,
      "message": "Seems doable, I will look into it.",
      "parentUuid": "efc61b16_5db3baa8",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 729,
        "endChar": 65
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae34d96a_359f3637",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 729,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-09T16:50:05Z",
      "side": 1,
      "message": "Done, it indeed solved the warning issue. Although it now has one additional side-effect: when args are forwarded to std::variant\u003c\u003e, code wont compile as it cannot implicit convert std::string (cannot decide between reference_wrapper\u003cstd::string\u003e and std::string_view). There are 2 solutions:\n- use std::ref() for each output std::string\n- replace variant signature to contain const char* instead of std::string_view\n\nIn current patch-set I went with first soluton, as I see that std::string_view is preferred. In my opinion std::ref seems like a good programming practice, but I leave this decision to maintainers.",
      "parentUuid": "93d2915a_539ed3b3",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 729,
        "endChar": 65
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdffd612_6c42e73d",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 729,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-11T18:26:57Z",
      "side": 1,
      "message": "Ah, that\u0027s a good point.  I\u0027m fine with either solution;  I do think the const char* solution is a little cleaner at the call site, but that\u0027s pretty subjective, and like I said, I\u0027m fine with either.",
      "parentUuid": "ae34d96a_359f3637",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 729,
        "endChar": 65
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ea894ce_06e81872",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 729,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-18T16:44:52Z",
      "side": 1,
      "message": "If we want to be consistent, than we should not use const char* in new code, but that\u0027s my only objection here.",
      "parentUuid": "bdffd612_6c42e73d",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 729,
        "endChar": 65
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "117fdfbc_eb10f9cb",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 729,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-18T18:22:43Z",
      "side": 1,
      "message": "The statement I would make is \"We should prefer string_view in new code unless we have a good reason to use const char*\", for which, not being able to generate templates and cleaning up the call site seem like good reasons.\n\nWith that said, to reiterate, I\u0027m fine either way.",
      "parentUuid": "3ea894ce_06e81872",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 729,
        "endChar": 65
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9691309_d93ea91b",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 729,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-25T15:36:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "117fdfbc_eb10f9cb",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 729,
        "endChar": 65
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cfab346_30b39b51",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 739,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-08T16:26:27Z",
      "side": 1,
      "message": "Please break this statement up.  It\u0027s difficult to read as-is.",
      "range": {
        "startLine": 736,
        "startChar": 0,
        "endLine": 739,
        "endChar": 14
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06fe67c8_a094698b",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 739,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-09T16:50:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4cfab346_30b39b51",
      "range": {
        "startLine": 736,
        "startChar": 0,
        "endLine": 739,
        "endChar": 14
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ecc997a_d723fedc",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-08T16:26:27Z",
      "side": 1,
      "message": "Nit, can we use std::span here?  There\u0027s nothing about this algorithm that requires it be sorted, and ideally in the future replacing this stuff with std::vector would be ideal (but please don\u0027t do it in this patch).",
      "range": {
        "startLine": 34,
        "startChar": 4,
        "endLine": 34,
        "endChar": 30
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53002da6_1cbbb7fa",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-09T16:50:05Z",
      "side": 1,
      "message": "Sure, I will look into it in separate change.",
      "parentUuid": "7ecc997a_d723fedc",
      "range": {
        "startLine": 34,
        "startChar": 4,
        "endLine": 34,
        "endChar": 30
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cc61451_099521d9",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-08T16:26:27Z",
      "side": 1,
      "message": "I still suspect we don\u0027t need this check.",
      "range": {
        "startLine": 42,
        "startChar": 20,
        "endLine": 42,
        "endChar": 56
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1020fb75_50e866e4",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-08T17:44:53Z",
      "side": 1,
      "message": "ack, please see my another comment on this.",
      "parentUuid": "3cc61451_099521d9",
      "range": {
        "startLine": 42,
        "startChar": 20,
        "endLine": 42,
        "endChar": 56
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d74ad76b_94870784",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-11T18:26:57Z",
      "side": 1,
      "message": "see above, still not sure why this is needed when we have a dbus-specific checking routine.\n\nOk, I\u0027m starting to understand this after reading the boost docs, it checks to make sure the url starts with a /.  I suspect this check should be done inside readUrlSegments so we don\u0027t have to do this check everywhere.  The unit tests should also have a test for trying to pass\n\n\"redfish/v1\"\ninstead of \n\n\"/redfish/v1\"\n\nand make sure the former fails parsing.",
      "parentUuid": "1020fb75_50e866e4",
      "range": {
        "startLine": 42,
        "startChar": 20,
        "endLine": 42,
        "endChar": 56
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c213cdb8_29a71d34",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-18T16:44:52Z",
      "side": 1,
      "message": "Great idea, done.",
      "parentUuid": "d74ad76b_94870784",
      "range": {
        "startLine": 42,
        "startChar": 20,
        "endLine": 42,
        "endChar": 56
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d16a37f_50d3e917",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-08T16:26:27Z",
      "side": 1,
      "message": "isn\u0027t this required to be \"Sensors\"",
      "range": {
        "startLine": 63,
        "startChar": 52,
        "endLine": 63,
        "endChar": 56
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0baad6db_7273eb20",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-09T16:50:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d16a37f_50d3e917",
      "range": {
        "startLine": 63,
        "startChar": 52,
        "endLine": 63,
        "endChar": 56
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22fa9e57_cbd11f6d",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-08T16:26:27Z",
      "side": 1,
      "message": "See above, I suspect we need to run this through sdbusplus::message::object_path to make sure that it\u0027s valid.",
      "range": {
        "startLine": 64,
        "startChar": 43,
        "endLine": 64,
        "endChar": 68
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca49fb5c_c2f40073",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-08T17:44:53Z",
      "side": 1,
      "message": "My opinion here would be to keep it separated and use boost-url to parse redfish uris and object_path to parse dbus paths. \n\nparse_relative_ref() makes some basic validation, but if it is insufficient here, maybe I can add additional checks to segment unpack functions? We just need to define which segment would count as invalid.",
      "parentUuid": "22fa9e57_cbd11f6d",
      "range": {
        "startLine": 64,
        "startChar": 43,
        "endLine": 64,
        "endChar": 68
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa71bc98_a991753b",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-11T18:26:57Z",
      "side": 1,
      "message": "My opinion here would be to keep it separated and use boost-url to parse redfish uris and object_path to parse dbus paths.\n\nAgreed, but in this case, we\u0027re not parsing this at all, which I think is something we should do, to ensure it\u0027s correct.  As written, technically I could write\n\n\n/redfish/v1/Chassis/valid_chassis/Sensors/foobar/foobaz  and it would accept it, completely ignoring the last two parts, which seems incorrect.\n\n\nI\u0027m ok in this patch if we don\u0027t want to parse it, because the old code didn\u0027t, but it should be an explicit decision.",
      "parentUuid": "ca49fb5c_c2f40073",
      "range": {
        "startLine": 64,
        "startChar": 43,
        "endLine": 64,
        "endChar": 68
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cf9796b_ad0ce256",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-18T16:44:52Z",
      "side": 1,
      "message": "My reasoning was to cover exactly your example, sometimes we are not able to know how the segment is named, we just need to make sure that \u0027something\u0027 (and nothing less or more) is here.\n\n/redfish/v1/Chassis/valid_chassis/Sensors/foobar/foobaz  -\u003e OK\n/redfish/v1/Chassis/valid_chassis/Sensors/foobar/foobaz/ -\u003e bad\n/redfish/v1/Chassis/valid_chassis/Sensors/foobar         -\u003e bad\n\nAlso I made small mistake in the patchset you commented on - correct version is (*parsed, \"redfish\", \"v1\", \"Chassis\", chassis, \"Sensors\", crow::utility::anySegment, crow::utility::anySegment) to explicitly tell that we want exactly 2 segments here.",
      "parentUuid": "fa71bc98_a991753b",
      "range": {
        "startLine": 64,
        "startChar": 43,
        "endLine": 64,
        "endChar": 68
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79d9b153_c2b46036",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-18T18:22:43Z",
      "side": 1,
      "message": "but that\u0027s an issue if a user can write foobaz to an API and have it accept it.  What I suspect is happening in this case is we\u0027re re-parsing it later and failing the request later on in the stack.. Ideally we should be parsing \"foobaz\" here, then passing it to the methods that need is so they can validate it (or not).",
      "parentUuid": "4cf9796b_ad0ce256",
      "range": {
        "startLine": 64,
        "startChar": 43,
        "endLine": 64,
        "endChar": 68
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c43037cb_90e90474",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-25T15:36:38Z",
      "side": 1,
      "message": "Telemetry code is an example why we cannot verify each segment \u0027here and now\u0027:\n1) User sends us multiple metrics as urls\n2) We need to parse chassisId and NodeId from each url. We don\u0027t know yet how to validate other url segments, except for their count. Here readUrlSegments is used.\n3) We need to call retrieveUriToDbusMap for each chassisId\u003c-\u003eNodeId pair, which returns list of all metrics with given chassisNode. Those lists are merged afterwards.\n4) We check if each url from step 1) is in the merged list.\n\nSteps 3) and 4) are here to minimize number of async dbus calls. In theory it is possible to get rid of them, and we could check everything in one place, but this solution have a lot of flaws:\n- Some redundant dbus calls will occur\n- Even if we decide to optimize it in other way, sensors.hpp and telemetry refactor will be required.",
      "parentUuid": "79d9b153_c2b46036",
      "range": {
        "startLine": 64,
        "startChar": 43,
        "endLine": 64,
        "endChar": 68
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad93e632_e1bbdc3e",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-25T16:13:46Z",
      "side": 1,
      "message": "\u003e Telemetry code is an example why we cannot verify each segment \u0027here and now\u0027:\n\u003e 1) User sends us multiple metrics as urls\n\u003e 2) We need to parse chassisId and NodeId from each url. We don\u0027t know yet how to validate other url segments, except for their count. Here readUrlSegments is used.\n\nThis is the step that\u0027s confusing to me.  We don\u0027t need to validate them at this step.  We can easily parse those two out into variables, then pass them to later steps for validation.\n\n\u003e 3) We need to call retrieveUriToDbusMap for each chassisId\u003c-\u003eNodeId pair, which returns list of all metrics with given chassisNode. Those lists are merged afterwards.\n\u003e 4) We check if each url from step 1) is in the merged list.\n\nClarification on this point, we check to see if the ChassisId and the NodeId is in the merged list, dbus doesn\u0027t understand URIs, so in practice, we\u0027re parsing the URI twice for lack of wanting to pass the parsed variables down the stack.  I realize this is how sensors.hpp works today, but if it were new code, we probably wouldn\u0027t write it that way.\n\n\u003e \n\u003e Steps 3) and 4) are here to minimize number of async dbus calls. In theory it is possible to get rid of them, and we could check everything in one place, but this solution have a lot of flaws:\n\u003e - Some redundant dbus calls will occur\n\u003e - Even if we decide to optimize it in other way, sensors.hpp and telemetry refactor will be required.\n\nOk, to be clear, I\u0027m not saying we need to do it this moment, but had we written the above code today, we probably would not have written it to parse a URI twice.  In my mind, given that we have a pretty easy escape hatch (parse the variable then don\u0027t use it) I don\u0027t think the AnySegment class is necessary for the API, and any usage of which in new code would be an anti-pattern.  It seems easier to just not have it, use the escape hatch for the couple places in code where we ideally would like to clean up one day, and call it good.\n\n\nIf the rest of the community feels strongly the other way, I\u0027m happy to talk more, or I\u0027m happy to go with community consensus on this, but in conforming, non-repeating code, I don\u0027t see a place where we would use AnySegment, and it just complicates what should be a relatively simple API.",
      "parentUuid": "c43037cb_90e90474",
      "range": {
        "startLine": 64,
        "startChar": 43,
        "endLine": 64,
        "endChar": 68
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23bc7bd7_f799f5cf",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 3
      },
      "lineNbr": 231,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-08T16:26:27Z",
      "side": 1,
      "message": "This seems like something we should create a real struct for.  Something like\n\nstruct ChassisSensor{\n    std::string uri;\n    size_t index;\n}\n\nDoing this would also remove the need to do the unpacking on line 235, because the arguments would already be named.",
      "range": {
        "startLine": 231,
        "startChar": 22,
        "endLine": 231,
        "endChar": 52
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ab1f2e9_205beb3c",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 3
      },
      "lineNbr": 231,
      "author": {
        "id": 1001026
      },
      "writtenOn": "2022-03-09T16:50:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23bc7bd7_f799f5cf",
      "range": {
        "startLine": 231,
        "startChar": 22,
        "endLine": 231,
        "endChar": 52
      },
      "revId": "236e9130b71f6d754ade7e0f08ecf724dfdf2503",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
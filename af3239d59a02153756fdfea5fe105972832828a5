{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ade1cb56_db8d450f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-09-30T09:29:58Z",
      "side": 1,
      "message": "Waiting until dependency (https://gerrit.openbmc.org/c/openbmc/telemetry/+/74890) review completes",
      "revId": "af3239d59a02153756fdfea5fe105972832828a5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "423c1bdf_54e84dc9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-03T18:42:00Z",
      "side": 1,
      "message": "Sorry for doing this in a commit, but we need to have a discussion about this interface.  To be clear, I appreciate you trying to make the error behavior correct, and I fully support getting there.\n\nMost of the issues here are because of the way the Telemetry interfaces were modeled;  Rather that a set of properties and known types, they rely on a large dictionaries of key/values;  This requires bmcweb to map things to that map in odd ways, and means that things like PATCH error handling have to be done in special ways.\n\nHave you ever considered using a more conventional dbus interface setup?\n\nSpecifically the parameter here: https://github.com/openbmc/phosphor-dbus-interfaces/blob/5133c7bfa8127e8a4ea339c439675ad018911363/yaml/xyz/openbmc_project/Telemetry/ReportManager.interface.yaml#L48\n\nnormally if we need multiple dbus objects, we\u0027d have multiple dbus objects that point to one another.  We generally wouldn\u0027t try to inline one object in another.",
      "revId": "af3239d59a02153756fdfea5fe105972832828a5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2c642b6_f4395e07",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-10-04T10:32:27Z",
      "side": 1,
      "message": "I\u0027m not sure I follow. What key/values?\n\nFor clarity - here is code-level definition of this parameter https://github.com/openbmc/telemetry/blob/b47b7db48c4f883eb191077848d55d96bd884607/src/types/report_types.hpp#L19\n\nI\u0027m curious what do you understand by conventional.\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nWhat is more - this \u0027unconventional\u0027 handling is caused by the fact that AddReport is single method which requires complete and coherent definition of report. It then does the validation underneath and returns proper SdBus exception with detailed information about what was wrong.\n\nTo solve the issue we have 2 options\na) move validation to bmcweb side (need syncing on both sides, we could eventually wind up with 500 in case bmcweb and telemetry has different opinions)\nb) wait for the refined elog\u003c\u003e which will pass provided metadata\nc) redefine interface according to your suggestion (unknown for me as I need more data:))",
      "parentUuid": "423c1bdf_54e84dc9",
      "revId": "af3239d59a02153756fdfea5fe105972832828a5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ade1cb56_db8d450f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-09-30T09:29:58Z",
      "side": 1,
      "message": "Waiting until dependency (https://gerrit.openbmc.org/c/openbmc/telemetry/+/74890) review completes",
      "revId": "af3239d59a02153756fdfea5fe105972832828a5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "423c1bdf_54e84dc9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-03T18:42:00Z",
      "side": 1,
      "message": "Sorry for doing this in a commit, but we need to have a discussion about this interface.  To be clear, I appreciate you trying to make the error behavior correct, and I fully support getting there.\n\nMost of the issues here are because of the way the Telemetry interfaces were modeled;  Rather that a set of properties and known types, they rely on a large dictionaries of key/values;  This requires bmcweb to map things to that map in odd ways, and means that things like PATCH error handling have to be done in special ways.\n\nHave you ever considered using a more conventional dbus interface setup?\n\nSpecifically the parameter here: https://github.com/openbmc/phosphor-dbus-interfaces/blob/5133c7bfa8127e8a4ea339c439675ad018911363/yaml/xyz/openbmc_project/Telemetry/ReportManager.interface.yaml#L48\n\nnormally if we need multiple dbus objects, we\u0027d have multiple dbus objects that point to one another.  We generally wouldn\u0027t try to inline one object in another.",
      "revId": "af3239d59a02153756fdfea5fe105972832828a5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2c642b6_f4395e07",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-10-04T10:32:27Z",
      "side": 1,
      "message": "I\u0027m not sure I follow. What key/values?\n\nFor clarity - here is code-level definition of this parameter https://github.com/openbmc/telemetry/blob/b47b7db48c4f883eb191077848d55d96bd884607/src/types/report_types.hpp#L19\n\nI\u0027m curious what do you understand by conventional.\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nWhat is more - this \u0027unconventional\u0027 handling is caused by the fact that AddReport is single method which requires complete and coherent definition of report. It then does the validation underneath and returns proper SdBus exception with detailed information about what was wrong.\n\nTo solve the issue we have 2 options\na) move validation to bmcweb side (need syncing on both sides, we could eventually wind up with 500 in case bmcweb and telemetry has different opinions)\nb) wait for the refined elog\u003c\u003e which will pass provided metadata\nc) redefine interface according to your suggestion (unknown for me as I need more data:))",
      "parentUuid": "423c1bdf_54e84dc9",
      "revId": "af3239d59a02153756fdfea5fe105972832828a5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4e846eb_12b3ba22",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-04T16:04:38Z",
      "side": 1,
      "message": "\u003e I\u0027m not sure I follow. What key/values?\n\u003e \n\u003e For clarity - here is code-level definition of this parameter https://github.com/openbmc/telemetry/blob/b47b7db48c4f883eb191077848d55d96bd884607/src/types/report_types.hpp#L19\n\u003e \n\u003e I\u0027m curious what do you understand by conventional.\n\nFor dbus interface properties, it\u0027s where where each property is represented by a named property.   Optional properties are either given a \"default\" value, or those values are moved to another interface.\n\nFor dbus interface methods, it\u0027s where each argument is modeled as a argument to the method call, that has a name and a description of the value.\n\n\nFor example, assuming you only had the interface definition:\n```\nArray of metric parameters, which are stored in a way specified\n                in description of ReadingParameters property from Report\n                interface documentation.\n```\n\nwhich parameters are supported?  which parameters have which types?  There\u0027s no way to answer that without looking at the code.  This is part of the problem.  If one of the parameters is wrong, what error gets returned?\n\n\u003e \n\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\u003e \n\u003e What is more - this \u0027unconventional\u0027 handling is caused by the fact that AddReport is single method which requires complete and coherent definition of report. It then does the validation underneath and returns proper SdBus exception with detailed information about what was wrong.\n\u003e \n\u003e To solve the issue we have 2 options\n\u003e a) move validation to bmcweb side (need syncing on both sides, we could eventually wind up with 500 in case bmcweb and telemetry has different opinions)\n\nNope.  This would mean that nothing else in the system but bmcweb could create a telemetry interface.  THat\u0027s a non starter.\n\n\u003e b) wait for the refined elog\u003c\u003e which will pass provided metadata\n\nLets keep the discussion at a dbus level;  Once we\u0027ve figured out what the dbus interface looks like, then we can focus \n\n\u003e c) redefine interface according to your suggestion (unknown for me as I need more data:))",
      "parentUuid": "d2c642b6_f4395e07",
      "revId": "af3239d59a02153756fdfea5fe105972832828a5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f89613d5_53112d61",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-10-07T12:48:12Z",
      "side": 1,
      "message": "\u003e For example, assuming you only had the interface definition:\n\u003e \n\u003e ```\n\u003e Array of metric parameters, which are stored in a way specified\n\u003e                 in description of ReadingParameters property from Report\n\u003e                interface documentation.\n\u003e ```\n\u003e which parameters are supported? which parameters have which types? There\u0027s no way\nto answer that without looking at the code. This is part of the problem. If one of the parameters is wrong, what error gets returned?\n\nGot it. API was originally described in spec, but text definition was moved by @pmatuszc to have single source of truth in YAML definitions here: https://github.com/openbmc/docs/commit/434ff72789bdb589dfa0d10f9477a0be2601be71\n\nWe have a gap here, which shows that perhaps problem is not within service implementation, but is rather limitation of our current phosphor-dbus-interfaces ? \n\nIf your idea for fixing the API would be to make interface work with D-Bus objects we have severe limitations:\n- method parameters accept only predefined list of types https://dbus.freedesktop.org/doc/dbus-specification.html#id-1.3.8\n- we don\u0027t have a way to define this in more detail (other than text) https://github.com/openbmc/phosphor-dbus-interfaces/blob/9d46e5bb0fcad6c4a775dcef781c0ce4b9de1ff5/yaml/xyz/openbmc_project/Telemetry/ReportManager.interface.yaml#L49\n\nIf reworking phosphor-dbus-interfaces to work with complex parameters is not favorable, it\u0027s still not clear for me how would you redesign the API to be more \u0027conventional\u0027.\n\nDo you have ready example of interfaces which is intended to Create D-Bus resources on demand written in the way you like?",
      "parentUuid": "f4e846eb_12b3ba22",
      "revId": "af3239d59a02153756fdfea5fe105972832828a5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
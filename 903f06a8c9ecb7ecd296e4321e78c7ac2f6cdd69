{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "eca02937_d7dcd16d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-18T17:02:03Z",
      "side": 1,
      "message": "There\u0027s only one host here, why are unique paths important?",
      "range": {
        "startLine": 13,
        "startChar": 35,
        "endLine": 13,
        "endChar": 41
      },
      "revId": "903f06a8c9ecb7ecd296e4321e78c7ac2f6cdd69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2371cf56_49f53182",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-18T17:23:27Z",
      "side": 1,
      "message": "I\u0027ll rephrase the commit msg.  \nMultiple attached modules may have the devices like with the similar patterns -\n\nFor example :\n- chassis1/io_module1/adapter1\n- chassis2/io_module1/adapter1\n\nIn that case, redfish output via bmcweb will show them as same.",
      "parentUuid": "eca02937_d7dcd16d",
      "range": {
        "startLine": 13,
        "startChar": 35,
        "endLine": 13,
        "endChar": 41
      },
      "revId": "903f06a8c9ecb7ecd296e4321e78c7ac2f6cdd69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "845e82d5_9f1e2be8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-18T17:51:46Z",
      "side": 1,
      "message": "\u003e I\u0027ll rephrase the commit msg.  \n\u003e Multiple attached modules may have the devices like with the similar patterns -\n\u003e \n\u003e For example :\n\u003e - chassis1/io_module1/adapter1\n\u003e - chassis2/io_module1/adapter1\n\nYou\u0027re not making edits to ChassisCollection, where your statement would make more sense, you\u0027re making change to ComputerSystemCollection, which there is only currently one.\n\nIf you\u0027re planning on taking over the multi-host work, that\u0027s a MUCH larger conversation that needs to happen outside this patch.\n\n\u003e \n\u003e In that case, redfish output via bmcweb will show them as same.\n\nPlease come up with an example that actually applies to this patch.  I get the feeling like you\u0027re moving toward an overall direction that you haven\u0027t really made clear.",
      "parentUuid": "2371cf56_49f53182",
      "range": {
        "startLine": 13,
        "startChar": 35,
        "endLine": 13,
        "endChar": 41
      },
      "revId": "903f06a8c9ecb7ecd296e4321e78c7ac2f6cdd69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79e76812_50758438",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-18T17:02:03Z",
      "side": 1,
      "message": "This seems worse.  The intent originally is that this disambiguation should be pushed onto the individual DBus daemon implementations, such that non-complicated systems can have simple naming (pcie1, pcie2, etc) and complex systems can do complicated schemes like what you proposed (chassisN_io_moduleN_slotN_adapterN).  In this way, the system itself can decide if the PCIe devices should be.  bmcweb should not be making that decision.",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 19,
        "endChar": 37
      },
      "revId": "903f06a8c9ecb7ecd296e4321e78c7ac2f6cdd69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4a71602_b5b18ad0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-20T10:50:03Z",
      "side": 1,
      "message": "\u003e This seems worse.  The intent originally is that this disambiguation should be pushed onto the individual DBus daemon implementations, such that non-complicated systems can have simple naming (pcie1, pcie2, etc) and complex systems can do complicated schemes like what you proposed (chassisN_io_moduleN_slotN_adapterN).  In this way, the system itself can decide if the PCIe devices should be. \n\n@ed - I\u0027m a bit puzzled by your mention of \"complex systems\" here, as I perceive this as more of a general issue concerning how we populate redfish resources, particularly those not directly associated with the chassis, even in relatively straightforward systems.\n\nFor instance, let\u0027s consider two distinct dbus objects:\n\n- slot1[hosts Item.PCIeSlot interface]/adapter1[hosts Item.PCIeDevice]\n- slot2[hosts Item.PCIeSlot interface]/adapter1[hosts Item.PCIeDevice]\n\nEven though these objects are located within the same chassis, they aren\u0027t recognized as unique redfish resources according to the current logic of bmcweb. This is because bmcweb only takes into account the leaf node in the path (adapter1) when populating the redfish resource.\n\n\u003e bmcweb should not be making that decision.\n\nbmcweb serves as the bridge translating the dbus data to redfish right ? In the scenario described, both dbus objects appear distinct and unique, given their differing parents and separate observation by the mapper as two distinct entities. However, bmcweb appears to treat them as identical, generating a single redfish resource due to its consideration solely of the leaf node in the path. Might it be beneficial for bmcweb to employ more comprehensive logic in discerning the uniqueness of dbus objects? I find myself questioning the appropriateness of bmcweb imposing this requirement on other applications. If indeed this is a requisite being enforced on applications, would it not be prudent for it to be formally documented?",
      "parentUuid": "79e76812_50758438",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 19,
        "endChar": 37
      },
      "revId": "903f06a8c9ecb7ecd296e4321e78c7ac2f6cdd69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "584c5832_3b5bf436",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-20T15:43:39Z",
      "side": 1,
      "message": "I\u0027d like to note that this patchset was provided with 4 sentences of description, no links to the mailing list or discord discussions.  Manojs comment above is significantly more content about WHY we want to do this than exists than was pushed in the patchset.\n\n\u003e \u003e This seems worse.  The intent originally is that this disambiguation should be pushed onto the individual DBus daemon implementations, such that non-complicated systems can have simple naming (pcie1, pcie2, etc) and complex systems can do complicated schemes like what you proposed (chassisN_io_moduleN_slotN_adapterN).  In this way, the system itself can decide if the PCIe devices should be. \n\u003e \n\u003e @ed - I\u0027m a bit puzzled by your mention of \"complex systems\" here, as I perceive this as more of a general issue concerning how we populate redfish resources, particularly those not directly associated with the chassis, even in relatively straightforward systems.\n\nThis patchset still appears to have nothing to do with chassis.  I\u0027m not sure why people keep mentioning it.  Can someone please explain?\n\n\u003e \n\u003e For instance, let\u0027s consider two distinct dbus objects:\n\u003e \n\u003e - slot1[hosts Item.PCIeSlot interface]/adapter1[hosts Item.PCIeDevice]\n\u003e - slot2[hosts Item.PCIeSlot interface]/adapter1[hosts Item.PCIeDevice]\n\u003e \n\u003e Even though these objects are located within the same chassis, they aren\u0027t recognized as unique redfish resources according to the current logic of bmcweb. \n\u003e This is because bmcweb only takes into account the leaf node in the path (adapter1) when populating the redfish resource.\n\u003e \n\u003e \u003e bmcweb should not be making that decision.\n\nbmcweb shouldn\u0027t be making which decision, to use the leaf node?  With respect, that was a decision made long ago, in the early days of bmcweb using dbus, and is kind of a core decision that isn\u0027t something we can lightly just change without significant breakage.  Basically every URL is built that way (take note of all the collection helper functions that do the exact same thing).  Sure, that\u0027s a discussion we can reopen if you like, but that needs to be a holistic approach to the dbus_path -\u003e url conversions, not a single patch claiming to fix a \"bug\" in one endpoint (for which I don\u0027t really see the bug).  The whole point of using the leaf is that the services themselves are in control of what URL the user sees, not bmcweb.  If they choose to put forward two copies of adapter1, knowing that it\u0027s a url conflict to do so, that\u0027s their business.  On the correlary, if they know there\u0027s only one host, they\u0027re free to pick simpler names.\n\nIt would be trivial to get the same result you\u0027re looking for by just renaming the leaf node of the adapter of the node in question to something like /xyz/openbmc_project/inventory/system/pcieslot0_pcie_card0, with no bmcweb changes.  Why was that not considered?\n\nMy main concern with patchsets like this is for simple systems, how would they get the simple behavior?  And how would we retain the old URLs in that case?  I don\u0027t see any of that handled in code, and to a user\n\n\"/redfish/v1/Systems/system/PCIeDevices/chassis_pcieslot1_pcie_card1\"\n\nis a significantly more complex of a url when compared to.\n\n\"/redfish/v1/Systems/system/PCIeDevices/adapter1\"\n\n(those are the examples taken from the commit message).\n\n\u003e \n\u003e bmcweb serves as the bridge translating the dbus data to redfish right ? In the scenario described, both dbus objects appear distinct and unique,\n\nLets be clear here, one of the requirements that bmcweb put on DBus is to provide unique leaf nodes for resources turned into Redfish entries.  This is the same thing for every part of Redfish.  If you did this same thing for sensors (putting a thermal and power sensor with the same name), you\u0027d hit the same \"bug\".  Please note that IPMI does the same thing, and would hit the same \"bug\".\n\n\u003e given their differing parents and separate observation by the mapper as two distinct entities. However, bmcweb appears to treat them as identical, generating a single redfish resource due to its consideration solely of the leaf node in the path. Might it be beneficial for bmcweb to employ more comprehensive logic in discerning the uniqueness of dbus objects?\n\nI don\u0027t know, but if we\u0027re asking this as a question, we shouldn\u0027t be pushing this as a patchset, certainly not a patchset to a single entry, without some attempt to identify the places we do this.\n\n\u003e I find myself questioning the appropriateness of bmcweb imposing this requirement on other applications.\n\nI\u0027m not sure what \"appropriateness\" means, but this is certainly a discussion we can have.  \"Appropriateness\" is determined by those that review and maintain code, and I don\u0027t find it appropriate to completely break a fundamental part of how we handle Redfish without at least a discussion of what we\u0027re trying to solve, and how we\u0027re going to solve it.\n\n\u003e If indeed this is a requisite being enforced on applications, would it not be prudent for it to be formally documented?\n\nFeel free to formally document it;  Documentation has not been something that most people have put a lot of effort into, considering it\u0027s trivial to read the code to see how DBus paths are turned into URLs.\n\n\n\nFWIW, this was also voted on by the TOF in https://github.com/openbmc/technical-oversight-forum/issues/18, that we would use associations for denoting connections between objects, not path hierarchy.  This patch seems to ignore that decision, and uses path hierarchy anyway.",
      "parentUuid": "f4a71602_b5b18ad0",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 19,
        "endChar": 37
      },
      "revId": "903f06a8c9ecb7ecd296e4321e78c7ac2f6cdd69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "394a0012_df1de53a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-26T07:13:04Z",
      "side": 1,
      "message": "\u003e I\u0027d like to note that this patchset was provided with 4 sentences of description, no links to the mailing list or discord discussions.  Manojs comment above is significantly more content about WHY we want to do this than exists than was pushed in the patchset.\n\u003e \n\u003e \u003e \u003e This seems worse.  The intent originally is that this disambiguation should be pushed onto the individual DBus daemon implementations, such that non-complicated systems can have simple naming (pcie1, pcie2, etc) and complex systems can do complicated schemes like what you proposed (chassisN_io_moduleN_slotN_adapterN).  In this way, the system itself can decide if the PCIe devices should be. \n\u003e \u003e \n\u003e \u003e @ed - I\u0027m a bit puzzled by your mention of \"complex systems\" here, as I perceive this as more of a general issue concerning how we populate redfish resources, particularly those not directly associated with the chassis, even in relatively straightforward systems.\n\u003e \n\u003e This patchset still appears to have nothing to do with chassis.  I\u0027m not sure why people keep mentioning it.  Can someone please explain?\n\nI felt author of this patch-set was explaining a scenario where there are two dbus objects with same leaf node but under two different chassis, and I continued upon that assuming that , it is what made you feel this use-case as \"complex systems\". But yeah even i feel that its not really relevant to this discussion. \n\n\u003e \n\u003e \u003e \n\u003e \u003e For instance, let\u0027s consider two distinct dbus objects:\n\u003e \u003e \n\u003e \u003e - slot1[hosts Item.PCIeSlot interface]/adapter1[hosts Item.PCIeDevice]\n\u003e \u003e - slot2[hosts Item.PCIeSlot interface]/adapter1[hosts Item.PCIeDevice]\n\u003e \u003e \n\u003e \u003e Even though these objects are located within the same chassis, they aren\u0027t recognized as unique redfish resources according to the current logic of bmcweb. \n\u003e \u003e This is because bmcweb only takes into account the leaf node in the path (adapter1) when populating the redfish resource.\n\u003e \u003e \n\u003e \u003e \u003e bmcweb should not be making that decision.\n\u003e \n\u003e bmcweb shouldn\u0027t be making which decision, to use the leaf node?  With respect, that was a decision made long ago, in the early days of bmcweb using dbus, and is kind of a core decision that isn\u0027t something we can lightly just change without significant breakage.  Basically every URL is built that way (take note of all the collection helper functions that do the exact same thing).  Sure, that\u0027s a discussion we can reopen if you like, but that needs to be a holistic approach to the dbus_path -\u003e url conversions, not a single patch claiming to fix a \"bug\" in one endpoint (for which I don\u0027t really see the bug).  The whole point of using the leaf is that the services themselves are in control of what URL the user sees, not bmcweb.  If they choose to put forward two copies of adapter1, knowing that it\u0027s a url conflict to do so, that\u0027s their business.  On the correlary, if they know there\u0027s only one host, they\u0027re free to pick simpler names.\n\u003e \n\nThanks for the explanation, I was not aware about this being the design point on which bmcweb was built.\n\n\u003e It would be trivial to get the same result you\u0027re looking for by just renaming the leaf node of the adapter of the node in question to something like /xyz/openbmc_project/inventory/system/pcieslot0_pcie_card0, with no bmcweb changes.  Why was that not considered?\n\u003e \n\nWe are open to considering it. PLDM, which offers enhanced specifications compared to IPMI, enables entities to be represented in terms of platform descriptor records. Within PLDM, there exists a specific type of record called the Entity Association PDR, which illustrates parent-child relationships across entities. Unaware of this aspect initially, we attempted to model it using path hierarchy while also establishing associations as required. We will review our PLDM designs to find a way to transform these entity association PDRs into flat objects with associations rather than constructing path hierarchies.\n\n\u003e My main concern with patchsets like this is for simple systems, how would they get the simple behavior?  And how would we retain the old URLs in that case?  I don\u0027t see any of that handled in code, and to a user\n\u003e \n\u003e \"/redfish/v1/Systems/system/PCIeDevices/chassis_pcieslot1_pcie_card1\"\n\u003e \n\u003e is a significantly more complex of a url when compared to.\n\u003e \n\u003e \"/redfish/v1/Systems/system/PCIeDevices/adapter1\"\n\u003e \n\u003e (those are the examples taken from the commit message).\n\u003e \n\u003e \u003e \n\u003e \u003e bmcweb serves as the bridge translating the dbus data to redfish right ? In the scenario described, both dbus objects appear distinct and unique,\n\u003e \n\u003e Lets be clear here, one of the requirements that bmcweb put on DBus is to provide unique leaf nodes for resources turned into Redfish entries.  This is the same thing for every part of Redfish.  If you did this same thing for sensors (putting a thermal and power sensor with the same name), you\u0027d hit the same \"bug\".  Please note that IPMI does the same thing, and would hit the same \"bug\".\n\u003e \n\u003e \u003e given their differing parents and separate observation by the mapper as two distinct entities. However, bmcweb appears to treat them as identical, generating a single redfish resource due to its consideration solely of the leaf node in the path. Might it be beneficial for bmcweb to employ more comprehensive logic in discerning the uniqueness of dbus objects?\n\u003e \n\u003e I don\u0027t know, but if we\u0027re asking this as a question, we shouldn\u0027t be pushing this as a patchset, certainly not a patchset to a single entry, without some attempt to identify the places we do this.\n\u003e \nI agree , this would be much bigger discussion.\n\n\u003e \u003e I find myself questioning the appropriateness of bmcweb imposing this requirement on other applications.\n\u003e \n\u003e I\u0027m not sure what \"appropriateness\" means, but this is certainly a discussion we can have.  \"Appropriateness\" is determined by those that review and maintain code, and I don\u0027t find it appropriate to completely break a fundamental part of how we handle Redfish without at least a discussion of what we\u0027re trying to solve, and how we\u0027re going to solve it.\n\u003e \n\u003e \u003e If indeed this is a requisite being enforced on applications, would it not be prudent for it to be formally documented?\n\u003e \n\u003e Feel free to formally document it;  Documentation has not been something that most people have put a lot of effort into, considering it\u0027s trivial to read the code to see how DBus paths are turned into URLs.\n\u003e \n\nCertainly, I\u0027m currently developing a patch to formally document this. I strongly believe that design constraints affecting external applications, such as this one, shouldn\u0027t be merely buried within the codebase. Since this constraint isn\u0027t specific to BMCWeb but rather applies system-wide to all applications, I intend to include this documentation in the openbmc/docs. Could you suggest the optimal location for it?\n\n\u003e \n\u003e \n\u003e FWIW, this was also voted on by the TOF in https://github.com/openbmc/technical-oversight-forum/issues/18, that we would use associations for denoting connections between objects, not path hierarchy.  This patch seems to ignore that decision, and uses path hierarchy anyway.\n\nYes, I do remember this TOF issue. But I feel some how this was not well documented since its a byproduct of that discussion.",
      "parentUuid": "584c5832_3b5bf436",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 19,
        "endChar": 37
      },
      "revId": "903f06a8c9ecb7ecd296e4321e78c7ac2f6cdd69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78eb2776_81a850ee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-29T06:46:49Z",
      "side": 1,
      "message": "\u003e \n\u003e Yes, I do remember this TOF issue. But I feel some how this was not well documented since its a byproduct of that discussion.\n\nThe TOF issue was documented, there are designs in the docs folder that are merged;  What more documentation were you looking for?",
      "parentUuid": "394a0012_df1de53a",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 19,
        "endChar": 37
      },
      "revId": "903f06a8c9ecb7ecd296e4321e78c7ac2f6cdd69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
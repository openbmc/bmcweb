{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "852ea0db_5474b2a2",
        "filename": "redfish-core/lib/systems_logservices_postcodes.hpp",
        "patchSetId": 30
      },
      "lineNbr": 63,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-18T13:37:15Z",
      "side": 1,
      "message": "Do we have to put a check here in case `systemName` does not exist on that bmc?\n\nSince in single-host case it does check.",
      "revId": "2e80e2269ede8e37c11e0e3d8c7e0b8fe343be7a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12a5f823_de79ffcf",
        "filename": "redfish-core/lib/systems_logservices_postcodes.hpp",
        "patchSetId": 30
      },
      "lineNbr": 392,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-18T13:37:15Z",
      "side": 1,
      "message": "These literals are duplicated a bunch of times now, what about making function\n\n```\nstd::string getPostCodeService(uint64_t computerSystemIndex){\n    return std::format(\"/xyz/openbmc_project/State/Boot/PostCode{}\", computerSystemIndex);\n}\n```\n\nThen the call sites simplify to \n```suggestion\nstd::string objPath \u003d getPostCodeObjPath(computerSystemIndex);\nstd::string service \u003d getPostCodeService(computerSystemIndex);\n\n```\n\nSince both the object path and DBus name are needed, an alternative would be to make a function ```std::tuple\u003cstd::string, std::string\u003e getPostCodeBusNameAndPath(uint64_t computerSystemIndex)```",
      "revId": "2e80e2269ede8e37c11e0e3d8c7e0b8fe343be7a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "87a492b7_602fba87",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-30T18:12:12Z",
      "side": 1,
      "message": "This should be a constexpr array to avoid startup problems.",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 37
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6db2f468_fd74a01f",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-11-30T21:39:06Z",
      "side": 1,
      "message": "Alright I\u0027ve made the change.",
      "parentUuid": "87a492b7_602fba87",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 37
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e02e044_4fc8a6cc",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-12-01T00:02:21Z",
      "side": 1,
      "message": "This almost definitely doesn\u0027t need to be aggregated because it\u0027s been deprecated in the standard.  I wonder if we should just strip @odata.context entirely in aggregated responses?",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 26,
        "endChar": 21
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a33bc21_0b8fa89e",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-12-01T20:51:20Z",
      "side": 1,
      "message": "In general I don\u0027t think we should get into having aggregation stripping away deprecated properties and other fields from aggregated responses.  That seems like opening a big can of worms.\n\nIn this specific case it looks like the values would look like \"/redfish/v1/$metadata#ComputerSystem.ComputerSystem\".  That\u0027s not a format we can perform fixing on so it\u0027d get left as is.  I might as well remove it from the list then since we\u0027ll never perform fixing on it.",
      "parentUuid": "3e02e044_4fc8a6cc",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 26,
        "endChar": 21
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4a30b03_d0224cd1",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-12-01T00:02:21Z",
      "side": 1,
      "message": "This almost definitely doesn\u0027t need to be aggregated.  The hostname of the bmc doesn\u0027t change because it\u0027s been aggregated.",
      "range": {
        "startLine": 37,
        "startChar": 5,
        "endLine": 37,
        "endChar": 13
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4411920_f288440f",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-12-01T20:51:20Z",
      "side": 1,
      "message": "Alright I\u0027ll remove it and probably leave a comment justifying doing so.  Interesting sidenote: the hostname property for AggregationSource is of type \"string (URI)\", while the other instances of hostname property are only \"string\".",
      "parentUuid": "e4a30b03_d0224cd1",
      "range": {
        "startLine": 37,
        "startChar": 5,
        "endLine": 37,
        "endChar": 13
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9126d669_839c3ef9",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-30T18:12:12Z",
      "side": 1,
      "message": "Where did this come from?  I don\u0027t see it in 2022.2",
      "range": {
        "startLine": 38,
        "startChar": 5,
        "endLine": 38,
        "endChar": 17
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47916d24_36fa746b",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-11-30T21:39:06Z",
      "side": 1,
      "message": "That was supposed to be HttpBootUri.  It\u0027s since been removed as part of removing all properties that end in case-insensitive \"uri\".",
      "parentUuid": "9126d669_839c3ef9",
      "range": {
        "startLine": 38,
        "startChar": 5,
        "endLine": 38,
        "endChar": 17
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6cd4e5ad_ecb0cacd",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-12-01T00:02:21Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "47916d24_36fa746b",
      "range": {
        "startLine": 38,
        "startChar": 5,
        "endLine": 38,
        "endChar": 17
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24594642_0950b77c",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-30T18:12:12Z",
      "side": 1,
      "message": "This doesn\u0027t need aggregated.  \"PublicationUri\" is supposed to be world-facing.  Which brings up a fun problem of \"we need to be able to identify non-relative URIs that don\u0027t point to this bmc\".",
      "range": {
        "startLine": 49,
        "startChar": 5,
        "endLine": 49,
        "endChar": 19
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45b75ead_ebb62345",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-11-30T21:39:06Z",
      "side": 1,
      "message": "That\u0027s a difficult problem.  The good news is I don\u0027t think we have to be that picky.  This change is only for fixing URIs in responses.  We won\u0027t ever forward requests for generic external URIs.  It\u0027s only for known Redfish URIs.\n\nWe call addPrefixToItem() to perform the actual fixing and it will only do that if the URI is for a known aggregated resource.  As part of that it must begin with /redfish/v1.  Public URIs won\u0027t fit that bill and thus be left as is.",
      "parentUuid": "24594642_0950b77c",
      "range": {
        "startLine": 49,
        "startChar": 5,
        "endLine": 49,
        "endChar": 19
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf8efc90_224b9650",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-12-01T00:02:21Z",
      "side": 1,
      "message": "\u003e That\u0027s a difficult problem.  The good news is I don\u0027t think we have to be that picky.  This change is only for fixing URIs in responses.  We won\u0027t ever forward requests for generic external URIs.  It\u0027s only for known Redfish URIs.\n\nRight, but PublicationUri will show up in a JsonSchema response.\n\n\u003e \n\u003e We call addPrefixToItem() to perform the actual fixing and it will only do that if the URI is for a known aggregated resource.  As part of that it must begin with /redfish/v1.  Public URIs won\u0027t fit that bill and thus be left as is.\n\nI THINK that solves it, so long as we\u0027re explicitly checking host() as well as path() and not just path (I think the common DMTF publication locations start with redfish/v1 as well)",
      "parentUuid": "45b75ead_ebb62345",
      "range": {
        "startLine": 49,
        "startChar": 5,
        "endLine": 49,
        "endChar": 19
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9220e243_6df0bfed",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-12-01T20:51:20Z",
      "side": 1,
      "message": "\u003e I THINK that solves it, so long as we\u0027re explicitly checking host() as well as path() and not just path (I think the common DMTF publication locations start with redfish/v1 as well)\n\nThese are examples from https://www.dmtf.org/sites/default/files/standards/documents/DSP2046_2022.2.pdf#page\u003d366:\n\"PublicationUri\": \"http://redfish.dmtf.org/schemas/v1/Chassis.v1_11_0.json\"\n\"PublicationUri\": \"http://schemas.contoso.com/Chassis.v1_11_0.xy.json\"\n\nWe call parse_relative_ref() on the string and that doesn\u0027t extract the path.  If the URI begins with something like \"http://\" then it fails to parse and we return early.  Interestingly, a string like \"www.redfish.dmtf.org/redfish/v1/Chassis\" will parse.  However, after converting to url_view the entire path is recognized as \"www.redfish.dmtf.org/redfish/v1/Chassis\" so we wouldn\u0027t apply a prefix in that scenario either.",
      "parentUuid": "bf8efc90_224b9650",
      "range": {
        "startLine": 49,
        "startChar": 5,
        "endLine": 49,
        "endChar": 19
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36276da3_64da0b63",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-30T18:12:12Z",
      "side": 1,
      "message": "One thing I see from the list above is that a majority of them end in \"URI\".  Considering that I got \"URI properties must end in URI\" into the standard, could we make this more resilient to added properties, and OEM properties with something like:\n\nstd::array\u003cstd::string_view, X\u003e nonUriProperties{\n   \"@odata.id\"\n   ,...\n}\n\nif (boost::iendswith(propertyName, \"uri\") || std::binary_search(nonUriProperties.begin(), nonUriProperties.end(), propertyName) !\u003d nonUriProperties.end()){\n\n}\n\n\nThat keeps us relatively future proof, so long as Redfish doesn\u0027t add any URI properties that don\u0027t end in URI (which they\u0027ve now been informed to not) and when OEM properties add a URI, that will get aggregated properly as well?",
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d048ae9f_b2abc1eb",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-11-30T21:39:06Z",
      "side": 1,
      "message": "The future proofing you describe happens in line 141 where you posted a different comment https://gerrit.openbmc.org/c/openbmc/bmcweb/+/58937/comments/414be755_c59bf4ce.\n\nI\u0027ve moved this check into its own function just to make it clearer what\u0027s going on.",
      "parentUuid": "36276da3_64da0b63",
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7eaddd8e_aab2955d",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-12-01T00:02:21Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "d048ae9f_b2abc1eb",
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "414be755_c59bf4ce",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 141,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-30T18:12:12Z",
      "side": 1,
      "message": "Wait.... we already do the above.....   Maybe that list just needs culled?",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 141,
        "endChar": 64
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97ba31f7_bac39dba",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 6
      },
      "lineNbr": 141,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-11-30T21:39:06Z",
      "side": 1,
      "message": "This is for future proofing purposes.  I wanted the list to be exhaustive so that\u0027s why there is some redundancy.  I know that currently that means this check will never actually return true since the first part of the if statement will catch all existing properties.\n\nI\u0027ll just go ahead and remove the redundancies from the list now that it is no longer an unordered_set.  That\u0027ll also help speed up the lookup process now that it\u0027s using binary search.",
      "parentUuid": "414be755_c59bf4ce",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 141,
        "endChar": 64
      },
      "revId": "29215b73daca1eb157c494c160856712b67a43ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
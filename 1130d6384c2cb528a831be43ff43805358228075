{
  "comments": [
    {
      "key": {
        "uuid": "a1d1dc73_bb947922",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 113,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "This isn\u0027t quite how I imagined it.  I\u0027m not liking that we\u0027re combining the dbus call with the parsing, as it leads to some odd semantics around how to handle errors.  I\u0027ll try to keep an open mind though.",
      "range": {
        "startLine": 113,
        "startChar": 12,
        "endLine": 113,
        "endChar": 28
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b0f6126_77818bb6",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 113,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-03T15:26:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1d1dc73_bb947922",
      "range": {
        "startLine": 113,
        "startChar": 12,
        "endLine": 113,
        "endChar": 28
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "278aca24_5982ad1c",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 116,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "The conventional way to model this would be as a single callback with an error code as the first argument.  That\u0027s how most of the rest of the webserver and boost do it.\n\nThis way is modeling async callbacks in the javascript way (with onsuccess and onerror handlers) which is discouraged, as it makes the control flow harder to track.  This was more important in bmcweb before AsyncReq existed, but it\u0027s still important.",
      "range": {
        "startLine": 115,
        "startChar": 59,
        "endLine": 116,
        "endChar": 50
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3edaf2d_6c297c6a",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 116,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-03T15:26:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "278aca24_5982ad1c",
      "range": {
        "startLine": 115,
        "startChar": 59,
        "endLine": 116,
        "endChar": 50
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a6fb8f0_f4f001ea",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 124,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "This can be passed by value.",
      "range": {
        "startLine": 124,
        "startChar": 42,
        "endLine": 124,
        "endChar": 47
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5c5dfe9_dba1ac6f",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 124,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-03T15:26:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a6fb8f0_f4f001ea",
      "range": {
        "startLine": 124,
        "startChar": 42,
        "endLine": 124,
        "endChar": 47
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d71890ff_9b5576d7",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 149,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "These look copied and pasted from readJson.  Can we deduplicate them?",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 149,
        "endChar": 2
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d205bfa_149c0ba7",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 149,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-03T15:26:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d71890ff_9b5576d7",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 149,
        "endChar": 2
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e87e7351_cd5de7fd",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 152,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "This mixes case styles.  This would be IsOptionalV",
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7833b245_7a75ca98",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 152,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-03T15:26:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e87e7351_cd5de7fd",
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "669b8d96_468898af",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 155,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "Can this just be a simple bool?  If we need more states than \"worked\" and \"failed\" then we should make an enum class, but in this case, I suspect we can just use true or false.",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 155,
        "endChar": 8
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26c15729_e388eeb0",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 155,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-03T15:26:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "669b8d96_468898af",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 155,
        "endChar": 8
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1776228_05a1a492",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 157,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "I would really prefer if this handler didn\u0027t support pointer types as inputs.  In the readJson case, we couldn\u0027t find a use for them over const references or const references of std::optional.",
      "range": {
        "startLine": 157,
        "startChar": 23,
        "endLine": 157,
        "endChar": 35
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbef99d7_4f9846f9",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 157,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-03T15:26:47Z",
      "side": 1,
      "message": "readJson copies all values",
      "parentUuid": "f1776228_05a1a492",
      "range": {
        "startLine": 157,
        "startChar": 23,
        "endLine": 157,
        "endChar": 35
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e624bd1_8d779abf",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 157,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-03T16:17:41Z",
      "side": 1,
      "message": "I\u0027m not following that comment.  Can you explain why readJson copying all values would require this to support pointer types?",
      "parentUuid": "cbef99d7_4f9846f9",
      "range": {
        "startLine": 157,
        "startChar": 23,
        "endLine": 157,
        "endChar": 35
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e681683_a6695549",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 157,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-04T12:56:39Z",
      "side": 1,
      "message": "I did not understand your comment correctly. What is your opinion on not using ptr here? Thanks in advance.\nRight now unpackProperties is very similar to common unpacking style of dbus call messages used in bmcweb \u003d for values stored in variant use ptr type.\nT_ptr my_ptr;\nfor (const auto\u0026 [key, var] : vector) {\n  if (key \u003d\u003d expected_key) {\n    T_ptr ptr \u003d std::get_if\u003cT\u003e(var);\n    if (ptr !\u003d nullptr) {\n      my_ptr \u003d ptr;\n    }\n  }\n}",
      "parentUuid": "2e624bd1_8d779abf",
      "range": {
        "startLine": 157,
        "startChar": 23,
        "endLine": 157,
        "endChar": 35
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58c827bd_2c139d6c",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 157,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-04T15:08:59Z",
      "side": 1,
      "message": "In the case you cited, all elements are in scope, and it\u0027s fairly obvious that ptr points to the object within var.\n\nOnce you move this to a utility function, it becomes something like\n\nT* myptr;\nreadProperties(ret, \"MyKey\", myptr);\n\nand is far more obfuscated that myptr points to an element within ret.  We\u0027ve had this pattern before, and people tended to mess it up.  Also, the move cost on basically every type you\u0027re likely to pull out of dbus is negligible.",
      "parentUuid": "9e681683_a6695549",
      "range": {
        "startLine": 157,
        "startChar": 23,
        "endLine": 157,
        "endChar": 35
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17d8f26c_c11e985e",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 157,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-07T09:42:49Z",
      "side": 1,
      "message": "Ok, I will remove unpackProperties. One more question, how people mess it up with this pattern? Thanks in advance",
      "parentUuid": "58c827bd_2c139d6c",
      "range": {
        "startLine": 157,
        "startChar": 23,
        "endLine": 157,
        "endChar": 35
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d83d5a61_52a7662a",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 157,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-08T06:28:42Z",
      "side": 1,
      "message": "Generally when the use the variable after the object that it\u0027s pointing to has been destroyed.  Sometimes it\u0027s by passing a pointer into a lambda callback, sometimes it\u0027s just a simple scope issue.  These can be really hard to find, as they can rely on the order of the dbus replies coming in to actually see a crash or failure.",
      "parentUuid": "17d8f26c_c11e985e",
      "range": {
        "startLine": 157,
        "startChar": 23,
        "endLine": 157,
        "endChar": 35
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e976877_e948d97f",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 168,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "Can you avoid auto here?  T* makes it clearer that this is a pointer.  Also, moving it to its own line would help with the readability.\n\nsomething like:\nConst T* value \u003d std::get_if\u003cT\u003e(\u0026variant);\nif (value !\u003d nullptr){\n    outValue \u003d *value;\n    return true;\n}",
      "range": {
        "startLine": 168,
        "startChar": 12,
        "endLine": 168,
        "endChar": 17
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95468fec_ece05988",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 168,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-03T15:26:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e976877_e948d97f",
      "range": {
        "startLine": 168,
        "startChar": 12,
        "endLine": 168,
        "endChar": 17
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "946ae8b8_9889a9bc",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 170,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "This should be a std::move to handle the string case.",
      "range": {
        "startLine": 170,
        "startChar": 23,
        "endLine": 170,
        "endChar": 29
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "270655ea_3a296f0f",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 170,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-03T15:26:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "946ae8b8_9889a9bc",
      "range": {
        "startLine": 170,
        "startChar": 23,
        "endLine": 170,
        "endChar": 29
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b21a7c3f_10ecffd2",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 170,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-03T16:17:41Z",
      "side": 1,
      "message": "Also, my fault, in this context the variant is const, so move wont do anything, you also need to make the variant non-const, then you\u0027ll get appropriate move semantics.",
      "parentUuid": "270655ea_3a296f0f",
      "range": {
        "startLine": 170,
        "startChar": 23,
        "endLine": 170,
        "endChar": 29
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13fa24f8_053f66b1",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 170,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-04T12:56:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b21a7c3f_10ecffd2",
      "range": {
        "startLine": 170,
        "startChar": 23,
        "endLine": 170,
        "endChar": 29
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8d9f8f3_3bc82620",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 186,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "if you invert the check on 200 and move it here, this static assert becomes redundant.",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 186,
        "endChar": 29
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e140c23f_62b90045",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 186,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-04T12:56:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8d9f8f3_3bc82620",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 186,
        "endChar": 29
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c51d6320_ac30932d",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 199,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "This branch can be simplified with std::conditional\n\nusing baseType \u003d std::conditional\u003cIsOptionalV\u003cValueType\u003e, typename ValueType::value_type, ValueType\u003e::type;\n\nassigned[Index] +\u003d getIf\u003cBaseType\u003e(variant, outValue);",
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72693c9c_078844bc",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 199,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-03T15:26:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c51d6320_ac30932d",
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04e0202b_c08acf2e",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 209,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "in readJson this was a std::bitset.  that seems better here.",
      "range": {
        "startLine": 209,
        "startChar": 34,
        "endLine": 209,
        "endChar": 51
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d12bd4a_9e6f1b83",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 209,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-03T15:26:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04e0202b_c08acf2e",
      "range": {
        "startLine": 209,
        "startChar": 34,
        "endLine": 209,
        "endChar": 51
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "769fa769_0c687418",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 224,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "minor style thing, Invert this check, and use it to return.\n\nif constexpr (sizeof...(Args) \u003d\u003d 0)\n{\n    return\n}",
      "range": {
        "startLine": 223,
        "startChar": 0,
        "endLine": 224,
        "endChar": 5
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d59d1ed0_0fbbd956",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 224,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-04T12:56:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "769fa769_0c687418",
      "range": {
        "startLine": 223,
        "startChar": 0,
        "endLine": 224,
        "endChar": 5
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7b5b0cd_faae3ba8",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 233,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "I wonder if this would be a good opportunity for boost::container::small_vector.  It\u0027s significantly more efficient for small numbers of values.\n\nTotally optional, but might be a good win to have if we\u0027re going to propagate this pattern around.",
      "range": {
        "startLine": 233,
        "startChar": 15,
        "endLine": 233,
        "endChar": 21
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e07e4e60_a3149268",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 233,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-04T12:56:39Z",
      "side": 1,
      "message": "Good hint, thanks",
      "parentUuid": "e7b5b0cd_faae3ba8",
      "range": {
        "startLine": 233,
        "startChar": 15,
        "endLine": 233,
        "endChar": 21
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d57e962e_b4789742",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 238,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "Declare this the conventional way;\n\nstd::array\u003cuint8_t, sizeof...(Args) / 2\u003e assigned;",
      "range": {
        "startLine": 238,
        "startChar": 0,
        "endLine": 238,
        "endChar": 63
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1add640_451b7107",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 238,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-04T12:56:39Z",
      "side": 1,
      "message": "Duplicated comment\nhttps://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/31692/47/include/dbus_utility.hpp#168",
      "parentUuid": "d57e962e_b4789742",
      "range": {
        "startLine": 238,
        "startChar": 0,
        "endLine": 238,
        "endChar": 63
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1f65049_513e0966",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 238,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-04T15:08:59Z",
      "side": 1,
      "message": "yep",
      "parentUuid": "f1add640_451b7107",
      "range": {
        "startLine": 238,
        "startChar": 0,
        "endLine": 238,
        "endChar": 63
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a1efd3b_a497da05",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 238,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-07T09:42:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b1f65049_513e0966",
      "range": {
        "startLine": 238,
        "startChar": 0,
        "endLine": 238,
        "endChar": 63
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08de560_1ee58b69",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 250,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "This probably needs to differentiate between a duplicated key and an unfound key in the return code, as a hint to the user.",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 58
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1e3dee4_afb404a7",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 250,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-04T12:56:39Z",
      "side": 1,
      "message": "It is internal error, not mentioned to be for REST user. bmcweb responses internal error in such cases. Please, continue this discussion in comment on line 151 (https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/31692/47/include/dbus_utility.hpp#151). Thanks in advance",
      "parentUuid": "f08de560_1ee58b69",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 58
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee5d840c_35d8e3f9",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 250,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-04T15:08:59Z",
      "side": 1,
      "message": "But probably wont be an internal error in all cases (as you\u0027ll find when you propagate this out to more code.\n\nThere are cases where properties might be multiple types, because of backward compatibility or dbus schema transitions, and this will likely need to try to pull a property out in multiple ways.\n\nA good example of this would be in sensors, where the sensor value can be an int64_t or a double.  \nIn that case, I suspect the user would need to do check for a \"wrong type\" error, and try to read out the values in the other format.",
      "parentUuid": "c1e3dee4_afb404a7",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 58
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5413f363_7f8a753d",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 250,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-07T09:42:49Z",
      "side": 1,
      "message": "Yes, I understand. Same with overflow errors. unpackProperties will be moved to other patch anyway. I am closing this discussion. Hope we exhausted this subject.",
      "parentUuid": "ee5d840c_35d8e3f9",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 58
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "590b539c_64de13c7",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 45
      },
      "lineNbr": 250,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-08T06:28:42Z",
      "side": 1,
      "message": "So long as you fix it in the sdbusplus version, I\u0027m happy and this is resolved.\n\nOverflow errors tend to be different, as they\u0027re generally just a failure, and we wouldn\u0027t try a different unpack type if we got an overflow, we would immediately return an error.",
      "parentUuid": "5413f363_7f8a753d",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 58
      },
      "revId": "1130d6384c2cb528a831be43ff43805358228075",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
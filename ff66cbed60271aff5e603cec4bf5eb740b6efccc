{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "226a5e02_6b84ee36",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 43
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-03T21:23:26Z",
      "side": 1,
      "message": "This is very close.  Just need to get the docs updated, and make sure we retain the old behavior, then this shoudl be good to go.",
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df7f3f50_03cb9700",
        "filename": "DEVELOPING.md",
        "patchSetId": 43
      },
      "lineNbr": 240,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-03T21:22:43Z",
      "side": 1,
      "message": "This is an example.  Please just put the highest level which is what enabled did before.",
      "range": {
        "startLine": 240,
        "startChar": 11,
        "endLine": 240,
        "endChar": 22
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd83df85_d458e8f0",
        "filename": "DEVELOPING.md",
        "patchSetId": 43
      },
      "lineNbr": 240,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-05-04T22:26:33Z",
      "side": 1,
      "message": "Changed to -Dlogging\u003ddebug\u0027",
      "parentUuid": "df7f3f50_03cb9700",
      "range": {
        "startLine": 240,
        "startChar": 11,
        "endLine": 240,
        "endChar": 22
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b276e94_5b74eaad",
        "filename": "DEVELOPING.md",
        "patchSetId": 43
      },
      "lineNbr": 247,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-03T21:22:43Z",
      "side": 1,
      "message": "same here.",
      "range": {
        "startLine": 247,
        "startChar": 57,
        "endLine": 247,
        "endChar": 62
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ab16326_b8a2fe2b",
        "filename": "DEVELOPING.md",
        "patchSetId": 43
      },
      "lineNbr": 247,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-05-04T22:26:33Z",
      "side": 1,
      "message": "Changed to \"-Dbmcweb-logging\u003ddebug\"",
      "parentUuid": "1b276e94_5b74eaad",
      "range": {
        "startLine": 247,
        "startChar": 57,
        "endLine": 247,
        "endChar": 62
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f66993c1_babd0f2c",
        "filename": "DEVELOPING.md",
        "patchSetId": 43
      },
      "lineNbr": 255,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-03T21:22:43Z",
      "side": 1,
      "message": "This needs better combined.  Referencing the section above tells me that this information can just be included in the section previos.",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 255,
        "endChar": 33
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d315842_e033cf8a",
        "filename": "DEVELOPING.md",
        "patchSetId": 43
      },
      "lineNbr": 255,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-03T21:25:17Z",
      "side": 1,
      "message": "ALso, saying \"The other option can be selected as described above\"\n\nMakes it very unclear to the reader what the options are.  I don\u0027t care which section the options are in, but there should be one list of \"here\u0027s the things you can set your logging level to.",
      "parentUuid": "f66993c1_babd0f2c",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 255,
        "endChar": 33
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "653dd2ca_1e8b5509",
        "filename": "DEVELOPING.md",
        "patchSetId": 43
      },
      "lineNbr": 255,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-05-04T22:26:33Z",
      "side": 1,
      "message": "I removed those sentences as the log level is already described in the previous section.",
      "parentUuid": "0d315842_e033cf8a",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 255,
        "endChar": 33
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f888ed5_3d210cba",
        "filename": "config/meson.build",
        "patchSetId": 43
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-03T21:22:43Z",
      "side": 1,
      "message": "Is this a change in behavior?  I didn\u0027t think DEBUG was tied to logging before?",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 13
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bab1add6_61103ad5",
        "filename": "config/meson.build",
        "patchSetId": 43
      },
      "lineNbr": 19,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-05-04T22:26:33Z",
      "side": 1,
      "message": "It does not change the behavior.\nPreviously, if \u0027buildtype\u003ddebug\u0027, it also enables logging and it uses the coded level (i.e. debug level)\n\nPrevious meson.build:\n\n```\nif( get_option(\u0027bmcweb-logging\u0027).enabled() or \\\n    get_option(\u0027buildtype\u0027).startswith(\u0027debug\u0027))\n add_project_arguments([\n   \u0027-DBMCWEB_ENABLE_LOGGING\u0027,\n   \u0027-DBMCWEB_ENABLE_DEBUG\u0027\n   ],\n\n\nsrc/webserver_main.cpp:\n\nstatic int run()\n{\n    crow::Logger::setLogLevel(crow::LogLevel::Debug);\n...\n}\n\n```\n\nWhat I\u0027ll do is to separate those options but set logging level as min. of \u0027debug\u0027 under buildtype\u003ddebug like\n\n```\n# Logging level\nloglvlopt \u003d get_option(\u0027bmcweb-logging\u0027)\nif get_option(\u0027buildtype\u0027).startswith(\u0027debug\u0027) and loglvlopt \u003d\u003d \u0027disabled\u0027\n   # Override logging level as \u0027debug\u0027 if \u0027bmcweb-logging\u0027 is set as \u0027dsiabled\u0027\n   loglvlopt \u003d \u0027debug\u0027\nendif\nconf_data.set(\u0027BMCWEB_LOGGING_LEVEL\u0027, loglvlopt)\n```",
      "parentUuid": "3f888ed5_3d210cba",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 13
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "516d9608_4c677630",
        "filename": "config/meson.build",
        "patchSetId": 43
      },
      "lineNbr": 27,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-03T21:22:43Z",
      "side": 1,
      "message": "Does it make more sense to put this map in a constexpr function, and just have this code write the string?  THis seems like it\u0027s mixing code with configure logic.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 27,
        "endChar": 3
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2969b3f5_e2aa0726",
        "filename": "config/meson.build",
        "patchSetId": 43
      },
      "lineNbr": 27,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-05-04T22:26:33Z",
      "side": 1,
      "message": "Changed to pass logging level string directly and the code will convert the string to log level (constexpr) using std::array\u003c\u003e.\nNote: constexpr std::map is not yet to be supported in c++20.",
      "parentUuid": "516d9608_4c677630",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 27,
        "endChar": 3
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d56dc7c4_0dddc59e",
        "filename": "config/meson.build",
        "patchSetId": 43
      },
      "lineNbr": 33,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-03T21:22:43Z",
      "side": 1,
      "message": "Missing else here?  should be raising an error if the map entry doesnt exist.",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 7
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64b4e3de_a2f728c2",
        "filename": "config/meson.build",
        "patchSetId": 43
      },
      "lineNbr": 33,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-05-04T22:26:33Z",
      "side": 1,
      "message": "Fixed",
      "parentUuid": "d56dc7c4_0dddc59e",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 7
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63050706_c221d0bd",
        "filename": "http/logging.hpp",
        "patchSetId": 43
      },
      "lineNbr": 48,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-03T21:22:43Z",
      "side": 1,
      "message": "Why was this added?",
      "range": {
        "startLine": 48,
        "startChar": 47,
        "endLine": 48,
        "endChar": 52
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "517bcd91_49398c1d",
        "filename": "http/logging.hpp",
        "patchSetId": 43
      },
      "lineNbr": 48,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-05-04T22:26:33Z",
      "side": 1,
      "message": "Fixed.  In fact, levelIn would not be needed.",
      "parentUuid": "63050706_c221d0bd",
      "range": {
        "startLine": 48,
        "startChar": 47,
        "endLine": 48,
        "endChar": 52
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a64e3e04_b1db8746",
        "filename": "http/logging.hpp",
        "patchSetId": 43
      },
      "lineNbr": 51,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-03T21:22:43Z",
      "side": 1,
      "message": "Pretty sure this needs to be if constexpr so the code gets deleted.",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 51,
        "endChar": 11
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6787968_3e5a928b",
        "filename": "http/logging.hpp",
        "patchSetId": 43
      },
      "lineNbr": 51,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-05-04T22:26:33Z",
      "side": 1,
      "message": "The previous code saves log level as a member variable and then it is used to check again in Logger destructor.\n\nBut, as you pointed out, the \u0027log level\u0027 is not needed into the class, as Logger will be compiled into the binary only if needed based on the caller\u0027s side.\n\nSo, it will be like:\n\n```\n    Logger([[maybe_unused]] const std::string\u0026 prefix,\n           [[maybe_unused]] const std::string\u0026 filename,\n           [[maybe_unused]] const size_t line)\n     {\n           stringstream \u003c\u003c ....;\n     }\n     \n    ~Logger()\n    {\n           stringstream \u003c\u003c std::endl;\n           std::cerr \u003c\u003c stringstream.str();\n    }\n    \n    template \u003ctypename T\u003e\n    Logger\u0026 operator\u003c\u003c([[maybe_unused]] T const\u0026 value)\n    {\n        // Somewhere in the code we\u0027re implicitly casting an array to a\n        // pointer in logging code. It\u0027s non-trivial to find,\n        // so disable the check here for now\n        // NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-array-to-pointer-decay)\n        stringstream \u003c\u003c value;\n        return *this;\n    }\n    \n    And then\n    \n    #define BMCWEB_LOG_CRITICAL                                                \\\n    if constexpr (crow::Logger::checkLoggingLevel(crow::LogLevel::Critical))   \\\n    crow::Logger(\"CRITICAL\", __FILE__, __LINE__)\n\n    \n```",
      "parentUuid": "a64e3e04_b1db8746",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 51,
        "endChar": 11
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e90a6942_5d078767",
        "filename": "meson.build",
        "patchSetId": 43
      },
      "lineNbr": 204,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-03T21:22:43Z",
      "side": 1,
      "message": "Doesn\u0027t this need removed now?",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 204,
        "endChar": 29
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f870c04_20ae1bb6",
        "filename": "meson.build",
        "patchSetId": 43
      },
      "lineNbr": 204,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-05-04T22:26:33Z",
      "side": 1,
      "message": "Removed",
      "parentUuid": "e90a6942_5d078767",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 204,
        "endChar": 29
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f267c0dd_f0fd575c",
        "filename": "meson_options.txt",
        "patchSetId": 43
      },
      "lineNbr": 59,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-03T21:22:43Z",
      "side": 1,
      "message": "unrelated change?",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 59,
        "endChar": 42
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8cfdd83c_5e4bd81e",
        "filename": "meson_options.txt",
        "patchSetId": 43
      },
      "lineNbr": 59,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-05-04T22:26:33Z",
      "side": 1,
      "message": "Sorry. Fixed",
      "parentUuid": "f267c0dd_f0fd575c",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 59,
        "endChar": 42
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "066e16f6_404b6967",
        "filename": "meson_options.txt",
        "patchSetId": 43
      },
      "lineNbr": 133,
      "author": {
        "id": 1001634
      },
      "writtenOn": "2023-05-03T18:44:46Z",
      "side": 1,
      "message": "How do we see critical, error logs if the default is disabled. Is that correct default?",
      "range": {
        "startLine": 133,
        "startChar": 12,
        "endLine": 133,
        "endChar": 20
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfc16c56_d35455f2",
        "filename": "meson_options.txt",
        "patchSetId": 43
      },
      "lineNbr": 133,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-05-03T18:52:50Z",
      "side": 1,
      "message": "The existing default is \"disabled\".  Keeping that way minimizes message spam.\n\nYou have to specify it as a compiler option.  Adding this to your bbappend will enable logging only critical and error messages:\n\nEXTRA_OEMESON:append \u003d \" \\\n     -Dbmcweb-logging\u003derror \\\n\"",
      "parentUuid": "066e16f6_404b6967",
      "range": {
        "startLine": 133,
        "startChar": 12,
        "endLine": 133,
        "endChar": 20
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65667f8e_bc2c868f",
        "filename": "meson_options.txt",
        "patchSetId": 43
      },
      "lineNbr": 133,
      "author": {
        "id": 1001634
      },
      "writtenOn": "2023-05-03T19:14:37Z",
      "side": 1,
      "message": "Make sense. Thanks! Myung, Do we need to change these recipes?",
      "parentUuid": "dfc16c56_d35455f2",
      "range": {
        "startLine": 133,
        "startChar": 12,
        "endLine": 133,
        "endChar": 20
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ae722a2_e9ced0e7",
        "filename": "meson_options.txt",
        "patchSetId": 43
      },
      "lineNbr": 133,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-05-03T20:10:26Z",
      "side": 1,
      "message": "Carson, thanks for he response.\n\nNinad,\nYes, the exploiter needs to set the appropriate level in the recipes.",
      "parentUuid": "65667f8e_bc2c868f",
      "range": {
        "startLine": 133,
        "startChar": 12,
        "endLine": 133,
        "endChar": 20
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5613058_a4196a8f",
        "filename": "meson_options.txt",
        "patchSetId": 43
      },
      "lineNbr": 133,
      "author": {
        "id": 1001634
      },
      "writtenOn": "2023-05-05T14:16:15Z",
      "side": 1,
      "message": "No, I am worried that we are changing the default. Today by default there is no entry in the recipe so it will go with default from the bmcweb and the bmcweb default is disabled so we will stop seeing errors and critical messages. Is that true?",
      "parentUuid": "8ae722a2_e9ced0e7",
      "range": {
        "startLine": 133,
        "startChar": 12,
        "endLine": 133,
        "endChar": 20
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "877232ed_1122498a",
        "filename": "meson_options.txt",
        "patchSetId": 43
      },
      "lineNbr": 133,
      "author": {
        "id": 1001634
      },
      "writtenOn": "2023-05-05T15:02:13Z",
      "side": 1,
      "message": "I think we need to make recipe change first otherwise we will loose the critical error messages.",
      "parentUuid": "a5613058_a4196a8f",
      "range": {
        "startLine": 133,
        "startChar": 12,
        "endLine": 133,
        "endChar": 20
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a379748a_c2ca30a6",
        "filename": "meson_options.txt",
        "patchSetId": 43
      },
      "lineNbr": 133,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-05-05T15:04:11Z",
      "side": 1,
      "message": "Yes, that\u0027s true.\nIn upstream, the default is disabled if logging-level is not specified in recipe.\nIf the other level is needed, it needs to be specified in the recipe.\n\n(Just for the reference, ibm-openbmc/bmcweb currently modifies src/webserver_main.cpp to set it as \u0027error\u0027. But in the future, it can be done via recipe)",
      "parentUuid": "a5613058_a4196a8f",
      "range": {
        "startLine": 133,
        "startChar": 12,
        "endLine": 133,
        "endChar": 20
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4cd09d73_d72c3b5c",
        "filename": "meson_options.txt",
        "patchSetId": 43
      },
      "lineNbr": 133,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-05-05T15:19:22Z",
      "side": 1,
      "message": "Just for the clarification, in upstream, error/critical messages are also disabled by default.\n\nThis commit does not change the default behavior (i.e.  it remains as \u0027disabled\u0027).\n\nIt is up to downstream which logging levels are to be enabled.",
      "parentUuid": "a379748a_c2ca30a6",
      "range": {
        "startLine": 133,
        "startChar": 12,
        "endLine": 133,
        "endChar": 20
      },
      "revId": "ff66cbed60271aff5e603cec4bf5eb740b6efccc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
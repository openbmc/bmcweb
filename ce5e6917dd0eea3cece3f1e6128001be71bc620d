{
  "comments": [
    {
      "key": {
        "uuid": "37564110_b3cc8907",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-07T19:40:21Z",
      "side": 1,
      "message": "This type is only used in one place.  Please inline into the scope it\u0027s used.",
      "range": {
        "startLine": 31,
        "startChar": 6,
        "endLine": 31,
        "endChar": 24
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44024bae_49960b85",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-07T19:40:21Z",
      "side": 1,
      "message": "flat-map is not requried here, as the key lookup is never used.  Please use std::vector\u003cstd::pair\u003c instead.",
      "range": {
        "startLine": 31,
        "startChar": 45,
        "endLine": 31,
        "endChar": 53
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "270dcc6a_d71df72b",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2021-01-08T10:39:18Z",
      "side": 1,
      "message": "The key look up is being used in line no. 423",
      "parentUuid": "44024bae_49960b85",
      "range": {
        "startLine": 31,
        "startChar": 45,
        "endLine": 31,
        "endChar": 53
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9a7590c_9008050e",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2021-01-08T10:39:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "37564110_b3cc8907",
      "range": {
        "startLine": 31,
        "startChar": 6,
        "endLine": 31,
        "endChar": 24
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d19fc8d_575eb28f",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 402,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-07T19:40:21Z",
      "side": 1,
      "message": "string copy.  Please avoid.",
      "range": {
        "startLine": 402,
        "startChar": 0,
        "endLine": 402,
        "endChar": 50
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a16b9b31_f4fe12e2",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 402,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2021-01-08T10:39:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8d19fc8d_575eb28f",
      "range": {
        "startLine": 402,
        "startChar": 0,
        "endLine": 402,
        "endChar": 50
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f30021c6_736cca6e",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 404,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-07T19:40:21Z",
      "side": 1,
      "message": "String copy, please avoid.",
      "range": {
        "startLine": 403,
        "startChar": 0,
        "endLine": 404,
        "endChar": 64
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fd9a691_e046235a",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 404,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2021-01-08T10:39:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f30021c6_736cca6e",
      "range": {
        "startLine": 403,
        "startChar": 0,
        "endLine": 404,
        "endChar": 64
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcdf720c_058a213b",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 407,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-07T19:40:21Z",
      "side": 1,
      "message": "Please use emplace here here, and construct in place.  Example of constructing a std::pair in place here:\nhttps://stackoverflow.com/questions/55831362/construct-stdpair-in-place-in-vectoremplace-back",
      "range": {
        "startLine": 405,
        "startChar": 20,
        "endLine": 407,
        "endChar": 78
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a583ea1_b5bc863d",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 407,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2021-01-08T10:39:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "bcdf720c_058a213b",
      "range": {
        "startLine": 405,
        "startChar": 20,
        "endLine": 407,
        "endChar": 78
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14d71dee_522f9533",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 422,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-07T19:40:21Z",
      "side": 1,
      "message": "attrName not being allowed to be empty makes sense, but that validation should be handled in the bios daemon.  attrValue can be empty though, right?",
      "range": {
        "startLine": 415,
        "startChar": 0,
        "endLine": 422,
        "endChar": 21
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44b36ef5_e2203a5f",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 422,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2021-01-08T10:39:18Z",
      "side": 1,
      "message": "(Only attribute name check can be done here and the validation should be left to the backend) - Ack",
      "parentUuid": "14d71dee_522f9533",
      "range": {
        "startLine": 415,
        "startChar": 0,
        "endLine": 422,
        "endChar": 21
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e9f4020_84608146",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 422,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-11T07:00:42Z",
      "side": 1,
      "message": "Reading again, why is either check required?",
      "parentUuid": "44b36ef5_e2203a5f",
      "range": {
        "startLine": 415,
        "startChar": 0,
        "endLine": 422,
        "endChar": 21
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed163e2c_c1ddf4ee",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 422,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2021-01-11T11:25:19Z",
      "side": 1,
      "message": "I missed this in PS10. Have updated it in the latest PS (11)",
      "parentUuid": "8e9f4020_84608146",
      "range": {
        "startLine": 415,
        "startChar": 0,
        "endLine": 422,
        "endChar": 21
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89d9d56a_b8816862",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 441,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-07T19:34:21Z",
      "side": 1,
      "message": "Can this be done at the upper level scope?  Nothing in this loop requires anything from the callback return, so I suspect it can be moved up, and we can simply capture pendingAttributes, instead of capturing the entire json object in the lambda.",
      "range": {
        "startLine": 409,
        "startChar": 0,
        "endLine": 441,
        "endChar": 17
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aabc14c4_76eccf3c",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 441,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2021-01-08T10:39:18Z",
      "side": 1,
      "message": "Sorry, Ed. Am not getting it here.\n\nWe have the first lambda - to get the base bios table, where we populate the map with attributes name and their types.\n\nOnce done, keys in the attrsJson would be looked up in the map to get their corresponding types which would then be emplaced back to pendingAttributes obj. So, this requires attrsJson to be captured in this lambda. Do you see that I am missing something here?",
      "parentUuid": "89d9d56a_b8816862",
      "range": {
        "startLine": 409,
        "startChar": 0,
        "endLine": 441,
        "endChar": 17
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1be1aca3_1ce14970",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 441,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-11T07:00:42Z",
      "side": 1,
      "message": "Ah, I missed part of that in my reading.  Why does the BIOS API require two calls to set an attribute and lookup the type?  Shouldn\u0027t we already know the type from the json, and can\u0027t the API itself be typeless?  Can it be simplified to only require one?\n\nThis kind of API (check some attribute to build request) is somewhat an anti-pattern, and complicates the API.",
      "parentUuid": "aabc14c4_76eccf3c",
      "range": {
        "startLine": 409,
        "startChar": 0,
        "endLine": 441,
        "endChar": 17
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46c2685a_8adb1bc8",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 441,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2021-01-11T11:25:19Z",
      "side": 1,
      "message": "\u003e Why does the BIOS API require two calls to set an attribute and lookup the type?\n\u003eand can\u0027t the API itself be typeless?\nI think the patchset 10 has created a confusion. The API now is typeless. (My latest PS 11 changes) So I am having two calls i) to populate the map of attr names to their types; ii) set the pending attributes",
      "parentUuid": "1be1aca3_1ce14970",
      "range": {
        "startLine": 409,
        "startChar": 0,
        "endLine": 441,
        "endChar": 17
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9c185ba_8abf1d6b",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 441,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-27T16:19:12Z",
      "side": 1,
      "message": "Why do we need to populate a map at all?  Why can\u0027t we just call set directly?",
      "parentUuid": "46c2685a_8adb1bc8",
      "range": {
        "startLine": 409,
        "startChar": 0,
        "endLine": 441,
        "endChar": 17
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf3199b2_a2ce5df0",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 441,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2021-01-28T04:39:39Z",
      "side": 1,
      "message": "The backend dbus call to set the pending attributes has the signature a{s(sv)}.\nIt calls for {attribute name \u003d\u003e attribute type and value}. So to get the attribute type, the idea was, if we have a map of all the attribute names and its corresponding types, we could directly get it from there.",
      "parentUuid": "d9c185ba_8abf1d6b",
      "range": {
        "startLine": 409,
        "startChar": 0,
        "endLine": 441,
        "endChar": 17
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9ff0245_32b42b9a",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 441,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-10T18:19:03Z",
      "side": 1,
      "message": "That sounds like a dbus api that needs reworked.  Having a type implicit in the set call requires exactly this code you\u0027ve written, which is quite complex and error prone.  Normally an API like this would simply enumerate the various properties, with the appropriate types as properties individually, not as one super dictionary, especially not as a super dictionary that ignored the dbus typing system.\n\nAlternatively, you could add a \"AddPendingChange\" method which takes a key and value pair, and puts this complexity into the bios manager daemon.\n\nIt should also be noted that looking at this API, there\u0027s no way to add pending attributes without effecting the previously added pending attributes.  That seems like an issue.\n\nAs written, I don\u0027t want to be doing two calls for this type of operation.  It adds code and imposes extra conditions in Redfish, which should be a simple json-\u003edbus call converter.",
      "parentUuid": "bf3199b2_a2ce5df0",
      "range": {
        "startLine": 409,
        "startChar": 0,
        "endLine": 441,
        "endChar": 17
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dbdcc01_9d5d2c4a",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 441,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2021-02-12T07:10:49Z",
      "side": 1,
      "message": "\u003e Alternatively, you could add a \"AddPendingChange\" method which takes a key and value pair, and puts this complexity into the bios manager daemon.\n\nAgree.\n@Ratan Do you have any thoughts here?\n\n\n\u003e It should also be noted that looking at this API, there\u0027s no way to add pending attributes without effecting the previously added pending attributes.  That seems like an issue.\n\nYes, Ed. This would override the previous values in the pending attributes and then get pushed to the Bios table.\n\n\n\u003e As written, I don\u0027t want to be doing two calls for this type of operation.  It adds code and imposes extra conditions in Redfish, which should be a simple json-\u003edbus call converter.\n\nAck.",
      "parentUuid": "c9ff0245_32b42b9a",
      "range": {
        "startLine": 409,
        "startChar": 0,
        "endLine": 441,
        "endChar": 17
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60b253e3_cd909f67",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 441,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2021-02-15T10:29:03Z",
      "side": 1,
      "message": "\u003e Alternatively, you could add a \"AddPendingChange\" method which takes a key and value pair, and puts this complexity into the bios manager daemon.\n\nEd, We already have the following API in the Dbus Backend.\nhttps://github.com/openbmc/bios-settings-mgr/blob/master/src/manager.cpp#L33\n\nBut with this Dbus API we have to make multiple D-bus calls for multiple properties. \n\nAre you fine to have multiple D-bus calls for patching of multiple BIOS attributes?\n\nOr\n\nAre you suggesting that we should have setAttributes which have the following signature.\n\nvoid Manager::setAttributes(std::vector\u003cAttributeName , AttributeValue\u003e) -\u003e with this API caller doesn\u0027t bother about the type checking and multiple attributes can be set in one D-bus call.",
      "parentUuid": "2dbdcc01_9d5d2c4a",
      "range": {
        "startLine": 409,
        "startChar": 0,
        "endLine": 441,
        "endChar": 17
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64bb760a_bb1efb10",
        "filename": "redfish-core/lib/bios.hpp",
        "patchSetId": 10
      },
      "lineNbr": 441,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2021-02-15T10:34:01Z",
      "side": 1,
      "message": "\u003e It should also be noted that looking at this API, there\u0027s no way to add pending attributes without effecting the previously added pending attributes.  That seems like an issue\n\nNo, This is not an issue as during changing of the pending attributes properties, it changes the value of the existing BIOS attribute if exist otherwise it adds the BIOS attribute which is not there in the pending attributes.\n\nhttps://github.com/openbmc/bios-settings-mgr/blob/master/src/manager.cpp#L282",
      "parentUuid": "60b253e3_cd909f67",
      "range": {
        "startLine": 409,
        "startChar": 0,
        "endLine": 441,
        "endChar": 17
      },
      "revId": "ce5e6917dd0eea3cece3f1e6128001be71bc620d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e09fc928_ed816c86",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T18:21:59Z",
      "side": 1,
      "message": "Looking really good here.\n",
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "000dd393_cfa031d6",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 246,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T18:21:59Z",
      "side": 1,
      "message": "Similar to how we handle this in the server connection class, should this just be a member variable rather than constructing it from stack?  That seems like it would make more optimal use of memory.",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 246,
        "endChar": 29
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d817420_680e2f53",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 246,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T19:26:40Z",
      "side": 1,
      "message": "That shouldn\u0027t cause any issues.  I\u0027ve made the change.",
      "parentUuid": "000dd393_cfa031d6",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 246,
        "endChar": 29
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10584a29_dacf1908",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 247,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T18:21:59Z",
      "side": 1,
      "message": "This is making a complete copy of the response object, I suspect you want release() instead of get() here.",
      "range": {
        "startLine": 247,
        "startChar": 0,
        "endLine": 247,
        "endChar": 57
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b66b03b_26cd6aca",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 247,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T19:26:40Z",
      "side": 1,
      "message": "I made the swap to release()",
      "parentUuid": "10584a29_dacf1908",
      "range": {
        "startLine": 247,
        "startChar": 0,
        "endLine": 247,
        "endChar": 57
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48edc634_5923a483",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 248,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T18:21:59Z",
      "side": 1,
      "message": "This isn\u0027t the right check.  Per http, you need to be checking the content-type header to determine if this is intended to be parsed as json or not.",
      "range": {
        "startLine": 248,
        "startChar": 21,
        "endLine": 248,
        "endChar": 55
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c06eb91a_cbd8d73b",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 248,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-10T01:32:30Z",
      "side": 1,
      "message": "Actually, is there a reason to parse the body as a json here?  I thought it was needed for AsyncResp to actually generate the response when destroyed.  However, it looks like jsonValue is only used in generating the actual response when Asyncresp\u0027s res.body() is empty and needs to be constructed from res.jsonValue.\n\nI know in the future I\u0027ll want to parse certain responses as jsons. In Redfish Aggregation I\u0027ll need to do that in order to fixup links in responses from satellite BMCs, but that\u0027s not currently needed by EventService.  Is it alright to leave this for a later patch?",
      "parentUuid": "48edc634_5923a483",
      "range": {
        "startLine": 248,
        "startChar": 21,
        "endLine": 248,
        "endChar": 55
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03d5b0f2_6556f271",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 248,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-12T17:33:50Z",
      "side": 1,
      "message": "\u003e Actually, is there a reason to parse the body as a json here?\n\nNot really IMO.\n\n\n\u003e  I thought it was needed for AsyncResp to actually generate the response when destroyed.  However, it looks like jsonValue is only used in generating the actual response when Asyncresp\u0027s res.body() is empty and needs to be constructed from res.jsonValue.\n\nYep, I think you have that right.\n\n\u003e \n\u003e I know in the future I\u0027ll want to parse certain responses as jsons. In Redfish Aggregation I\u0027ll need to do that in order to fixup links in responses from satellite BMCs, but that\u0027s not currently needed by EventService.  Is it alright to leave this for a later patch?\n\nThe actual parsing, sure.",
      "parentUuid": "c06eb91a_cbd8d73b",
      "range": {
        "startLine": 248,
        "startChar": 21,
        "endLine": 248,
        "endChar": 55
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86cae446_85cff06f",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 248,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-16T20:15:53Z",
      "side": 1,
      "message": "Sounds good, I have removed this json parsing and will leave it to a future patch.",
      "parentUuid": "03d5b0f2_6556f271",
      "range": {
        "startLine": 248,
        "startChar": 21,
        "endLine": 248,
        "endChar": 55
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d799bfb_67cf61d7",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 251,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T18:21:59Z",
      "side": 1,
      "message": "This function is called out by name as throwing an exception, and you haven\u0027t handled exceptions or errors here;  You need to set argument 3 to false, then check the resulting value against is_discarded();  If the json fails to parse, you need to return an error code to the user.",
      "range": {
        "startLine": 251,
        "startChar": 24,
        "endLine": 251,
        "endChar": 45
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99411a3b_7f48a83a",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 251,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-10T01:32:30Z",
      "side": 1,
      "message": "My bad on missing that.  I will handle this properly, but as noted in an earlier comment I am would like to push potential json parsing of received responses to a later patch.  That parsing would only need to occur for Redfish Aggregation specific processes like link fixup rather than being performed on for all received responses.  I think in that case it would be more appropriate to move it within the callback function that would be provided by the Aggregator.",
      "parentUuid": "9d799bfb_67cf61d7",
      "range": {
        "startLine": 251,
        "startChar": 24,
        "endLine": 251,
        "endChar": 45
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4205cd1_35ef4b63",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 251,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-12T17:33:50Z",
      "side": 1,
      "message": "\u003e My bad on missing that.  I will handle this properly, but as noted in an earlier comment I am would like to push potential json parsing of received responses to a later patch.\n\nFine by me, and as a pattern (Splitting up patches into sections of features) is a good thing to do.\n\n\u003e  That parsing would only need to occur for Redfish Aggregation specific processes like link fixup rather than being performed on for all received responses.  I think in that case it would be more appropriate to move it within the callback function that would be provided by the Aggregator.\n\n\n\nSounds good.",
      "parentUuid": "99411a3b_7f48a83a",
      "range": {
        "startLine": 251,
        "startChar": 24,
        "endLine": 251,
        "endChar": 45
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8fddc1e_7c0fa949",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 251,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-16T20:15:53Z",
      "side": 1,
      "message": "I\u0027ve removed the parsing from this patch",
      "parentUuid": "f4205cd1_35ef4b63",
      "range": {
        "startLine": 251,
        "startChar": 24,
        "endLine": 251,
        "endChar": 45
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "797e9e64_f4f959e4",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 264,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T18:21:59Z",
      "side": 1,
      "message": "I see what you\u0027re trying to do here, but I struggle with this, because when you do this, there\u0027s no way to differentiate between \"The other server returned 500\" and \"http client ran out of retries\".\n\nI suspect we should be returning something like 502, bad gateway here?",
      "range": {
        "startLine": 264,
        "startChar": 0,
        "endLine": 264,
        "endChar": 50
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef5e66fd_8661fb2a",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 264,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T19:26:40Z",
      "side": 1,
      "message": "That\u0027s a fair point, I\u0027m good with returning 502 here.  I didn\u0027t see an internalError() equivalent for a 502 so I just directly set res.result as bad_gateway.  Is that alright or is there a preferred method I should use?\n\nOn a related note, I suspect that later we\u0027ll want to directly return certain non-200 codes from the other server rather than retrying until we hit the max number of retries and return a 502.  I do this for 404 in a later patch and I\u0027m sure there will be others come up as Redfish Aggregation is implemented.",
      "parentUuid": "797e9e64_f4f959e4",
      "range": {
        "startLine": 264,
        "startChar": 0,
        "endLine": 264,
        "endChar": 50
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f295b7a6_89c93e09",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 264,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-12T17:33:50Z",
      "side": 1,
      "message": "\u003e That\u0027s a fair point, I\u0027m good with returning 502 here.  I didn\u0027t see an internalError() equivalent for a 502 so I just directly set res.result as bad_gateway.  Is that alright or is there a preferred method I should use?\n\nThe one that looks right to me is OperationFailed.  The description for it is:\n\n\"Indicates that one of the internal operations necessary to complete the request failed.  Examples of this are when an internal service provider is unable to complete the request, such as in aggregation or RDE.\"\n\nWhich sounds like exactly what we\u0027re trying to do here.\n\n\u003e \n\u003e On a related note, I suspect that later we\u0027ll want to directly return certain non-200 codes from the other server rather than retrying until we hit the max number of retries and return a 502.  I do this for 404 in a later patch and I\u0027m sure there will be others come up as Redfish Aggregation is implemented.\n\n\nAgreed, we\u0027ll want to eventually forward errors from the aggregated instance, that\u0027s why my original comment is important, so we can differentiate between \"The server we were talking to returned 500\" and \"the server we\u0027re talking to timed out\"",
      "parentUuid": "ef5e66fd_8661fb2a",
      "range": {
        "startLine": 264,
        "startChar": 0,
        "endLine": 264,
        "endChar": 50
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2020bbaf_8473401e",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 264,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-16T20:15:53Z",
      "side": 1,
      "message": "\u003e The one that looks right to me is OperationFailed\n\nI couldn\u0027t just call redfish::messages::operationFailed() since that would also set the error code as a 500, and overwriting the 500 with 502 seemed redundant.  I also couldn\u0027t individually set the result and message here because addMessageToErrorJson() is static.\n\nInstead I added a new function to \"redfish-core/include/error_messages.hpp\" and \"redfish-core/src/error_messages.cpp\" which combines the 502 result with the OperationFailed message.",
      "parentUuid": "f295b7a6_89c93e09",
      "range": {
        "startLine": 264,
        "startChar": 0,
        "endLine": 264,
        "endChar": 50
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2becc12e_86b3dfc8",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T18:21:59Z",
      "side": 1,
      "message": "nit, please make the callback const.  we don\u0027t expect the user to be modifying response after this point.",
      "range": {
        "startLine": 392,
        "startChar": 66,
        "endLine": 392,
        "endChar": 74
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a405856_cb4cc20c",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T19:26:40Z",
      "side": 1,
      "message": "I changed it so that \"Response\u0026\" is now \"const Response\u0026\" in all callback instances.  I also had to add const to Response.resultInt() so that it could still be called in the dummy callback\u0027s debug message.",
      "parentUuid": "2becc12e_86b3dfc8",
      "range": {
        "startLine": 392,
        "startChar": 66,
        "endLine": 392,
        "endChar": 74
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e73f2a85_5fd3e415",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-12T17:33:50Z",
      "side": 1,
      "message": "👍",
      "parentUuid": "1a405856_cb4cc20c",
      "range": {
        "startLine": 392,
        "startChar": 66,
        "endLine": 392,
        "endChar": 74
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8219772_f06e1ac3",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-16T23:16:40Z",
      "side": 1,
      "message": "I\u0027m reopening this due to removing the parsing from recvMessage().\n\nIn the callback the user might want to use std::move() to load res.stringResponse into an AsyncResp object or nlohmann::json::parse() to create a json.  Neither of those are usable with a \"const Response\".  Can I remove const to enable those operations or will that callback need to create a duplicate copy that can then be operated on?",
      "parentUuid": "e73f2a85_5fd3e415",
      "range": {
        "startLine": 392,
        "startChar": 66,
        "endLine": 392,
        "endChar": 74
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20df929b_e979912a",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 612,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T18:21:59Z",
      "side": 1,
      "message": "nit, can this just be a static method instead of a lambda?  MIght make this easier to read.",
      "range": {
        "startLine": 608,
        "startChar": 0,
        "endLine": 612,
        "endChar": 10
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a4a48c7_4fc0bfa6",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 612,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T19:26:40Z",
      "side": 1,
      "message": "No problem",
      "parentUuid": "20df929b_e979912a",
      "range": {
        "startLine": 608,
        "startChar": 0,
        "endLine": 612,
        "endChar": 10
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56c0547e_325c2f2b",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 620,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T18:21:59Z",
      "side": 1,
      "message": "Please give these different function names to avoid confusion.  maybe this new one is \"sendDataWithCallback\"?",
      "range": {
        "startLine": 620,
        "startChar": 9,
        "endLine": 620,
        "endChar": 17
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9216263_c5bf6daf",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 620,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T19:26:40Z",
      "side": 1,
      "message": "Alright I\u0027ve changed the name",
      "parentUuid": "56c0547e_325c2f2b",
      "range": {
        "startLine": 620,
        "startChar": 9,
        "endLine": 620,
        "endChar": 17
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebe296ee_c7f05d29",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 644,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T18:21:59Z",
      "side": 1,
      "message": "bind_front is redundant here, right?  There\u0027s nothing to bind?",
      "range": {
        "startLine": 644,
        "startChar": 38,
        "endLine": 644,
        "endChar": 54
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27344c67_cb605a9c",
        "filename": "http/http_client.hpp",
        "patchSetId": 13
      },
      "lineNbr": 644,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-09T19:26:40Z",
      "side": 1,
      "message": "I removed it",
      "parentUuid": "ebe296ee_c7f05d29",
      "range": {
        "startLine": 644,
        "startChar": 38,
        "endLine": 644,
        "endChar": 54
      },
      "revId": "3645e432d98ac387dbec08ccf389dda2a586948c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2ea9c3f2_94f57d99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-14T23:35:02Z",
      "side": 1,
      "message": "This patchset is definitely coming along!",
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a249eb24_c08bef39",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 2
      },
      "lineNbr": 448,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-14T23:35:02Z",
      "side": 1,
      "message": "Rather than making this a template, can we just explicitly call out the 6 types we need?\n\nuint64_t, int64_t, string, and pointer/optional equivalents, right?\n\nThat\u0027s going to prevent int16_t* from getting a different template expansion than int64_t*, which could be using the same code.",
      "range": {
        "startLine": 448,
        "startChar": 0,
        "endLine": 448,
        "endChar": 24
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8c481f4_f672ea5b",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 2
      },
      "lineNbr": 448,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-01-17T08:19:16Z",
      "side": 1,
      "message": "Sure I can do that.",
      "parentUuid": "a249eb24_c08bef39",
      "range": {
        "startLine": 448,
        "startChar": 0,
        "endLine": 448,
        "endChar": 24
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61ad9c44_9168fdeb",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 2
      },
      "lineNbr": 448,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-02-28T08:02:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d8c481f4_f672ea5b",
      "range": {
        "startLine": 448,
        "startChar": 0,
        "endLine": 448,
        "endChar": 24
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09533f95_16cf4a30",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 2
      },
      "lineNbr": 449,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-14T23:35:02Z",
      "side": 1,
      "message": "this helper has been proposed before.  The problem for me as a maintainer is that people use it blindly, and completely ignore the schema requirements for optionality and error codes.  As is, even when they\u0027re writing the code by hand, they still ignore the requiredness of parameters.  If a Redfish-schema required parameter isn\u0027t present, the request should 500.  Helper functions like this don\u0027t account for that.  I could maybe see it if there were also a counterpart like \"assignIfOrError\" so it explicitly made users select which one they had to use, and we had a common way for handling with error, and without error, but as written, I don\u0027t think this gets us there.\n\nFor example, I\u0027m pretty sure the std::is_pointer_v should be setting internal error, right?",
      "range": {
        "startLine": 449,
        "startChar": 0,
        "endLine": 449,
        "endChar": 76
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15058c63_8ad68273",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 2
      },
      "lineNbr": 449,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-01-17T08:19:16Z",
      "side": 1,
      "message": "This helper should be used together with unpackPropertiesNoThrow.\nunpackPropertiesNoThrow have some guarantees. If there is no error all pointers are set and valid. Optional can be empty, if optional\u003cconst T*\u003e is filled it contains valid pointer.",
      "parentUuid": "09533f95_16cf4a30",
      "range": {
        "startLine": 449,
        "startChar": 0,
        "endLine": 449,
        "endChar": 76
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db8d3e4e_ed177e16",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 2
      },
      "lineNbr": 449,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-25T18:51:43Z",
      "side": 1,
      "message": "My point still stands, regardless of the last sentence, as-written, this doesn\u0027t handle errors and isn\u0027t capable of returning 500 on bad parameters.  It looks like you fixed that in your latest patch.",
      "parentUuid": "15058c63_8ad68273",
      "range": {
        "startLine": 449,
        "startChar": 0,
        "endLine": 449,
        "endChar": 76
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec503508_3e310dcc",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 2
      },
      "lineNbr": 449,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-02-28T08:02:37Z",
      "side": 1,
      "message": "Yes, this change was removed from latest patchset.",
      "parentUuid": "db8d3e4e_ed177e16",
      "range": {
        "startLine": 449,
        "startChar": 0,
        "endLine": 449,
        "endChar": 76
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87cae3a5_cc0621af",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-14T23:35:02Z",
      "side": 1,
      "message": "nullptr dereference.  Pointer types aren\u0027t guaranteed to be filled.  FWIW, in my first reading of this, this template code is complex enough that I didn\u0027t catch that.  We need to refactor similar to the previous comment to make it more obvious when this is done wrong.",
      "range": {
        "startLine": 453,
        "startChar": 25,
        "endLine": 453,
        "endChar": 30
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "212a6d7b_47c78908",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-01-17T08:19:16Z",
      "side": 1,
      "message": "If used together with unpackPropertiesNoThrow pointers are guaranteed to be filled. I guess using this function can be confusing in case of pointers. I can split it and name it \u0027assign\u0027 to indicate that pointer needs to be valid.",
      "parentUuid": "87cae3a5_cc0621af",
      "range": {
        "startLine": 453,
        "startChar": 25,
        "endLine": 453,
        "endChar": 30
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "919f891d_08c8f444",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-25T18:51:43Z",
      "side": 1,
      "message": "\u003e If used together with unpackPropertiesNoThrow pointers are guaranteed to be filled.\n\nThe key word being \"If\".  Pointer safety should be guaranteed, and verifiable at the call site, not just if they\u0027re used the way the author intended.\n\n\u003e I guess using this function can be confusing in case of pointers. I can split it and name it \u0027assign\u0027 to indicate that pointer needs to be valid.",
      "parentUuid": "212a6d7b_47c78908",
      "range": {
        "startLine": 453,
        "startChar": 25,
        "endLine": 453,
        "endChar": 30
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4182d151_e3dabddf",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-02-28T08:02:37Z",
      "side": 1,
      "message": "I changed how unpackPropertiesNoThrow behaves. Now every pointer needs to be checked before using.",
      "parentUuid": "919f891d_08c8f444",
      "range": {
        "startLine": 453,
        "startChar": 25,
        "endLine": 453,
        "endChar": 30
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a397a549_8c84cfaf",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-28T19:13:01Z",
      "side": 1,
      "message": "ACK",
      "parentUuid": "4182d151_e3dabddf",
      "range": {
        "startLine": 453,
        "startChar": 25,
        "endLine": 453,
        "endChar": 30
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93753866_78f8a707",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 2
      },
      "lineNbr": 615,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-14T23:35:02Z",
      "side": 1,
      "message": "This is an example of the error I talked about above.  CertificateString is required in the Certificate interface, so if we don\u0027t get it, it should be an error.  Admittedly, we handle that poorly in the lefthand side code by just setting it to empty string, which passes the validator but is arguably wrong, but still more correct than this new code.",
      "range": {
        "startLine": 615,
        "startChar": 0,
        "endLine": 615,
        "endChar": 78
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b3c46ea_0e980d35",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 2
      },
      "lineNbr": 615,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-01-17T08:19:16Z",
      "side": 1,
      "message": "I just changed it to have same behavior. If this field is required then in line 596 it should be changed from optional\u003cconst std::string*\u003e to const std::string* then it is guaranteed that if unpackPropertiesNoThrow doesn\u0027t return error pointer is set.",
      "parentUuid": "93753866_78f8a707",
      "range": {
        "startLine": 615,
        "startChar": 0,
        "endLine": 615,
        "endChar": 78
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1d09429_9ed766a0",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 2
      },
      "lineNbr": 615,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-02-28T08:02:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9b3c46ea_0e980d35",
      "range": {
        "startLine": 615,
        "startChar": 0,
        "endLine": 615,
        "endChar": 78
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b61b72fc_212da39f",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 2
      },
      "lineNbr": 622,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-14T23:35:02Z",
      "side": 1,
      "message": "Possible nullptr dereference.  Per the rules, we need to be checking pointers for validity in the scope in which they\u0027re dereferenced.",
      "range": {
        "startLine": 622,
        "startChar": 48,
        "endLine": 622,
        "endChar": 50
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db032bf9_a2edbbec",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 2
      },
      "lineNbr": 622,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-01-17T08:19:16Z",
      "side": 1,
      "message": "It is guaranteed by unpackPropertiesNoThrow that it wont return nullptr in optional if no error is returned.",
      "parentUuid": "b61b72fc_212da39f",
      "range": {
        "startLine": 622,
        "startChar": 48,
        "endLine": 622,
        "endChar": 50
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1ab963c_e7183096",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 2
      },
      "lineNbr": 622,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-02-28T08:02:37Z",
      "side": 1,
      "message": "This is obsolete. In new version of unpackPropertiesNoThrow you need to check pointer before dereferencing.",
      "parentUuid": "db032bf9_a2edbbec",
      "range": {
        "startLine": 622,
        "startChar": 48,
        "endLine": 622,
        "endChar": 50
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b6cf478_1ffc2374",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-14T23:35:02Z",
      "side": 1,
      "message": "Nit, and not a problem with your patch, but this function doesn\u0027t need to take ownership of the Response, so it shouldn\u0027t be passed by shared_ptr, but by Response\u0026",
      "range": {
        "startLine": 143,
        "startChar": 32,
        "endLine": 143,
        "endChar": 48
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3adbb075_66019bed",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-01-17T08:19:16Z",
      "side": 1,
      "message": "I will fix it.",
      "parentUuid": "3b6cf478_1ffc2374",
      "range": {
        "startLine": 143,
        "startChar": 32,
        "endLine": 143,
        "endChar": 48
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c89ef00_0053bf23",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-02-28T08:02:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3adbb075_66019bed",
      "range": {
        "startLine": 143,
        "startChar": 32,
        "endLine": 143,
        "endChar": 48
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e72067c7_6ad37751",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-14T23:35:02Z",
      "side": 1,
      "message": "I\u0027d really rather this function do less, it looks like it\u0027s doing double duty for both setting a key, and converting kb to MB.\n\nAlso, isn\u0027t this technically bytes to MB?",
      "range": {
        "startLine": 153,
        "startChar": 12,
        "endLine": 153,
        "endChar": 24
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33a5481d_9a026705",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-01-17T08:19:16Z",
      "side": 1,
      "message": "I just assumed that if dbus property is named AllocationIncrementInKiB and redfish schema is AllocationIncrementMiB.\n\nI googled \u0027convert 1024 kib to mib\u0027 it seems to be correct unless I\u0027m mistaking something.",
      "parentUuid": "e72067c7_6ad37751",
      "range": {
        "startLine": 153,
        "startChar": 12,
        "endLine": 153,
        "endChar": 24
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe08d291_d842d6ca",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-02-28T08:02:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "33a5481d_9a026705",
      "range": {
        "startLine": 153,
        "startChar": 12,
        "endLine": 153,
        "endChar": 24
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1df6e22_78544c7b",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 164,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-14T23:35:02Z",
      "side": 1,
      "message": "This is the same issue as the first nit.  This function doesn\u0027t take ownership, so we shouldn\u0027t be passing by shared_ptr.  use Response\u0026 directly.",
      "range": {
        "startLine": 164,
        "startChar": 10,
        "endLine": 164,
        "endChar": 51
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "688eb923_fd1a0d51",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 164,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-02-28T08:02:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e1df6e22_78544c7b",
      "range": {
        "startLine": 164,
        "startChar": 10,
        "endLine": 164,
        "endChar": 51
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eed3c1d0_059c6afc",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-14T23:35:02Z",
      "side": 1,
      "message": "Looks like this patch got mixed up with a some other refactoring and cleanup?",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 171,
        "endChar": 1
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd29afca_fdf7b4fd",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-01-17T08:19:16Z",
      "side": 1,
      "message": "I can revert it back to how it was. I did this because this was small change that helped with this patch set (I needed to write less code).",
      "parentUuid": "eed3c1d0_059c6afc",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 171,
        "endChar": 1
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66608040_98c8994b",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-02-28T08:02:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "dd29afca_fdf7b4fd",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 171,
        "endChar": 1
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03af81c0_c4b83405",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-14T23:35:02Z",
      "side": 1,
      "message": "Generally we avoid declaring multiple variables of the same type on the same line, as it makes this code a lot harder to read.",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 178,
        "endChar": 45
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09ba369a_187d44be",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-01-17T08:19:16Z",
      "side": 1,
      "message": "I will fix it in final version.",
      "parentUuid": "03af81c0_c4b83405",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 178,
        "endChar": 45
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb6b15fd_a395bc7d",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-02-28T08:02:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "09ba369a_187d44be",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 178,
        "endChar": 45
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7af2ce46_07252129",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-14T23:35:02Z",
      "side": 1,
      "message": "Do we need to be printing more specifics here of which property failed to be read out?",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 216,
        "endChar": 44
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "701137fd_95311cc9",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-01-17T08:19:16Z",
      "side": 1,
      "message": "It\u0027s something that you suggested. To return index instead of std::string to decrease binary size. If you have suggestion how to print property name instead of index of property that failed without impact on binary size I can do that,",
      "parentUuid": "7af2ce46_07252129",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 216,
        "endChar": 44
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aaa0ae33_5a2d1ee5",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-25T18:51:43Z",
      "side": 1,
      "message": "printing is only enabled when logging is enabled, so the impact on binary size for logging is negligible so long as the compiler can delete the code when logging is disabled.",
      "parentUuid": "701137fd_95311cc9",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 216,
        "endChar": 44
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4447eb18_b33d21f6",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-02-28T08:02:37Z",
      "side": 1,
      "message": "Okay. I will do as suggested.",
      "parentUuid": "aaa0ae33_5a2d1ee5",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 216,
        "endChar": 44
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c43c5319_38bb02a4",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-02-28T15:05:04Z",
      "side": 1,
      "message": "I double checked it, compiler is not able to fully optimize \u0027error\u0027 variable which is returned from sdbusplus. Not matter if it\u0027s printed or not as long as we use to determine if error occurred it won\u0027t be optimized. So if index is used we can save some binary size. If we return std::string with name of property it will improve debug messages but we will have to pay for even if logs are dissabled.",
      "parentUuid": "4447eb18_b33d21f6",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 216,
        "endChar": 44
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55d8f34e_7e0ec5eb",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-28T19:13:01Z",
      "side": 1,
      "message": "FWIW, we hit this problem the last time we tried to implement a templatized unpack for property unpacking.  Given the amount of time we spend debugging minor property type problems (string type instead of object_path, uint32 instead of uint64), it would be really hard to lose this level of inspectability and logging.\n\nI wonder if there\u0027s a path to where you could pass in a \"on_error\" callback to the unpack call?  That way, when logging is disabled, on_error would optimize down to nothing, and if logging is enabled, we would get the behavior we want.\n\nJust thinking out loud.",
      "parentUuid": "c43c5319_38bb02a4",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 216,
        "endChar": 44
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "394a0005_ad873931",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-03-01T13:03:14Z",
      "side": 1,
      "message": "Detailed debug information is now available and callback helped with decreasing binary size. Check updated commit message for details.",
      "parentUuid": "55d8f34e_7e0ec5eb",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 216,
        "endChar": 44
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93fd42c0_21ec3949",
        "filename": "redfish-core/lib/storage.hpp",
        "patchSetId": 2
      },
      "lineNbr": 297,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-14T23:35:02Z",
      "side": 1,
      "message": "Looks like you didn\u0027t intend to add this?",
      "range": {
        "startLine": 297,
        "startChar": 63,
        "endLine": 297,
        "endChar": 64
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04593f19_5c0d2ad6",
        "filename": "redfish-core/lib/storage.hpp",
        "patchSetId": 2
      },
      "lineNbr": 297,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-01-17T08:19:16Z",
      "side": 1,
      "message": "Yes, I don\u0027t know how this happened.",
      "parentUuid": "93fd42c0_21ec3949",
      "range": {
        "startLine": 297,
        "startChar": 63,
        "endLine": 297,
        "endChar": 64
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65df3a24_b8d10602",
        "filename": "redfish-core/lib/storage.hpp",
        "patchSetId": 2
      },
      "lineNbr": 297,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-02-28T08:02:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "04593f19_5c0d2ad6",
      "range": {
        "startLine": 297,
        "startChar": 63,
        "endLine": 297,
        "endChar": 64
      },
      "revId": "8fb3eae1ba471192d6e84f695b40e09ebd19e125",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
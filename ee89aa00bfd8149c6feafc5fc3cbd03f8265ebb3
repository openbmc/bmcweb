{
  "comments": [
    {
      "key": {
        "uuid": "3b572b6c_c5ab55ca",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2021-08-04T19:29:42Z",
      "side": 1,
      "message": "Should we store the pointer gzgets returns and use std::distance to get the length rather than strlen? Will the string contain \u0027\\0\u0027?",
      "range": {
        "startLine": 53,
        "startChar": 8,
        "endLine": 53,
        "endChar": 11
      },
      "revId": "ee89aa00bfd8149c6feafc5fc3cbd03f8265ebb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "798a8010_491d3062",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2021-08-06T18:42:41Z",
      "side": 1,
      "message": "Any updates?",
      "parentUuid": "3b572b6c_c5ab55ca",
      "range": {
        "startLine": 53,
        "startChar": 8,
        "endLine": 53,
        "endChar": 11
      },
      "revId": "ee89aa00bfd8149c6feafc5fc3cbd03f8265ebb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a12ec1f5_cb0d9669",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-09T11:05:59Z",
      "side": 1,
      "message": "Here i use std::string::data() to catch so it will not contain \"\\0\". For the string length problem, because it will fill null character if there is no data, strlen() can help to filter the null character. If we use begin and end then to get std::distance, the return size will be still 8192 here(fill with null character). https://en.cppreference.com/w/cpp/string/byte/strlen",
      "parentUuid": "798a8010_491d3062",
      "range": {
        "startLine": 53,
        "startChar": 8,
        "endLine": 53,
        "endChar": 11
      },
      "revId": "ee89aa00bfd8149c6feafc5fc3cbd03f8265ebb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42a9780b_3eb58841",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2021-08-09T22:29:54Z",
      "side": 1,
      "message": "Talked to Ed offline. gzgets is not the proper API here since it requires the uncompressed buffer null-terminated. Ed found there\u0027s gzread which returns the length of read buffer explicitly. Please use it instead.\n\nhttps://refspecs.linuxbase.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/zlib-gzread-1.html",
      "parentUuid": "a12ec1f5_cb0d9669",
      "range": {
        "startLine": 53,
        "startChar": 8,
        "endLine": 53,
        "endChar": 11
      },
      "revId": "ee89aa00bfd8149c6feafc5fc3cbd03f8265ebb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99ba0e08_e157e84d",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-10T00:26:34Z",
      "side": 1,
      "message": "Yes, \"gzread\" gets the buffer length, but the return value means whole gz file size (eof has been reached). \"gzgets\" function here is trying to get a line from file (until a newline character has been uncompressed into buf), so strlen(buf.data() means length of a line, not whole gz file\u0027s length.",
      "parentUuid": "42a9780b_3eb58841",
      "range": {
        "startLine": 53,
        "startChar": 8,
        "endLine": 53,
        "endChar": 11
      },
      "revId": "ee89aa00bfd8149c6feafc5fc3cbd03f8265ebb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0555829c_62624c8a",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2021-08-10T17:06:01Z",
      "side": 1,
      "message": "Does gzgets handle \u0027\\0\u0027 in the uncompressed buffer? I believe gzgets assumes there\u0027s no \u0027\\0\u0027. \n\n\"gzread\" should return the size of data it reads, right? not necessarily the whole gz file size if the passed len is shorter than the entire size. We should use gzread since it returns the actual length of read data so we can resize our string. From there, we can then split the string by EOL.\n\nThe major issue here is the uncompressed buffer might have \u0027\\0\u0027. You strlen() won\u0027t give the the correct size. E.g. \"123\\0123\\0\" as a std::string is of length 8; strlen() will give you 3 I believe.",
      "parentUuid": "99ba0e08_e157e84d",
      "range": {
        "startLine": 53,
        "startChar": 8,
        "endLine": 53,
        "endChar": 11
      },
      "revId": "ee89aa00bfd8149c6feafc5fc3cbd03f8265ebb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c033161e_19c56894",
        "filename": "redfish-core/include/gzfile.hpp",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2021-08-12T10:17:02Z",
      "side": 1,
      "message": "I use gzread to rewrite the code. Use vector to store whole log entries from log files, and use std::vector::at to get the message. Please take a look, thanks!",
      "parentUuid": "0555829c_62624c8a",
      "range": {
        "startLine": 53,
        "startChar": 8,
        "endLine": 53,
        "endChar": 11
      },
      "revId": "ee89aa00bfd8149c6feafc5fc3cbd03f8265ebb3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}
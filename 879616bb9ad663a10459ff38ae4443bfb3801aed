{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ab04a7d6_a0a5eeee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-19T18:17:55Z",
      "side": 1,
      "message": "This needs more explaination.  The pattern here appears to be an old pattern that we used a long time ago (still used in sensors) but a pattern that we stopped using because it was very difficult to get correct, and relies on destructor behavior, which can cause issues on shutdown if a request is in flight when we receive SIGTERM.\n\nA little more details here would be good.",
      "range": {
        "startLine": 10,
        "startChar": 9,
        "endLine": 11,
        "endChar": 18
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85f80e33_bd2b6e67",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 11,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-21T18:44:46Z",
      "side": 1,
      "message": "The pattern here refers to using GetManagedObjects to handle `$expand\u003d*($levels\u003d1)`, rather than sending a bunch of GetAllProperties which is slow.\n\nI will add that into the commit message.",
      "parentUuid": "ab04a7d6_a0a5eeee",
      "range": {
        "startLine": 10,
        "startChar": 9,
        "endLine": 11,
        "endChar": 18
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da480782_e732339d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 36,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-19T18:17:55Z",
      "side": 1,
      "message": "What system did you test with that had a non ECC RDIMM.....   Was this tested on a real system?  It\u0027s possible there\u0027s another bug somewhere.",
      "range": {
        "startLine": 36,
        "startChar": 32,
        "endLine": 36,
        "endChar": 37
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da4e9e57_86c3b609",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 36,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-21T18:44:46Z",
      "side": 1,
      "message": "This data is from my mock systems. Does service validator validates $expand result today? \n\nI compared the $expand\u003d. JSON before and after this change, there is no difference. \n\nI also ran service validator on real system.",
      "parentUuid": "da480782_e732339d",
      "range": {
        "startLine": 36,
        "startChar": 32,
        "endLine": 36,
        "endChar": 37
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68503d77_9d336103",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 49,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-19T18:17:55Z",
      "side": 1,
      "message": "As you can see in your test results, the order is incorrect here.  In the non-efficient handler, dimm0 would\u0027ve come before dimm1.  Using the generic functions (getCollectionMembers) doesn\u0027t have this bug.  I suspect that you need to adapt your code to still use getCollectionMembers, but then call your efficient expand handlers when complete.",
      "range": {
        "startLine": 49,
        "startChar": 60,
        "endLine": 49,
        "endChar": 65
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37f416cf_aaf989eb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 49,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-22T05:21:34Z",
      "side": 1,
      "message": "Wait, is this a bug? Is there requirement on the order of the Members?",
      "parentUuid": "68503d77_9d336103",
      "range": {
        "startLine": 49,
        "startChar": 60,
        "endLine": 49,
        "endChar": 65
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bbecf96_43b58e6c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 49,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-22T05:23:04Z",
      "side": 1,
      "message": "FWIW, I can sort the json. That\u0027s what the sensor codes are doing IIRC.",
      "parentUuid": "37f416cf_aaf989eb",
      "range": {
        "startLine": 49,
        "startChar": 60,
        "endLine": 49,
        "endChar": 65
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45516432_70098c9f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-19T18:20:34Z",
      "side": 1,
      "message": "I didn\u0027t make it all the way through this patchset yet.",
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51f4a800_67bea296",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 836,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-19T18:17:55Z",
      "side": 1,
      "message": "As a pattern, having a per-schema defined AsyncResponse object is generally not a pattern we want to promote.  We still use it in the sensors case because nobody has ported it back, but I\u0027m not sure we want it here.  Generally the pattern is to capture AsyncResp, and append objects to the response object as required.",
      "range": {
        "startLine": 836,
        "startChar": 6,
        "endLine": 836,
        "endChar": 25
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f47771a1_085fda62",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 836,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-21T18:41:12Z",
      "side": 1,
      "message": "What we want is that after finishing DIMM async calls, we do several other async calls to modify the DIMM object and append some data (health, DIMM partitions).\n\nWhy is per-schema defined AsyncResponse object bad? It\u0027s not necessarily needed to be named as |XyzAsyncResponse|. It just needs to hold the original AsyncResponse and append data to its json.",
      "parentUuid": "51f4a800_67bea296",
      "range": {
        "startLine": 836,
        "startChar": 6,
        "endLine": 836,
        "endChar": 25
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da554ff1_4066622e",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 858,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-19T18:20:34Z",
      "side": 1,
      "message": "nit, typo.",
      "range": {
        "startLine": 858,
        "startChar": 49,
        "endLine": 858,
        "endChar": 58
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2531d1f9_6995afde",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 858,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-22T05:20:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da554ff1_4066622e",
      "range": {
        "startLine": 858,
        "startChar": 49,
        "endLine": 858,
        "endChar": 58
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06d9c1b2_fc5a69c0",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 959,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-19T18:20:34Z",
      "side": 1,
      "message": "common error 13",
      "range": {
        "startLine": 959,
        "startChar": 21,
        "endLine": 959,
        "endChar": 22
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c16d547f_a0043e01",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 959,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-22T05:20:22Z",
      "side": 1,
      "message": "It doesn\u0027t look like https://github.com/openbmc/bmcweb/blob/master/COMMON_ERRORS.md#13-complete-replacement-of-the-response-object.\n\nIf you refer to not populating ID when an error happens, done.",
      "parentUuid": "06d9c1b2_fc5a69c0",
      "range": {
        "startLine": 959,
        "startChar": 21,
        "endLine": 959,
        "endChar": 22
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce2c8b19_9b99c9de",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 960,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-19T18:20:34Z",
      "side": 1,
      "message": "please use urlFromPieces for constructing this url",
      "range": {
        "startLine": 960,
        "startChar": 39,
        "endLine": 960,
        "endChar": 60
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c11e2c00_6ea2c397",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 960,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-22T05:20:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce2c8b19_9b99c9de",
      "range": {
        "startLine": 960,
        "startChar": 39,
        "endLine": 960,
        "endChar": 60
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6140efc8_588b0432",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 966,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-19T18:20:34Z",
      "side": 1,
      "message": "Please don\u0027t duplicate this call (you duplicate it 3 times in this function).  Also, this function can fail, in which case you need to handle the error.",
      "range": {
        "startLine": 966,
        "startChar": 53,
        "endLine": 966,
        "endChar": 64
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58b53d79_64211d57",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 966,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-22T05:20:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6140efc8_588b0432",
      "range": {
        "startLine": 966,
        "startChar": 53,
        "endLine": 966,
        "endChar": 64
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bce3f05_21a0155a",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1222,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-19T18:17:55Z",
      "side": 1,
      "message": "nit, typo.",
      "range": {
        "startLine": 1222,
        "startChar": 54,
        "endLine": 1222,
        "endChar": 61
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5969642_4f064d9f",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1222,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-22T05:20:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5bce3f05_21a0155a",
      "range": {
        "startLine": 1222,
        "startChar": 54,
        "endLine": 1222,
        "endChar": 61
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e8ef91d_e4a9fcd1",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1223,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-19T18:17:55Z",
      "side": 1,
      "message": "Is there a reason none of the old code could be used in this case?  We\u0027re adding 300 lines of new things just for this case, and duplicating a lot of the dbus -\u003e json code, which has caused some bugs.",
      "range": {
        "startLine": 1223,
        "startChar": 12,
        "endLine": 1223,
        "endChar": 31
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4804f2d_fb41cd47",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1223,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-22T05:20:22Z",
      "side": 1,
      "message": "The reason why we can reuse codes in SensorCollection is that Thermal and Power are AutoExpand.\n\nMemoryCollection is not like this. Current codes only support sending GetAllProperties DBus call per DIMM. This commits add codes to use GetManagedObjects to fetch all DIMMs of the service. I have tried my best to reuse a lot of existing codes (e.g., assemble properties from dbus response). That\u0027s why I sent https://gerrit.openbmc.org/c/openbmc/bmcweb/+/53822, https://gerrit.openbmc.org/c/openbmc/bmcweb/+/53823/8, and https://gerrit.openbmc.org/c/openbmc/bmcweb/+/53944/2\n\nI also explained the main idea (use GetManagedObjects to improve performance) in the commit message.\n\nPlease reopen if you have better ideas.\n\nIf in the future more and more resources need this efficient handler. I can think of creating a general helper class (similar to today\u0027s getResourceCollection). But that\u0027s not what I want to do in this iteration.",
      "parentUuid": "8e8ef91d_e4a9fcd1",
      "range": {
        "startLine": 1223,
        "startChar": 12,
        "endLine": 1223,
        "endChar": 31
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b133525_8d5db88a",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1227,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-19T18:17:55Z",
      "side": 1,
      "message": "nit, typo.",
      "range": {
        "startLine": 1227,
        "startChar": 52,
        "endLine": 1227,
        "endChar": 59
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "167b253a_033bc891",
        "filename": "redfish-core/lib/memory.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1227,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-22T05:20:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b133525_8d5db88a",
      "range": {
        "startLine": 1227,
        "startChar": 52,
        "endLine": 1227,
        "endChar": 59
      },
      "revId": "879616bb9ad663a10459ff38ae4443bfb3801aed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
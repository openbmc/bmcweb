{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bd42b90a_414e66b7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2023-11-16T10:30:05Z",
      "side": 1,
      "message": "any idea why do we need base64 encoding support for system dump which does not require for bmc dump?",
      "range": {
        "startLine": 14,
        "startChar": 9,
        "endLine": 14,
        "endChar": 44
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8e68613_9527e763",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:13:14Z",
      "side": 1,
      "message": "Base64 was chosen to avoid the case where injected binary code is downloaded in a browser.\n\nbmc dump I suspect has the same issue.",
      "parentUuid": "bd42b90a_414e66b7",
      "range": {
        "startLine": 14,
        "startChar": 9,
        "endLine": 14,
        "endChar": 44
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8435c3d9_0d0e4683",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-11-24T07:05:37Z",
      "side": 1,
      "message": "yes, but this patch set not going to use base64 encoding for bmc-dump. That will be a backward compatibility issue. Clients using the bmc-dump may not be expecting base64 encoding.",
      "parentUuid": "f8e68613_9527e763",
      "range": {
        "startLine": 14,
        "startChar": 9,
        "endLine": 14,
        "endChar": 44
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd474c03_5fa42296",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-29T19:25:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8435c3d9_0d0e4683",
      "range": {
        "startLine": 14,
        "startChar": 9,
        "endLine": 14,
        "endChar": 44
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39ba13b2_3a371aa4",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 3,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:13:14Z",
      "side": 1,
      "message": "Please don\u0027t use features from the details namespace.  It is not part of the public api.  Either use the existing base64 functions we already have, or work with the boost maintainers to make this part of the supported API.  I\u0027m happy to have a discussion around this, because the base64 code seems to be well supported, but we need to start with a discussion with the boost maintainers (Vinnie).",
      "range": {
        "startLine": 3,
        "startChar": 27,
        "endLine": 3,
        "endChar": 33
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e2713ae_9d1feb6e",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 3,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-11-24T07:05:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "39ba13b2_3a371aa4",
      "range": {
        "startLine": 3,
        "startChar": 27,
        "endLine": 3,
        "endChar": 33
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "073b8890_28d98f0f",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:19:24Z",
      "side": 1,
      "message": "please call this bmcweb.",
      "range": {
        "startLine": 6,
        "startChar": 10,
        "endLine": 6,
        "endChar": 14
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de551e07_b8f87f5a",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:13:14Z",
      "side": 1,
      "message": "We don\u0027t use this pattern of renaming namespaces.  You likely copied this from a boost example.  Please just inline the namespaces for searchability.",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5d02661_4e584a61",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-11-24T07:05:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "de551e07_b8f87f5a",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1cb34b3_25a4ec99",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:13:14Z",
      "side": 1,
      "message": "magic numbers.  Boost has functions for doing this calculation.  Please use them.",
      "range": {
        "startLine": 30,
        "startChar": 47,
        "endLine": 30,
        "endChar": 59
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad1bd547_8efef4fc",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-11-24T07:05:37Z",
      "side": 1,
      "message": "I could see same majic number usage in utility.hpp. What is the boost public function for this?",
      "parentUuid": "d1cb34b3_25a4ec99",
      "range": {
        "startLine": 30,
        "startChar": 47,
        "endLine": 30,
        "endChar": 59
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49e133ba_dfd75928",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-29T19:25:41Z",
      "side": 1,
      "message": "There isn\u0027t a boost public function for this (it\u0027s in details), but it\u0027s called encoded_size()",
      "parentUuid": "ad1bd547_8efef4fc",
      "range": {
        "startLine": 30,
        "startChar": 47,
        "endLine": 30,
        "endChar": 59
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bc210c3_ab19021e",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 34,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:13:14Z",
      "side": 1,
      "message": "Please prefer composition over inheritance in this case.  That makes it explicit which methods are supported, and ensures that they are all correct, not just the overridden ones.",
      "range": {
        "startLine": 34,
        "startChar": 31,
        "endLine": 34,
        "endChar": 61
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab20375b_dbf4bd3a",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:13:14Z",
      "side": 1,
      "message": "Why * 2?",
      "range": {
        "startLine": 36,
        "startChar": 21,
        "endLine": 36,
        "endChar": 49
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6b83e08_bde81a67",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:13:14Z",
      "side": 1,
      "message": "no need for either of these to be templates.  The writer will always be used with responses, and we don\u0027t ever customize the Fields at this time.  Please opt for simpler code.",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 43
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7feca4cb_ef3636c7",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-11-25T07:07:14Z",
      "side": 1,
      "message": "This is needed as the writer should satisfy the body-writer concept.\nThe body writer requires the parameterised constructor otherwise \nthe concept check will fail.",
      "parentUuid": "d6b83e08_bde81a67",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 43
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46382ff0_e3c21f25",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-29T19:25:41Z",
      "side": 1,
      "message": "\u003e This is needed as the writer should satisfy the body-writer concept.\n\u003e The body writer requires the parameterised constructor otherwise \n\u003e the concept check will fail.\n\nI\u0027ve done what I\u0027ve asked before and the concept check has worked.  Templates were not required.  Can you post the code you tried somewhere?",
      "parentUuid": "7feca4cb_ef3636c7",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 43
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58a752c3_cf0decd9",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:19:24Z",
      "side": 1,
      "message": "Please don\u0027t use auto in this way.  Looking at this code (and as an expert) I have no idea what this type is, so it\u0027s unlikely others will either.",
      "range": {
        "startLine": 55,
        "startChar": 8,
        "endLine": 55,
        "endChar": 12
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9310c8ba_243757d5",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:19:24Z",
      "side": 1,
      "message": "Same here.",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 12
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07ab1201_c42ab877",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:19:24Z",
      "side": 1,
      "message": "This does doesn\u0027t look like it works for more than one chunk.  Base64 has trailing characters for mod N sizes.  I suspect you need to use a base64 implementation that can track state.  This is chunking each base64 as its own chunk.",
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89321568_06f4ca55",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-11-22T11:59:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "07ab1201_c42ab877",
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3eea1e9_42367d13",
        "filename": "http/http_base64_file_body.hpp",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-11-22T11:59:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9310c8ba_243757d5",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 12
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a080e94b_7591935d",
        "filename": "http/http_response.hpp",
        "patchSetId": 6
      },
      "lineNbr": 382,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:13:14Z",
      "side": 1,
      "message": "Boost types should not show up in the public API for this class.  I suspect you just want to make this set the body type directly.",
      "range": {
        "startLine": 382,
        "startChar": 0,
        "endLine": 382,
        "endChar": 48
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbaef617_b9c157a7",
        "filename": "http/http_response.hpp",
        "patchSetId": 6
      },
      "lineNbr": 382,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:19:24Z",
      "side": 1,
      "message": "The reasons for this are documented in HEADERS.md",
      "parentUuid": "a080e94b_7591935d",
      "range": {
        "startLine": 382,
        "startChar": 0,
        "endLine": 382,
        "endChar": 48
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17e0c001_98ad1bb8",
        "filename": "http/http_response.hpp",
        "patchSetId": 6
      },
      "lineNbr": 388,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-16T15:13:14Z",
      "side": 1,
      "message": "Why are we seeking to 0?",
      "range": {
        "startLine": 388,
        "startChar": 0,
        "endLine": 388,
        "endChar": 25
      },
      "revId": "294fcaebd7f09630a9f2faab51a077e9bdf4dda1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "da605d6f_5e1ff297",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-05-27T19:14:41Z",
      "side": 1,
      "message": "LGTM",
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f4a49b4_7855852b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-01T20:48:41Z",
      "side": 1,
      "message": "As always, happy to discuss, but when the rebase happens, this is going to break a bunch of places, so I\u0027d prefer to get this merged ahead of that.",
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4358d304_6a2bc42f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-01T20:50:44Z",
      "side": 1,
      "message": "Missed a comment.  Sorry about that.  Replying to it and giving some time rather than just blanket overriding.",
      "parentUuid": "4f4a49b4_7855852b",
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bed8237b_1258916a",
        "filename": "http/ut/utility_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-05-27T19:14:41Z",
      "side": 1,
      "message": "nit: what about\n\n```\nstd::string urlString \u003d \"/foo\";\nEXPECT_EQ(json(boost::urls::url(urlString)), urlString);\nEXPECT_EQ(json(boost::urls::url_view(urlString)), urlString);\n```",
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63c2b7fe_397c7170",
        "filename": "http/ut/utility_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-01T20:49:57Z",
      "side": 1,
      "message": "What you did relies on undefined behavior.  rvalue references (ie url or url_view in this case), don\u0027t survive multiple layers of rvalue.",
      "parentUuid": "bed8237b_1258916a",
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a14fe6e6_98170b9b",
        "filename": "http/ut/utility_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-01T20:51:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "63c2b7fe_397c7170",
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbc648c4_c0897d27",
        "filename": "http/ut/utility_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-01T21:12:14Z",
      "side": 1,
      "message": "I don\u0027t get it. Which part has multiple layers of rvalue?\n\n```\nstd::string urlString \u003d \"/foo\";\nEXPECT_EQ(json(boost::urls::url_view(urlString)), \"/foo\");\n```\n\nExisting codes do this.\nI don\u0027t think changing it to `EXPECT_EQ(json(boost::urls::url_view(urlString)), urlString);` makes a difference",
      "parentUuid": "a14fe6e6_98170b9b",
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f0e0bf0_d769c5e1",
        "filename": "http/ut/utility_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-01T21:15:08Z",
      "side": 1,
      "message": "url_view contructor takes reference to urlString\n\njson constructor takes reference to url_view\n\nurlString reference destroyed, because it was an rvalue\n\nEXPECT_EQ takes reference to json object.\n\n\n\nI only really know this because I coded it up the way you suggested at first, and the code seg faulted.  It\u0027s very non-trivial to see in code review.",
      "parentUuid": "cbc648c4_c0897d27",
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bcd4645_cfd7357a",
        "filename": "http/ut/utility_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-01T21:47:14Z",
      "side": 1,
      "message": "I also tested and it worked fine. I ran it for 10+ times and all pass.\n\n\u003e url_view contructor takes reference to urlString\nYes, I understand this part.\n\n\u003e json constructor takes reference to url_view\n\u003e urlString reference destroyed, because it was an rvalue\nThis is something I don\u0027t understand. I believe Json gets a copy to the string buffer.\n```\nstatic void to_json(json\u0026 j, const boost::urls::url_view\u0026 url)\n{\n  j \u003d url.string();\n}\n```\nI tested this\n```\njson j \u003d boost::urls::url_view(urlString);\nstd::cerr \u003c\u003c j.dump(2);\n```\nIt runs fine.",
      "parentUuid": "1f0e0bf0_d769c5e1",
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8deb6b3b_6659e11b",
        "filename": "http/ut/utility_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-01T22:26:54Z",
      "side": 1,
      "message": "\u003e I also tested and it worked fine. I ran it for 10+ times and all pass.\n\u003e \n\u003e \u003e url_view contructor takes reference to urlString\n\u003e Yes, I understand this part.\n\u003e \n\u003e \u003e json constructor takes reference to url_view\n\u003e \u003e urlString reference destroyed, because it was an rvalue\n\u003e This is something I don\u0027t understand. I believe Json gets a copy to the string buffer.\n\nThat\u0027s a good point, I guess it should, because json isn\u0027t taking a copy.  I suspect I was hitting issues from when I was also trying to construct from a non stack string....\n\n\u003e ```\n\u003e static void to_json(json\u0026 j, const boost::urls::url_view\u0026 url)\n\u003e {\n\u003e   j \u003d url.string();\n\u003e }\n\u003e ```\n\u003e I tested this\n\u003e ```\n\u003e json j \u003d boost::urls::url_view(urlString);\n\u003e std::cerr \u003c\u003c j.dump(2);\n\u003e ```\n\u003e It runs fine.\n\nDone",
      "parentUuid": "6bcd4645_cfd7357a",
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fcc1961_ed6f03cf",
        "filename": "http/ut/utility_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-01T22:30:34Z",
      "side": 1,
      "message": "Cool. Thanks!",
      "parentUuid": "8deb6b3b_6659e11b",
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93915c75_4370e5fc",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 789,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-05-27T19:15:37Z",
      "side": 1,
      "message": "These two template specialization will automatically be applied?\n\nIIUC we need to explicitly include this header, right?",
      "range": {
        "startLine": 789,
        "startChar": 7,
        "endLine": 789,
        "endChar": 21
      },
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3b8708d_dae2bef9",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 789,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-27T19:32:20Z",
      "side": 1,
      "message": "\u003e These two template specialization will automatically be applied?\n\n\nCorrect, it relies on argument dependent lookup, which as a pattern I don\u0027t really like, because it confuses people, but there aren\u0027t a lot of other options for force nlohmann to not encode this incorrectly.\n\n\u003e \n\u003e IIUC we need to explicitly include this header, right?\n\nYes.  Open to other options if there\u0027s a better way to solve this.",
      "parentUuid": "93915c75_4370e5fc",
      "range": {
        "startLine": 789,
        "startChar": 7,
        "endLine": 789,
        "endChar": 21
      },
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3cd5b5fb_87dd59b0",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 789,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-01T20:51:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3b8708d_dae2bef9",
      "range": {
        "startLine": 789,
        "startChar": 7,
        "endLine": 789,
        "endChar": 21
      },
      "revId": "33b4291a4b16b921a0a1e703c69b5a3b5ca1864e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
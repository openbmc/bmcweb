{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c615c11b_517a697f",
        "filename": "http/http_client.hpp",
        "patchSetId": 14
      },
      "lineNbr": 378,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-31T15:54:44Z",
      "side": 1,
      "message": "can we make FileBody work with std::format?",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a96122f4_1c4abd2f",
        "filename": "http/http_client.hpp",
        "patchSetId": 14
      },
      "lineNbr": 378,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-31T16:01:01Z",
      "side": 1,
      "message": "I’m not sure what that would entail.  why would that be neccesary when we can just pull the string?",
      "parentUuid": "c615c11b_517a697f",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffd4e060_94ea42c0",
        "filename": "http/http_client.hpp",
        "patchSetId": 14
      },
      "lineNbr": 378,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-02-01T16:45:38Z",
      "side": 1,
      "message": "IMO it is a better encapsulation. Since the body knows what it is internally holding, it is better to let the body serialize its internal data.",
      "parentUuid": "a96122f4_1c4abd2f",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cfb61d2_9025093a",
        "filename": "http/http_client.hpp",
        "patchSetId": 14
      },
      "lineNbr": 378,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-01T17:47:14Z",
      "side": 1,
      "message": "But that would require serializing the internal data, which might be the file.\n\nI\u0027m open to this at some point, but I\u0027m not sure it would make sense to put the same thing in this patchset, and I\u0027m not sure what it would entail to make this work properly, but would certainly be a ton of code to add the std::formatter template stuff and do the printing.  Considering the existing FileBody doesn\u0027t support std::format at the moment, I think we can treat this as something additional added later?",
      "parentUuid": "ffd4e060_94ea42c0",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef5f0fdf_414d7fe1",
        "filename": "http/http_client.hpp",
        "patchSetId": 14
      },
      "lineNbr": 741,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-31T15:54:44Z",
      "side": 1,
      "message": "Is it better to have assignment operator overload with string /stirng_view param in FileBody?",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f193411_d1baa462",
        "filename": "http/http_client.hpp",
        "patchSetId": 14
      },
      "lineNbr": 741,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-31T16:01:01Z",
      "side": 1,
      "message": "why would overloading operator\u003d be better?  str() is more explicit.",
      "parentUuid": "ef5f0fdf_414d7fe1",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33ee000f_f88cc378",
        "filename": "http/http_client.hpp",
        "patchSetId": 14
      },
      "lineNbr": 741,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-02-01T16:45:38Z",
      "side": 1,
      "message": "The body is a polymorphic container. It can accept multiple value types. So overloading the assignment operator will be scalable. We need not add new explicit APIs for each type. The assignment operator will do the job. For the incompatible types, it will show an error.",
      "parentUuid": "2f193411_d1baa462",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06481e7d_713c1a23",
        "filename": "http/http_client.hpp",
        "patchSetId": 14
      },
      "lineNbr": 741,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-01T17:47:14Z",
      "side": 1,
      "message": "\u003e The body is a polymorphic container. It can accept multiple value types. So overloading the assignment operator will be scalable.\n\nWhat does \"scalable\" mean in this context?  I don\u0027t believe we have a scaling problem, there are only two types represented for the moment.\n\n\u003e We need not add new explicit APIs for each type. The assignment operator will do the job. For the incompatible types, it will show an error.\n\nThe two citations below are from the coding standard that says the opposite.  operator overloading doesn\u0027t properly convey what\u0027s going on (we\u0027re loading a file, or loading a string).\n\n\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c163-overload-only-for-operations-that-are-roughly-equivalent\n\nIn addition:\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c164-avoid-implicit-conversion-operators",
      "parentUuid": "33ee000f_f88cc378",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c536fb2_0e73f9dc",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 14
      },
      "lineNbr": 17,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-31T15:39:53Z",
      "side": 1,
      "message": "Should we change the name of the body given that it is handling general case now.",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50273058_6eddcd60",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 14
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-31T15:56:58Z",
      "side": 1,
      "message": "that’s a good idea.  I can put that in a separate commit.",
      "parentUuid": "4c536fb2_0e73f9dc",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "110265e4_90cb882c",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 14
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-01T01:33:43Z",
      "side": 1,
      "message": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/69126",
      "parentUuid": "50273058_6eddcd60",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42871133_505f28dc",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 14
      },
      "lineNbr": 97,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-31T15:39:53Z",
      "side": 1,
      "message": "looks like if file open fails body defaults to string body. Is this correct? The intent of the user may be to send file data. If there is an error aren\u0027t we supposed to send an error response in this case? If the assumption is that stringbody will have coresponding error string, then it is a readability issue. The error case is not explicit here while just reading this file alone.",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7daa2050_64c852c4",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 14
      },
      "lineNbr": 97,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-31T15:56:58Z",
      "side": 1,
      "message": "the body starts as string (which is empty string). any error response would be in a string body, like it already is today.  why would there be a separate string body for error strings returned to the user?\n\nif the file fails to open, it goes back to a string.  what changes are you looking for here in code?",
      "parentUuid": "42871133_505f28dc",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7f1a0a7_cec23d6c",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 14
      },
      "lineNbr": 97,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-02-01T16:45:38Z",
      "side": 1,
      "message": "There is no way to determine what the current body type is. We are depending on the order of condition check to determine it. This will not scale as soon as we add another type. IMO the code lacks locality of reasoning. Just by reading this file, we will never know what the current type is. Variant is good in that respect. An experienced bmcweb developer may know that the string body may hold an error string, but that is not evident in the code.",
      "parentUuid": "7daa2050_64c852c4",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5173bf44_765ac82c",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 14
      },
      "lineNbr": 97,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-01T17:47:14Z",
      "side": 1,
      "message": "\u003e There is no way to determine what the current body type is.\n\nWhy would that be required to a user outside the class?  only the body writer needs to know what type is currently contained, right?\n\n\u003e We are depending on the order of condition check to determine it. This will not scale as soon as we add another type.\n\nIf this is a hypothetical problem, lets defer that discussion until we want to add another type to this class.  Lets keep this discussion about THIS patchset.  I\u0027m happy to have discussions about what happens when we add a third or Nth type to this, but only when we are actually ready to add that type.\n\n\u003e IMO the code lacks locality of reasoning. Just by reading this file, we will never know what the current type is.\n\nWould adding a comment above the str declaration help?\n\n\u003e Variant is good in that respect. An experienced bmcweb developer may know that the string body may hold an error string, but that is not evident in the code.\n\n\n\nTo be honest, I\u0027m not really sure what code changes you\u0027re asking for here.  Are you asking for this to change to ?\n```\nstd::variant\u003cstd::string, file_posix\u003e\n```\n\nI had a version of this patchset that did that, but the code got fairly complicated with doing all the std::visit stuff for the writer, we had to open the file, then std::move it into place instead of just opening it in place, and there was a condition around what happens when we encounter a variant with a file object that isn\u0027t open.  The \"is_open\" check was actually from the variant version of that patchset.\n\nWe\u0027ve always put a 500 error string in the string body, because it might be mixed with value values in the response to the user (only part of your query might have failed).  I\u0027m happy to discuss doing something different, but that really feels like a separate discussion from this patchset, which is handling errors how we currently handle them, in the string body.",
      "parentUuid": "f7f1a0a7_cec23d6c",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ee5eb69_019d20f3",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 14
      },
      "lineNbr": 138,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-01-31T15:39:53Z",
      "side": 1,
      "message": "shouldn\u0027t we report back the size query error?",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70d150ba_3c318e4e",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 14
      },
      "lineNbr": 138,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-31T15:56:58Z",
      "side": 1,
      "message": "intentionally not.  the fd might be a pipe, with no actual size.",
      "parentUuid": "3ee5eb69_019d20f3",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27b11ddc_b1aa8418",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 14
      },
      "lineNbr": 218,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-02-01T17:18:35Z",
      "side": 1,
      "message": "read\u003d\u003dreadReq and EOF can happen right? can\u0027t we use remain\u003d\u003d0 instead?",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48012936_2cc0f584",
        "filename": "http/http_file_body.hpp",
        "patchSetId": 14
      },
      "lineNbr": 264,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-02-01T17:18:35Z",
      "side": 1,
      "message": "can we enhance it to handle writing to a file if the body is opened with a file fd?",
      "revId": "ee4ddb138542d0694602e0276ba6be7f0e45e018",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
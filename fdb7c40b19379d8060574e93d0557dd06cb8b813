{
  "comments": [
    {
      "key": {
        "uuid": "99941041_49b7b179",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 20,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-09T18:27:48Z",
      "side": 1,
      "message": "Include more specific headers here.  In this case, I think you need ssl_stream.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 30
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "251fdf79_b8e8907e",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 34,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-06T17:23:31Z",
      "side": 1,
      "message": "Not big enough.  I\u0027d say lets start with 8k, and adjust as needed.",
      "range": {
        "startLine": 34,
        "startChar": 30,
        "endLine": 34,
        "endChar": 47
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "646e582c_9b16036d",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 34,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2020-10-08T12:37:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "251fdf79_b8e8907e",
      "range": {
        "startLine": 34,
        "startChar": 30,
        "endLine": 34,
        "endChar": 47
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98803822_7576a909",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 53,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-06T17:23:31Z",
      "side": 1,
      "message": "This is not a sufficient initialization of the SSL context.  Notably, supported cipher suites seems missing.",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 53,
        "endChar": 76
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24bac838_537de038",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 53,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-10-07T10:02:50Z",
      "side": 1,
      "message": "Ed, Didn\u0027t all the ciphers under Tlsv1.2 is secure? \nWith this context SSL layer will only get the TLSv.1.2 cipher and I hope all are secure.\n\nECDHE-ECDSA-AES256-GCM-SHA384 TLSv1.2 Kx\u003dECDH     Au\u003dECDSA Enc\u003dAESGCM(256) Mac\u003dAEAD\nECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx\u003dECDH     Au\u003dRSA  Enc\u003dAESGCM(256) Mac\u003dAEAD\nECDHE-ECDSA-CHACHA20-POLY1305 TLSv1.2 Kx\u003dECDH     Au\u003dECDSA Enc\u003dCHACHA20/POLY1305(256) Mac\u003dAEAD\nECDHE-RSA-CHACHA20-POLY1305 TLSv1.2 Kx\u003dECDH     Au\u003dRSA  Enc\u003dCHACHA20/POLY1305(256) Mac\u003dAEAD\nECDHE-ECDSA-AES256-CCM  TLSv1.2 Kx\u003dECDH     Au\u003dECDSA Enc\u003dAESCCM(256) Mac\u003dAEAD\nECDHE-ECDSA-AES128-GCM-SHA256 TLSv1.2 Kx\u003dECDH     Au\u003dECDSA Enc\u003dAESGCM(128) Mac\u003dAEAD\nECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx\u003dECDH     Au\u003dRSA  Enc\u003dAESGCM(128) Mac\u003dAEAD\nECDHE-ECDSA-AES128-CCM  TLSv1.2 Kx\u003dECDH     Au\u003dECDSA Enc\u003dAESCCM(128) Mac\u003dAEAD\nECDHE-ECDSA-AES128-SHA256 TLSv1.2 Kx\u003dECDH     Au\u003dECDSA Enc\u003dAES(128)  Mac\u003dSHA256\nECDHE-RSA-AES128-SHA256 TLSv1.2 Kx\u003dECDH     Au\u003dRSA  Enc\u003dAES(128)  Mac\u003dSHA256\nAES256-GCM-SHA384       TLSv1.2 Kx\u003dRSA      Au\u003dRSA  Enc\u003dAESGCM(256) Mac\u003dAEAD\nAES256-CCM              TLSv1.2 Kx\u003dRSA      Au\u003dRSA  Enc\u003dAESCCM(256) Mac\u003dAEAD\nAES128-GCM-SHA256       TLSv1.2 Kx\u003dRSA      Au\u003dRSA  Enc\u003dAESGCM(128) Mac\u003dAEAD\nAES128-CCM              TLSv1.2 Kx\u003dRSA      Au\u003dRSA  Enc\u003dAESCCM(128) Mac\u003dAEAD\nAES256-SHA256           TLSv1.2 Kx\u003dRSA      Au\u003dRSA  Enc\u003dAES(256)  Mac\u003dSHA256\nAES128-SHA256           TLSv1.2 Kx\u003dRSA      Au\u003dRSA  Enc\u003dAES(128)  Mac\u003dSHA256\nDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx\u003dDH       Au\u003dRSA  Enc\u003dAESGCM(256) Mac\u003dAEAD\nDHE-RSA-CHACHA20-POLY1305 TLSv1.2 Kx\u003dDH       Au\u003dRSA  Enc\u003dCHACHA20/POLY1305(256) Mac\u003dAEAD\nDHE-RSA-AES256-CCM      TLSv1.2 Kx\u003dDH       Au\u003dRSA  Enc\u003dAESCCM(256) Mac\u003dAEAD\nDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx\u003dDH       Au\u003dRSA  Enc\u003dAESGCM(128) Mac\u003dAEAD\nDHE-RSA-AES128-CCM      TLSv1.2 Kx\u003dDH       Au\u003dRSA  Enc\u003dAESCCM(128) Mac\u003dAEAD\nDHE-RSA-AES256-SHA256   TLSv1.2 Kx\u003dDH       Au\u003dRSA  Enc\u003dAES(256)  Mac\u003dSHA256\nDHE-RSA-AES128-SHA256   TLSv1.2 Kx\u003dDH       Au\u003dRSA  Enc\u003dAES(128)  Mac\u003dSHA256\nDHE-RSA-AES256-SHA      SSLv3 Kx\u003dDH       Au\u003dRSA  Enc\u003dAES(256)  Mac\u003dSHA1\nDHE-RSA-AES128-SHA      SSLv3 Kx\u003dDH       Au\u003dRSA  Enc\u003dAES(128)  Mac\u003dSHA1\nPSK-AES256-GCM-SHA384   TLSv1.2 Kx\u003dPSK      Au\u003dPSK  Enc\u003dAESGCM(256) Mac\u003dAEAD\nPSK-CHACHA20-POLY1305   TLSv1.2 Kx\u003dPSK      Au\u003dPSK  Enc\u003dCHACHA20/POLY1305(256) Mac\u003dAEAD\nPSK-AES256-CCM          TLSv1.2 Kx\u003dPSK      Au\u003dPSK  Enc\u003dAESCCM(256) Mac\u003dAEAD\nPSK-AES128-GCM-SHA256   TLSv1.2 Kx\u003dPSK      Au\u003dPSK  Enc\u003dAESGCM(128) Mac\u003dAEAD\nPSK-AES128-CCM          TLSv1.2 Kx\u003dPSK      Au\u003dPSK  Enc\u003dAESCCM(128) Mac\u003dAEAD\nDHE-PSK-AES256-GCM-SHA384 TLSv1.2 Kx\u003dDHEPSK   Au\u003dPSK  Enc\u003dAESGCM(256) Mac\u003dAEAD\nDHE-PSK-CHACHA20-POLY1305 TLSv1.2 Kx\u003dDHEPSK   Au\u003dPSK  Enc\u003dCHACHA20/POLY1305(256) Mac\u003dAEAD\nDHE-PSK-AES256-CCM      TLSv1.2 Kx\u003dDHEPSK   Au\u003dPSK  Enc\u003dAESCCM(256) Mac\u003dAEAD\nDHE-PSK-AES128-GCM-SHA256 TLSv1.2 Kx\u003dDHEPSK   Au\u003dPSK  Enc\u003dAESGCM(128) Mac\u003dAEAD\nDHE-PSK-AES128-CCM      TLSv1.2 Kx\u003dDHEPSK   Au\u003dPSK  Enc\u003dAESCCM(128) Mac\u003dAEAD",
      "parentUuid": "98803822_7576a909",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 53,
        "endChar": 76
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82de5884_0fcbe6f0",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 53,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T14:56:17Z",
      "side": 1,
      "message": "that enables _every_ tls 1.2 cipher, which if we\u0027re only enabling 1.2, might be ok, but we should be explicit about it so the defaults don\u0027t break us in the future.\n\nAlso, should we support TLS 1.3?",
      "parentUuid": "24bac838_537de038",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 53,
        "endChar": 76
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28e38ee6_9d8cd3a8",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-06T17:23:31Z",
      "side": 1,
      "message": "Not part of this commit, but we should use boost::circular_buffer here.",
      "range": {
        "startLine": 61,
        "startChar": 9,
        "endLine": 61,
        "endChar": 14
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22fd5239_554a9387",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 61,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2020-10-08T12:37:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28e38ee6_9d8cd3a8",
      "range": {
        "startLine": 61,
        "startChar": 9,
        "endLine": 61,
        "endChar": 14
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01953d70_4074e927",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 95,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-06T17:23:31Z",
      "side": 1,
      "message": "This needs a timer on it in case the resolution fails to happen quickly.",
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24334030_c340074c",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 95,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-06T17:23:31Z",
      "side": 1,
      "message": "Have you tried using the overload of this function that takes protocol as well to pin it on TCP/IPV4?",
      "range": {
        "startLine": 95,
        "startChar": 31,
        "endLine": 95,
        "endChar": 32
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4a3ad83_17d46a13",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 95,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-06T17:23:31Z",
      "side": 1,
      "message": "use the std::string_view overloads for this, not the c_str() overloads.",
      "range": {
        "startLine": 95,
        "startChar": 31,
        "endLine": 95,
        "endChar": 43
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbe71e6d_57a598ac",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 95,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2020-10-08T12:37:12Z",
      "side": 1,
      "message": "working on this",
      "parentUuid": "b4a3ad83_17d46a13",
      "range": {
        "startLine": 95,
        "startChar": 31,
        "endLine": 95,
        "endChar": 43
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4e48330_8ef3f016",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 194,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-06T17:23:31Z",
      "side": 1,
      "message": "Why would we be ok with a partial message error?",
      "range": {
        "startLine": 194,
        "startChar": 28,
        "endLine": 194,
        "endChar": 70
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb7c7853_aea3e917",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 194,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-10-08T12:17:15Z",
      "side": 1,
      "message": "Do we need to add a timer here and wait for more data as the other end has sent the partial data?",
      "parentUuid": "a4e48330_8ef3f016",
      "range": {
        "startLine": 194,
        "startChar": 28,
        "endLine": 194,
        "endChar": 70
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "001417cf_0abd803c",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 194,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2020-10-08T12:37:12Z",
      "side": 1,
      "message": "Ratan, Since we are discarding the response anyway, i dont think we should wait for the complete response from the destination. We are going to check the keep-alive flag from the response and will keep the connection alive to receive more data if the event destination needs to send. The async_read should be able to handle that.",
      "parentUuid": "cb7c7853_aea3e917",
      "range": {
        "startLine": 194,
        "startChar": 28,
        "endLine": 194,
        "endChar": 70
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfaa3bcb_69c9eef7",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 194,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2020-10-08T12:37:12Z",
      "side": 1,
      "message": "Ed, If there is any error; we go ahead and retry sending the event again. If its a partial_message; that means that the destination has received the req - which is nothing but the event. So there is no point in retrying sending the same event again.",
      "parentUuid": "a4e48330_8ef3f016",
      "range": {
        "startLine": 194,
        "startChar": 28,
        "endLine": 194,
        "endChar": 70
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c8e4281_ace6eefc",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 194,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T14:56:17Z",
      "side": 1,
      "message": "With respect, that\u0027s not how that works.  \"partial message\" means the payload was cut off, and we don\u0027t know what it is.  It could\u0027ve been 4XX or 5XX, at which point, we\u0027d have to send again.\n\nThe ID in the message is supposed to make the message idempotent, so it should be fine to send twice.  The receiver can simply ignore the second one.",
      "parentUuid": "dfaa3bcb_69c9eef7",
      "range": {
        "startLine": 194,
        "startChar": 28,
        "endLine": 194,
        "endChar": 70
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3f2216d_510ae1af",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 205,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-06T17:23:31Z",
      "side": 1,
      "message": "Don\u0027t use this macro for unused variables.  Look at the conventions in other places.",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 205,
        "endChar": 51
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67e7c77b_2d3936e7",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 205,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2020-10-08T12:37:12Z",
      "side": 1,
      "message": "I am not understanding what conventions you are referring to. When i searched for the ways boost ignores the unused bytes, i saw this boost::ignore_unused being used.",
      "parentUuid": "d3f2216d_510ae1af",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 205,
        "endChar": 51
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52a30773_fc44781c",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 205,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T14:56:17Z",
      "side": 1,
      "message": "This isn\u0027t a boost project.....  Go look around in bmcweb.  Generally we just remove the variable from the method prototype.",
      "parentUuid": "67e7c77b_2d3936e7",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 205,
        "endChar": 51
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "038ab827_f9ade7b2",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 212,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-06T17:23:31Z",
      "side": 1,
      "message": "I believe redfish requires that endpoints be idempotent, so this isn\u0027t quite true.  Can you verify and add the relevant section of the spec here.",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 212,
        "endChar": 79
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c50cb22f_80e8d2dc",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 212,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2020-10-08T12:37:12Z",
      "side": 1,
      "message": "I did not see any reference to this in the spec. But since we are ignoring and discarding the response data, we should not care if its partial or complete. If there is more response data coming in, bmcweb can still receive it, since we do not close the connection.",
      "parentUuid": "038ab827_f9ade7b2",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 212,
        "endChar": 79
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19fe6d4b_e7038ef3",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 212,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T14:56:17Z",
      "side": 1,
      "message": "\u003e I did not see any reference to this in the spec. But since we are ignoring and discarding the response data, we should not care if its partial or complete.\n\nThis is also incorrect, which I pointed out on previous patchsets.  You can\u0027t ignore the error code, just as you can\u0027t ignore error codes when calling methods within the program.\n\n\u003e If there is more response data coming in, bmcweb can still receive it, since we do not close the connection.\nif we got partial_message, it means the connection closed while we were sending or receiving, and the HTTP connection can be thrown away, and recreated.",
      "parentUuid": "c50cb22f_80e8d2dc",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 212,
        "endChar": 79
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88268d8c_cb0cee37",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 260,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-06T17:23:31Z",
      "side": 1,
      "message": "If this is expected this needs to be LOG_INFO, not LOG_ERROR.",
      "range": {
        "startLine": 260,
        "startChar": 24,
        "endLine": 260,
        "endChar": 40
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "735aad90_4e668dd9",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 260,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2020-10-08T12:37:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88268d8c_cb0cee37",
      "range": {
        "startLine": 260,
        "startChar": 24,
        "endLine": 260,
        "endChar": 40
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13291df3_d3c2947f",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 273,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-06T17:23:31Z",
      "side": 1,
      "message": "Does this need to be conn.socket().shutdown?  Can this be deduplicated with the below?",
      "range": {
        "startLine": 273,
        "startChar": 27,
        "endLine": 273,
        "endChar": 32
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98a8d95d_f830a97d",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 273,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2020-10-08T12:37:12Z",
      "side": 1,
      "message": "Done. Moved it out of if-else\n\nFor ssl it is async_shutdown and for non-ssl its conn.socket().shutdown",
      "parentUuid": "13291df3_d3c2947f",
      "range": {
        "startLine": 273,
        "startChar": 27,
        "endLine": 273,
        "endChar": 32
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10d8afe6_e84ecdee",
        "filename": "http/http_client.hpp",
        "patchSetId": 15
      },
      "lineNbr": 273,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T14:56:17Z",
      "side": 1,
      "message": "async_shutdown shuts down ssl on the stream.  conn.close() shuts down tcp on the stream.  I believe ssl requires both, although I suspect you\u0027re getting close() called automatically when you recreate the socket for the retry.",
      "parentUuid": "98a8d95d_f830a97d",
      "range": {
        "startLine": 273,
        "startChar": 27,
        "endLine": 273,
        "endChar": 32
      },
      "revId": "fdb7c40b19379d8060574e93d0557dd06cb8b813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ace9cad4_a04511b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-03T22:41:34Z",
      "side": 1,
      "message": "FYI: https://github.com/openbmc/bmcweb/blob/master/REDFISH_CHECKLIST.md\n\nThe biggest thing i see missing immediately is documentation for your new option.",
      "revId": "db8d88967c6b5a8e132f28477ecdbad13d9259a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa06da3b_7bccc5d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-03T22:44:10Z",
      "side": 1,
      "message": "Code looks like it works.  Minor refactor requested to try to avoid some anti patterns, then updating the docs and this should be good to merge.",
      "revId": "db8d88967c6b5a8e132f28477ecdbad13d9259a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48eb27b0_65b25b25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-03T22:45:59Z",
      "side": 1,
      "message": "I ran through the checklist for you;  looks like you\u0027re only missing #1;  I think the rest are fine.",
      "parentUuid": "ace9cad4_a04511b9",
      "revId": "db8d88967c6b5a8e132f28477ecdbad13d9259a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "500c1c6a_38a93e89",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T05:28:24Z",
      "side": 1,
      "message": "BTW, thank you very much for following through on trying to improve this behavior and upstream the patch.  I really do appreciate it when folks do that after a documented anti-pattern or bug, rather than just maneuvering around it.\n\nIf you have trouble making the changes I asked for, or don\u0027t have time, let me know, and I\u0027m happy to just make them.",
      "revId": "db8d88967c6b5a8e132f28477ecdbad13d9259a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0bec453b_db76f81e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-04T11:36:58Z",
      "side": 1,
      "message": "\u003e I ran through the checklist for you;  looks like you\u0027re only missing #1;  I think the rest are fine.\n\nThank you and sorry. Looks like it\u0027s the first time I change anything Redfish related so wasn\u0027t aware of the document. Will certainly keep in mind in the future.",
      "parentUuid": "48eb27b0_65b25b25",
      "revId": "db8d88967c6b5a8e132f28477ecdbad13d9259a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5bafcee_07ccf50b",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-03T22:44:10Z",
      "side": 1,
      "message": "We\u0027ve been trying to get away from brace initialization of json objects (the final removals happened last week) because they cause binary size problems, please do something like\n\nnlohmann::json::array roles;\nroles.emplace_back(redfish::getRoleIdFromPrivilege(session.userRole));\nres.jsonValue[\"Roles\"] \u003d std::move(roles);",
      "revId": "db8d88967c6b5a8e132f28477ecdbad13d9259a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0305b39d_22744a16",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-04T11:36:58Z",
      "side": 1,
      "message": "\u003e We\u0027ve been trying to get away from brace initialization of json objects (the final removals happened last week) because they cause binary size problems, please do something like\n\u003e \n\u003e nlohmann::json::array roles;\n\u003e roles.emplace_back(redfish::getRoleIdFromPrivilege(session.userRole));\n\u003e res.jsonValue[\"Roles\"] \u003d std::move(roles);\n\nThis is not the bright future they\u0027re promising us at CppCon! Needing to replace concise, \"purely functional\" and idiomatic line with a sequence of imperative actions with explicit life-time tracking in year 2024 is a bad surprise!\n\nI was curious and tried building few simple examples and while I see some difference in the size of a stripped binary the cost seems to be one time only, I tried spreading calls like `jobj[\"Key3\"] \u003d { \"Value3.1\", \"Value3.2\" };` and `jobj[\"Key4\"] \u003d { \"Value4.1\", \"Value4.2\", \"Value4.3\" };` over several translation units (even though it shouldn\u0027t matter with LTO) and it looks like at least for a vector of strings all the constructors are shared (something like `nlohmann::json_abi_v3_11_3::basic_json\u003cstd::map, std::vector, std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e, bool, long long, unsigned long long, double, std::allocator, nlohmann::json_abi_v3_11_3::adl_serializer, std::vector\u003cunsigned char, std::allocator\u003cunsigned char\u003e \u003e, void\u003e::basic_json(std::initializer_list\u003cnlohmann::json_abi_v3_11_3::detail::json_ref\u003cnlohmann::json_abi_v3_11_3::basic_json\u003cstd::map, std::vector, std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e \u003e, bool, long long, unsigned long long, double, std::allocator, nlohmann::json_abi_v3_11_3::adl_serializer, std::vector\u003cunsigned char, std::allocator\u003cunsigned char\u003e \u003e, void\u003e \u003e \u003e, bool, nlohmann::json_abi_v3_11_3::detail::value_t)`).\n\n`git log -S \u0027] \u003d {\u0027` allowed me to find your commit in question, 613dabea03cd2f5cb999be37aaf539280c63ea7a . The 4 kB savings seem to about match my tests, but if you\u0027re not doing that for space savings then why, speed? Not that it\u0027s important now that\u0027s the decision has been made, I\u0027m just curious what real advantage is there in the code that requires extra manual type specification, emplace_back and std::move... (I understand the rationale behind changing `zone[\"Chassis\"] \u003d {{\"@odata.id\", \"/redfish/v1/Chassis/\" + chassis}};` to `zone[\"Chassis\"][\"@odata.id\"] \u003d \"/redfish/v1/Chassis/\" + chassis;` but that\u0027s another case.",
      "parentUuid": "c5bafcee_07ccf50b",
      "revId": "db8d88967c6b5a8e132f28477ecdbad13d9259a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
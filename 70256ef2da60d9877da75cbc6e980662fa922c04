{
  "comments": [
    {
      "key": {
        "uuid": "fba26f8f_86763254",
        "filename": "redfish-core/lib/metric_definition.hpp",
        "patchSetId": 90
      },
      "lineNbr": 1,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-09-03T07:31:03Z",
      "side": 1,
      "message": "There is idea to move path of this code to telemetry-service.\n\nReason for this change is this data could be calculated once for each sensor, so it can be cached in TelemetryService which would greatly increase performance.\n\nInstead of doing several dbus calls to different services (ObjectMapper, Sensor services) each time redfish will gather necessary information, make one dbus call to TelemetryService, receive response and fill in response.\n\nEd, what do you think about it.",
      "revId": "70256ef2da60d9877da75cbc6e980662fa922c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c5a07fa_21caaf15",
        "filename": "redfish-core/lib/metric_definition.hpp",
        "patchSetId": 90
      },
      "lineNbr": 1,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-09-03T19:58:08Z",
      "side": 1,
      "message": "\u003e There is idea to move path of this code to telemetry-service.\n\u003e \n\u003e Reason for this change is this data could be calculated once for each sensor, so it can be cached in TelemetryService which would greatly increase performance.\n\nI\u0027d generally be against that, as that would involve creating even more dbus interfaces for data we already have.  The mapper itself is already a \"cache\" of that data, and if it\u0027s slow, or we need better APIs into the data it caches, we should be adding them there, not adding more implementation-specific caches throughout the system.\n\n\u003e \n\u003e Instead of doing several dbus calls to different services (ObjectMapper, Sensor services) each time redfish will gather necessary information, make one dbus call to TelemetryService, receive response and fill in response.\n\u003e \n\u003e Ed, what do you think about it.\n\n\n\nWith the above said, I\u0027m still not sure I understand what kind of cache you\u0027re wanting to add here.  We should probably start with a straw man proposal of the API and work backward, but I suspect my previous comment is still on point, we should be adding more generic capabilities and performance features to the mapper if we need them.",
      "parentUuid": "fba26f8f_86763254",
      "revId": "70256ef2da60d9877da75cbc6e980662fa922c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e62ebcaf_c65d4370",
        "filename": "redfish-core/lib/metric_definition.hpp",
        "patchSetId": 90
      },
      "lineNbr": 1,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-09-07T11:52:20Z",
      "side": 1,
      "message": "What we would like to cache is whole metric_definition which we are able to calculate in telemetry service so we can only do simple field assignment in bmcweb.\n\nCurrent implementation contains simple grouping by reading type, but after your comments and my conversation with John Leung we will need to group them like it is done in telemetry mockup. That would require much more code to be executed each time in bmcweb. Since it can be performed once and content will depend on features currently supported in telemetry service, there will be only minimal about of changes in bmcweb.\n\nAs you said we currently don\u0027t have implementation to support virtual sensors, so we think that in this review will filter out virtual sensors and add support for them in the future. That would require more complex implementation. When we add support for virtual sensor this will also require changes, if we place this code in telemetry service bmcweb code will only change if API is changed or we add support for new optional properties in schema.\n\nThe only thing not feature related we could cache in ObjectMapper is mapping redfish uri to dbus sensor path, which is only a small part what we need to do to make it work like in telemetry mockup.",
      "parentUuid": "0c5a07fa_21caaf15",
      "revId": "70256ef2da60d9877da75cbc6e980662fa922c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "113a08e2_9f7830d6",
        "filename": "redfish-core/lib/metric_definition.hpp",
        "patchSetId": 90
      },
      "lineNbr": 1,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-09-09T23:28:58Z",
      "side": 1,
      "message": "\u003e What we would like to cache is whole metric_definition which we are able to calculate in telemetry service so we can only do simple field assignment in bmcweb.\n\nI would much prefer we cache at a higher level if need be.  Caching for each individual endpoint is counter-productive, and while it might make this specific resource easier.\n\n\u003e \n\u003e Current implementation contains simple grouping by reading type, but after your comments and my conversation with John Leung we will need to group them like it is done in telemetry mockup. That would require much more code to be executed each time in bmcweb.\n\nIf it\u0027s required and clean code, I don\u0027t see a problem with that, but I\u0027d like to understand why we need that much more.\n\n\u003e Since it can be performed once and content will depend on features currently supported in telemetry service, there will be only minimal about of changes in bmcweb.\n\nI don\u0027t quite understand the \"minimal changes\" part.  Doing what you suggested would require a whole new dbus-interface patchset?  that seems like more work.\n\n\u003e \n\u003e As you said we currently don\u0027t have implementation to support virtual sensors, so we think that in this review will filter out virtual sensors and add support for them in the future.\n\n\nIs this saying you\u0027re going to remove the \"Implementation\" key from this patchset, and handle it later.  That would be fine.  If you\u0027re saying that we\u0027ll hardcode it to Physical sensor right now, and make it dynamic later, that\u0027s not ok.  I will not check in code that\u0027s known to produce the wrong value.\n\n\u003e That would require more complex implementation. When we add support for virtual sensor this will also require changes, if we place this code in telemetry service bmcweb code will only change if API is changed or we add support for new optional properties in schema.\n\nWhere we put the code only changes who has to maintain it.  Considering that this has no use outside of redfish, nor will it ever, I\u0027d prefer we keep the implementation here, and update the dbus interfaces where needed to support it.\n\n\u003e \n\u003e The only thing not feature related we could cache in ObjectMapper is mapping redfish uri to dbus sensor path, which is only a small part what we need to do to make it work like in telemetry mockup.\n\nTechnically we could cache all of dbus, or we could cache the HTTP outputs when dbus changes.  I\u0027m not really following why this is an issue?",
      "parentUuid": "e62ebcaf_c65d4370",
      "revId": "70256ef2da60d9877da75cbc6e980662fa922c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d74d5b68_5a964a8a",
        "filename": "redfish-core/lib/metric_definition.hpp",
        "patchSetId": 90
      },
      "lineNbr": 192,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-13T17:47:25Z",
      "side": 1,
      "message": "Numeric versus gauge seems like a subtle difference.  Are you sure that Numeric is correct here?  Based on reading the schema, I suspect our sensors could be either.",
      "range": {
        "startLine": 192,
        "startChar": 58,
        "endLine": 192,
        "endChar": 65
      },
      "revId": "70256ef2da60d9877da75cbc6e980662fa922c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ec79c3e_03116835",
        "filename": "redfish-core/lib/metric_definition.hpp",
        "patchSetId": 90
      },
      "lineNbr": 192,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-08-19T08:25:44Z",
      "side": 1,
      "message": "Gauge looks like physical sensor can have higher value, but we limit it and never show result above gauge max value. In this case Numeric is more precise because Telemetry doesn\u0027t modify value of this sensor, that\u0027s why Gauge would be incorrect.",
      "parentUuid": "d74d5b68_5a964a8a",
      "range": {
        "startLine": 192,
        "startChar": 58,
        "endLine": 192,
        "endChar": 65
      },
      "revId": "70256ef2da60d9877da75cbc6e980662fa922c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40504ec1_c8907c1e",
        "filename": "redfish-core/lib/metric_definition.hpp",
        "patchSetId": 90
      },
      "lineNbr": 192,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-20T17:49:09Z",
      "side": 1,
      "message": "OpenBMC sensors have limits defined by MaxValue and MinValue....  Can you quote the part of the spec that you\u0027re looking at?\n\nFWIW, I\u0027m ok with this interpretation, I\u0027d just like to make sure we\u0027ve documented why we picked it.",
      "parentUuid": "3ec79c3e_03116835",
      "range": {
        "startLine": 192,
        "startChar": 58,
        "endLine": 192,
        "endChar": 65
      },
      "revId": "70256ef2da60d9877da75cbc6e980662fa922c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a181614b_414d21a2",
        "filename": "redfish-core/lib/metric_definition.hpp",
        "patchSetId": 90
      },
      "lineNbr": 192,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-08-31T14:13:31Z",
      "side": 1,
      "message": "I had talk with John Leung one of the contributors (https://www.dmtf.org/sites/default/files/standards/documents/DSP2051_1.0.0.pdf)\n\nYou are right we should use Gauge for sensors that expose Min/Max on dbus and physical sensors for those who doesn\u0027t (report nan).",
      "parentUuid": "40504ec1_c8907c1e",
      "range": {
        "startLine": 192,
        "startChar": 58,
        "endLine": 192,
        "endChar": 65
      },
      "revId": "70256ef2da60d9877da75cbc6e980662fa922c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf998604_24dcbbb4",
        "filename": "redfish-core/lib/metric_definition.hpp",
        "patchSetId": 90
      },
      "lineNbr": 194,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-13T17:47:25Z",
      "side": 1,
      "message": "This can\u0027t be assumed.  I\u0027m not sure how to generate it based on dbus replies (we might need a new interface) but for now, it\u0027s incorrect for things like phosphor-virtual-sensor, or cfm sensor.",
      "range": {
        "startLine": 194,
        "startChar": 62,
        "endLine": 194,
        "endChar": 76
      },
      "revId": "70256ef2da60d9877da75cbc6e980662fa922c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3baaa17b_0873c623",
        "filename": "redfish-core/lib/metric_definition.hpp",
        "patchSetId": 90
      },
      "lineNbr": 194,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-09-01T11:45:02Z",
      "side": 1,
      "message": "For virtual sensors we should include information about CalculationParameters which is telemetry specific. It doesn\u0027t seem right to add that information to each of virtual sensors. It will be possible (not yet implemented) to add new MetricDefinition using TelemetryService API.\n\nAs far as I understand we should assume all dbus sensors PhysicalSensor and use Calculated/Synthesized if user wants to create MetricReport with CollectionFunction set to Average/Min/Max. I still need to clarify it.\n\nhttps://redfish.dmtf.org/redfish/mockups/v1/1058#TelemetryService--MetricDefinitions--OutletAirflowTemp",
      "parentUuid": "bf998604_24dcbbb4",
      "range": {
        "startLine": 194,
        "startChar": 62,
        "endLine": 194,
        "endChar": 76
      },
      "revId": "70256ef2da60d9877da75cbc6e980662fa922c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9f38f14_8f1c93d0",
        "filename": "redfish-core/lib/metric_definition.hpp",
        "patchSetId": 90
      },
      "lineNbr": 194,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-09-03T07:00:21Z",
      "side": 1,
      "message": "Let\u0027s assume we will add information about sensors being virtual. We will also have to add some telemetry information to each sensor to make it work according to schema.\n\nWe have \u0027ImplementationType\u0027 which contains 3 types of virtual sensor \u0027DigitalMeter\u0027 which is not based on any other sensor it can measure system downtime for example, disk ussage. This doesn\u0027t require additional information.\n\nWe have \u0027Calculated\u0027 which should include algorithm and list of sensors it uses to produce result.\n\nWe have \u0027Synthesized\u0027 which only includes list of sensors it uses to produce result.\n\nIf sensor exposes new phosphor-virtual-sensor interface we should be able to determine if it\u0027s Calculated, Synthesized or DigitalMeter. If it doesn\u0027t we can assume it\u0027s PhysicalSensor.\n\nAs a transition period (or permanent solution) we will also new new field in sensor interface with information if it\u0027s physical or virtual.\n\nThere is also idea to add new \u0027ImplementationType\u0027 value (Unknown) to schema which would say that we don\u0027t have enough information how sensor is implemented.\n\nHow does it sound for you?",
      "parentUuid": "3baaa17b_0873c623",
      "range": {
        "startLine": 194,
        "startChar": 62,
        "endLine": 194,
        "endChar": 76
      },
      "revId": "70256ef2da60d9877da75cbc6e980662fa922c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "940f196f_20e1677e",
        "filename": "redfish-core/lib/metric_definition.hpp",
        "patchSetId": 90
      },
      "lineNbr": 194,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-09-03T19:58:08Z",
      "side": 1,
      "message": "\u003e Let\u0027s assume we will add information about sensors being virtual. We will also have to add some telemetry information to each sensor to make it work according to schema.\n\nAgreed.\n\n\u003e \n\u003e We have \u0027ImplementationType\u0027 which contains 3 types of virtual sensor \u0027DigitalMeter\u0027 which is not based on any other sensor it can measure system downtime for example, disk ussage. This doesn\u0027t require additional information.\n\nIt doesn\u0027t?  I\u0027m not sure how you would determine that, but we can discuss once you have a patchset.\n\n\u003e \n\u003e We have \u0027Calculated\u0027 which should include algorithm and list of sensors it uses to produce result.\n\u003e \n\u003e We have \u0027Synthesized\u0027 which only includes list of sensors it uses to produce result.\n\nI don\u0027t fully understand the distinction between calculated and Synthesized, but I\u0027m sure your proposal will clarify that.\n\n\u003e \n\u003e If sensor exposes new phosphor-virtual-sensor interface we should be able to determine if it\u0027s Calculated, Synthesized or DigitalMeter. If it doesn\u0027t we can assume it\u0027s PhysicalSensor.\n\nWhat \"phosphor-virtual-sensor\" interface?  PVS is the name of a daemon, and isn\u0027t the only daemon that produces non-physical sensors.  CFM sensor in dbus-sensors also produces non-physical sensors.  We should not be hardcoding in daemon-specific info.\n\n\u003e \n\u003e As a transition period (or permanent solution) we will also new new field in sensor interface with information if it\u0027s physical or virtual.\n\nConsidering you\u0027re now talking about changing a heavily used API, this discussion probably needs to move to phosphor-dbus-interfaces.\n\n\u003e \n\u003e There is also idea to add new \u0027ImplementationType\u0027 value (Unknown) to schema which would say that we don\u0027t have enough information how sensor is implemented.\n\u003e \n\u003e How does it sound for you?\n\nLike I said above, lets move this discussion out of this specific code review, and into the forum that\u0027s meant for interface changes, and I\u0027ll comment more there.",
      "parentUuid": "e9f38f14_8f1c93d0",
      "range": {
        "startLine": 194,
        "startChar": 62,
        "endLine": 194,
        "endChar": 76
      },
      "revId": "70256ef2da60d9877da75cbc6e980662fa922c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21485655_800ffed1",
        "filename": "redfish-core/lib/metric_definition.hpp",
        "patchSetId": 90
      },
      "lineNbr": 194,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-09-07T11:52:20Z",
      "side": 1,
      "message": "I suggested new interface phosphor-virtual-sensor because information about sensors being virtual or won\u0027t be not enough to add entry in MetricDefinition schema. Also I though it was your suggestion to add new interface. I guess I misunderstood you.\n\nMetricDefinition for virtual sensors (Synthetized, Calculated, DigitalMeter) we need to fill CalculationAlgorithm and/or (depending on ImplementationType) CalculationParameters.\n\nAnyway if you are fine with it, we can filter out virtual sensors from output, do you have any suggestions how we can do that?\n\nThis should keep this review small and allow to add handing for virtual sensors as separate review.",
      "parentUuid": "940f196f_20e1677e",
      "range": {
        "startLine": 194,
        "startChar": 62,
        "endLine": 194,
        "endChar": 76
      },
      "revId": "70256ef2da60d9877da75cbc6e980662fa922c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6f4433b6_020689be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-07-30T21:02:50Z",
      "side": 1,
      "message": "This would be one of overlapping route cases.\nIt looks good to me.",
      "revId": "d32ee477982109accc36a3cff4d776d73faa8e2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77253d4c_d4b582ca",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 1
      },
      "lineNbr": 2874,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-07-30T20:36:25Z",
      "side": 1,
      "message": "This is missing checks so it only gets enabled on IBM systems.",
      "revId": "d32ee477982109accc36a3cff4d776d73faa8e2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a910e8b9_d5fa5468",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 1
      },
      "lineNbr": 2874,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-07-31T16:38:52Z",
      "side": 1,
      "message": "We don\u0027t have checks for \n\n    if (systemName \u003d\u003d \"hypervisor\")\n    {\n        handleHypervisorSystemGet(asyncResp);\n        return;\n    }\n\n\nhttps://github.com/openbmc/bmcweb/blob/master/redfish-core/lib/systems.hpp#L3022 \n\nhypervisor isn\u0027t behind a compile flag.\n\nThis isn\u0027t putting out a link (that is done in hypervisor system), this is calling the correct function if the post is called on /redfish/v1/Systems/hypervisor/Actions/ComputerSystem.Reset/\n\nWe could \n1) follow the handleHypervisorSystemGet, and if /redfish/v1/Systems/hypervisor/ is requested, call that function. This seems reasonable to me.  \n2) have some call to \n```\n        *crow::connections::systemBus, \"xyz.openbmc_project.Settings\",\n        \"/xyz/openbmc_project/network/hypervisor\",\n        \"xyz.openbmc_project.Network.SystemConfiguration\", \n```\nto determine if this is a 404 or should call that method. Have an extra D-Bus call in there and extra code for I don\u0027t see much value.  \n3) Move the hypervisor under a meson option. I feel we move back and forth on this. Should the Redfish Tree be dynamically determined in cases like this? That was the original thought behind the call to Settings to determine if a hypervisor system should be there. \n\nI prefer #1, it is simpler and follows the dynamically building the tree.",
      "parentUuid": "77253d4c_d4b582ca",
      "revId": "d32ee477982109accc36a3cff4d776d73faa8e2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8af07d5_713b2788",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 1
      },
      "lineNbr": 2874,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-07-31T17:09:20Z",
      "side": 1,
      "message": "\u003e Should the Redfish Tree be dynamically determined in cases like this?\n\nTo be clear on the ideal, the Redfish tree should be determined for all resources of a type using the dbus inventory tree.  This is essentially what the multi-host guys are trying to do right now, but to my knowledge, that code doesn\u0027t exist, and I\u0027m assuming nobody has the desire to make it happen.\n\nThe problem here is that the hypervisor stuff copy/pasted a bunch of code, (especially from ethernet), and didn\u0027t really handle the collection with inventory interfaces the way that would let us use the same code for both.  It does a check of a \"hostname\" property in settingsd instead of inventory, so it\u0027s not really something we can add to every single handler, nor is it something that scales beyond N \u003d 1 hypervisor.\n\n\nFor #1, what happens if that is called on a non ibm system?  I\u0027m assuming it returns 500 internal error, which per the guidelines is always a bug.\n\n\nI think for now we go with #3, with the stated desire that we\u0027d like to converge at some point, but that probably won\u0027t happen until after multihost happens.",
      "parentUuid": "a910e8b9_d5fa5468",
      "revId": "d32ee477982109accc36a3cff4d776d73faa8e2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "1f69c945_06fd7015",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 47
      },
      "lineNbr": 151,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-03T19:25:54Z",
      "side": 1,
      "message": "This needs to propagate an error to the caller.  The type was incorrect, and that needs to be able to be handled.\n\nAlso, as written, this would allow duplicating key parameters in the unpack call, which is a bad thing to allow.",
      "revId": "6d086efca6e081f92e3ba6530ed6d7f12573741b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e5b2182_979c4bde",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 47
      },
      "lineNbr": 151,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-04T12:56:39Z",
      "side": 1,
      "message": "If your dictionary have two same keys than your implementation is wrong. I guess that dbus does not allow for properties with same name on same interface. You suggested to use bool to have simple API. Propagating specific error code from this place to user is meaningless. Its only meaningful for developer, so simply false/true is enough and some log in debug version (as I can see it is common in bmcweb).",
      "parentUuid": "1f69c945_06fd7015",
      "revId": "6d086efca6e081f92e3ba6530ed6d7f12573741b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3899ae7c_96e6fe00",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 47
      },
      "lineNbr": 151,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-04T15:08:59Z",
      "side": 1,
      "message": "\"If your dictionary have two same keys than your implementation is wrong.\"\n\nTo be clear, I mean this code will work:\nstd::optional\u003cdouble\u003e a;\nstd::optional\u003cstd::string\u003e b;\nreadProperties(ret, \"MyKey\", a, \"MyKey\" b);\n\nSure, the call site is wrong, but wouldn\u0027t we want to make that obvious?\n\nThis probably wont be an internal error in all cases (as you\u0027ll find when you propagate this out to more code before it gets merged.)\n\nThere are cases where properties might be multiple types, because of backward compatibility or dbus schema transitions, and this will likely need to try to pull a property out in multiple ways.\n\nA good example of this would be in sensors, where the sensor value can be an int64_t or a double.  \nIn that case, I suspect the user would need to do check for a \"wrong type\" error, and try to read out the values in the other format.\n\nI agree, bool is simpler than int if you only return success, but I think there\u0027s a need for returning more than just success here.",
      "parentUuid": "9e5b2182_979c4bde",
      "revId": "6d086efca6e081f92e3ba6530ed6d7f12573741b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52190a46_c29b4b1f",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 47
      },
      "lineNbr": 151,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-07T09:42:49Z",
      "side": 1,
      "message": "The case that you mention is solved by variant type on dbus. Then you can use std::variant\u003cdouble, std::string\u003e var; readProperties(ret, \"MyKey\", var); and then resolve it type. Is it make sense?",
      "parentUuid": "3899ae7c_96e6fe00",
      "revId": "6d086efca6e081f92e3ba6530ed6d7f12573741b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9a09842_13a1f772",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 47
      },
      "lineNbr": 151,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-08T06:28:42Z",
      "side": 1,
      "message": "That could be one approach, but in that case, we\u0027re back to having to code in variant get_if() implementations, which is what I thought you were hoping to avoid.  With that said, yes, if you supported a variant type, that would solve the problem, but it\u0027s going to make the code a bit worse to read.",
      "parentUuid": "52190a46_c29b4b1f",
      "revId": "6d086efca6e081f92e3ba6530ed6d7f12573741b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98df96bb_76b3c083",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 47
      },
      "lineNbr": 168,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-03T16:17:41Z",
      "side": 1,
      "message": "Can you delcare this the way most of the rest of bmcweb does it?\n\nstd::bitset\u003csizeof...(Args) / 2\u003e() assigned;",
      "range": {
        "startLine": 168,
        "startChar": 0,
        "endLine": 168,
        "endChar": 55
      },
      "revId": "6d086efca6e081f92e3ba6530ed6d7f12573741b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5924893_f64eab49",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 47
      },
      "lineNbr": 168,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-04T12:56:39Z",
      "side": 1,
      "message": "Ok",
      "parentUuid": "98df96bb_76b3c083",
      "range": {
        "startLine": 168,
        "startChar": 0,
        "endLine": 168,
        "endChar": 55
      },
      "revId": "6d086efca6e081f92e3ba6530ed6d7f12573741b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c7a6107e_be35a47f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-23T23:01:29Z",
      "side": 1,
      "message": "Ready for review",
      "revId": "f7ea8ca3d621e65292a35ffa0335a9cb2d39c2de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7de43b44_36b79b7d",
        "filename": "include/dbus_singleton.hpp",
        "patchSetId": 6
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-23T23:10:06Z",
      "side": 1,
      "message": "Can we remove the typical usage please?  The codebase should show the typical usage, and maintaining code blocks like this for things that aren\u0027t in the public API is error prone (implementations tend to change without the examples being updated).",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 55
      },
      "revId": "f7ea8ca3d621e65292a35ffa0335a9cb2d39c2de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51172cd0_1288761b",
        "filename": "include/dbus_singleton.hpp",
        "patchSetId": 6
      },
      "lineNbr": 17,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-23T23:38:19Z",
      "side": 1,
      "message": "\u003e aren\u0027t in the public API\n\npublic API of BMCWeb? or this class?\n\nAnyway, removed the comments.",
      "parentUuid": "7de43b44_36b79b7d",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 55
      },
      "revId": "f7ea8ca3d621e65292a35ffa0335a9cb2d39c2de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4771c39c_371e45f4",
        "filename": "include/dbus_singleton.hpp",
        "patchSetId": 6
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-24T15:28:54Z",
      "side": 1,
      "message": "let me rephrase:  This isn\u0027t in a external-client-facing library ABI, so the \"typical usage\" is found by looking at the bmcweb code that currently uses it.\n\nIf this were in an a library ABI, yes, a typical usage would be totally reasonable.",
      "parentUuid": "51172cd0_1288761b",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 55
      },
      "revId": "f7ea8ca3d621e65292a35ffa0335a9cb2d39c2de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d68ce83_eaf47ded",
        "filename": "src/dbus_singleton.cpp",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-23T23:10:06Z",
      "side": 1,
      "message": "This isn\u0027t true.  io continues to be referenced after this is called, and the lifetimes need to match.",
      "range": {
        "startLine": 21,
        "startChar": 20,
        "endLine": 21,
        "endChar": 64
      },
      "revId": "f7ea8ca3d621e65292a35ffa0335a9cb2d39c2de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d0ab2b8_37d6f410",
        "filename": "src/dbus_singleton.cpp",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-23T23:43:14Z",
      "side": 1,
      "message": "Could you elaborate, what will be referenced? The io_context inside sdbusplus::asio::connection?\n\nAnd the concern is that |io_context| gets destroyed. but we still reference it inside |systemBus|?",
      "parentUuid": "0d68ce83_eaf47ded",
      "range": {
        "startLine": 21,
        "startChar": 20,
        "endLine": 21,
        "endChar": 64
      },
      "revId": "f7ea8ca3d621e65292a35ffa0335a9cb2d39c2de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d626987_96cb54a4",
        "filename": "src/dbus_singleton.cpp",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-24T15:28:54Z",
      "side": 1,
      "message": "Correct.  making the statement that \"io won\u0027t be referenced anymore\" isn\u0027t correct, io will be referenced quite often through sdbusplus::asio::connection.",
      "parentUuid": "6d0ab2b8_37d6f410",
      "range": {
        "startLine": 21,
        "startChar": 20,
        "endLine": 21,
        "endChar": 64
      },
      "revId": "f7ea8ca3d621e65292a35ffa0335a9cb2d39c2de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27fe2f24_70918c90",
        "filename": "src/dbus_singleton.cpp",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-23T23:10:06Z",
      "side": 1,
      "message": "possible nullptr dereference.  Please review the cpp core guidelines and the existing code for how we handle pointers.  In this case, I suspect io should\u0027ve been a reference.",
      "range": {
        "startLine": 23,
        "startChar": 46,
        "endLine": 23,
        "endChar": 47
      },
      "revId": "f7ea8ca3d621e65292a35ffa0335a9cb2d39c2de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3b6f1ec_6f303e4d",
        "filename": "src/dbus_singleton.cpp",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-23T23:24:33Z",
      "side": 1,
      "message": "Why nullptr dereference is possible? \n\nWe should always call initialize first. Then line 23 won\u0027t be execute anymore.\n\nAnd initialize takes a reference.",
      "parentUuid": "27fe2f24_70918c90",
      "range": {
        "startLine": 23,
        "startChar": 46,
        "endLine": 23,
        "endChar": 47
      },
      "revId": "f7ea8ca3d621e65292a35ffa0335a9cb2d39c2de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73a318a3_28721589",
        "filename": "src/dbus_singleton.cpp",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-24T15:28:54Z",
      "side": 1,
      "message": "\u003e Why nullptr dereference is possible? \n\nsystembus(nullptr) would seg fault this code.\n\n\u003e \n\u003e We should always call initialize first.\n\u003e Then line 23 won\u0027t be execute anymore.\n\u003e \n\u003e And initialize takes a reference.\n\nIn general, that\u0027s not how secure coding guidelines work.  Code needs to be secure against users calling the API incorrectly.  Yes, in this case, it\u0027s not that likely someone would, but we follow the rules because nullptr dereferences are difficult to track down.",
      "parentUuid": "b3b6f1ec_6f303e4d",
      "range": {
        "startLine": 23,
        "startChar": 46,
        "endLine": 23,
        "endChar": 47
      },
      "revId": "f7ea8ca3d621e65292a35ffa0335a9cb2d39c2de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
/*
// Copyright (c) 2018 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
*/
/****************************************************************
 * This is an auto-generated header which contains definitions
 * to use Redfish DMTF defined messages.
 *
 * This header contains preprocessor defines which wrap
 * preparation functions for message with given id. The message
 * ids can be retrieved from Base.__ver__.json file.
 ***************************************************************/
#pragma once
#include <nlohmann/json.hpp>

namespace redfish {

namespace messages {

constexpr const char* messageVersionPrefix = "Base.1.2.0.";
constexpr const char* messageAnnotation = "@Message.ExtendedInfo";

/**
 * @brief Adds Message JSON object to error object
 *
 * @param[out] target   Target JSON to which message will be added
 * @param[in]  message  Message JSON that should be added to target
 *
 * @return None
 */
void addMessageToErrorJson(nlohmann::json& target,
                           const nlohmann::json& message);

/**
 * @brief Adds Message JSON object to target JSON
 *
 * @internal
 * This function has similar implementation to addMessageToJson(...), but
 * does not use nlohmann::json_pointer to avoid costly construction
 * @endinternal
 *
 * @param[out] target   Target JSON to which message will be added
 * @param[in]  message  Message JSON that should be added to target
 *
 * @return None
 */
void addMessageToJsonRoot(nlohmann::json& target,
                          const nlohmann::json& message);

/**
 * @brief Adds Message JSON object connected with specific field to target JSON
 *
 * @param[out] target      Target JSON to which message will be added
 * @param[in]  message     Message JSON that should be added to target
 * @param[in]  fieldPath   Path of related field
 *
 * @return None
 */
void addMessageToJson(nlohmann::json& target, const nlohmann::json& message,
                      const std::string& fieldPath);

/*********************************
 * AUTOGENERATED FUNCTIONS START *
 *********************************/

/*<<<<<<AUTOGENERATED_FUNCTIONS_DECLARATIONS>>>>>>*/

/*********************************
 * AUTOGENERATED FUNCTIONS END *
 *********************************/

}  // namespace messages

}  // namespace redfish

{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8f7a3bbe_e82d0360",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "Lots of comments;  This is looking like a great start!",
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02cede11_e21fe92d",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 82,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "Generally rather than an explicit ID (which can have uniqueness problems) in other places we\u0027ve relied on just printing \"this\" pointer as the identifier.",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 24
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdf399c8_ccbbdc3c",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "Slightly confused here why doResolve needs to store data?  Would it be better just loaded into a class variable prior to resolving the dns?",
      "range": {
        "startLine": 86,
        "startChar": 19,
        "endLine": 86,
        "endChar": 42
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eacb25c_89c2f985",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 278,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "Every time you capture by value like this, you\u0027re making a complete copy of the data, which I\u0027m not sure you intended.",
      "range": {
        "startLine": 278,
        "startChar": 26,
        "endLine": 278,
        "endChar": 30
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "add36b4d_1539c7e4",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 279,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "If the operation got aborted (ie, the request completed within the timeout) we should not be closing the connection.  I would expect this code to to nothing.",
      "range": {
        "startLine": 279,
        "startChar": 0,
        "endLine": 279,
        "endChar": 60
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f98f37f_19f4f10b",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 289,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "We shouldn\u0027t ignore timer errors like this.  If the timer subsystem in linux has failed us, we can just abort entirely, something has gone very wrong, and we should clean up and get out.",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 289,
        "endChar": 60
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee582f70_520f56d9",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 334,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "This is going to force a re-resolve for every request, which I\u0027m pretty sure isn\u0027t what we want.  We only want to re-resolve if the system stops responding.",
      "range": {
        "startLine": 334,
        "startChar": 12,
        "endLine": 334,
        "endChar": 47
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "072067ba_69251c1a",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 394,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "This can\u0027t be the final behavior;  We will overwhelm servers this way if we get a flood of events, and we spin up one connection per event.  There needs to be some kind of queue, and a limit on number of connections per client (probably 1-4 is a good reasonable starting place).\n\nThis is what the requestDataQueue variable was supposed to handle in the old code, and I don\u0027t think we can remove it.",
      "range": {
        "startLine": 394,
        "startChar": 8,
        "endLine": 394,
        "endChar": 60
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d7cfc75_c199fe8a",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 429,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "nit, this-\u003e isn\u0027t required for member classes.",
      "range": {
        "startLine": 429,
        "startChar": 8,
        "endLine": 429,
        "endChar": 14
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c5272ee_50abc82a",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 436,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "probably want unordered_map here.",
      "range": {
        "startLine": 436,
        "startChar": 9,
        "endLine": 436,
        "endChar": 12
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "455c1737_4ec93aa2",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 467,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "This is doing your key lookup twice.  The API you\u0027re looking for here is try_emplace().  The ret.second parameter tells you if the element was constructed.",
      "range": {
        "startLine": 467,
        "startChar": 28,
        "endLine": 467,
        "endChar": 36
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "421eb687_651e4a7d",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 476,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "I would\u0027ve expected the \"connectionExists\" and \"createConnection\" methods to be private to a user of this interface.  There\u0027s less left to implementation details in that way, and it simplifies the calling code.",
      "range": {
        "startLine": 451,
        "startChar": 0,
        "endLine": 476,
        "endChar": 8
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "040eae57_0b8b0132",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 476,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "You shouldn\u0027t need to construct a temporary here with emplace (it kinda defeats the purpose), and also requires your ConnectionPool element to have a move operator, which ideally you wouldn\u0027t want.\n\nping me on discord if you cant get the in-place construction to work, it should definitely be possible here.",
      "range": {
        "startLine": 476,
        "startChar": 12,
        "endLine": 476,
        "endChar": 26
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d52047bd_24a1aafa",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 491,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "Please don\u0027t use exceptions for this kind of error handling;  Other bmcweb code prefers range checks and return codes for handlable (ie non fatal) errors.",
      "range": {
        "startLine": 487,
        "startChar": 0,
        "endLine": 491,
        "endChar": 9
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9267cdb4_506701c8",
        "filename": "http/http_client.hpp",
        "patchSetId": 20
      },
      "lineNbr": 505,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T00:07:24Z",
      "side": 1,
      "message": "There retry policies are EventService subscription specific, and I wouldn\u0027t really expect them to be in a common class.  Aggregator retries (which are implementation defined) are going to have very different policies than EventSerivce, which is defined by the redfish spec.",
      "range": {
        "startLine": 495,
        "startChar": 0,
        "endLine": 505,
        "endChar": 1
      },
      "revId": "b61ba6f3154203ee2ec27df956c849e4111b6718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
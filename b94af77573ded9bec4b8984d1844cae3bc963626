{
  "comments": [
    {
      "key": {
        "uuid": "90da05d7_96b18d92",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 113,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "If you\u0027re going to add a generic utils function, can you audit the code and make sure that at least half of our uses actually use this?  This feels like something that deserves to be in its own patch, given that it\u0027s changing an existing way of doing things.",
      "range": {
        "startLine": 113,
        "startChar": 12,
        "endLine": 113,
        "endChar": 27
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b954455_d179b89d",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 113,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T14:11:19Z",
      "side": 1,
      "message": "This is going to change lot\u0027s of random places in code. Once it is accepted here we cant find and replace other usages with this function. No need to make all the changes in single patchset.",
      "parentUuid": "90da05d7_96b18d92",
      "range": {
        "startLine": 113,
        "startChar": 12,
        "endLine": 113,
        "endChar": 27
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "177cc97e_c2961b37",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 113,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-21T15:48:02Z",
      "side": 1,
      "message": "Please do that first, before using this pattern in a new patchset then.\n\nThe point is to ensure that this utility function can be used for all our existing uses of this without issue, and if it needs modified, or causes a significant thrash, we don\u0027t end up with 2 competing patterns in bmcweb.\n\nThese are the exact same rules we\u0027ve used for other generic \"utils\" type functions like readJson.",
      "parentUuid": "1b954455_d179b89d",
      "range": {
        "startLine": 113,
        "startChar": 12,
        "endLine": 113,
        "endChar": 27
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b06d02f_a4eb9da9",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 113,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-28T14:10:27Z",
      "side": 1,
      "message": "Function was removed.",
      "parentUuid": "177cc97e_c2961b37",
      "range": {
        "startLine": 113,
        "startChar": 12,
        "endLine": 113,
        "endChar": 27
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40387b2a_87923507",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 118,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "This causes a copy.",
      "range": {
        "startLine": 118,
        "startChar": 8,
        "endLine": 118,
        "endChar": 16
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d0972c8_93f8abe3",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 118,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T14:11:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "40387b2a_87923507",
      "range": {
        "startLine": 118,
        "startChar": 8,
        "endLine": 118,
        "endChar": 16
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e264c622_0622e9d6",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 118,
      "author": {
        "id": 1000164
      },
      "writtenOn": "2020-08-26T21:03:35Z",
      "side": 1,
      "message": "looks not done?",
      "parentUuid": "8d0972c8_93f8abe3",
      "range": {
        "startLine": 118,
        "startChar": 8,
        "endLine": 118,
        "endChar": 16
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b873cc4f_edc792be",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 118,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-27T13:29:27Z",
      "side": 1,
      "message": "You are right. I apologize, I forgot to git add this change.",
      "parentUuid": "e264c622_0622e9d6",
      "range": {
        "startLine": 118,
        "startChar": 8,
        "endLine": 118,
        "endChar": 16
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a29ae13b_27c7b286",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 118,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-28T14:10:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b873cc4f_edc792be",
      "range": {
        "startLine": 118,
        "startChar": 8,
        "endLine": 118,
        "endChar": 16
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6dc52d3_e03c12d5",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 125,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "Same as above, Please make sure this utils function is used consistently in the codebase, and add to its own review.",
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "242b69b4_38399a61",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 125,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T14:11:19Z",
      "side": 1,
      "message": "Once it is accepted here we can find/replace other places which can use this. Creating a function where other\u0027s do not is not inconsistency it\u0027s just good practice that should be supported. There are no rules telling you when you can or cannot create helper function. Of course some are more useful than the other. This is first helper function for this.\n\nThere should be no issues with larger code or being to slow. Compiler should inline this for us.\n\nLet\u0027s just do this step by step. Once it is in repository others can start to use it even if it\u0027s not changed everywhere yet.",
      "parentUuid": "d6dc52d3_e03c12d5",
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae5d6d18_f00496c3",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 125,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-21T15:48:02Z",
      "side": 1,
      "message": "Consider it \"accepted\" (technically James does that, but I don\u0027t see him having an issue with this), but a patch setting this utils function everywhere needs to merge in ahead of the rest of the patches.\n\nAlso, this function belongs in sdbusplus, not bmcweb, as it\u0027s a generic dbus construct, and has nothing specific to bmcweb.\n\n\"Creating a function where other\u0027s do not is not inconsistency it\u0027s just good practice that should be supported.\"\nBest practices are determined by what the existing code does today.  If you want to change that, feel free, I think this would be a good change, but it needs to happen ahead of adding new features, not together with it.\n\n\"There are no rules telling you when you can or cannot create helper function\"\nThere are plenty of rules that disallow the creation of a single line helper function that adds code overall.\n\"Code should be clear and concise.\" is the first rule of the coding standard.\n\n\"There should be no issues with larger code or being to slow. Compiler should inline this for us.\"\nAt no point was a worried about code size.  I agree, I think this will likely be inlined and optimized identically.  I\u0027m worried about consistency in the codebase, and being able to point to any example of GetAll properties, and have it be a similar callsite (be it a utils function, or a direct call to async_method_call).  If you\u0027re willing to do that, great, but please do it ahead of this patch.\n\nWe enforced similar rules for the other generic helper functions that are in the codebase.  Each one is used multiple times, and was used (or patchsets were in review) to use it on a majority of the codebase before they were merged.",
      "parentUuid": "242b69b4_38399a61",
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cf841e5_7217e033",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 125,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-28T14:10:27Z",
      "side": 1,
      "message": "Proposition in newest patchset. I will submit it to sdbusplus.",
      "parentUuid": "ae5d6d18_f00496c3",
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d4b9d18_9b97949e",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 147,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "This pattern can\u0027t be made a utils function given its inherent inefficiencies.  There have been many people that have tried to check this in, and every time it generates more code, larger binary sizes, and is slower, and gets removed again.\n\nIf you really want a pattern like this that\u0027s easier to use, I would look at and model it after the prototype of readJson that Jason Bills wrote (also in this codebase).  readJson is doing a very similar operation (just on json objects instead of dbus dicts), and doesn\u0027t have this problem.  Also, it\u0027s able to handle extra keys, and provide appropriate errors when that happens.\n\nOnce that\u0027s done, please put it in its own patch, and make sure the codebase is at least somewhat consistent in its use, so we know that this can be used as a generic utilities function.\n\nAlternatively, you can follow the pattern that all the existing code uses, as you\u0027re not doing anything unique here when reading in a dbus dict.",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 147,
        "endChar": 1
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "060ab7a8_46f46f02",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 147,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-17T09:12:27Z",
      "side": 1,
      "message": "Can you provide reviews where someone tried it and failed? I will check if I am able to provide better solution. Thanks in advance\nThis function is inline by compiler so the binary is not larger than code that is written inline.",
      "parentUuid": "1d4b9d18_9b97949e",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 147,
        "endChar": 1
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6253f5db_5399bbeb",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 147,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T07:22:44Z",
      "side": 1,
      "message": "@Ed are you suggesting something like this?\n\nauto [value1, value2] \u003d getIf\u003cint, std::string\u003e(variant, \"Key1\", \"Key2\");",
      "parentUuid": "060ab7a8_46f46f02",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 147,
        "endChar": 1
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dafb3acf_cec03e9f",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 147,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-21T15:24:06Z",
      "side": 1,
      "message": "I don\u0027t have an example in my head offhand.  The last attempt was a long time ago.  It should be in the gerrit/git history.\n\nThe API I\u0027m proposing is similar, but looks more like readJson, and doesn\u0027t rely on moved params to do its job (it unpacks directly into the correct types) I\u0027m suggesting an API like this.\n\nstd::vector\u003cstd::pair\u003cstd::string, dbus_variant\u003e\u003e\u0026 ret;\n\nstd::string foo;\nstd::optional\u003cuint32_t\u003e bar;\n\nif (getPropertiesFromResponse(res, ret, \"StringKeyToGet\", foo, \"OptionalBarKey\" bar){\n    return;\n}\n\n// If we get to this point, we know that the keys parsed correctly, and have type safe values in them.\n\n\nGo take a look at readJson.  It\u0027s very very similar to the above, and resolved more error handling bugs than I could count when it was introduced.",
      "parentUuid": "060ab7a8_46f46f02",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 147,
        "endChar": 1
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "391801d1_32fd76f9",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 147,
      "author": {
        "id": 1000164
      },
      "writtenOn": "2020-08-26T21:03:35Z",
      "side": 1,
      "message": "Agree that something like readJson for variants would be useful. The only real problem I have with this approach is it assumes the caller is using a vector\u003cpair\u003e, which for many reasons they may prefer a map, where this approach would be less efficient. This would cause multiple loops over the same data structure that were not needed. Further, as Ed suggested, it only allows you to pull out one item at a time, where readJson can be smarter and pull out many at once. I\u0027m not in love with this mostly for the multiple extra loops it will cause if used widely.",
      "parentUuid": "dafb3acf_cec03e9f",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 147,
        "endChar": 1
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74042e34_c1769931",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 147,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-28T08:24:50Z",
      "side": 1,
      "message": "I can do that, it will work like readJson. There is one thing you should be aware of. Iterating twice over map/vector is quite cheap if we assume we have line 1-10 keys in map, even for 100 keys it should be quite cheap.\n\nIf we do it like in readJson if key is present it will make a copy to assign it. Making a copy of vector might be expensive depending of how many elements has this vector. Even std::string might be heavy if it is long.\n\nEach getIf currently iterates over all keys (in worst case scenario) but it doesn\u0027t make a copy. If we do something like readJson we avoid duplicated iterations but we make a copy.\n\nWe can have both if we introduce new type similar to boost::python::pointer_wrapper for heavy types.\n\nuint32_t a; // makes a copy\nstd::optional\u003cuint32_t\u003e b; // makes a copy, but readProperties wont return false in case if not present\npointer_wrapper\u003cstd::string\u003e c; // won\u0027t make a copy\nstd::optional\u003cpointer_wrapper\u003cstd::string\u003e\u003e c; // won\u0027t make a copy and won\u0027t return false in case if not present\npointer_wrapper\u003cstd::vector\u003cstd::string\u003e\u003e d; // won\u0027t make a copy\n\nbool allNonOptionalPropertiesRead \u003d readProperties(ret, \"key1\", a, \"key2\", b, \"key3\", c, \"key4\", d);\n\nIn basic solution when user want a copy it will work exactly like readJson, if user wan\u0027t to avoid copy or want to read optional fields pointer_wrapper and or std::optional can be used.",
      "parentUuid": "391801d1_32fd76f9",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 147,
        "endChar": 1
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a83581a_3f4bebb5",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 31
      },
      "lineNbr": 147,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-28T14:10:27Z",
      "side": 1,
      "message": "Proposition in newest patchset. I will submit it to sdbusplus.",
      "parentUuid": "74042e34_c1769931",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 147,
        "endChar": 1
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01117c1a_e2d983bb",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 445,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "Please inline this utils function.  It assumes that the project has a generic way to translate dbus collection into redfish collection, which today we don\u0027t, therefore this code can just be inlined.\n\nAlternatively, you could put it in the details:: namespace in the telemetry namespace, to make it clear that this just just how telemetry does things.",
      "range": {
        "startLine": 445,
        "startChar": 12,
        "endLine": 445,
        "endChar": 35
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35f95c9a_0c7bcd56",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 461,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "Missing range checks.",
      "range": {
        "startLine": 461,
        "startChar": 34,
        "endLine": 461,
        "endChar": 35
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccdf5d6d_cbeba0ef",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 461,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-28T14:27:34Z",
      "side": 1,
      "message": "It looks like it is range check.\n\nIf there is no characters after pos then log error and continue.",
      "parentUuid": "35f95c9a_0c7bcd56",
      "range": {
        "startLine": 461,
        "startChar": 34,
        "endLine": 461,
        "endChar": 35
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94a99721_0513da4f",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 467,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "missing range checks.",
      "range": {
        "startLine": 467,
        "startChar": 65,
        "endLine": 467,
        "endChar": 66
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad22aaf2_f6e2065e",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 467,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-28T14:27:34Z",
      "side": 1,
      "message": "It looks like range check is in line 461",
      "parentUuid": "94a99721_0513da4f",
      "range": {
        "startLine": 467,
        "startChar": 65,
        "endLine": 467,
        "endChar": 66
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d7c2b64_6b7ed73c",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 73,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "Please don\u0027t include usings for these.  They imply that these types can be changed simply and on a single line.  Most of these can simply be inlined, to make the code more clear (as the rest of bmcweb does)",
      "range": {
        "startLine": 61,
        "startChar": 15,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "595b69dd_da0cfb5b",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 73,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T08:24:08Z",
      "side": 1,
      "message": "This is called self documenting code. if you have:\n\nstd::variant\u003c\n  std::vector\u003cstd::tuple\u003cstd::vector\u003csdbusplus::message::object_path\u003e, std::string, std::string, std::string\u003e\u003e,\n  std::vector\u003cstd::tuple\u003cstd::string, std::string, double, Timestamp\u003e\u003e,\n  std::vector\u003cstd::string\u003e,\n  std::string, uint32_t, int32_t\u003e reportProperties;\n\nThen it is really hard to tell what is what. Once you get used to it this really help you can always have some IDE which tells you what type is under ReportingType so you don\u0027t have to jump yourself. Here you don\u0027t event need that all you need is few lines above, and it helps you know that uint32_t is ScanPeriod if you look at the code I pasted in this comment you have no way to tell what does uint32_t mean.",
      "parentUuid": "6d7c2b64_6b7ed73c",
      "range": {
        "startLine": 61,
        "startChar": 15,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baf6afcc_89dd5097",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 74,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "This is a 2 line method, one line of which is a string specific to that handler.  Please just inline these two calls.",
      "range": {
        "startLine": 74,
        "startChar": 12,
        "endLine": 74,
        "endChar": 29
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eec5d248_5f2e42c6",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 74,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T08:24:08Z",
      "side": 1,
      "message": "There is no gain in inlining it, we will only increase code duplication.\n\nThis helper function is intended to be small, if you need details about what path is really under dbusReportPath you look inside, it will be in one place. It\u0027s a feature, not a big I agree but still it\u0027s a feature for us.",
      "parentUuid": "baf6afcc_89dd5097",
      "range": {
        "startLine": 74,
        "startChar": 12,
        "endLine": 74,
        "endChar": 29
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e579a86f_2202a614",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 85,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "The somewhat standard convention in bmcweb is to call by templated callback.  std::function might be better in some cases, but that\u0027s probably something for another patchset.",
      "range": {
        "startLine": 85,
        "startChar": 4,
        "endLine": 85,
        "endChar": 24
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddc8cfe5_8c010554",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 85,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "Again I am lost. I remember in previous comments you asked not to use templates. I will change it back to callback but I do not want to change parameters of callback. It is intended to be used like this to make code easier to read in metric_report/metric_report_definition",
      "parentUuid": "e579a86f_2202a614",
      "range": {
        "startLine": 85,
        "startChar": 4,
        "endLine": 85,
        "endChar": 24
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5e1dbdd_938e5353",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 85,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T22:44:23Z",
      "side": 1,
      "message": "My exact comment was \"This is only called in one place, it does not need to accept the callback by template parameter.  Simply call the callback directly.\"\n\nAt no point did I say to use a std::function.  What I meant was to inline your callback at the end of getReport.  But in this case, you\u0027re right, it shouldn\u0027t be a template at all, and should be a single call to the completion function.\n\n\"but I do not want to change parameters of callback.  It is intended to be used like this to make code easier to read in metric_report/metric_report_definition\"\nAs someone who needs to inspect for correctness, I find that code much harder to read, as it muddies the water about ownership.  A lambda does not (as much), and explicitly states at the call site which objects are being owned by what portions, and that the callback itself owns all the parameters it needs to continue (with the exception of the actual thing being returned)\n\nWith all of that said, just inline it like my previous advice was.  Apologies for missing this on the newest patchset.  It\u0027s been a few weeks, and I didn\u0027t have all this stuff hot in cache.",
      "parentUuid": "ddc8cfe5_8c010554",
      "range": {
        "startLine": 85,
        "startChar": 4,
        "endLine": 85,
        "endChar": 24
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0a5fa3c_af31e1c6",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 85,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T08:24:08Z",
      "side": 1,
      "message": "If we inline this std::function code here it will be no longer something that is ready to be reused in other places. I agree that some of it can be improved. See comments below.",
      "parentUuid": "b5e1dbdd_938e5353",
      "range": {
        "startLine": 85,
        "startChar": 4,
        "endLine": 85,
        "endChar": 24
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eab3cdca_bda5ddf8",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 85,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-21T12:43:57Z",
      "side": 1,
      "message": "Also this helper doesn\u0027t increase binary size. Compiler is very good at inlining lambdas that it produces same result if we inline it manually. Actually there is much smaller binary size if we use same lambda in many places. Compiler have no way to optimize it if we just copy paste it everywhere. What I didn\u0027t expect was that when we used std::function binary size was larger than with lambdas.\n\nSo if we look at this from performance side solution with this helper function and callback as template parameter is best solution. Execution time more or less the same. Only with large number of repeats solution with lambdas was noticeably better.\n\nApplication A had X calls to async_method_call with GetAll on some service. Application B had X calls to helper method with Callback type as template parameter. Two callbacks were introduced  - onError and onSuccess. To paste this X duplicated calls in both cases macro was used. Same code but in different style was in both applications.\n\nApplication A always uses plain code duplication.\nApplication B uses helper class and same lambda in each call:\n\nWhen X\u003d1: size of both applications is the same\n\nWhen X\u003d1000:\n- Application A: 2984792 (2,9M)\n- Application B: 183128 (179K)\n\nApplication B used helper and same lambda in each call, helper takes std::function\u003c...\u003e instead of templete parameter:\n\nWhen X\u003d1:\n- Application A: 133976 (131K)\n- Application B: 138072 (135K)\n\nWhen X\u003d1000:\n- Application A: 2984792 (2,9M)\n- Application B: 453464 (443K)\n\nApplication B uses helper class and different lambda with exactly the same code:\n\nWhen X\u003d1: size of both applications is the same\nWhen X\u003d1000:\n- Application A: 2984792 (2,9M)\n- Application B: 3046232 (3,0M)",
      "parentUuid": "e0a5fa3c_af31e1c6",
      "range": {
        "startLine": 85,
        "startChar": 4,
        "endLine": 85,
        "endChar": 24
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f1076f7_657cd929",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 105,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "In general, callback patterns like this include an error code, and guarantee that the callback is called in all cases.  Please resolve.",
      "range": {
        "startLine": 105,
        "startChar": 16,
        "endLine": 105,
        "endChar": 22
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ece34b20_49a94662",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 105,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T08:24:08Z",
      "side": 1,
      "message": "In general it\u0027s also common that callback is called only on success or you can pass multiple callbacks, on success, on error and have different callback for different cases. In this case this callback is only called on success. It doesn\u0027t include error code, because it won\u0027t be called on failure.\n\nWe can change it to take two callbacks, on success and on failure. It\u0027s a middle ground and we can reduce code future duplication, because error handling in most cases will be the same only on success callback will be different.\n\nIf sdbusplus used same pattern (on success callback and on failure callback) lots of code in bmcweb could be removed, you could just pass one of the generic error handling lambdas instead of having it always included in callback.",
      "parentUuid": "0f1076f7_657cd929",
      "range": {
        "startLine": 105,
        "startChar": 16,
        "endLine": 105,
        "endChar": 22
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "085f3e68_7523a68b",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 108,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "In general, the pattern for these functions is to simply return the item requested to the callback, and not include extra items (like asyncResp and id).  If the caller wants these things, they can add a lambda capture as their callback.",
      "range": {
        "startLine": 108,
        "startChar": 12,
        "endLine": 108,
        "endChar": 37
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7edb5c51_12239910",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 108,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T08:24:08Z",
      "side": 1,
      "message": "Good point, you are right",
      "parentUuid": "085f3e68_7523a68b",
      "range": {
        "startLine": 108,
        "startChar": 12,
        "endLine": 108,
        "endChar": 37
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d45f253a_b8fdf097",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 108,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-28T14:27:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7edb5c51_12239910",
      "range": {
        "startLine": 108,
        "startChar": 12,
        "endLine": 108,
        "endChar": 37
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b096636_5dd795ce",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 29,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "Can you post a reference to the redfish documentation on the type that we\u0027re trying to implement here?",
      "range": {
        "startLine": 29,
        "startChar": 18,
        "endLine": 29,
        "endChar": 23
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dfeeb67_f16cd679",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 29,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "I am a lost here. This is your comment:\n\"Please don\u0027t reference the design doc.  The code should stand on its own.\"\nAnyway, duration format is specified in ISO 8061",
      "parentUuid": "3b096636_5dd795ce",
      "range": {
        "startLine": 29,
        "startChar": 18,
        "endLine": 29,
        "endChar": 23
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b101b8ae_9c2088ec",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 29,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T22:44:23Z",
      "side": 1,
      "message": "A design doc is different than pointing to the spec in which this is implemented.  ISO8601 is great, but a link to the portion of the redfish spec outlining the specifics of how this property is handled would be great.  With that said, I\u0027m assuming it exists.  If it doesn\u0027t, no worries.",
      "parentUuid": "6dfeeb67_f16cd679",
      "range": {
        "startLine": 29,
        "startChar": 18,
        "endLine": 29,
        "endChar": 23
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69e3d736_15d820b7",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 32,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "Please make this a std::chrono::milliseconds, and put the time_t to milliseconds conversion into the calling code.",
      "range": {
        "startLine": 32,
        "startChar": 35,
        "endLine": 32,
        "endChar": 47
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6852bf7_d225c189",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 32,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T11:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69e3d736_15d820b7",
      "range": {
        "startLine": 32,
        "startChar": 35,
        "endLine": 32,
        "endChar": 47
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b175280_389f1f96",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "nit: Technically floor is still more correct here, as it would work for negative durations as well as positive ones, but considering this is only likely to see positives, this works, it\u0027s just a little harder to read.",
      "range": {
        "startLine": 39,
        "startChar": 29,
        "endLine": 39,
        "endChar": 42
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "299a4983_dfbc8d6e",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 39,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "floor is only useful for floating point types. Here we only uses milliseconds that type is long int or long long int.",
      "parentUuid": "3b175280_389f1f96",
      "range": {
        "startLine": 39,
        "startChar": 29,
        "endLine": 39,
        "endChar": 42
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5d653f7_5b81163f",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T22:44:23Z",
      "side": 1,
      "message": "Here\u0027s the page on std::chrono::floor:\nhttps://en.cppreference.com/w/cpp/chrono/duration/floor\n\nCould you point out where it claims this only works on floating point types?\n\n\nWith that said, I\u0027m not worried about it.  What you have works, and is reasonably easy to read.",
      "parentUuid": "299a4983_dfbc8d6e",
      "range": {
        "startLine": 39,
        "startChar": 29,
        "endLine": 39,
        "endChar": 42
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dde7e2df_70da1c44",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 39,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-17T08:20:44Z",
      "side": 1,
      "message": "Ok, I made some experiment with it to prove myself that it works. I will change it in next patchset",
      "parentUuid": "c5d653f7_5b81163f",
      "range": {
        "startLine": 39,
        "startChar": 29,
        "endLine": 39,
        "endChar": 42
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32439d81_5de045ea",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 39,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T12:49:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dde7e2df_70da1c44",
      "range": {
        "startLine": 39,
        "startChar": 29,
        "endLine": 39,
        "endChar": 42
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e368436f_0de1d6e8",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-21T15:24:06Z",
      "side": 1,
      "message": "I gave you an example that worked, but sure, the more examples the better.",
      "parentUuid": "dde7e2df_70da1c44",
      "range": {
        "startLine": 39,
        "startChar": 29,
        "endLine": 39,
        "endChar": 42
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ac5880e_8a657a2e",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 39,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-28T14:27:34Z",
      "side": 1,
      "message": "I think I reverted it back by accident during rebase. Changed duration_cast to floor again. Done.",
      "parentUuid": "e368436f_0de1d6e8",
      "range": {
        "startLine": 39,
        "startChar": 29,
        "endLine": 39,
        "endChar": 42
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2952ae8e_77bd0dae",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 52,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "I still really don\u0027t like that this chops off some of the dates.  It makes writing a consistent parser for it much harder, and might lead to cases where a user writes something against a short duration, then has it fail on longer durations.\n\nDo you know if there\u0027s anything in redfish or ISO 8601 that speaks to this problem?",
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2da2ba0b_fed78f6f",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 52,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "They allow to make a short version of it and does not require any padding. There is one problem with converting this date to and from binary because of daylight saving time. For example PT48H is different than P2D when there is a time change but I noticed that OpenBMC does not care about time zones",
      "parentUuid": "2952ae8e_77bd0dae",
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4adab40_50639d78",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 52,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T22:44:23Z",
      "side": 1,
      "message": "\"I noticed that OpenBMC does not care about time zones\"\nI\u0027m not sure where you got that impression.  We\u0027ve had bugs on timezones before.\nWith that said,  in this context we\u0027re only talking about duration, and I believe iso8601 defines a \"day\" as exactly 24 hours, so I think you\u0027re good here.\n\nok, I guess if it\u0027s allowed in the standard then I\u0027m fine with it.\n\nTechnically isn\u0027t PT48H invalid?",
      "parentUuid": "2da2ba0b_fed78f6f",
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d681c641_73c46688",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 52,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-17T08:20:44Z",
      "side": 1,
      "message": "From bmcweb code and from OpenBMC system that I works on because it is missing time zones database. Of course it require double check with community. Getting time zone is expensive operation.\nPT48H is valid.",
      "parentUuid": "b4adab40_50639d78",
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86256960_58a8f6c3",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 52,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-21T15:24:06Z",
      "side": 1,
      "message": "Generally we enforce timezones in the UI, that\u0027s where I\u0027ve seen bugs in the past.",
      "parentUuid": "d681c641_73c46688",
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01ca7557_136d7916",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "Ignoring the rest of the function, Isn\u0027t zero padding absolutely required for this case?\n\nP1DT1H1H10.9S is very different than\nP1DT1H1H10.0000009S\n\nAs is, your code will render the former, which is incorrect.\n\n\nI still think we should be zero padding everything, and not making any part optional.",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 53
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96769d7f_fae72aa7",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 67,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "Yes, but we have a double here. It generates \"PT1.000000S\" for single second for example. So some padding is applied. I do not like the idea of padding unless there is some other cases that you can point. Thanks in advance",
      "parentUuid": "01ca7557_136d7916",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 53
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40c37aa9_e5c8df01",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T22:44:23Z",
      "side": 1,
      "message": "Good point, I missed that double up there.  I still really don\u0027t like converting to and from floats here, it brings up all kinds of weirdness.  Any chance you\u0027d be willing to do my original one, which operated entirely on ints?\n\nIf not, I\u0027m not that worried about it.",
      "parentUuid": "96769d7f_fae72aa7",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 53
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90e172bd_35bc6d1f",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 70,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "This whole function is much much cleaner.",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 11
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88e3faa2_ec2383c7",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 70,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "Is it a compliment? Or is it connected with previous comments? Sorry",
      "parentUuid": "90e172bd_35bc6d1f",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 11
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d38c2875_4bb3dab9",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 70,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T22:44:23Z",
      "side": 1,
      "message": "This was a compliment.  You\u0027ve legitimately made this method much better but just about any measure.",
      "parentUuid": "88e3faa2_ec2383c7",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 11
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "720aca64_0bdb2f33",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 31
      },
      "lineNbr": 70,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T13:15:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d38c2875_4bb3dab9",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 11
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff0c7fe5_9a8f2a6c",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 51,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "Rather than organizing it this way, can you follow the existing patterns, and put these utils function in the same file as the nodes themselves?  If you need to split files up, split them up on node boundaries.\n\nIn this way, most of the code for a single handler exists in one file.",
      "range": {
        "startLine": 51,
        "startChar": 19,
        "endLine": 51,
        "endChar": 38
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7be79a85_ed00b746",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 51,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "There is no single pattern in bmcweb, sorry. It is not described well. This function getReportCollection is used in two nodes. It is designed this way to not divide two similar nodes - MetricReport and MetricReportDefinition.",
      "parentUuid": "ff0c7fe5_9a8f2a6c",
      "range": {
        "startLine": 51,
        "startChar": 19,
        "endLine": 51,
        "endChar": 38
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f397c0cd_27f92a25",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 51,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T22:44:23Z",
      "side": 1,
      "message": "I agree its not described well, but a majority of the code follows the pattern of including most of the logic for a given collection in one file, with the exception of generic, non-collection specific utils classes.  With that said, I\u0027m not that worried about this one.\n\nI only saw one use in this patchset.  It\u0027s fine if it\u0027s used in multiple places in the final solution.",
      "parentUuid": "7be79a85_ed00b746",
      "range": {
        "startLine": 51,
        "startChar": 19,
        "endLine": 51,
        "endChar": 38
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07e58c7a_a796ca7f",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 51,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T13:18:11Z",
      "side": 1,
      "message": "I guess you are fine with keeping it like this. Marking this thread as resolved.",
      "parentUuid": "f397c0cd_27f92a25",
      "range": {
        "startLine": 51,
        "startChar": 19,
        "endLine": 51,
        "endChar": 38
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1c1d71f_333eb209",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 83,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "This is a user facing string, it needs escaped.",
      "range": {
        "startLine": 83,
        "startChar": 32,
        "endLine": 83,
        "endChar": 38
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58158793_bee1f05e",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 83,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "It is done in getReport",
      "parentUuid": "c1c1d71f_333eb209",
      "range": {
        "startLine": 83,
        "startChar": 32,
        "endLine": 83,
        "endChar": 38
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c717ad8_e164757c",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 83,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T13:15:35Z",
      "side": 1,
      "message": "Marking it as resolved.",
      "parentUuid": "58158793_bee1f05e",
      "range": {
        "startLine": 83,
        "startChar": 32,
        "endLine": 83,
        "endChar": 38
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02087e79_1214672d",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "This is inline, not static.  A lot of your methods are missing this.  Please fix all of them.",
      "range": {
        "startLine": 87,
        "startChar": 4,
        "endLine": 87,
        "endChar": 11
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d8af305_27a94d3d",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T22:44:23Z",
      "side": 1,
      "message": "Sorry, this was a bad comment.  This, and the function below it don\u0027t need to be attached to this class at all.",
      "parentUuid": "02087e79_1214672d",
      "range": {
        "startLine": 87,
        "startChar": 4,
        "endLine": 87,
        "endChar": 11
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcdce4fc_a47626ca",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T13:15:35Z",
      "side": 1,
      "message": "MetricValues are part of MetricReport so it was natural to connect it to MetricReport. We can change this, but I still think this is the right place for this method.",
      "parentUuid": "3d8af305_27a94d3d",
      "range": {
        "startLine": 87,
        "startChar": 4,
        "endLine": 87,
        "endChar": 11
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "914045dc_f53d2dce",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 116,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "See comment in other file.  This is causing a loop over ret for every property, and doesn\u0027t give the ability to handle errors on unknown properties.  Please write this as the other handlers currently do.",
      "range": {
        "startLine": 116,
        "startChar": 27,
        "endLine": 116,
        "endChar": 32
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b511d192_a50e6c65",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 116,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T13:15:35Z",
      "side": 1,
      "message": "Answered in another comment which refers to same issue.",
      "parentUuid": "914045dc_f53d2dce",
      "range": {
        "startLine": 116,
        "startChar": 27,
        "endLine": 116,
        "endChar": 32
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38f21bab_94817fda",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 116,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-28T14:27:34Z",
      "side": 1,
      "message": "Closing it because it duplicates.\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/31692/31/include/dbus_utility.hpp#147",
      "parentUuid": "b511d192_a50e6c65",
      "range": {
        "startLine": 116,
        "startChar": 27,
        "endLine": 116,
        "endChar": 32
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb615b2a_f7f8e971",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 132,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "Please inline this as most other node classes do today.  Most node classes do duplicate this string (although it gets deduplicated later).  If you want to push this as a new pattern, that\u0027s a good discussion for a different patch moving all of the nodes to this pattern.",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 132,
        "endChar": 45
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03a0220d_6923a844",
        "filename": "redfish-core/lib/metric_report.hpp",
        "patchSetId": 31
      },
      "lineNbr": 132,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T13:15:35Z",
      "side": 1,
      "message": "I understand that this is something new, but it\u0027s not some new pattern which needs to be followed and changed everywhere, of course it would be nice if all strings that repeat in few places had consts like this.\n\nEven making const for something that is used once can be still good practice. Someone looking at this who is new to bmcweb will see that this string is schemaType.\n\nIn my opinion we should keep it. Defining a constant or variable is one of the basing things, we are not introducing new pattern here.",
      "parentUuid": "bb615b2a_f7f8e971",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 132,
        "endChar": 45
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbf00bb3_074a4e35",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 85,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "This is a user facing string.  It needs escaped.",
      "range": {
        "startLine": 85,
        "startChar": 27,
        "endLine": 85,
        "endChar": 30
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41abc830_ba80d6bd",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 85,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "Escaped in getReport",
      "parentUuid": "dbf00bb3_074a4e35",
      "range": {
        "startLine": 85,
        "startChar": 27,
        "endLine": 85,
        "endChar": 30
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c55ed4d6_597ca37b",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 85,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T22:44:23Z",
      "side": 1,
      "message": "Ok as is (although I would\u0027ve preferred it escaped here).",
      "parentUuid": "41abc830_ba80d6bd",
      "range": {
        "startLine": 85,
        "startChar": 27,
        "endLine": 85,
        "endChar": 30
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6da75629_307791ea",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 85,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T13:34:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c55ed4d6_597ca37b",
      "range": {
        "startLine": 85,
        "startChar": 27,
        "endLine": 85,
        "endChar": 30
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed5f4c6b_8200110d",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 104,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "If it\u0027s not either of these, you need to handle that with an error of some kind.  Given the way you\u0027ve organized this, that\u0027s going to be complicated.\n\nI\u0027d recommend implementing this as a non-loop method, that accepts and returns a single string, and uses empty string to return an error.",
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a6d3e67_c8eb8306",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 104,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "It is not required because on error we receive empty vector.",
      "parentUuid": "ed5f4c6b_8200110d",
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65b20dea_98c2a3f6",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 104,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T22:44:23Z",
      "side": 1,
      "message": "so if i call\nauto ret \u003d toReportActions({\"Event\", \"FOobar\"})\n\nRet is an empty collection?  I don\u0027t think so, or I\u0027m missing something.",
      "parentUuid": "4a6d3e67_c8eb8306",
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d16ee85_e0a51784",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 104,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T13:34:43Z",
      "side": 1,
      "message": "You will get: {\"RedfishEvent\"} only incorrect values are ommited. So if you want to check for error you could compare result size() with input size()",
      "parentUuid": "65b20dea_98c2a3f6",
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d345ed65_4402e78f",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 118,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "I think what I see here is explicitly creating an array of size 1?  Don\u0027t use an intermediate, use the existing nlohmann brace construction types to do this, or use push_back on that type.  Inlining this function call is hard to read, and considering it has an assignment operator in an rvalue, hard to verify it\u0027s correct (even if it is).",
      "range": {
        "startLine": 118,
        "startChar": 36,
        "endLine": 118,
        "endChar": 76
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "018bc795_22f45e0a",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 118,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "I have to use push_back here because bracket did not work. Ok, I will change it.",
      "parentUuid": "d345ed65_4402e78f",
      "range": {
        "startLine": 118,
        "startChar": 36,
        "endLine": 118,
        "endChar": 76
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45b062e3_129657ea",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 118,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T22:44:23Z",
      "side": 1,
      "message": "I agree, the brackets are super finiky to get right with nlohmann.  push_back is fine, but if you want, attach the bracket invocation you tried, and I can probably (maybe) tell you what\u0027s wrong with it.",
      "parentUuid": "018bc795_22f45e0a",
      "range": {
        "startLine": 118,
        "startChar": 36,
        "endLine": 118,
        "endChar": 76
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbfb5084_dc216d46",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 139,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "Please don\u0027t use auto here.",
      "range": {
        "startLine": 139,
        "startChar": 8,
        "endLine": 139,
        "endChar": 13
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff85b320_41ba77f2",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 139,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T07:28:25Z",
      "side": 1,
      "message": "Auto is not an issue here, compiler won\u0027t allow us to use this incorrectly:\nerror: invalid conversion from \u0027int*\u0027 to \u0027int\u0027\n\nType is not really that important here, you have type on the right side getIf\u003ctelemetry::ReportAction\u003e, you can have here telemetry::ReportAction* or std::optional\u003ctelemetry::ReportAction\u003e because that\u0027s the only way to implement it when exception are turned off.\n\nI see no reason to avoid auto here.",
      "parentUuid": "fbfb5084_dc216d46",
      "range": {
        "startLine": 139,
        "startChar": 8,
        "endLine": 139,
        "endChar": 13
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd337561_96a60293",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 139,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-28T14:27:34Z",
      "side": 1,
      "message": "getIf changed so this auto is no longer here.",
      "parentUuid": "ff85b320_41ba77f2",
      "range": {
        "startLine": 139,
        "startChar": 8,
        "endLine": 139,
        "endChar": 13
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6e649ce_a0153ded",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 140,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "See note about getIf",
      "range": {
        "startLine": 140,
        "startChar": 27,
        "endLine": 140,
        "endChar": 32
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb67a57f_5f647f0b",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 140,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T07:28:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a6e649ce_a0153ded",
      "range": {
        "startLine": 140,
        "startChar": 27,
        "endLine": 140,
        "endChar": 32
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff2c7106_3c426448",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 160,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "This is going to change the schema dependent on the value of a dbus property.  That generally breaks the rules that we\u0027ve tended to follow.  Are you sure that ScanPeriod doesn\u0027t have a null/zero state that redfish intends you to use here?",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 160,
        "endChar": 45
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dfb38b7_fdc8b835",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 160,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "Yes, redfish specification allows it. You do not have to show all attributes of scheme to user. You can hide some of it depending on other attributes.",
      "parentUuid": "ff2c7106_3c426448",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 160,
        "endChar": 45
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "283cc112_31f083f6",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 160,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T22:44:23Z",
      "side": 1,
      "message": "Redfish spec allows it, but bmcweb generally takes the policy of a schema being the same for a given resource, independent of values, to improve our test coverage.  There are several places we explicitly put in null, or unused values for other cases similar to this.  It helps a lot with the service validator being able to validate all endpoints.",
      "parentUuid": "4dfb38b7_fdc8b835",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 160,
        "endChar": 45
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "770f786c_6f91792d",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 160,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-31T13:48:09Z",
      "side": 1,
      "message": "Setting it to null is equal to not creating an attribute. Test coverage is same for both cases. Not required attributes in redfish schemas can be null or specific type. RedfishServiceValidator does not return fail if not required attribute is set to null. I would keep response as small as possible, especially that some attributes depend on other attributes.",
      "parentUuid": "283cc112_31f083f6",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 160,
        "endChar": 45
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1536e9f9_1d3e56af",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 162,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "This is a perfect case where your code is hard to read because of a using declaration.  It\u0027s really hard to verify this is correct, as ScanPeriod is opaque in this file.  Also, you declare the left side to auto, which doesn\u0027t convey the fact that it\u0027s a pointer, and needs to be checked.",
      "range": {
        "startLine": 162,
        "startChar": 66,
        "endLine": 162,
        "endChar": 76
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0d6303d_1154f139",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 162,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "Based on what std::get_if returns I would guess that it getIf returns a pointer. I noticed that I made a mistake, because I should pass telemetry::ScanPeriod* as an argument for template. I will fix it.\nscanPeriod ptr is verify in next line.",
      "parentUuid": "1536e9f9_1d3e56af",
      "range": {
        "startLine": 162,
        "startChar": 66,
        "endLine": 162,
        "endChar": 76
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a06f52f_e0f3dd2e",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 162,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T22:44:23Z",
      "side": 1,
      "message": "That\u0027s a perfect example then.  If you made a mistake as the guy that wrote it, what chance do the rest of us have :)\n\nThe normal \"loop over the parameters, and pick them out one at a time\" approach looks ugly, but it\u0027s the best that we\u0027ve been able to come up with for readability.\n\nIn all seriousness, this get_if and looping type safety stuff has been a problem for a long time, if you want to go solve it for bmcweb as a whole, similar to how readJson does it, I\u0027m all for it and happy to help review, test, or give advice.",
      "parentUuid": "b0d6303d_1154f139",
      "range": {
        "startLine": 162,
        "startChar": 66,
        "endLine": 162,
        "endChar": 76
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcd1a7b1_f4e9d211",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 162,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-17T08:20:44Z",
      "side": 1,
      "message": "No, I didn\u0027t make mistake. It matches to std::get_if function. Okay, I will see what are the possibility to solve it for whole bmcweb. Thanks",
      "parentUuid": "7a06f52f_e0f3dd2e",
      "range": {
        "startLine": 162,
        "startChar": 66,
        "endLine": 162,
        "endChar": 76
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c8637da_909168d6",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 162,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T07:22:44Z",
      "side": 1,
      "message": "Honestly I don\u0027t see how we can do something similar to readJson.\n\nNow we have something like this:\nstd::vector\u003cstd::pair, std::variant\u003cstd::string, int, double...\u003e\u003e ret;\nint* value1 \u003d getIf\u003cint\u003e(ret, \"Key1\");\nint* value2 \u003d getIf\u003cint\u003e(ret, \"Key2\");\n\nIf we want something readJson like we will have;\nstd::vector\u003cstd::pair, std::variant\u003cstd::string, int, double...\u003e\u003e ret;\nint* value1 \u003d nullptr;\nint* value2 \u003d nullptr;\ngetIf(ret, \u0026value1, \"Key1\", \u0026value2, \"Key2\");\n\nor if we want to have it via return value like it should be:\nauto [value1, value2] \u003d getIf\u003cint, int\u003e(ret, \"Key1\", \"Key2\");\n\nAbout type safety compiler checks it for us. We can be safer if we use std::optional it won\u0027t static_cast to std::time_t for example.\n\nAbout telemetry::ScanPeriod being an using, that\u0027s something now nowadays we don\u0027t have to worry. We all have or should have IDE which tells which type is under that using. My understanding of getIf is that it either return reference and throw exception on fail. Or returns something that need\u0027s to be checked before using. In this case the second one and there is no other way around it. If you use it incorrectly compiler should return compilation error. We can do a little better and prevent static cast if we have std::optional\u003cstd::reference_wrapper\u003cT\u003e\u003e or just optional\u003cT\u003e then it wont be possible to static cast like it would be possible with pointer compiler will do all the work for us.",
      "parentUuid": "dcd1a7b1_f4e9d211",
      "range": {
        "startLine": 162,
        "startChar": 66,
        "endLine": 162,
        "endChar": 76
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51a31b55_dd5c0f09",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 162,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-28T14:27:34Z",
      "side": 1,
      "message": "I\u0027m closing this thread same discussion is in different comment thread:\nhttps://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/31692/31/include/dbus_utility.hpp#147",
      "parentUuid": "6c8637da_909168d6",
      "range": {
        "startLine": 162,
        "startChar": 66,
        "endLine": 162,
        "endChar": 76
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcd6843d_424dc3e7",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 168,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-08-13T17:43:52Z",
      "side": 1,
      "message": "See note in other file, you\u0027re casting to several different types anyway.  Just use std::chrono::milliseconds here.",
      "range": {
        "startLine": 168,
        "startChar": 40,
        "endLine": 168,
        "endChar": 51
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60861d04_0de50286",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 168,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-08-13T21:18:50Z",
      "side": 1,
      "message": "Ok",
      "parentUuid": "fcd6843d_424dc3e7",
      "range": {
        "startLine": 168,
        "startChar": 40,
        "endLine": 168,
        "endChar": 51
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec25926b_19e97011",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 31
      },
      "lineNbr": 168,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-08-20T13:35:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60861d04_0de50286",
      "range": {
        "startLine": 168,
        "startChar": 40,
        "endLine": 168,
        "endChar": 51
      },
      "revId": "b94af77573ded9bec4b8984d1844cae3bc963626",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}
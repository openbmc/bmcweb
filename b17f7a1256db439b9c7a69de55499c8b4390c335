{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5e26f5d5_abea12dc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-09-25T20:15:15Z",
      "side": 1,
      "message": "Any sanity testing, e.g. Redfish validator?",
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a59e10b_e7466ca5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-26T19:11:40Z",
      "side": 1,
      "message": "ACK, Sure, can do.",
      "parentUuid": "5e26f5d5_abea12dc",
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c206d363_4195698e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-09-29T20:45:09Z",
      "side": 1,
      "message": "Seems reasonable would like some sanity testing",
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15d2bb23_2831ccef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2023-10-06T09:24:11Z",
      "side": 1,
      "message": "LGTM",
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "161c0a67_2f73746b",
        "filename": "http/http_connection.hpp",
        "patchSetId": 11
      },
      "lineNbr": 329,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-19T04:35:56Z",
      "side": 1,
      "message": "Do you think dispatch based on Adapter class(function overloading) suits better? We can remove all if const expr for adpter based code. Knowing about different types of possible adapters upfront looks complicating the code I feel. Now we are adding cases for testability as well.",
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cde30a8_7b908c7e",
        "filename": "http/http_connection.hpp",
        "patchSetId": 11
      },
      "lineNbr": 329,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-19T16:53:57Z",
      "side": 1,
      "message": "\u003e Do you think dispatch based on Adapter class(function overloading) suits better?\n\nWhat does this mean?  Can you provide some example code for what this dispatch would look like?\n\nAs a general rule, I tend to not prefer function overloading, because it makes code search harder.  Compared to just looking at this code, it\u0027s pretty clear what it does in all cases.  But I\u0027m open to something if you think there\u0027s a better pattern that\u0027s less code.",
      "parentUuid": "161c0a67_2f73746b",
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc83c1bb_6013400f",
        "filename": "http/http_connection.hpp",
        "patchSetId": 11
      },
      "lineNbr": 329,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-20T05:11:51Z",
      "side": 1,
      "message": "Please see the example for how to handle prepareMutualTls [here]( https://godbolt.org/z/jjvMxM8jf )\n\nYou can do the same pattern for all other adapter interfaces.",
      "parentUuid": "8cde30a8_7b908c7e",
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61a3deaf_00740eda",
        "filename": "http/http_connection.hpp",
        "patchSetId": 11
      },
      "lineNbr": 329,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-20T05:18:44Z",
      "side": 1,
      "message": "General Comment is that, we need not include tcp stream, ssl stream and test stream headers in http_connection. It is to follow \"open for extension and closed for modification\" rule. Right now we are modifying http_connection code for all possible adapters.",
      "parentUuid": "cc83c1bb_6013400f",
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "888edec2_8503aa97",
        "filename": "http/http_connection.hpp",
        "patchSetId": 11
      },
      "lineNbr": 329,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-20T18:22:38Z",
      "side": 1,
      "message": "I agree that if there were a clean way to do that, we should, but I think a minimal intrusion into the class compared to just not having tests, i\u0027ll take the former.\n\n\u003e Please see the example for how to handle prepareMutualTls here\n\nWhat you wrote looks like a lot more code, using template overloading (not just function overloading) to do what amounts to basically an if statement.\n\nvoid prepareMutualTls(boost::beast::ssl_stream\u003cT\u003e\u0026 adapter)\n\nlooks like you missed the template paramter T in your implementation here.\n\nI realize this is a judgement call, but I\u0027m going to say that the if constexpr code is less code, and more clear what\u0027s going on.",
      "parentUuid": "61a3deaf_00740eda",
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b105dad0_3f2fa6d0",
        "filename": "http/http_connection.hpp",
        "patchSetId": 11
      },
      "lineNbr": 329,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-26T05:32:59Z",
      "side": 1,
      "message": "There is not much code actually. It is just one extra-level of redirection. This is technique used in modern C++ libraries (such as range or sender-receiver) to enable customisation points using static polymorphism. \n\nI wrote the code just to give you an overall idea.\n\nPlease see the update example [here](https://godbolt.org/z/noYsTbT48 ) , Removed one unnecessary If const expr check; \nYes, readability is depending on the reader. To me, including tcp, ssl ,and test stream headers in http_connection looks a bit more coupled than necessary. \nWe can agree to disagree here.",
      "parentUuid": "61a3deaf_00740eda",
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6174628d_56b2c724",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 11
      },
      "lineNbr": 73,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2023-09-27T02:02:14Z",
      "side": 1,
      "message": "do you worry small changes in the http layer will cause this test to fail?",
      "range": {
        "startLine": 73,
        "startChar": 48,
        "endLine": 73,
        "endChar": 56
      },
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9e892c0_028af0a6",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 11
      },
      "lineNbr": 73,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-27T17:08:03Z",
      "side": 1,
      "message": "That\u0027s kind of the point of having the test.  If we make changes to the core that change the output (like the fact that date hasn\u0027t been present for a while), the test should fail.  Unless there was something you\u0027d like to see instead?",
      "parentUuid": "6174628d_56b2c724",
      "range": {
        "startLine": 73,
        "startChar": 48,
        "endLine": 73,
        "endChar": 56
      },
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15acb0aa_51fb3ebf",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 11
      },
      "lineNbr": 73,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2023-09-27T17:21:39Z",
      "side": 1,
      "message": "I was worried about changes in defaults that would cause this to look flaky, but if that is the intent then party on.",
      "parentUuid": "f9e892c0_028af0a6",
      "range": {
        "startLine": 73,
        "startChar": 48,
        "endLine": 73,
        "endChar": 56
      },
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e61f0771_48a291ef",
        "filename": "test/http/http_connection_test.cpp",
        "patchSetId": 11
      },
      "lineNbr": 73,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-27T17:22:59Z",
      "side": 1,
      "message": "Nothing in this payload is configurable (they\u0027re all built from fixed strings), so I\u0027m not sure how changes in defaults would effect anything.  If we get there, we can always make the test aware of whatever config items we use.",
      "parentUuid": "15acb0aa_51fb3ebf",
      "range": {
        "startLine": 73,
        "startChar": 48,
        "endLine": 73,
        "endChar": 56
      },
      "revId": "b17f7a1256db439b9c7a69de55499c8b4390c335",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
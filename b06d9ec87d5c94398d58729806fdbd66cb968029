{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "18c6083f_a4df71f4",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 194,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2023-05-20T01:20:04Z",
      "side": 1,
      "message": "We could check that hostSocket already exists immediately on connection instead of waiting until this point after two D-Bus calls.",
      "range": {
        "startLine": 190,
        "startChar": 0,
        "endLine": 194,
        "endChar": 5
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "293fa8fc_ac5fdc59",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 194,
      "author": {
        "id": 1001634
      },
      "writtenOn": "2023-05-22T19:04:48Z",
      "side": 1,
      "message": "I was planning to do that but but there is possibility that two request came in for same console at the same time and both of them observed hostSocket as null. right? I am trying to protect that case.",
      "parentUuid": "18c6083f_a4df71f4",
      "range": {
        "startLine": 190,
        "startChar": 0,
        "endLine": 194,
        "endChar": 5
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01106229_e106b4aa",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 194,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2023-05-22T21:56:20Z",
      "side": 1,
      "message": "Good point - I agree you do need this code here. It\u0027s still inefficient in the case of a second request coming in well after the first is established, but not a big deal to me.",
      "parentUuid": "293fa8fc_ac5fdc59",
      "range": {
        "startLine": 190,
        "startChar": 0,
        "endLine": 194,
        "endChar": 5
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08aaa378_1c2dea43",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 239,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2023-05-20T01:20:04Z",
      "side": 1,
      "message": "Seems like mutable should not be required here.",
      "range": {
        "startLine": 239,
        "startChar": 59,
        "endLine": 239,
        "endChar": 66
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cc1d61b_91e2ea99",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 239,
      "author": {
        "id": 1001634
      },
      "writtenOn": "2023-05-22T19:04:48Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "08aaa378_1c2dea43",
      "range": {
        "startLine": 239,
        "startChar": 59,
        "endLine": 239,
        "endChar": 66
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e9ea805_90339e4b",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 279,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2023-05-20T01:20:04Z",
      "side": 1,
      "message": "Not sure I understand the need for an ObjectMapper lookup here. We know exactly the service/object/interface/method we want to call, so why not just try to call it? It will eliminate a D-Bus round trip.",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 279,
        "endChar": 11
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb5d8b34_c9858e48",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 279,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-22T01:13:15Z",
      "side": 1,
      "message": "Yeah, that\u0027s probably the best bet given the client is connecting to a specific endpoint. Easy to do the backwards compatibility fixup that way too.\n\nIf we\u0027re trying to enumerate the exposed consoles then the mapper lookup gives us the necessary information.",
      "parentUuid": "7e9ea805_90339e4b",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 279,
        "endChar": 11
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a056d1ce_7599e7f0",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 279,
      "author": {
        "id": 1001634
      },
      "writtenOn": "2023-05-22T19:04:48Z",
      "side": 1,
      "message": "I am making this extra call to find service name. Are you saying I should use service name like \"xyz.openbmc_project.Console.default\"?",
      "parentUuid": "eb5d8b34_c9858e48",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 279,
        "endChar": 11
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2c9757a_2fa1eb1d",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 279,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-22T19:15:35Z",
      "side": 1,
      "message": "Isn\u0027t the service name xyz.openbmc_project.Console ?\n\nI\u0027m ok with avoiding the mapper here.  There\u0027s only one source of consoles.  If we get more, we can add the mapper complexity back.",
      "parentUuid": "a056d1ce_7599e7f0",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 279,
        "endChar": 11
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65eed1a9_ba49709a",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 279,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2023-05-22T21:20:58Z",
      "side": 1,
      "message": "As I understand it, in the new implementation an instance of obmc-console-server configured for \"console-id \u003d consoleXYZ\" will claim the bus name `xyz.openbmc_project.Console.consoleXYZ` and serve the object `/xyz/openbmc_project/console/consoleXYZ`. So if we know the object name (which we do - either hardcoded to `default` as in this PS - or ultimately, derived from the request path /console/\u003cconsoleXYZ\u003e), then we also know the bus name.",
      "parentUuid": "f2c9757a_2fa1eb1d",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 279,
        "endChar": 11
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8029b3b2_7c17e13c",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 279,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-22T21:27:37Z",
      "side": 1,
      "message": "\u003e will claim the bus name xyz.openbmc_project.Console.consoleXYZ\n\nWe have a bus name per console?  That\u0027s not how we\u0027ve handled this in other places, like sensors.  If that\u0027s the decision, I\u0027m ok with it, it just complicates this code (ie, we now have to have the mapper lookup).",
      "parentUuid": "65eed1a9_ba49709a",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 279,
        "endChar": 11
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5074ccb5_b8bfdbca",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 279,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-22T21:49:02Z",
      "side": 1,
      "message": "It was a decision taken in the sense that the existing implementation of obmc-console-server has only ever handled one upstream TTY. The implementation already has enough complexity that I think it\u0027s justified that we use multiple instances to expose multiple consoles. If we\u0027re going to move away from that then I\u0027d suggest a new implementation altogether that:\n\n1. Serves multiple upstream TTYs\n2. Listens for network clients directly\n3. Is implemented as an EM reactor\n4. Is not implemented in C (prefer Rust personally)\n\nThat\u0027s a pretty hulking set of desires and not something I immediately have time for.\n\nDespite the apparent complexity for the scope of what it deals with, the current implementation is by comparison relatively simple and agile.",
      "parentUuid": "8029b3b2_7c17e13c",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 279,
        "endChar": 11
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eff1fecc_b9d34ded",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 279,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-22T21:53:17Z",
      "side": 1,
      "message": "\u003e  The implementation already has enough complexity that I think it\u0027s justified that we use multiple instances to expose multiple consoles\n\nSure, but we\u0027ve just pushed the complexity into clients that want to access it, in this case bmcweb, to hunt down the service needed, which puts the complexity into the webserver, which is not where we\u0027d ideally want it.  It\u0027s not like the complexity went away.\n\nYour 1-4 sounds great, but I\u0027m with you in not having time for it.\n\nWith that said, I\u0027ll reiterate, this is fine as written.",
      "parentUuid": "5074ccb5_b8bfdbca",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 279,
        "endChar": 11
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ec6073c_56507394",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 279,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2023-05-22T21:56:20Z",
      "side": 1,
      "message": "Yes, there\u0027s one process/service per console. But it\u0027s an exact mapping between object and bus name.",
      "parentUuid": "8029b3b2_7c17e13c",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 279,
        "endChar": 11
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a29a55e_9b85795e",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 279,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-22T22:06:56Z",
      "side": 1,
      "message": "Right. There\u0027s no need for a mapper lookup. Just use the well-known bus and object name that can be derived from the websocket endpoint. The exception is the backwards-compat case, where you need to map \"console0\" to \"default\".",
      "parentUuid": "3ec6073c_56507394",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 279,
        "endChar": 11
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "395a082c_1d2276d1",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 279,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-22T22:11:54Z",
      "side": 1,
      "message": "To clarify, the mapper lookup is required if you want to enumerate the available consoles as an answer to a Redfish query. But that\u0027s a separate problem, and you pretty much want a mapper lookup for that anyway. In summary I can\u0027t see that there\u0027s a complexity problem here? We\u0027re just considering handling the connection to a specific websocket endpoint, right?",
      "parentUuid": "6a29a55e_9b85795e",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 279,
        "endChar": 11
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e30e547f_0170463a",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 279,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-22T22:53:25Z",
      "side": 1,
      "message": "\u003e Just use the well-known bus and object name that can be derived from the websocket endpoint.\n\noh man...... making that safe is going to be a challenge.  We don\u0027t have anywhere else we go user untrusted string -\u003e dbus name, and if we have a bug in the dbus name, dbus-broker will kick us off the broker which would be an attack vector.\n\nI\u0027m ok if we implement it this way, but please be aware of the security issues of bad-input attacks, and plan for mitigating them.",
      "parentUuid": "395a082c_1d2276d1",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 279,
        "endChar": 11
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a0faeed_ab3e12d9",
        "filename": "include/obmc_console.hpp",
        "patchSetId": 28
      },
      "lineNbr": 279,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-22T23:07:08Z",
      "side": 1,
      "message": "You can pre-compute the set of acceptable consoles though, which is admittedly a mapper query, but one that you shouldn\u0027t have to run on every connection attempt. Then you can check the websocket name for membership in the valid path set?",
      "parentUuid": "e30e547f_0170463a",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 279,
        "endChar": 11
      },
      "revId": "b06d9ec87d5c94398d58729806fdbd66cb968029",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "2d2d441b_ab4cb998",
        "filename": "redfish-core/lib/power.hpp",
        "patchSetId": 13
      },
      "lineNbr": 34,
      "author": {
        "id": 1000085
      },
      "writtenOn": "2019-07-31T23:15:34Z",
      "side": 1,
      "message": "Perhaps this is a simplistic question, but I was initially thrown off by having this in a struct, then having logic in the destructor. Does this have something to do with using this PowerMetrics in a lambda down below?",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 34,
        "endChar": 19
      },
      "revId": "39220cded00c4356cccba29ed69ecd8f8825b51e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf6f5b0e_5aa71e51",
        "filename": "redfish-core/lib/power.hpp",
        "patchSetId": 13
      },
      "lineNbr": 34,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2019-08-01T15:50:21Z",
      "side": 1,
      "message": "This actually has more to do with the async calls to get the metrics for each power supply. The async lambdas to get each metric are called to get the aggregation history for each power supply. Since its unknown when they\u0027ll return, to consolidate each metric correctly across all power supplies this struct is used to do the consolidation per metric when the lambda returns. Once all async call return, this struct is destroyed, therefore that is when the resulting consolidated metric values can be returned in Redfish.",
      "parentUuid": "2d2d441b_ab4cb998",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 34,
        "endChar": 19
      },
      "revId": "39220cded00c4356cccba29ed69ecd8f8825b51e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c244296_ea81a129",
        "filename": "redfish-core/lib/power.hpp",
        "patchSetId": 13
      },
      "lineNbr": 34,
      "author": {
        "id": 1000085
      },
      "writtenOn": "2019-08-01T19:22:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cf6f5b0e_5aa71e51",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 34,
        "endChar": 19
      },
      "revId": "39220cded00c4356cccba29ed69ecd8f8825b51e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d56fb22_40314ae4",
        "filename": "redfish-core/lib/power.hpp",
        "patchSetId": 13
      },
      "lineNbr": 173,
      "author": {
        "id": 1000085
      },
      "writtenOn": "2019-08-01T20:03:59Z",
      "side": 1,
      "message": "This through me for a loop, read it wrong.\nSo, you are adding elements to a maxTotals \"array\", later on (up there) you are finding the maximum total in that \"array\" and returning that to Redfish field.",
      "range": {
        "startLine": 164,
        "startChar": 0,
        "endLine": 173,
        "endChar": 17
      },
      "revId": "39220cded00c4356cccba29ed69ecd8f8825b51e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4f11269_e0ad7ae9",
        "filename": "redfish-core/lib/power.hpp",
        "patchSetId": 13
      },
      "lineNbr": 173,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2019-08-01T20:34:01Z",
      "side": 1,
      "message": "correct, this is to time-align the entries in the aggregation history returned per power supply",
      "parentUuid": "7d56fb22_40314ae4",
      "range": {
        "startLine": 164,
        "startChar": 0,
        "endLine": 173,
        "endChar": 17
      },
      "revId": "39220cded00c4356cccba29ed69ecd8f8825b51e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e15a6491_97fc09f4",
        "filename": "redfish-core/lib/power.hpp",
        "patchSetId": 13
      },
      "lineNbr": 173,
      "author": {
        "id": 1000085
      },
      "writtenOn": "2019-08-01T22:36:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e4f11269_e0ad7ae9",
      "range": {
        "startLine": 164,
        "startChar": 0,
        "endLine": 173,
        "endChar": 17
      },
      "revId": "39220cded00c4356cccba29ed69ecd8f8825b51e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf58f20f_32bc0d01",
        "filename": "redfish-core/lib/power.hpp",
        "patchSetId": 13
      },
      "lineNbr": 422,
      "author": {
        "id": 1000085
      },
      "writtenOn": "2019-07-31T23:15:34Z",
      "side": 1,
      "message": "Have I forgotten something here or mixed it up in my head? Is this looking at ps0_input_power and/or ps1_input_power (well, 0 to 9, one to ten) values somewhere? I thought we had some timestamp/average values in one, then timestamp/max in another.",
      "range": {
        "startLine": 422,
        "startChar": 19,
        "endLine": 422,
        "endChar": 59
      },
      "revId": "39220cded00c4356cccba29ed69ecd8f8825b51e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adf78084_ee1e8bc2",
        "filename": "redfish-core/lib/power.hpp",
        "patchSetId": 13
      },
      "lineNbr": 422,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2019-08-01T15:50:21Z",
      "side": 1,
      "message": "This is for filtering to get only aggregation history from the power supplies (since any object could really implement the aggregation history interface). See line 445\n\nThis regex should be producing a filter for `ps*_input_power` where * \u003d\u003d to any ps number. (i.e. ps0_input_power, ps10_input_power, ps999_input_power, etc...).",
      "parentUuid": "bf58f20f_32bc0d01",
      "range": {
        "startLine": 422,
        "startChar": 19,
        "endLine": 422,
        "endChar": 59
      },
      "revId": "39220cded00c4356cccba29ed69ecd8f8825b51e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "785d65f9_f05d0993",
        "filename": "redfish-core/lib/power.hpp",
        "patchSetId": 13
      },
      "lineNbr": 422,
      "author": {
        "id": 1000085
      },
      "writtenOn": "2019-08-01T19:22:33Z",
      "side": 1,
      "message": "Peaking at a system, re-looking over all the code/strings... in this file, and seems to make more sense now.\n\nhttp://man7.org/linux/man-pages/man1/busctl.1.html\n...\n       get-property SERVICE OBJECT INTERFACE PROPERTY...\n           Retrieve the current value of one or more object properties. Takes a service name, object path, interface\n           name and property name. Multiple properties may be specified at once in which case their values will be\n           shown one after the other, separated by newlines. The output is by default in terse format. Use --verbose\n           for a more elaborate output format.\n...\n# busctl get-property  org.open_power.powersupply.ps0_input_power /org/open_power/sensors/aggregation/per_30s/ps0_input_power/average org.open_power.Sensor.Aggregation.History.Average Values\na(tx) 120 1564686697885 4 1564686667850 4 1564686637816 4 1564686607781 4 1564686577747 4 1564686547712 4 1564686517677 4 1564686487643 4 1564686457609 4 1564686427574 4 1564686397540 4 1564686367505 4 1564686337471 4 1564686305434 4 1564686275400 4 1564686245366 4 1564686215331 4 1564686185297 4 1564686155262 4 1564686125228 4 1564686095192 4 1564686065158 4 1564686035124 4 1564686005089 4 1564685975055 4 1564685945020 4 1564685914986 4 1564685884951 4 1564685854917 4 1564685824884 4 1564685794849 4 1564685764814 4 1564685732778 4 1564685702743 4 1564685672709 4 1564685642675 4 1564685612640 4 1564685582606 4 1564685552571 4 1564685522537 4 1564685492502 4 1564685462468 4 1564685432433 4 1564685402399 4 1564685372365 4 1564685342330 4 1564685312296 4 1564685282261 4 1564685252227 4 1564685222190 4 1564685190153 4 1564685160120 4 1564685130081 4 1564685100047 4 1564685070012 4 1564685039978 4 1564685009943 4 1564684979909 4 1564684949875 4 1564684919840 4 1564684889806 4 1564684859771 4 1564684829737 4 1564684799703 4 1564684769668 4 1564684739634 4 1564684709600 4 1564684679565 4 1564684647528 4 1564684617494 4 1564684587459 4 1564684557425 4 1564684527390 4 1564684497357 4 1564684467322 4 1564684437289 4 1564684407253 4 1564684377218 4 1564684347183 4 1564684317148 4 1564684287114 4 1564684257079 4 1564684227045 4 1564684197010 4 1564684166976 4 1564684134939 4 1564684104904 4 1564684074870 4 1564684044835 4 1564684014801 4 1564683984767 4 1564683954732 4 1564683924698 4 1564683894664 4 1564683864629 4 1564683834594 4 1564683804560 4 1564683774525 4 1564683744491 4 1564683714456 4 1564683684421 4 1564683654387 4 1564683624352 4 1564683594318 4 1564683562281 4 1564683532247 4 1564683502213 4 1564683472178 4 1564683442144 4 1564683412110 4 1564683382076 4 1564683352041 4 1564683322007 4 1564683291972 4 1564683261938 4 1564683231903 4 1564683201869 4 1564683171834 4 1564683141800 4 1564683111766 4\n#\n\nJust not 100% where the SERVICE and OBJECT are sneaking into this code. :-)",
      "parentUuid": "adf78084_ee1e8bc2",
      "range": {
        "startLine": 422,
        "startChar": 19,
        "endLine": 422,
        "endChar": 59
      },
      "revId": "39220cded00c4356cccba29ed69ecd8f8825b51e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2db7e38e_05221b12",
        "filename": "redfish-core/lib/power.hpp",
        "patchSetId": 13
      },
      "lineNbr": 422,
      "author": {
        "id": 1000085
      },
      "writtenOn": "2019-08-01T20:06:19Z",
      "side": 1,
      "message": "Spinler explained GetSubTree (below), now it makes more sense how you are finding this.",
      "parentUuid": "785d65f9_f05d0993",
      "range": {
        "startLine": 422,
        "startChar": 19,
        "endLine": 422,
        "endChar": 59
      },
      "revId": "39220cded00c4356cccba29ed69ecd8f8825b51e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d1eb706e_e22cd7bf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-09-13T20:59:56Z",
      "side": 1,
      "message": "nit: Reading from the msg I though NAN is also going to be omitted, but seems like only infinity and -infinity are omitted?",
      "range": {
        "startLine": 12,
        "startChar": 30,
        "endLine": 12,
        "endChar": 38
      },
      "revId": "617985be58abbcedcbe8fa42e4f8e2ca004bbbf8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f11a4df_f19df53c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-09-23T17:16:47Z",
      "side": 1,
      "message": "I\u0027ve updated the commit message to make this behavior more explicitly documented in the message.  Let me know if what\u0027s there makes sense.",
      "parentUuid": "d1eb706e_e22cd7bf",
      "range": {
        "startLine": 12,
        "startChar": 30,
        "endLine": 12,
        "endChar": 38
      },
      "revId": "617985be58abbcedcbe8fa42e4f8e2ca004bbbf8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b922ab3f_26d99cce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-09-13T20:59:56Z",
      "side": 1,
      "message": "Posted two questions. Otherwise, LGTM",
      "revId": "617985be58abbcedcbe8fa42e4f8e2ca004bbbf8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a07f324f_c5d8b4b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-09-15T14:32:55Z",
      "side": 1,
      "message": "Looks good to me. \nFrom your comment DMTF confirmed this behavior I assume?",
      "revId": "617985be58abbcedcbe8fa42e4f8e2ca004bbbf8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5afaac6f_3726abce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-09-19T16:08:36Z",
      "side": 1,
      "message": "yeah, they said that unavailable should be null.",
      "parentUuid": "a07f324f_c5d8b4b3",
      "revId": "617985be58abbcedcbe8fa42e4f8e2ca004bbbf8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55ee66ab_5152708b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-09-23T17:56:16Z",
      "side": 1,
      "message": "I also added this to the commit message.",
      "parentUuid": "5afaac6f_3726abce",
      "revId": "617985be58abbcedcbe8fa42e4f8e2ca004bbbf8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a63c5f7_accbd49d",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 2
      },
      "lineNbr": 993,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-09-13T20:59:56Z",
      "side": 1,
      "message": "Do we need to check `std::numeric_limits\u003cT\u003e::has_quiet_NaN \u003d\u003d true`?\n\nJust reading from https://en.cppreference.com/w/cpp/types/numeric_limits/quiet_NaN",
      "range": {
        "startLine": 993,
        "startChar": 17,
        "endLine": 993,
        "endChar": 28
      },
      "revId": "617985be58abbcedcbe8fa42e4f8e2ca004bbbf8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38cb58d1_8797ad58",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 2
      },
      "lineNbr": 993,
      "author": {
        "id": 1001252
      },
      "writtenOn": "2022-09-15T06:46:17Z",
      "side": 1,
      "message": "Since IEEE754 is a de-facto standard, checking it seems to be unnecessary.",
      "parentUuid": "6a63c5f7_accbd49d",
      "range": {
        "startLine": 993,
        "startChar": 17,
        "endLine": 993,
        "endChar": 28
      },
      "revId": "617985be58abbcedcbe8fa42e4f8e2ca004bbbf8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b80e4221_8884ae7f",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 2
      },
      "lineNbr": 993,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-09-23T17:16:47Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s necessary in this case, given that double will always support NAN in this template instantiation.  If we were pulling the double parameter from a template instantiation, yes, it would make sense to possibly check this, but in this instance, we know that std::numeric_limits\u003cdouble\u003e::quiet_NaN is specialized (and would fail to compile if it didn\u0027t), so there\u0027s no need to check it explicitly.",
      "parentUuid": "38cb58d1_8797ad58",
      "range": {
        "startLine": 993,
        "startChar": 17,
        "endLine": 993,
        "endChar": 28
      },
      "revId": "617985be58abbcedcbe8fa42e4f8e2ca004bbbf8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c934c284_8c0881da",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 2
      },
      "lineNbr": 993,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-10-14T07:22:53Z",
      "side": 1,
      "message": "According to link above:\n\n std::numeric_limits\u003cdouble\u003e::quiet_NaN() \u003d\u003d\n std::numeric_limits\u003cdouble\u003e::quiet_NaN() qeuals false\n \nSo I assume this if condition will always evaluate to false, std::isnan should be used instead.",
      "parentUuid": "b80e4221_8884ae7f",
      "range": {
        "startLine": 993,
        "startChar": 17,
        "endLine": 993,
        "endChar": 28
      },
      "revId": "617985be58abbcedcbe8fa42e4f8e2ca004bbbf8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ed8b6d4_ce94c6e9",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 2
      },
      "lineNbr": 993,
      "author": {
        "id": 1001252
      },
      "writtenOn": "2022-10-14T07:41:04Z",
      "side": 1,
      "message": "Good catch! (NaN \u003d\u003d NaN) always returns false in IEEE 754.",
      "parentUuid": "c934c284_8c0881da",
      "range": {
        "startLine": 993,
        "startChar": 17,
        "endLine": 993,
        "endChar": 28
      },
      "revId": "617985be58abbcedcbe8fa42e4f8e2ca004bbbf8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
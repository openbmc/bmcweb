{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f0621770_f1319bae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-04-25T15:40:01Z",
      "side": 1,
      "message": "nit: A few lines in here exceed 72 char limit",
      "range": {
        "startLine": 10,
        "startChar": 67,
        "endLine": 10,
        "endChar": 73
      },
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d20d2b51_e019ccdf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-04-27T16:52:18Z",
      "side": 1,
      "message": "Oops can\u0027t believe I missed that",
      "parentUuid": "f0621770_f1319bae",
      "range": {
        "startLine": 10,
        "startChar": 67,
        "endLine": 10,
        "endChar": 73
      },
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2dc376b_a4dcbbff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-04-25T15:40:01Z",
      "side": 1,
      "message": "nit: \"with the\"",
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a09fb605_9df36f65",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-04-27T16:52:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2dc376b_a4dcbbff",
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ba2f324_4eed3aa6",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 702,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-04-25T15:40:01Z",
      "side": 1,
      "message": "Directly looking at the filesystem seems problematic if PDC were to change this some day. Why not use the mapper interface to find the dumps and read their Path property?\n\nbusctl call xyz.openbmc_project.ObjectMapper /xyz/openbmc_project/object_mapper xyz.openbmc_project.ObjectMapper GetSubTreePaths sias \"/xyz/openbmc_project/dump/bmc\" 0 1 xyz.openbmc_project.Dump.Entry.BMC\n\nand then read the file path\n\nbusctl get-property xyz.openbmc_project.Dump.Manager /xyz/openbmc_project/dump/bmc/entry/1 xyz.openbmc_project.Common.FilePath Path",
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61b39314_c796315e",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 702,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2023-04-27T06:47:25Z",
      "side": 1,
      "message": "I agree. +1",
      "parentUuid": "8ba2f324_4eed3aa6",
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c29aaf1c_4df983cc",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 702,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-04-27T16:52:18Z",
      "side": 1,
      "message": "My preference would have been to do something like that. As far as I can tell PDC does not implement the Path property so I thought hardcoding was my only option.\n\n```\nbusctl introspect xyz.openbmc_project.Dump.Manager /xyz/openbmc_project/dump/bmc/entry/2\nNAME                                    TYPE      SIGNATURE RESULT/VALUE                             FLAGS\norg.freedesktop.DBus.Introspectable     interface -         -                                        -\n.Introspect                             method    -         s                                        -\norg.freedesktop.DBus.Peer               interface -         -                                        -\n.GetMachineId                           method    -         s                                        -\n.Ping                                   method    -         -                                        -\norg.freedesktop.DBus.Properties         interface -         -                                        -\n.Get                                    method    ss        v                                        -\n.GetAll                                 method    s         a{sv}                                    -\n.Set                                    method    ssv       -                                        -\n.PropertiesChanged                      signal    sa{sv}as  -                                        -\nxyz.openbmc_project.Common.OriginatedBy interface -         -                                        -\n.OriginatorId                           property  s         \"\"                                       emits-change writable\n.OriginatorType                         property  s         \"xyz.openbmc_project.Common.Originate... emits-change writable\nxyz.openbmc_project.Common.Progress     interface -         -                                        -\n.CompletedTime                          property  t         1682545314000000                         emits-change writable\n.StartTime                              property  t         1682545313999245                         emits-change writable\n.Status                                 property  s         \"xyz.openbmc_project.Common.Progress.... emits-change writable\nxyz.openbmc_project.Dump.Entry          interface -         -                                        -\n.InitiateOffload                        method    s         -                                        -\n.OffloadUri                             property  s         \"\"                                       emits-change writable\n.Offloaded                              property  b         false                                    emits-change writable\n.Size                                   property  t         356                                      emits-change writable\nxyz.openbmc_project.Dump.Entry.BMC      interface -         -                                        -\nxyz.openbmc_project.Object.Delete       interface -         -                                        -\n.Delete                                 method    -         -                                        -\nxyz.openbmc_project.Time.EpochTime      interface -         -                                        -\n.Elapsed                                property  t         1682545314000000                         emits-change writable\n```",
      "parentUuid": "8ba2f324_4eed3aa6",
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f043d627_fa333305",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 702,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-04-28T17:05:16Z",
      "side": 1,
      "message": "Ahh yep, sorry my system I was looking at had https://gerrit.openbmc.org/c/openbmc/phosphor-debug-collector/+/49466 on it. Once that gets in we could look into making this code utilize that. For now hard coding the path is as good as we\u0027re going to get.",
      "parentUuid": "c29aaf1c_4df983cc",
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3aecb6c5_11201598",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 776,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-04-25T15:40:01Z",
      "side": 1,
      "message": "After dealing with a few too many weird errors, I\u0027m always a fan of a \"BMCWEB_LOG_ERROR\" in these paths.",
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "170b6a6a_d36f9c0c",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 776,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-04-27T16:52:18Z",
      "side": 1,
      "message": "Fair point, I\u0027ve added logs to the parts where we returned a 500 Internal Error from lseek() or read() fails.",
      "parentUuid": "3aecb6c5_11201598",
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f810c88_f508949e",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 780,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-04-25T15:40:01Z",
      "side": 1,
      "message": "Out in meta-ibm, we have a 20MB max (https://github.com/openbmc/openbmc/blob/master/meta-ibm/recipes-phosphor/dump/phosphor-debug-collector_%25.bbappend#L13). Could we make this configurable via a meson config option?",
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71788971_51004801",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 780,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-04-27T16:52:18Z",
      "side": 1,
      "message": "The size is arbitrary so I\u0027m fine with upping it to 20MB.  \n\nI don\u0027t know about making it a compiler option.  I\u0027m trying to keep it in line with the existing dump flow used for /redfish/v1/Systems/\u003cstr\u003e/LogServices/EventLog/Entries/\u003cstr\u003e/attachment and that one is hardcoded.\n\nBased on previous efforts like https://gerrit.openbmc.org/c/openbmc/bmcweb/+/61131, allowing limits to be tuned via a compiler option seems like an approach that is discouraged.  If the maintainers are alright with a compiler option then I think that\u0027d be better left to its own CL.  In that case we should add a compiler option for the existing type of dump as well.",
      "parentUuid": "5f810c88_f508949e",
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "700ca83f_0ddfbbc1",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 780,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-04-28T17:05:16Z",
      "side": 1,
      "message": "Works for me",
      "parentUuid": "71788971_51004801",
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21e666ca_562e0eb7",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 780,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2023-05-02T09:30:17Z",
      "side": 1,
      "message": "can we have Max size D-bus property for each Dump/DumpType, so that bmcweb can use max dump size D-bus property which can be configured runtime.",
      "parentUuid": "700ca83f_0ddfbbc1",
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c308b36_c0a2865b",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 780,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-05-09T22:46:21Z",
      "side": 1,
      "message": "Implementing that would be a lot of extra work and involve repos outside of bmcweb.  You\u0027d need to create a new daemon that puts the max sizes on dbus or you\u0027d have to modify an existing daemon to add them.  If that\u0027s a direction you want to pursue then it should be a separate effort instead of part of this patch.\n\nI think it\u0027s possible, but what is the use case for something like that?  If you need a different max size then a compiler option seems like a more reasonable direction.  You could also directly modify the value via a downstream patch if upstream doesn\u0027t approve of adding a compiler option.",
      "parentUuid": "21e666ca_562e0eb7",
      "revId": "97445069fb30bee36b658efc55c75a61245baf12",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
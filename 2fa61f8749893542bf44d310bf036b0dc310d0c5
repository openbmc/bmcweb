{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "10481e64_3f1e7f4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 53
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "Lots of comments, most of them minor.",
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5b10ad8_53f0157a",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 53
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "Generally any sort of \"overwrite\" is an anti-pattern, and leads to cases where useful data gets overwritten.  I suspect we need to have a way to make this more concrete.",
      "range": {
        "startLine": 27,
        "startChar": 7,
        "endLine": 28,
        "endChar": 21
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bdf30e5_1a3f749a",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 53
      },
      "lineNbr": 34,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "This is something that needs handled.  It brings up the bigger question of \"how do you know if both 404?\"",
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7250ded_b8a93188",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 53
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "Now that this file is doing more than just queries, does it make sense to move these into a more general header (ie not query.hpp).\n\nWe could maybe do this later, but it seems useful to discuss, as it might change this code a little.",
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79e3a802_c75c7846",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 3,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "don\u0027t use deadline_timer.  In almost every case you want steady_timer.",
      "range": {
        "startLine": 3,
        "startChar": 21,
        "endLine": 3,
        "endChar": 35
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13dea4ee_aac7715b",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 255,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "if this is really required, we generally write this as\n\nif (satelliteInfo.empty()){\n    return;\n} \n\nto save on tabs below given our 80 character limits.\n\nBut in this case, is this check even needed?  Won\u0027t we just loop 0 times and be done?  Seems simpler.",
      "range": {
        "startLine": 254,
        "startChar": 0,
        "endLine": 255,
        "endChar": 9
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "033d245c_9b8e291b",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 261,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "fyi, when we get the latest boost::url package through ci, this is fixed, and we can just use std::string_view everywhere.",
      "range": {
        "startLine": 261,
        "startChar": 12,
        "endLine": 261,
        "endChar": 36
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "169f0767_0bba8c3a",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 270,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "thisReq.urlView already has the parsed uri.  We shouldn\u0027t need to parse it again.",
      "range": {
        "startLine": 270,
        "startChar": 12,
        "endLine": 270,
        "endChar": 69
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "314d042f_079680b8",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 277,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "This is a copy.",
      "range": {
        "startLine": 277,
        "startChar": 12,
        "endLine": 277,
        "endChar": 28
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd69ded1_26e9554d",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 278,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "Please don\u0027t use auto here.  I personally don\u0027t recall the type returned by segments().",
      "range": {
        "startLine": 278,
        "startChar": 12,
        "endLine": 278,
        "endChar": 17
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9da01581_ef73e807",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 279,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "what does segments[3].empty() mean?  in general, we support both forms of accessing a resource (with and without the trailing slash) because it removes bugs.  I don\u0027t think this code is doing what you\u0027re intending, and would work differently dependent on a trailing slash being present.",
      "range": {
        "startLine": 279,
        "startChar": 12,
        "endLine": 279,
        "endChar": 64
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d01505fb_5b205d3c",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 331,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "Why do we need this?  I don\u0027t see any cases where this is called without an empty vector?",
      "range": {
        "startLine": 331,
        "startChar": 0,
        "endLine": 331,
        "endChar": 25
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "092651a3_7da08063",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 335,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "This branch is redundant and I think can be removed.",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 335,
        "endChar": 9
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b12172de_02607c43",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 341,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "it looks like all this method is doing is just getting key names out of the unordered_map?  Could we just use the map directly in forwardRequest and remove this method?",
      "range": {
        "startLine": 341,
        "startChar": 0,
        "endLine": 341,
        "endChar": 42
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdfb52c7_7670ca4c",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 352,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "nit, new code we tend to prefer string_view.",
      "range": {
        "startLine": 352,
        "startChar": 19,
        "endLine": 352,
        "endChar": 26
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0eb311a1_d793b5c7",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 405,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "Please abstract this to a method on Response similar to what we do with Request.  At some point, we will need to make the Request and Response objects not #include any boost internals to improve compile times.",
      "range": {
        "startLine": 405,
        "startChar": 13,
        "endLine": 405,
        "endChar": 56
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dddd504_fdca7fd7",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 407,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "Please don\u0027t do this.  It is against the security rules to parse data from an outside source ignoring the encoding fields.",
      "range": {
        "startLine": 407,
        "startChar": 12,
        "endLine": 407,
        "endChar": 50
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45844a5b_a8ac1f78",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 414,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "Is there a more specific aggregation error we can be using here?  I thought redfish added one specifically for aggregators.",
      "range": {
        "startLine": 414,
        "startChar": 16,
        "endLine": 414,
        "endChar": 56
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dac0696_2265aced",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 426,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "This is a generalized anti pattern in bmcweb, for the reasons in the comment way up in this file.  Lets think through this and see if there\u0027s a way to have a better approach, maybe by adding to the completion handler?  Or flagging that this is coming through the 404 route?\n\nAt the very least, this also needs abstracted into some kind of clear() or clearBody() message.",
      "range": {
        "startLine": 426,
        "startChar": 32,
        "endLine": 426,
        "endChar": 58
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0faab78f_fc52bc57",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 431,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "Please don\u0027t completely replace the json object.  It causes bugs when things get aggregated.  use jsonValue.update() to add your keys to it.",
      "range": {
        "startLine": 431,
        "startChar": 0,
        "endLine": 431,
        "endChar": 58
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57f677b8_82ba0e9c",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 440,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "Once again, against security guidelines.  If we couldn\u0027t parse the payload that should\u0027ve been json as json, we need to return an error.  This needs thought through more for things like AdditionalDataUri, but considering I don\u0027t see handling of that in this patchset, I think we can just make this an error?",
      "range": {
        "startLine": 439,
        "startChar": 12,
        "endLine": 440,
        "endChar": 28
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1985d414_35632df2",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 460,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "nit, put this with the rest of your code.",
      "range": {
        "startLine": 460,
        "startChar": 8,
        "endLine": 460,
        "endChar": 24
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54d26932_7f9fffc2",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 463,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "You\u0027re making two copies here.  One on stack, one on heap.  At a minimum, we should avoid making the extra copy.  There\u0027s a reason we don\u0027t copy request objects, because in some cases they might be quite large (as is the case in firmware updates).  Do we have a plan for handling that?\n\nAlso, I suspect some of this needs abstracted in a regular copy constructor.  A copy can\u0027t fail, so we need a copy overload for that, and we can remove the failure check entirely..",
      "range": {
        "startLine": 463,
        "startChar": 8,
        "endLine": 463,
        "endChar": 78
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "777da6c5_6e35c3e1",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 53
      },
      "lineNbr": 481,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T23:07:46Z",
      "side": 1,
      "message": "can this use std::bind_front to avoid the lambda?  It has better behavior when call stacks are involved.",
      "range": {
        "startLine": 481,
        "startChar": 38,
        "endLine": 481,
        "endChar": 40
      },
      "revId": "2fa61f8749893542bf44d310bf036b0dc310d0c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
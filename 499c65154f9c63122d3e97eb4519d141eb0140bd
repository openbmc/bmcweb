{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "41debbe0_d498d925",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 69,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-19T14:48:56Z",
      "side": 1,
      "message": "readUrlSegments() returns false when the number of segments are not of the same size.  We can\u0027t use it for this situation where we only need to match the first 3 or 4 segments of \"thisUrl\".  I\u0027m guessing we\u0027d want to make a duplicate function that attempts to match only the first X segments of a URL?",
      "range": {
        "startLine": 69,
        "startChar": 8,
        "endLine": 69,
        "endChar": 38
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfd70b86_240df9ea",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 69,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-19T14:51:58Z",
      "side": 1,
      "message": "Yep, I realized that last night;  There\u0027s a fix coming momentarily.",
      "parentUuid": "41debbe0_d498d925",
      "range": {
        "startLine": 69,
        "startChar": 8,
        "endLine": 69,
        "endChar": 38
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc6ec926_586669d4",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 102,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-19T05:15:33Z",
      "side": 1,
      "message": "We can\u0027t rely on just updating \"@odata.id\" fields.  For example, we need to update the URIs under a Chassis\u0027 \"Action\" property\n\n\"Actions\": {\n    \"#Chassis.Reset\": {\n      \"@Redfish.ActionInfo\": \"/redfish/v1/Chassis/ChassisID/ResetActionInfo\",\n      \"target\": \"/redfish/v1/Chassis/ChassisID/Actions/Chassis.Reset\"\n    }\n\n\nThat\u0027s why earlier in previous patchsets I moved away from using \"@odata.id\" and instead attempted to add a prefix to any values that were strings.",
      "range": {
        "startLine": 102,
        "startChar": 11,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1408274c_f02716cd",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 102,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-19T05:20:37Z",
      "side": 1,
      "message": "Then we also need to detect when we\u0027re in an action.  (probably by looking for ActionInfo + target as the type.\n\nI don\u0027t think we can just parse all strings as URIs and if they parse, assume they need aggregated.  That leaves a lot to chance.",
      "parentUuid": "fc6ec926_586669d4",
      "range": {
        "startLine": 102,
        "startChar": 11,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "513c980c_a89d7145",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 102,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-19T14:48:56Z",
      "side": 1,
      "message": "\u003e Then we also need to detect when we\u0027re in an action.  (probably by looking for ActionInfo + target as the type.\nActions aren\u0027t the only one.  I\u0027ve seen some sort of \"protects\" field under ComponentIntegrity that contains a URI and I wouldn\u0027t be surprised if there are other ones hidden in the schema.  Trying to maintain a complete list would be a headache.\n\n\n\u003e I don\u0027t think we can just parse all strings as URIs and if they parse, assume they need aggregated.  That leaves a lot to chance.But in this instance we\u0027re only parsing URIs that exist on the satellite BMC so there isn\u0027t a risk of overwriting a URI that actually points to a location on the aggregating BMC.\n\nWe perform the same matching here that we do in determining if we need to forward a request to the satellite BMC.  Worst case scenario, we\u0027re messing up the same edge cases here that we mess up when determining the initial routing.  \n\nI think we can use the proper solution to the initial aggregation check here as well where eventually we\u0027ll be able to build a list of aggregateable URIs at runtime from the schema files.  We can use that same information here to determine if we need to add the prefix to any string that\u0027s parsable as a URI.  That way we don\u0027t have to worry about checking for specific keys.",
      "parentUuid": "1408274c_f02716cd",
      "range": {
        "startLine": 102,
        "startChar": 11,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04228666_6f021946",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 102,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-19T15:54:18Z",
      "side": 1,
      "message": "\u003e \u003e Then we also need to detect when we\u0027re in an action.  (probably by looking for ActionInfo + target as the type.\n\u003e Actions aren\u0027t the only one.  I\u0027ve seen some sort of \"protects\" field under ComponentIntegrity that contains a URI and I wouldn\u0027t be surprised if there are other ones hidden in the schema.  Trying to maintain a complete list would be a headache.\n\nComponentsProtected is what I\u0027m assuming you mean there?  Those are going to be NavigationReference types, so they\u0027ll have an odata.id key, so they should be caught by this check.\n\nI think Actions is the only weird one, and only because it drops outside the redfish resource tree.  You\u0027re right, I don\u0027t want to maintain a full list, but I also don\u0027t want to try parsing every string as URI, as it opens us up to possible attack vectors.  For example, what if I put a valid URL in a manufacturer field in a FRU?  This would try to aggregate it.\n\n\u003e \n\u003e \n\u003e \u003e I don\u0027t think we can just parse all strings as URIs and if they parse, assume they need aggregated.  That leaves a lot to chance.But in this instance we\u0027re only parsing URIs that exist on the satellite BMC so there isn\u0027t a risk of overwriting a URI that actually points to a location on the aggregating BMC.\n\u003e \n\u003e We perform the same matching here that we do in determining if we need to forward a request to the satellite BMC.\n\nThe difference is we do it on the URI of the payload, that we KNOW is a URI.  This is trying to do it on every string field in the system, of which some are very likely to parse as valid URIs.\n\n\u003e  Worst case scenario, we\u0027re messing up the same edge cases here that we mess up when determining the initial routing.  \n\u003e \n\u003e I think we can use the proper solution to the initial aggregation check here as well where eventually we\u0027ll be able to build a list of aggregateable URIs at runtime from the schema files.  We can use that same information here to determine if we need to add the prefix to any string that\u0027s parsable as a URI.  That way we don\u0027t have to worry about checking for specific keys.\n\nI think it\u0027s simpler than that, but the above would work too.",
      "parentUuid": "513c980c_a89d7145",
      "range": {
        "startLine": 102,
        "startChar": 11,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ec0ca53_b805b3aa",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 102,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-19T16:36:36Z",
      "side": 1,
      "message": "\u003e ComponentsProtected is what I\u0027m assuming you mean there?  Those are going to be NavigationReference types, so they\u0027ll have an odata.id key, so they should be caught by this check.\nYou\u0027re right, I was misremembering.  The property is \"TargetComponentURI\" which is a property of ComponentIntegrity.  There is also the Task property \"TargetUri\".  There could be others as well.  We could look to fix \"@odata.id\", \"TargetComponentURI\", \"TargetUri\", and any strings under \"Actions\".\n\n\u003e I don\u0027t want to maintain a full list, but I also don\u0027t want to try parsing every string as URI\nI completely agree.  However, I think we need to do one of those two options at least for now.\n\n\u003e but I also don\u0027t want to try parsing every string as URI, as it opens us up to possible attack vectors.  For example, what if I put a valid URL in a manufacturer field in a FRU?  This would try to aggregate it.\nWe\u0027re not aggregating it though, we\u0027re just modifying the URL that gets returned to the user.  If an attacker put a valid URL in the manufacturer field in a FRU then we\u0027d still return that as part of the response even if we don\u0027t add a prefix to it.\n\n\u003e The difference is we do it on the URI of the payload, that we KNOW is a URI.  This is trying to do it on every string field in the system, of which some are very likely to parse as valid URIs.\nWhat if we make sure the first two segments are \"redfish\" and \"v1\" on top of checking if it parses as a valid URI?  That should prevent us from modifying strings that aren\u0027t actually Redfish URIs.",
      "parentUuid": "04228666_6f021946",
      "range": {
        "startLine": 102,
        "startChar": 11,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3242cbfe_2d213342",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 102,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-19T16:43:48Z",
      "side": 1,
      "message": "\u003e \u003e ComponentsProtected is what I\u0027m assuming you mean there?  Those are going to be NavigationReference types, so they\u0027ll have an odata.id key, so they should be caught by this check.\n\u003e You\u0027re right, I was misremembering.  The property is \"TargetComponentURI\" which is a property of ComponentIntegrity.  There is also the Task property \"TargetUri\".  There could be others as well.  We could look to fix \"@odata.id\", \"TargetComponentURI\", \"TargetUri\", and any strings under \"Actions\".\n\nThe thought that just came to my head was can we do case-insensitive .ends_with(\"Uri\"), and does that cover most or all of the cases?\n\nOther idea, in theory, any URI is going to start with /redfish/v1..... that\u0027s far less brittle if we did that check, although still attackable, although I\u0027m not sure how bad the impact would be.\n\n\u003e \n\u003e \u003e I don\u0027t want to maintain a full list, but I also don\u0027t want to try parsing every string as URI\n\u003e I completely agree.  However, I think we need to do one of those two options at least for now.\n\u003e \n\u003e \u003e but I also don\u0027t want to try parsing every string as URI, as it opens us up to possible attack vectors.  For example, what if I put a valid URL in a manufacturer field in a FRU?  This would try to aggregate it.\n\u003e We\u0027re not aggregating it though, we\u0027re just modifying the URL that gets returned to the user.  If an attacker put a valid URL in the manufacturer field in a FRU then we\u0027d still return that as part of the response even if we don\u0027t add a prefix to it.\n\u003e \n\u003e \u003e The difference is we do it on the URI of the payload, that we KNOW is a URI.  This is trying to do it on every string field in the system, of which some are very likely to parse as valid URIs.\n\u003e What if we make sure the first two segments are \"redfish\" and \"v1\" on top of checking if it parses as a valid URI?  That should prevent us from modifying strings that aren\u0027t actually Redfish URIs.",
      "parentUuid": "5ec0ca53_b805b3aa",
      "range": {
        "startLine": 102,
        "startChar": 11,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7c9dc40_9ac9fc99",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 102,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-19T17:04:48Z",
      "side": 1,
      "message": "\u003e The thought that just came to my head was can we do case-insensitive .ends_with(\"Uri\"), and does that cover most or all of the cases?\nI think that will cover most cases if we do that in addition to \"@odata.id\", \"target\" and anything under \"Actions\".  I see \"target\" appear in a large number of schemas so I can\u0027t be sure they will only appear under \"Actions\".\n\n\u003e Other idea, in theory, any URI is going to start with /redfish/v1..... that\u0027s far less brittle if we did that check, although still attackable, although I\u0027m not sure how bad the impact would be.\nI think this would work as well.  I\u0027m also still not seeing how this is an attack concern.  Or at least how it only becomes a vulnerability if we apply a prefix.",
      "parentUuid": "3242cbfe_2d213342",
      "range": {
        "startLine": 102,
        "startChar": 11,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5488dce_5be32dce",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 112,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-19T05:15:33Z",
      "side": 1,
      "message": "Changing this to \"!\u003d\" gets rid of the segfault, but none of the prefixes get updated.",
      "range": {
        "startLine": 112,
        "startChar": 14,
        "endLine": 112,
        "endChar": 16
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e995f15_4f55974f",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 112,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-19T05:20:37Z",
      "side": 1,
      "message": "DOH.  Yep, that\u0027s a bug.  Was going too fast.",
      "parentUuid": "a5488dce_5be32dce",
      "range": {
        "startLine": 112,
        "startChar": 14,
        "endLine": 112,
        "endChar": 16
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f064d13_3c53f2f9",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 360,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-19T05:15:33Z",
      "side": 1,
      "message": "nit, findSatellite",
      "range": {
        "startLine": 360,
        "startChar": 16,
        "endLine": 360,
        "endChar": 29
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5e6ec0a_bc2d3521",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 360,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-19T05:20:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4f064d13_3c53f2f9",
      "range": {
        "startLine": 360,
        "startChar": 16,
        "endLine": 360,
        "endChar": 29
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31f536fa_f2b44ad6",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 516,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-19T04:47:57Z",
      "side": 1,
      "message": "I\u0027m testing through this patch on my machine and I\u0027m getting a segfault at some point during this function call.  I\u0027m going to investigate it further.",
      "range": {
        "startLine": 516,
        "startChar": 12,
        "endLine": 516,
        "endChar": 41
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51bdc916_f415277a",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 516,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-19T05:20:37Z",
      "side": 1,
      "message": "I should mention, I\u0027ve done zero testing on this yet.  We\u0027ll get there.",
      "parentUuid": "31f536fa_f2b44ad6",
      "range": {
        "startLine": 516,
        "startChar": 12,
        "endLine": 516,
        "endChar": 41
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5356ae5_98deea6e",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 516,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-19T14:48:56Z",
      "side": 1,
      "message": "No worries.  You mentioned offline you can\u0027t test yet so I was trying to help out a bit since I have setup handy.",
      "parentUuid": "51bdc916_f415277a",
      "range": {
        "startLine": 516,
        "startChar": 12,
        "endLine": 516,
        "endChar": 41
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1cd5736_b5ff9fb0",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 528,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-08-19T04:47:57Z",
      "side": 1,
      "message": "nit, I\u0027m guessing this was the placeholder leftover from the previous patch (the routing patch).  We add the prefixes when we call addPrefixes() on line 516.",
      "range": {
        "startLine": 527,
        "startChar": 0,
        "endLine": 528,
        "endChar": 25
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ffa07bf_dacb757d",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 32
      },
      "lineNbr": 528,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-19T05:20:37Z",
      "side": 1,
      "message": "Yeah, probably needs fixed.",
      "parentUuid": "d1cd5736_b5ff9fb0",
      "range": {
        "startLine": 527,
        "startChar": 0,
        "endLine": 528,
        "endChar": 25
      },
      "revId": "499c65154f9c63122d3e97eb4519d141eb0140bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "76fc8de0_520a37a5",
        "filename": "bmcweb.service.in",
        "patchSetId": 37
      },
      "lineNbr": 8,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2019-06-06T21:58:16Z",
      "side": 1,
      "message": "I\u0027m pretty sure you didn\u0027t intend to duplicate these, and I don\u0027t think they\u0027re needed at all.  Just call kill",
      "range": {
        "startLine": 8,
        "startChar": 11,
        "endLine": 8,
        "endChar": 72
      },
      "revId": "01fb9bbcb7fd48b27144e042ad6ee43868b09b88",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcc8e688_4f187785",
        "filename": "bmcweb.service.in",
        "patchSetId": 37
      },
      "lineNbr": 8,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2019-06-07T09:27:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76fc8de0_520a37a5",
      "range": {
        "startLine": 8,
        "startChar": 11,
        "endLine": 8,
        "endChar": 72
      },
      "revId": "01fb9bbcb7fd48b27144e042ad6ee43868b09b88",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "695b52c6_63a5c392",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 37
      },
      "lineNbr": 99,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2019-06-11T01:59:43Z",
      "side": 1,
      "message": "This is subtle, but relying on undefined behavior.\n\nurl.substr is going to return a std::string rvalue.\nthen calling c_str() on it, will return a pointer to said rvalue.\nBefore strtol is invoked, the rvalue will be destroyed, as it is no longer in scope, and there are no owning things looking at it.\n\nIf you declare your substr on the line above, all of the problems go away.",
      "range": {
        "startLine": 99,
        "startChar": 55,
        "endLine": 99,
        "endChar": 60
      },
      "revId": "01fb9bbcb7fd48b27144e042ad6ee43868b09b88",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1415342_b2832449",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 37
      },
      "lineNbr": 100,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2019-06-11T01:59:43Z",
      "side": 1,
      "message": "You should be comparing against the end of url, not dependent on whether or not it points at the null character.  Strings that contain a null character will not be handled correctly.",
      "range": {
        "startLine": 100,
        "startChar": 24,
        "endLine": 100,
        "endChar": 26
      },
      "revId": "01fb9bbcb7fd48b27144e042ad6ee43868b09b88",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02b9ee01_aa504dc0",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 37
      },
      "lineNbr": 102,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2019-06-11T01:59:43Z",
      "side": 1,
      "message": "What if the ID is zero?  Should this function be using a negative return type for it\u0027s error code instead of zero?",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 102,
        "endChar": 21
      },
      "revId": "01fb9bbcb7fd48b27144e042ad6ee43868b09b88",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6363fbaa_98f35d47",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 37
      },
      "lineNbr": 104,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2019-06-11T01:59:43Z",
      "side": 1,
      "message": "Here you are implicitly converting a long to an int.  While unlikely that someone could upload enough certificates to be an issue, lets just avoid casting and make this function return long.",
      "range": {
        "startLine": 104,
        "startChar": 15,
        "endLine": 104,
        "endChar": 20
      },
      "revId": "01fb9bbcb7fd48b27144e042ad6ee43868b09b88",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb0a7408_2ffe3c47",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 37
      },
      "lineNbr": 315,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2019-06-06T21:58:16Z",
      "side": 1,
      "message": "If i compare this function to how openssl parses these strings, I\u0027m seeing some significant differences in how bad characters are parsed as well as multiple property values.\n\nhttps://github.com/openssl/openssl/blob/7ed66e2634e6cfbb16a1ef975572e79a479217a8/apps/apps.c#L1607\n\nI wonder, should we reading this into an openssl X509 subject, then reading the values out from there?  That way, we can make sure that we handle all the corner cases correctly.\n\nWhat do you think?",
      "revId": "01fb9bbcb7fd48b27144e042ad6ee43868b09b88",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e6f6b01_cd2e1703",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 37
      },
      "lineNbr": 315,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2019-06-07T09:27:50Z",
      "side": 1,
      "message": "responded below at line 544",
      "parentUuid": "bb0a7408_2ffe3c47",
      "revId": "01fb9bbcb7fd48b27144e042ad6ee43868b09b88",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f940763_e1db72c9",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 37
      },
      "lineNbr": 544,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2019-06-07T09:27:50Z",
      "side": 1,
      "message": "To create X509 subject bmcweb need to have the certificate file, but as per design it does not have the certificate file(except during upload, it will not have when replacing or queriying for certificate details). Bmcweb queries phosphor-certificate-manager for certificate details.\n\nhttps://github.com/openbmc/phosphor-certificate-manager/blob/master/certificate.cpp#L294\n\nphosphor-certificate-manager reads the certificate file using X509 subject and returns it as comma separated key value pairs as shown in above link.\n\nExample\nphosphor-certificate-manager returns the subject string as \"C\u003dUS, ST\u003dNew York, L\u003dArmonk, O\u003dInternational\"\n\nas bmcweb is parsing the value returned by X509_get_subject_name from phosphor-certificate-manager the chances of bad characters, multiple values and e.t.c are not possible.\n\nPlease advise.",
      "revId": "01fb9bbcb7fd48b27144e042ad6ee43868b09b88",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0f2c980_313a26ae",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 37
      },
      "lineNbr": 544,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2019-06-07T22:43:07Z",
      "side": 1,
      "message": "Fair enough that openssl might not be the way to go here.\n\nWhat mostly worries me is that there is no error handling whatsoever if the string doesn\u0027t match what we\u0027re expecting, or fails to parse, or has unacceptable characters in it.  I also am not a big fan of adding yet another boost dependency (boost tokenizer) when the parser we\u0027re trying to write can be easily done with a single while loop, while at the same time avoiding a bunch of the string copies that seem to have been made.\n\n\n\nI took a little time to doctor up the (untested) version of what I\u0027d like to see instead, which has no string copies (with the exception of copying it into the output) and doesn\u0027t have any dependencies on boost.\n\nstatic void updateCertIssuerOrSubject(const std::string \u0026s,\n                                      nlohmann::json \u0026j)\n{\n    const std::string_view::iterator i \u003d s.begin();\n    while (i !\u003d s.end())\n    {\n        const std::string_view::iterator tokenBegin \u003d i;\n        /* Collect the type */\n        while (i !\u003d s.end() \u0026\u0026 *i !\u003d \u0027\u003d\u0027){\n            i++;\n        }\n        if (i \u003d\u003d s.end())\n        {\n            BMCWEB_LOG_ERROR(\"Hit end of string before finding the \u0027\u003d\u0027\");\n            return;\n        }\n        const std::string_view key \u003d s.substr(tokenBegin, i);\n        i++;\n        tokenBegin \u003d i;\n        while (i !\u003d s.end() \u0026\u0026 *i !\u003d \u0027,\u0027){\n            i++;\n        }\n        const std::string_view value \u003d s.substr(tokenBegin, i);\n\n        if (key \u003d\u003d \"L\")\n        {\n            value[\"City\"] \u003d value;\n        }\n        else if (key \u003d\u003d \"CN\")\n        {\n            value[\"CommonName\"] \u003d value;\n        }\n        else if (key \u003d\u003d \"C\")\n        {\n            value[\"Country\"] \u003d value;\n        }\n        else if (key \u003d\u003d \"O\")\n        {\n            value[\"Organization\"] \u003d value;\n        }\n        else if (key \u003d\u003d \"OU\")\n        {\n            value[\"OrganizationalUnit\"] \u003d value;\n        }\n        else if (key \u003d\u003d \"ST\")\n        {\n            value[\"State\"] \u003d value;\n        }\n        \n        while (i !\u003d s.end() \u0026\u0026 *i !\u003d \u0027 \u0027){\n            i++;\n        }\n    }\n}",
      "parentUuid": "9f940763_e1db72c9",
      "revId": "01fb9bbcb7fd48b27144e042ad6ee43868b09b88",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89b336e5_3ffadeb4",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 37
      },
      "lineNbr": 544,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2019-06-10T20:16:42Z",
      "side": 1,
      "message": "Let me know if there\u0027s something I\"m missing here.  I\u0027m happy to open a decendent review and test this if you think it\u0027s a better way to go.\n\nIf I\u0027m missing something, and the other way was better that\u0027s fine too.",
      "parentUuid": "d0f2c980_313a26ae",
      "revId": "01fb9bbcb7fd48b27144e042ad6ee43868b09b88",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7e0f259e_524f4786",
        "filename": "src/ssl_key_handler.cpp",
        "patchSetId": 4
      },
      "lineNbr": 553,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-21T02:38:11Z",
      "side": 1,
      "message": "I agree that in strict TLS we should fail handshake if client certificate is not provided. In this patch we have only two possibility.\n1) No MTLS\n2) Strict MTLS\n\n\nWhat we need (which was supported before this patch) is a Flexi MTLS\n\nIn this mode if client give MTLS certificate then uses it to authenticate the client. If not the handshake will still succeed and uses user/passwd option as fallback to authenticate clients.\n\nTo be specific what we need is a new TLS flag in which  only boost::asio::ssl::verify_peer is set.",
      "revId": "3ce8c08d24ec7736a3d880293fac76de4d9b5692",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4002b6b_5b530c78",
        "filename": "src/ssl_key_handler.cpp",
        "patchSetId": 4
      },
      "lineNbr": 553,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-21T04:27:13Z",
      "side": 1,
      "message": "\u003e I agree that in strict TLS we should fail handshake if client certificate is not provided. In this patch we have only two possibility.\n\u003e 1) No MTLS\n\u003e 2) Strict MTLS\n\u003e \n\u003e \n\u003e What we need (which was supported before this patch) is a Flexi MTLS\n\u003e \n\u003e In this mode if client give MTLS certificate then uses it to authenticate the client. If not the handshake will still succeed and uses user/passwd option as fallback to authenticate clients.\n\u003e \n\u003e To be specific what we need is a new TLS flag in which  only boost::asio::ssl::verify_peer is set.\n\n\nThat\u0027s what was there before, and it caused browsers to show the certificate screen.  That\u0027s the whole thing with this patch.",
      "parentUuid": "7e0f259e_524f4786",
      "revId": "3ce8c08d24ec7736a3d880293fac76de4d9b5692",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff086243_c446e25f",
        "filename": "src/ssl_key_handler.cpp",
        "patchSetId": 4
      },
      "lineNbr": 553,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-21T04:31:55Z",
      "side": 1,
      "message": "I know that. That is why I asked for one more flag c.tlsFlexi under which only the verifypeer is set. I have already told you about the aggregator use case where we need this fallback authentication mechanism.",
      "parentUuid": "c4002b6b_5b530c78",
      "revId": "3ce8c08d24ec7736a3d880293fac76de4d9b5692",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "625a0dc9_bf941912",
        "filename": "src/ssl_key_handler.cpp",
        "patchSetId": 4
      },
      "lineNbr": 553,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-21T04:33:47Z",
      "side": 1,
      "message": "the flag is driven by the redfish setting.  If we want to add a new setting to it, it would be a discussion with DMTF, not a discussion on a patchset.\n\nWhile I understand your use case and can respect it, there\u0027s not really anything we can do in this patchset.",
      "parentUuid": "ff086243_c446e25f",
      "revId": "3ce8c08d24ec7736a3d880293fac76de4d9b5692",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "678eca37_98683da7",
        "filename": "src/ssl_key_handler.cpp",
        "patchSetId": 4
      },
      "lineNbr": 553,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-21T04:41:30Z",
      "side": 1,
      "message": "Does that mean that the existing(previous) behaviour of fallback authentication is a buggy implementation of the redfish? I thought that was a feature. If someone relied on that already, this is going to be a bc break.",
      "parentUuid": "625a0dc9_bf941912",
      "revId": "3ce8c08d24ec7736a3d880293fac76de4d9b5692",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02bfbe6b_6b1b1a97",
        "filename": "src/ssl_key_handler.cpp",
        "patchSetId": 4
      },
      "lineNbr": 553,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-21T04:43:02Z",
      "side": 1,
      "message": "\u003e Does that mean that the existing(previous) behaviour of fallback authentication is a buggy implementation of the redfish?\n\nThere\u0027s two behaviors.  This is arguably trying to fix a regression.\n\n\u003e I thought that was a feature. If someone relied on that already, this is going to be a bc break.\n\nIf they were relying on it, then they were broken prior to the regression.",
      "parentUuid": "678eca37_98683da7",
      "revId": "3ce8c08d24ec7736a3d880293fac76de4d9b5692",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e34a6cab_05dde25c",
        "filename": "src/ssl_key_handler.cpp",
        "patchSetId": 4
      },
      "lineNbr": 553,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-21T04:49:30Z",
      "side": 1,
      "message": "I believe verify_fail_if_no_peer_cert was not there before(correct me ). Then when it got added optional mtls was still working because verify-peer was default. Now verify-peer is no more default that makes optional MTLS is broken.",
      "parentUuid": "02bfbe6b_6b1b1a97",
      "revId": "3ce8c08d24ec7736a3d880293fac76de4d9b5692",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19f11ef0_7a36b1c5",
        "filename": "src/ssl_key_handler.cpp",
        "patchSetId": 4
      },
      "lineNbr": 553,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-21T19:49:24Z",
      "side": 1,
      "message": "\u003e I believe verify_fail_if_no_peer_cert was not there before(correct me .\n\ncorrect, and ir is still not present in the non strict branch of this patch.\n\n\n\u003e Then when it got added optional mtls was still working because verify-peer was default. Now verify-peer is no more default that makes optional MTLS is broken.\n\nthis patch goes back to the default behavior/\n\n\n\nif this patch doesn’t do what you need, maybe you could propose a different one as an alternative? that might be faster than this conversation.",
      "parentUuid": "e34a6cab_05dde25c",
      "revId": "3ce8c08d24ec7736a3d880293fac76de4d9b5692",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bac4cd4_48c245aa",
        "filename": "src/ssl_key_handler.cpp",
        "patchSetId": 4
      },
      "lineNbr": 553,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-22T14:59:16Z",
      "side": 1,
      "message": "I can see that you are not in favour of allowing optional MTLS.I have a genuine use case for it.I don\u0027t think writing a new patch for it will solve the problem.\n\nIf optional MTLS is not going to be supported by bmcweb then I don\u0027t have any other comments on this patch. The changes are looking fine otherwise.",
      "parentUuid": "19f11ef0_7a36b1c5",
      "revId": "3ce8c08d24ec7736a3d880293fac76de4d9b5692",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d48a87f4_d29d0ffe",
        "filename": "src/ssl_key_handler.cpp",
        "patchSetId": 4
      },
      "lineNbr": 553,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-22T15:06:14Z",
      "side": 1,
      "message": "\u003e I can see that you are not in favour of allowing optional MTLS.\n\nthat is not what i said.  i have no problem with optional tls and understand the use case, My point was that going back and forth in a patchset comment section doesn\u0027t get us closer to that working.\n\n\u003e I have a genuine use case for it.I don\u0027t think writing a new patch for it will solve the problem.\n\u003e \n\u003e If optional MTLS is not going to be supported by bmcweb then I don\u0027t have any other comments on this patch. The changes are looking fine otherwise.\n\nIf you have patches for things you need, please send them in gerrit reviews.",
      "parentUuid": "9bac4cd4_48c245aa",
      "revId": "3ce8c08d24ec7736a3d880293fac76de4d9b5692",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9170dbef_f0086746",
        "filename": "src/ssl_key_handler.cpp",
        "patchSetId": 4
      },
      "lineNbr": 559,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-22T15:45:29Z",
      "side": 1,
      "message": "how does this path impact the bmcweb? will bmcweb fail to start or retry?",
      "revId": "3ce8c08d24ec7736a3d880293fac76de4d9b5692",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79c03938_2debc10e",
        "filename": "src/ssl_key_handler.cpp",
        "patchSetId": 4
      },
      "lineNbr": 559,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-22T15:46:48Z",
      "side": 1,
      "message": "strict tls mode (this path) fails connections that don’t have a client cert.",
      "parentUuid": "9170dbef_f0086746",
      "revId": "3ce8c08d24ec7736a3d880293fac76de4d9b5692",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
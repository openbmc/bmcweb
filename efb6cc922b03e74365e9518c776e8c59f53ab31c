{
  "comments": [
    {
      "key": {
        "uuid": "07cbd77c_4fe70586",
        "filename": "redfish-core/lib/processor.hpp",
        "patchSetId": 18
      },
      "lineNbr": 957,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-14T16:55:33Z",
      "side": 1,
      "message": "technically this should be AppliedOperatingConfig/@odata.id because we\u0027re one level deep in the json structure, and this is supposed to be a json pointer.",
      "range": {
        "startLine": 957,
        "startChar": 52,
        "endLine": 957,
        "endChar": 63
      },
      "revId": "efb6cc922b03e74365e9518c776e8c59f53ab31c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f02f058_a6302b21",
        "filename": "redfish-core/lib/processor.hpp",
        "patchSetId": 18
      },
      "lineNbr": 957,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-05-14T18:16:39Z",
      "side": 1,
      "message": "Thank you! I knew this looked wrong but didn\u0027t know \"json pointer\" is what I needed. Also updated the other propertyValueIncorrect above.",
      "parentUuid": "07cbd77c_4fe70586",
      "range": {
        "startLine": 957,
        "startChar": 52,
        "endLine": 957,
        "endChar": 63
      },
      "revId": "efb6cc922b03e74365e9518c776e8c59f53ab31c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8c742a5_3cb1ff10",
        "filename": "redfish-core/lib/processor.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1239,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-14T16:55:33Z",
      "side": 1,
      "message": "Slight organizational change, please do something like\n\n\nif (appliedConfigJson){\n   if (readJson)...\n\n\n   getProcessorObject....\n\n}\n\n\n\nThis helps the code be clean when the next parameter gets added that can be patched.",
      "range": {
        "startLine": 1237,
        "startChar": 0,
        "endLine": 1239,
        "endChar": 64
      },
      "revId": "efb6cc922b03e74365e9518c776e8c59f53ab31c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37578ae4_e2be4716",
        "filename": "redfish-core/lib/processor.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1239,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-05-14T18:16:39Z",
      "side": 1,
      "message": "If/when there are multiple parameters, I think there should still only be a single call to getProcessorObject to avoid repeating that lookup work. Your suggested logic would not allow that. Maybe we\u0027ll hold off on changing this until we see what the next patchable parameter actually entails?",
      "parentUuid": "b8c742a5_3cb1ff10",
      "range": {
        "startLine": 1237,
        "startChar": 0,
        "endLine": 1239,
        "endChar": 64
      },
      "revId": "efb6cc922b03e74365e9518c776e8c59f53ab31c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d463edfe_70c11535",
        "filename": "redfish-core/lib/processor.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1239,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-14T18:29:04Z",
      "side": 1,
      "message": "\u003e If/when there are multiple parameters, I think there should still only be a single call to getProcessorObject to avoid repeating that lookup work.\n\nThis would presume that all the processor interfaces are hosted by a single object, which for intel they probably are, but for other processors we won\u0027t have that gaurantee.  With that said, the current code is wildly inconsistent in that regard.\n\n\u003e Your suggested logic would not allow that. Maybe we\u0027ll hold off on changing this until we see what the next patchable parameter actually entails?\n\nI think the logic would still allow for it, it would just require a two step process, parsing the parameters to data structures, THEN calling the getProcessorObject interface if any of the parameters we need are set, with that said, getProcessorObject wouldn\u0027t work as is, because it requires all interfaces to be accounted for, and doesn\u0027t have a concept of \"here\u0027s the parameters you need\" so it would have to be changed in that scenario anyway.\n\nAt the very least even if that never happens, making this look like every other patch handler helps in comprehension by maintainers.",
      "parentUuid": "37578ae4_e2be4716",
      "range": {
        "startLine": 1237,
        "startChar": 0,
        "endLine": 1239,
        "endChar": 64
      },
      "revId": "efb6cc922b03e74365e9518c776e8c59f53ab31c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3259ca7_21ea1f4b",
        "filename": "redfish-core/lib/processor.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1239,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-14T18:33:15Z",
      "side": 1,
      "message": "\u003e \u003e If/when there are multiple parameters, I think there should still only be a single call to getProcessorObject to avoid repeating that lookup work.\n\u003e \n\u003e This would presume that all the processor interfaces are hosted by a single object, which for intel they probably are, but for other processors we won\u0027t have that gaurantee.  With that said, the current code is wildly inconsistent in that regard.\n\nJust to clarify, by \"current code\" I mean the current bmcweb code for other handlers on master, not anything in relation to this patchset.\n\n\u003e \n\u003e \u003e Your suggested logic would not allow that. Maybe we\u0027ll hold off on changing this until we see what the next patchable parameter actually entails?\n\u003e \n\u003e I think the logic would still allow for it, it would just require a two step process, parsing the parameters to data structures, THEN calling the getProcessorObject interface if any of the parameters we need are set, with that said, getProcessorObject wouldn\u0027t work as is, because it requires all interfaces to be accounted for, and doesn\u0027t have a concept of \"here\u0027s the parameters you need\" so it would have to be changed in that scenario anyway.\n\u003e \n\u003e At the very least even if that never happens, making this look like every other patch handler helps in comprehension by maintainers.",
      "parentUuid": "d463edfe_70c11535",
      "range": {
        "startLine": 1237,
        "startChar": 0,
        "endLine": 1239,
        "endChar": 64
      },
      "revId": "efb6cc922b03e74365e9518c776e8c59f53ab31c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "900b2bcd_b93ce8a5",
        "filename": "redfish-core/lib/processor.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1239,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-05-14T18:46:39Z",
      "side": 1,
      "message": "So I had used EthernetInterface::doPatch() as an example and that logic flow is what I intended for getProcessorObject: pass all the parameters as std::optionals into the single callback and then call per-parameter handlers as necessary.\n\nBut yeah, I did not account for the possibility of there being multiple object paths in play for a single processor since the single-path assumption was in place when I arrived.",
      "parentUuid": "d3259ca7_21ea1f4b",
      "range": {
        "startLine": 1237,
        "startChar": 0,
        "endLine": 1239,
        "endChar": 64
      },
      "revId": "efb6cc922b03e74365e9518c776e8c59f53ab31c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7e9d6c1_960aaa11",
        "filename": "redfish-core/lib/processor.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1239,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-14T18:49:42Z",
      "side": 1,
      "message": "Yeah.... ethernet interface (and hypervisor interface because it was copy-pasted from ethernet) is one of my poster children for what not to do in general, but it works in that context because there\u0027s only one implementation of the phosphor network interfaces that everyone shares, so it can wrongly make assumptions like that and not cause bugs.",
      "parentUuid": "900b2bcd_b93ce8a5",
      "range": {
        "startLine": 1237,
        "startChar": 0,
        "endLine": 1239,
        "endChar": 64
      },
      "revId": "efb6cc922b03e74365e9518c776e8c59f53ab31c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca810c33_c7686646",
        "filename": "redfish-core/lib/processor.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1239,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-05-14T21:43:30Z",
      "side": 1,
      "message": "Haha, of course I would find that code and use it then. I updated this code and retested.",
      "parentUuid": "c7e9d6c1_960aaa11",
      "range": {
        "startLine": 1237,
        "startChar": 0,
        "endLine": 1239,
        "endChar": 64
      },
      "revId": "efb6cc922b03e74365e9518c776e8c59f53ab31c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
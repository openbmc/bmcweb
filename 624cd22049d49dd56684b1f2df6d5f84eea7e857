{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d2387a34_0c07e9db",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-11-04T19:26:19Z",
      "side": 1,
      "message": "https://github.com/openbmc/phosphor-dbus-interfaces/blob/388b58f9a878f45b8ec243152cac5eb44ec90ced/yaml/xyz/openbmc_project/Inventory/Item/Dimm/MemoryLocation.interface.yaml#L9",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a114e8b9_8c7d967a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1001210
      },
      "writtenOn": "2022-11-07T03:59:35Z",
      "side": 1,
      "message": "Do I need to add a link to my header?",
      "parentUuid": "d2387a34_0c07e9db",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c926b37b_aade3a17",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-11-16T05:38:29Z",
      "side": 1,
      "message": "Nah, it is good.",
      "parentUuid": "a114e8b9_8c7d967a",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "745f3e5b_e408cd6e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-16T20:40:58Z",
      "side": 1,
      "message": "Adding it to commit message is still good to have IMO since it makes it easier to find the source.",
      "parentUuid": "c926b37b_aade3a17",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68172ea0_c913727e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-11-04T19:26:19Z",
      "side": 1,
      "message": "0\n-: UC1 Line exceeds max length (74\u003e72).\n    It\u0027s possible you intended to use one of the following exceptions:\n    1. Put logs or shell script in a quoted section with triple quotes (\u0027\u0027\u0027) before and after the section\n    2. Put a long link at the bottom in a footnote.  example: [1] https://my_long_link.com\n    Line that was too long:\n: \"Channel, Slot properties of the MemoryLocation interface are of type byte.\"\nTraceback (most recent call last):\n  File \"/data0/jenkins/workspace/ci-repository/openbmc/unit-test.py\", line 1211, in \u003cmodule\u003e\n    check_call_cmd(f, CODE_SCAN_DIR)\n  File \"/data0/jenkins/workspace/ci-repository/openbmc/unit-test.py\", line 235, in check_call_cmd\n    check_call(cmd)\n  File \"/usr/lib/python3.10/subprocess.py\", line 369, in check_call\n    raise CalledProcessError(retcode, cmd)\nsubprocess.CalledProcessError: Command \u0027(\u0027/data0/jenkins/workspace/ci-repository/openbmc/format-code.sh\u0027, \u0027/data0/jenkins/workspace/ci-repository/openbmc/bmcweb\u0027)\u0027 returned non-zero exit status 1.\nTraceback (most recent call last):\n  File \"/data0/jenkins/workspace/ci-repository/openbmc/dbus-unit-test.py\", line 91, in \u003cmodule\u003e\n    check_call(UNIT_TEST.split(\u0027,\u0027), env\u003dos.environ)\n  File \"/usr/lib/python3.10/subprocess.py\", line 369, in check_call\n    raise CalledProcessError(retcode, cmd) \n\nis the CI failure",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce73a7fb_aa595398",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1001210
      },
      "writtenOn": "2022-11-07T03:59:35Z",
      "side": 1,
      "message": "I moved `byte`. Is that okay?",
      "parentUuid": "68172ea0_c913727e",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95408883_d95452b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-11-04T19:26:19Z",
      "side": 1,
      "message": "Redfish validator passes?",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc06621a_17db046c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1001210
      },
      "writtenOn": "2022-11-07T03:59:35Z",
      "side": 1,
      "message": "I don\u0027t know how to run this validation yet. Manually it looks fine, because in Memory.json for these properties \"type\": [\"integer\", \"null\"]",
      "parentUuid": "95408883_d95452b5",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d1156ef_b289f025",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-16T20:40:05Z",
      "side": 1,
      "message": "Given this is just type change, I don\u0027t believe Redfish validator is required. It\u0027s unlikely to break other resources. The owner already tested this code path.",
      "parentUuid": "fc06621a_17db046c",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dea6a5cd_c92d8132",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-16T20:43:49Z",
      "side": 1,
      "message": "Type changes are EXACTLY the kind of thing that we need service validator run on.  Had the person that wrote this Memory code originally run service validator on it, it would\u0027ve found this bug, and this patchset would never have been required.",
      "parentUuid": "8d1156ef_b289f025",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38311cea_7a6854cb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-16T20:49:07Z",
      "side": 1,
      "message": "I don\u0027t understand. If the type is wrong, |MemoryLocation| is just omitted. Does Redfish Validator throw errors?",
      "parentUuid": "dea6a5cd_c92d8132",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d63de27_e087086e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2022-11-17T02:45:04Z",
      "side": 1,
      "message": "\u003e I don\u0027t understand. If the type is wrong, |MemoryLocation| is just omitted. Does Redfish Validator throw errors?\n\nI agree with Nan, The Redfish validator does not necessary, Because we have not yet implemented the doGet method, so I dont think  using Redfish validator will test any problems.\n\nAlso, Since we just implemented the doPath method, and the previous author should have tested with the following json, so there is no problem.\n\n```\n{“MemoryController”: \"1\"}\n```\n\nSo, @Glukhov Mikhail, could you add test messge for doPath method in tested?\n\nlike:\n\ninput a bad json:\n```\ncurl -k -H \"X-Auth-Token: $token\" -X PATCH -d \u0027{ \"MemoryController\": \"1\"}\u0027 https://${bmc}/redfish/v1/xxx\n```\n\nwithout this patch: it works fine.\nwith this patch: Failed to parse json.\n\ninput a good json:\n```\ncurl -k -H \"X-Auth-Token: $token\" -X PATCH -d \u0027{ \"MemoryController\": 1}\u0027 https://${bmc}/redfish/v1/xxx\n```\nwith this patch: it works fine.\n\n@Ed @Gunnar @Nan @Krzysztof\nWhat do you think?",
      "parentUuid": "38311cea_7a6854cb",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43865d8d_9a0a0954",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-17T17:16:32Z",
      "side": 1,
      "message": "\u003e If the type is wrong, |MemoryLocation| is just omitted\n\nThat\u0027s not true.  Take a look at lines 558-577.  These 4 types are loaded DIRECTLY into the Redfish output., and as-written are changing the type we put in the json output.  So some things that this patchset needs to answer are:\n\n1. How did we get this wrong in the first place (considering that everyone needs to test, and a test for this should\u0027ve failed).  Have the original authors of this been CCed?\n2. What backends do we have that are using the \"wrong\" API and need fixed.\n3. What does redfish-service-validator say about this.",
      "parentUuid": "1d63de27_e087086e",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8341ea68_cd7dc948",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-17T18:39:58Z",
      "side": 1,
      "message": "I still don\u0027t understand, wouldn\u0027t |channel| be nullptr if the type is wrong?",
      "parentUuid": "43865d8d_9a0a0954",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "307b31da_08c18a68",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-17T18:42:22Z",
      "side": 1,
      "message": "If the DBus type is wrong, yes, it would be nullptr.  If the Redfish/JSON type is wrong, there is nothing to stop it going out on the wire.  Also, FWIW, since nobody has tested this code at all, there\u0027s no guarantees that the type ISN\u0027T nullptr, and has an error there.",
      "parentUuid": "8341ea68_cd7dc948",
      "revId": "624cd22049d49dd56684b1f2df6d5f84eea7e857",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
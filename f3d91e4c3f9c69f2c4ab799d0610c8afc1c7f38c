{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2e7065dd_8ecbfaba",
        "filename": "http/ut/utility_test.cpp",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-25T02:44:13Z",
      "side": 1,
      "message": "We don\u0027t need a comment for \"no exception\".  This is the default.",
      "range": {
        "startLine": 94,
        "startChar": 7,
        "endLine": 94,
        "endChar": 25
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7f9dade_1c8752c8",
        "filename": "http/ut/utility_test.cpp",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-01-25T03:12:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e7065dd_8ecbfaba",
      "range": {
        "startLine": 94,
        "startChar": 7,
        "endLine": 94,
        "endChar": 25
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cef4ad5_a4371a23",
        "filename": "http/utility.hpp",
        "patchSetId": 6
      },
      "lineNbr": 590,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-25T02:44:13Z",
      "side": 1,
      "message": "Is this exposed through boost somewhere that we can rely on it without a magic number?",
      "range": {
        "startLine": 590,
        "startChar": 44,
        "endLine": 590,
        "endChar": 68
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ad79653_ea12e3e4",
        "filename": "http/utility.hpp",
        "patchSetId": 6
      },
      "lineNbr": 590,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-01-25T03:12:49Z",
      "side": 1,
      "message": "No. I didn\u0027t find it.",
      "parentUuid": "6cef4ad5_a4371a23",
      "range": {
        "startLine": 590,
        "startChar": 44,
        "endLine": 590,
        "endChar": 68
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13ac6ccd_74b7e3a4",
        "filename": "http/utility.hpp",
        "patchSetId": 6
      },
      "lineNbr": 590,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-25T17:30:57Z",
      "side": 1,
      "message": "Can we at least clean this up so it\u0027s a magic number that matches the max string?  I\u0027m still not quite sure how we know this is correct.  How do we know it\u0027s not 253402300798?  That answer should be obvious from the code.",
      "parentUuid": "9ad79653_ea12e3e4",
      "range": {
        "startLine": 590,
        "startChar": 44,
        "endLine": 590,
        "endChar": 68
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47796193_c44927fa",
        "filename": "http/utility.hpp",
        "patchSetId": 6
      },
      "lineNbr": 590,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-01-25T20:24:20Z",
      "side": 1,
      "message": "It\u0027s covered in the unit test.\n\n```\n    EXPECT_EQ(getDateTimeUintMs(std::numeric_limits\u003cuint64_t\u003e::max()),\n              \"9999-12-31T23:59:59.999000+00:00\");\n    EXPECT_EQ(getDateTimeUint(std::numeric_limits\u003cuint64_t\u003e::max()),\n              \"9999-12-31T23:59:59+00:00\");\n```",
      "parentUuid": "13ac6ccd_74b7e3a4",
      "range": {
        "startLine": 590,
        "startChar": 44,
        "endLine": 590,
        "endChar": 68
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c67f430_3962e7ab",
        "filename": "http/utility.hpp",
        "patchSetId": 6
      },
      "lineNbr": 590,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-01-25T20:27:59Z",
      "side": 1,
      "message": "\u003e That answer should be obvious from the code.\n\nI don\u0027t understand this comment. Are you saying the magic number should be obvious so people now how it is calculated? I don\u0027t have an answer for it. It is not obvious to get the number from \"9999-12-31T23:59:59\" since it involves leap year seconds.",
      "parentUuid": "47796193_c44927fa",
      "range": {
        "startLine": 590,
        "startChar": 44,
        "endLine": 590,
        "endChar": 68
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff1d31bd_04ca75f2",
        "filename": "http/utility.hpp",
        "patchSetId": 6
      },
      "lineNbr": 590,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-25T22:52:24Z",
      "side": 1,
      "message": "\u003e It\u0027s covered in the unit test.\n\n253402300798 isn\u0027t explicitly covered by a unit test.\n\n\n\u003e It is not obvious to get the number from \"9999-12-31T23:59:59\" since it involves leap year seconds.\n\nRight, so how was that number determined, given how non trivial it is?  It looks like the explicit point is that we can\u0027t go beyond year 9999.  Is there a way we could code against that instead?  Maybe we\u0027d be better off picking a date closer so that it\u0027s more obvious, like yeah 2200?",
      "parentUuid": "8c67f430_3962e7ab",
      "range": {
        "startLine": 590,
        "startChar": 44,
        "endLine": 590,
        "endChar": 68
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7907803_0e98a81e",
        "filename": "http/utility.hpp",
        "patchSetId": 6
      },
      "lineNbr": 590,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-25T22:52:24Z",
      "side": 1,
      "message": "Yes, we shouldn\u0027t have magic numbers in the code, and needing it kind of implies that we\u0027re using the wrong api.  Did you get a chance to look and see if boost::chrono has a better solution for this?",
      "parentUuid": "8c67f430_3962e7ab",
      "range": {
        "startLine": 590,
        "startChar": 44,
        "endLine": 590,
        "endChar": 68
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2a67b59_9503831a",
        "filename": "http/utility.hpp",
        "patchSetId": 6
      },
      "lineNbr": 596,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-25T02:44:13Z",
      "side": 1,
      "message": "Is there a version of this constructor that doesn\u0027t throw?",
      "range": {
        "startLine": 596,
        "startChar": 31,
        "endLine": 596,
        "endChar": 43
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17aa670b_e13410b4",
        "filename": "http/utility.hpp",
        "patchSetId": 6
      },
      "lineNbr": 596,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-01-25T03:12:49Z",
      "side": 1,
      "message": "Tried, didn\u0027t find one.",
      "parentUuid": "e2a67b59_9503831a",
      "range": {
        "startLine": 596,
        "startChar": 31,
        "endLine": 596,
        "endChar": 43
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9448e5f_02ce388e",
        "filename": "http/utility.hpp",
        "patchSetId": 6
      },
      "lineNbr": 615,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-25T02:44:13Z",
      "side": 1,
      "message": "This magic number is repeated 3 times in this patch.  Lets avoid that if we can, but at the very least, we should only declare it once.",
      "range": {
        "startLine": 615,
        "startChar": 0,
        "endLine": 615,
        "endChar": 52
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fdb14a0_d8f65bbb",
        "filename": "http/utility.hpp",
        "patchSetId": 6
      },
      "lineNbr": 615,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-01-25T03:12:49Z",
      "side": 1,
      "message": "maxMilliSeconds and maxSeconds are different though. Done, declared them in the internal scope.",
      "parentUuid": "d9448e5f_02ce388e",
      "range": {
        "startLine": 615,
        "startChar": 0,
        "endLine": 615,
        "endChar": 52
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "975830c2_69b3f68c",
        "filename": "http/utility.hpp",
        "patchSetId": 6
      },
      "lineNbr": 615,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-25T17:30:57Z",
      "side": 1,
      "message": "They\u0027re the same plus a couple digits.",
      "parentUuid": "0fdb14a0_d8f65bbb",
      "range": {
        "startLine": 615,
        "startChar": 0,
        "endLine": 615,
        "endChar": 52
      },
      "revId": "f3d91e4c3f9c69f2c4ab799d0610c8afc1c7f38c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
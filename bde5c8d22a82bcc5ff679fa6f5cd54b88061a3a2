{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3251d696_ffd784cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-01T14:35:24Z",
      "side": 1,
      "message": "I\u0027m a little worried that this helper function will get misused to do an anti pattern that we\u0027ve seen.  Generally when we need to sort lists, we sort the objects on the return of the mapper call, THEN iterate them and load them.  This is simpler, and means we\u0027re not moving large objects in place.  The only case I can see this being used is to construct the response object then use a destructor to do things \"at the end\" to sort the list, which is generally an anti pattern.  With that said, I\u0027ll look at how it\u0027s used and evaluate.",
      "revId": "bde5c8d22a82bcc5ff679fa6f5cd54b88061a3a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ffb3c9d_e3c5df29",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-07-06T00:51:47Z",
      "side": 1,
      "message": "\u003e Generally when we need to sort lists, we sort the objects on the return of the mapper call, THEN iterate them and load them\n\nThis works in the workflow of call GetObject of the ObjectMapper where all objects are got from a single dbus call so we can easily sort them, but not the workflow in this commit which is call ManagedObjects of the ObjectManager of each service where objects might be owned by server services and thus we can\u0027t easily sort all the objects.\n\n\u003e The only case I can see this being used is to construct the response object then use a destructor to do things \"at the end\" to sort the list, which is generally an anti pattern.\n\nThat does be the use case. We can make its usage limited to the efficient expand handlers which agree in the later commit that if we reduce the code duplication (which is done) and make the pattern reusable for other resource (will be done when developing threads resource), we can accept the downsides.",
      "parentUuid": "3251d696_ffd784cf",
      "revId": "bde5c8d22a82bcc5ff679fa6f5cd54b88061a3a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f4c8480_0345751e",
        "filename": "include/human_sort.hpp",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-01T14:35:24Z",
      "side": 1,
      "message": "This looks identical to std::less?\n\nAlso, as a general rule, please try to name things differently than existing methods.  Considering this is comparing numbers, this isn\u0027t an \"alphanum\" compare.",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 108,
        "endChar": 1
      },
      "revId": "bde5c8d22a82bcc5ff679fa6f5cd54b88061a3a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "905badaf_9afadd5f",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 590,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-01T14:35:24Z",
      "side": 1,
      "message": "Is there any place we\u0027d use this besides std::string?  Generally unless there\u0027s multiple use cases, we keep things non-templated until we need the template parameter.",
      "range": {
        "startLine": 590,
        "startChar": 0,
        "endLine": 590,
        "endChar": 29
      },
      "revId": "bde5c8d22a82bcc5ff679fa6f5cd54b88061a3a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad47d75f_0e95e908",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 595,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-01T14:35:24Z",
      "side": 1,
      "message": "Why do we need to do a capture here?  can\u0027t we just declare it inline?",
      "range": {
        "startLine": 595,
        "startChar": 15,
        "endLine": 595,
        "endChar": 53
      },
      "revId": "bde5c8d22a82bcc5ff679fa6f5cd54b88061a3a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6fdc329_5e7f5ea7",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 596,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-01T14:35:24Z",
      "side": 1,
      "message": "These should be const, which is going do show the coding error below;  nlohmann::json::operator[] creates an element if it doesn\u0027t exist, which is a case you\u0027ll need to handle.  As written, if the key being searched doesn\u0027t exist, it will be created as null, which isn\u0027t what you intended.",
      "range": {
        "startLine": 596,
        "startChar": 21,
        "endLine": 596,
        "endChar": 56
      },
      "revId": "bde5c8d22a82bcc5ff679fa6f5cd54b88061a3a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66f80794_649a99d7",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 597,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-01T14:35:24Z",
      "side": 1,
      "message": "ValueType* please.",
      "range": {
        "startLine": 597,
        "startChar": 14,
        "endLine": 597,
        "endChar": 18
      },
      "revId": "bde5c8d22a82bcc5ff679fa6f5cd54b88061a3a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcfa10f1_f86afa71",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 597,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-07-06T00:51:47Z",
      "side": 1,
      "message": "Wait, it\u0027s very clear get_ptr returns the corresponding pointer type, right?\n\nThis is similar to omit the type of result of make_shared or make_unique IMO.",
      "parentUuid": "66f80794_649a99d7",
      "range": {
        "startLine": 597,
        "startChar": 14,
        "endLine": 597,
        "endChar": 18
      },
      "revId": "bde5c8d22a82bcc5ff679fa6f5cd54b88061a3a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7a361e1_bd595852",
        "filename": "redfish-core/include/utils/json_utils_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-07-01T06:59:32Z",
      "side": 1,
      "message": "I wonder what will happen if half the elements can be sorted and half cannot. For example we have 3 valid elements 1 invalid then another 3 valid elements. You need test for this case that documents behaviour. Will all be sorted, none, or it will be partially sorted.",
      "revId": "bde5c8d22a82bcc5ff679fa6f5cd54b88061a3a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
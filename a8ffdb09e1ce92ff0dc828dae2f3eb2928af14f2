{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "abe763c3_7faab936",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-07-06T18:09:48Z",
      "side": 1,
      "message": "What does DMTF think about this work.\nAnyone working with redfish might enjoy using this enums. \n(both servers and clients)",
      "revId": "a8ffdb09e1ce92ff0dc828dae2f3eb2928af14f2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ffbeda9_08721926",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-07T01:40:31Z",
      "side": 1,
      "message": "I haven\u0027t really asked, but given that nlohmann::json isn\u0027t any kind of standard json representation, and this relies on the internal machinery of that to work, I don\u0027t know if it\u0027s generally useful.\n\nIn the past the standard said that generating code is \"not their space\" to be solving, and that we should rely on other code generator tools to generate bindings.  Unfortunately, no tool I\u0027m aware of uses nlohmann.",
      "parentUuid": "abe763c3_7faab936",
      "revId": "a8ffdb09e1ce92ff0dc828dae2f3eb2928af14f2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b66f69cf_63de712a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-07-07T16:49:10Z",
      "side": 1,
      "message": "Nit,\nHave you thought about turning this into a library, and created a new openbmc repo to house this code base?",
      "parentUuid": "3ffbeda9_08721926",
      "revId": "a8ffdb09e1ce92ff0dc828dae2f3eb2928af14f2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70e8267f_de5b72b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-07T19:01:09Z",
      "side": 1,
      "message": "I haven\u0027t really thought about it, but if there\u0027s other users that want this, I guess we could.\n\nJust enum generation doesn\u0027t really seem useful in that context, but maybe combined with your type safe structures patch, it might be a good replacement to https://github.com/DMTF/Redfish-Schema-C-Struct-Generator.  Something to think about for sure;  If you know of other things that would use this stuff, that\u0027s something we could talk about in the future.  I\u0027m happy to rip this patch out and request a separate repo if there\u0027s another user, but I don\u0027t want to maintain that level of version-to-version compatibility without a user.",
      "parentUuid": "b66f69cf_63de712a",
      "revId": "a8ffdb09e1ce92ff0dc828dae2f3eb2928af14f2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0abb9d47_6bc1db86",
        "filename": "redfish-core/include/redfish_defs/computer_system.hpp",
        "patchSetId": 15
      },
      "lineNbr": 14,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-07-06T18:09:48Z",
      "side": 1,
      "message": "Usb -\u003e USB\nHdd -\u003e HDD\nCd -\u003e CD\nPxe - \u003e PXE",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 8
      },
      "revId": "a8ffdb09e1ce92ff0dc828dae2f3eb2928af14f2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc5cdfb7_4bed82e1",
        "filename": "redfish-core/include/redfish_defs/computer_system.hpp",
        "patchSetId": 15
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-07T01:40:31Z",
      "side": 1,
      "message": "These are correct to the redfish standard:\n\nhttps://redfish.dmtf.org/schemas/ComputerSystem_v1.xml\n\nIn the other thread, we discussed changing the casing, and decided it wasn\u0027t worth the effort, and inconsistency with the spec, and that we should be naming these the same as the spec to be consistent (and to improve the readability).\n\nIs there a reason these specific ones should change?",
      "parentUuid": "0abb9d47_6bc1db86",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 8
      },
      "revId": "a8ffdb09e1ce92ff0dc828dae2f3eb2928af14f2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd3b1a86_a6683be8",
        "filename": "redfish-core/include/redfish_defs/computer_system.hpp",
        "patchSetId": 15
      },
      "lineNbr": 14,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-07-07T16:49:10Z",
      "side": 1,
      "message": "In the cable enum it cased all caps, and most of the acronyms are cased correctly. If the spec has this inconstancy then it is fine in the implementation.  \n\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/51993/15/redfish-core/include/redfish_defs/cable.hpp#39\n\n(resolved)",
      "parentUuid": "dc5cdfb7_4bed82e1",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 8
      },
      "revId": "a8ffdb09e1ce92ff0dc828dae2f3eb2928af14f2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0655ebf6_04ac27d2",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 15
      },
      "lineNbr": 89,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-06-30T06:28:41Z",
      "side": 1,
      "message": "Have you considered generating conertion functions or just create template function that can perform any conversion. It would be possible to take conversion map and string value as parameter. Perform find, return value if success or empty optional/invalid on failure.\n\nThat could remove some code, but I don\u0027t know if this going to decrease or increase binary size.",
      "revId": "a8ffdb09e1ce92ff0dc828dae2f3eb2928af14f2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68bf5948_503f9736",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 15
      },
      "lineNbr": 89,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-30T17:03:10Z",
      "side": 1,
      "message": "\u003e Have you considered generating conertion functions or just create template function that can perform any conversion.\n\nYes.  This was all evaluated by someone previously on your team (Pawel), and the conclusion at the time what that essentially anything else we tried resulted in slower builds, larger binaries, and longer runtimes.  That was done several years ago, so we could certainly reassess with current technology and our now better understanding of what dbus-\u003eredfish conversions need done.\n\nThe biggest problem becomes that most dbus-\u003eredfish conversions are not as clean as this one.  There are cases where:\n- New enums are added without bmcweb being made aware.\n- two dbus enum values might map to one redfish value.\n- one dbus property might map to multiple redfish values in odd ways (Status is a good example of this).\n\nAll of those cases need to be able to be handled.\n\n\u003e It would be possible to take conversion map and string value as parameter. Perform find, return value if success or empty optional/invalid on failure.\n\nWhen we tried this, we either needed to declare a runtime std::map which we could either construct on global init, or construct on each use.  In the former it slowed the boot time, and used runtime memory (against some of the core bmcweb principles).  In the latter case, it was significantly slower to construct the map, do the lookup on the map, then destroy the map each time it was used.\n\nSince we did that testing, boost::describe was added into boost, which might solve some of these issues in a cleaner way, but that would need to be evaluated.  What nlohmann implements is essentially similar to what boost describe does, but specializes it for json values.\n\n\u003e \n\u003e That could remove some code, but I don\u0027t know if this going to decrease or increase binary size.\n\nHappy to see test results if you\u0027re interested in pursuing this.",
      "parentUuid": "0655ebf6_04ac27d2",
      "revId": "a8ffdb09e1ce92ff0dc828dae2f3eb2928af14f2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "298d16fb_3adafb2b",
        "filename": "redfish-core/lib/sensors.hpp",
        "patchSetId": 15
      },
      "lineNbr": 89,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-07-01T07:17:55Z",
      "side": 1,
      "message": "I trust your research. Ack.",
      "parentUuid": "68bf5948_503f9736",
      "revId": "a8ffdb09e1ce92ff0dc828dae2f3eb2928af14f2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d1a601e_d3e5d6db",
        "filename": "scripts/generate_schema_enums.py",
        "patchSetId": 15
      },
      "lineNbr": 81,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-07-06T18:09:48Z",
      "side": 1,
      "message": "So you are adding \"Invalid\" to every enum that does not have it?\nDoes this make sense, will there be enums that have similar error states such as (unknown, or Error)",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 39
      },
      "revId": "a8ffdb09e1ce92ff0dc828dae2f3eb2928af14f2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e2cc8dc_498563f2",
        "filename": "scripts/generate_schema_enums.py",
        "patchSetId": 15
      },
      "lineNbr": 81,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-07-07T16:49:10Z",
      "side": 1,
      "message": "sometimes \"Invalid\" will be enum invalid, and some time it will be a spec defined \"Invalid\"",
      "parentUuid": "2d1a601e_d3e5d6db",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 39
      },
      "revId": "a8ffdb09e1ce92ff0dc828dae2f3eb2928af14f2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
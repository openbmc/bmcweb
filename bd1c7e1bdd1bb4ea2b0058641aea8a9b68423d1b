{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a056f2b9_49a91195",
        "filename": "scripts/generate_auth_certificates.py",
        "patchSetId": 9
      },
      "lineNbr": 167,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-03-17T17:00:35Z",
      "side": 1,
      "message": "Can we put this into normal code and not inline nested logic please?",
      "range": {
        "startLine": 163,
        "startChar": 14,
        "endLine": 167,
        "endChar": 13
      },
      "revId": "bd1c7e1bdd1bb4ea2b0058641aea8a9b68423d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5375c8fb_7a68ce80",
        "filename": "scripts/generate_auth_certificates.py",
        "patchSetId": 9
      },
      "lineNbr": 167,
      "author": {
        "id": 1002382
      },
      "writtenOn": "2025-03-17T21:49:51Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "a056f2b9_49a91195",
      "range": {
        "startLine": 163,
        "startChar": 14,
        "endLine": 167,
        "endChar": 13
      },
      "revId": "bd1c7e1bdd1bb4ea2b0058641aea8a9b68423d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb43acc7_4bedaf2c",
        "filename": "scripts/generate_auth_certificates.py",
        "patchSetId": 9
      },
      "lineNbr": 400,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-03-17T17:00:35Z",
      "side": 1,
      "message": "if you\u0027re messing with the transport, generally you would do it when constructing a new Client object\n\n\nhttpx.Client(transport\u003d.....)",
      "range": {
        "startLine": 400,
        "startChar": 0,
        "endLine": 400,
        "endChar": 36
      },
      "revId": "bd1c7e1bdd1bb4ea2b0058641aea8a9b68423d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ab0053f_3fc80ab9",
        "filename": "scripts/generate_auth_certificates.py",
        "patchSetId": 9
      },
      "lineNbr": 400,
      "author": {
        "id": 1002382
      },
      "writtenOn": "2025-03-17T21:49:51Z",
      "side": 1,
      "message": "\u003e As you\u0027ve written this patch you create 4 new session objects, we should be reusing one.\n\nHi Ed, I think I misunderstood your previous comment. I thought you want me to combine all of `httpx.Client` initializations into one, without any exception. That\u0027s why I tried to combined all of the initializations using some workarounds by overriding `_transport` property and deleting the `X-Auth-Token` from session header (`del redfish_session.headers[\"X-Auth-Token\"]`)\n\nI changed the approach by using 3 clients\n- one for setup (which uses `X-Auth-Token` header)\n- one for testing common name (using common name certificate)\n- one for testing UPN (using UPN certificate)\n\nLet me know if you have any concerns on my new approach, thanks!",
      "parentUuid": "bb43acc7_4bedaf2c",
      "range": {
        "startLine": 400,
        "startChar": 0,
        "endLine": 400,
        "endChar": 36
      },
      "revId": "bd1c7e1bdd1bb4ea2b0058641aea8a9b68423d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "132c88bd_de3b2687",
        "filename": "scripts/generate_auth_certificates.py",
        "patchSetId": 9
      },
      "lineNbr": 400,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-03-18T02:12:28Z",
      "side": 1,
      "message": "\u003e \u003e As you\u0027ve written this patch you create 4 new session objects, we should be reusing one.\n\u003e \n\u003e Hi Ed, I think I misunderstood your previous comment. I thought you want me to combine all of `httpx.Client` initializations into one, without any exception. That\u0027s why I tried to combined all of the initializations using some workarounds by overriding `_transport` property and deleting the `X-Auth-Token` from session header (`del redfish_session.headers[\"X-Auth-Token\"]`)\n\u003e \n\u003e I changed the approach by using 3 clients\n\u003e - one for setup (which uses `X-Auth-Token` header)\n\u003e - one for testing common name (using common name certificate)\n\u003e - one for testing UPN (using UPN certificate)\n\nThis is exactly the right number.  you want one client per CONNECTION.  Connections should be reused if possible, but if we\u0027re testing a connection-level auth thing works, we obviously need to rebuild the connection (ie client)\n\n\u003e \n\u003e Let me know if you have any concerns on my new approach, thanks!",
      "parentUuid": "9ab0053f_3fc80ab9",
      "range": {
        "startLine": 400,
        "startChar": 0,
        "endLine": 400,
        "endChar": 36
      },
      "revId": "bd1c7e1bdd1bb4ea2b0058641aea8a9b68423d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "807a554d_0e301e0a",
        "filename": "scripts/generate_auth_certificates.py",
        "patchSetId": 9
      },
      "lineNbr": 611,
      "author": {
        "id": 1002382
      },
      "writtenOn": "2025-03-16T21:23:50Z",
      "side": 1,
      "message": "`Header` class from `httpx` provides functionality to delete a key[1]\n\n[1] `httpx` src: https://github.com/encode/httpx/blob/master/httpx/_models.py#L328-L344",
      "revId": "bd1c7e1bdd1bb4ea2b0058641aea8a9b68423d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "953c0901_2a5ee593",
        "filename": "scripts/generate_auth_certificates.py",
        "patchSetId": 9
      },
      "lineNbr": 611,
      "author": {
        "id": 1002382
      },
      "writtenOn": "2025-03-17T21:49:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "807a554d_0e301e0a",
      "revId": "bd1c7e1bdd1bb4ea2b0058641aea8a9b68423d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c987a3a_93371ec5",
        "filename": "scripts/generate_auth_certificates.py",
        "patchSetId": 9
      },
      "lineNbr": 615,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-03-17T17:00:35Z",
      "side": 1,
      "message": "because we\u0027re testing mtls, we want to use a NEW httpx.Client here, one that doesn\u0027t have an X-Auth-Token attached.\n\nAs this test is now written, it\u0027s just testing that X-Auth-Token works.",
      "range": {
        "startLine": 615,
        "startChar": 23,
        "endLine": 615,
        "endChar": 38
      },
      "revId": "bd1c7e1bdd1bb4ea2b0058641aea8a9b68423d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2148fa2d_81617081",
        "filename": "scripts/generate_auth_certificates.py",
        "patchSetId": 9
      },
      "lineNbr": 615,
      "author": {
        "id": 1002382
      },
      "writtenOn": "2025-03-17T21:49:51Z",
      "side": 1,
      "message": "As per another discussion on another comment[1], now I created new `httpx.Client`(s), one for testing common name and one for testing UPN, and not using the client from setup process  \n\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/78837/comment/bb43acc7_4bedaf2c/",
      "parentUuid": "4c987a3a_93371ec5",
      "range": {
        "startLine": 615,
        "startChar": 23,
        "endLine": 615,
        "endChar": 38
      },
      "revId": "bd1c7e1bdd1bb4ea2b0058641aea8a9b68423d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
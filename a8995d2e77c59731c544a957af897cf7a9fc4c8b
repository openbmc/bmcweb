{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "01b44a92_33b2d1f7",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 735,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T02:00:04Z",
      "side": 1,
      "message": "Looks like the above block of code was grabbed from here.  Can we avoid duplicating this logic please, and just make the old path call the method you broke out?",
      "range": {
        "startLine": 717,
        "startChar": 0,
        "endLine": 735,
        "endChar": 5
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "593eb42b_49cc7af7",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 735,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-23T01:54:50Z",
      "side": 1,
      "message": "The values being set in new method are different since they are specific to Update interface ApplyTime values.",
      "parentUuid": "01b44a92_33b2d1f7",
      "range": {
        "startLine": 717,
        "startChar": 0,
        "endLine": 735,
        "endChar": 5
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f4e5413_bcbd28d9",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 735,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-23T02:31:24Z",
      "side": 1,
      "message": "Understood.  FIne as is.",
      "parentUuid": "593eb42b_49cc7af7",
      "range": {
        "startLine": 717,
        "startChar": 0,
        "endLine": 735,
        "endChar": 5
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f8e83ac_b559ae81",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 755,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T02:00:04Z",
      "side": 1,
      "message": "We broke this method out to handle parsing, but it looks like we left the old code for checking /redfish/v1/Managers/bmc in place?  Should that be lifted into this new method?",
      "range": {
        "startLine": 755,
        "startChar": 16,
        "endLine": 755,
        "endChar": 19
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5511b293_48979e23",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 755,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-23T01:54:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f8e83ac_b559ae81",
      "range": {
        "startLine": 755,
        "startChar": 16,
        "endLine": 755,
        "endChar": 19
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1d9fec9_f4b7c4b0",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 759,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T02:00:04Z",
      "side": 1,
      "message": "As a general rule we shouldn\u0027t be using starts_with (as is noted in common_errors.md).  I suspect in this case we want something like \n\nstd::string firmwareId;\nif (!readUrlSegments(*url, \"redfish\", \"v1\", \"UpdateService\", \"FirmwareInventory\", std::ref(firmwareId))){\n   return false;\n}\n\nThen we\u0027ll have to pass out the firmware id.",
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8eda4e71_87e3bf87",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 759,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-23T01:54:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1d9fec9_f4b7c4b0",
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd66f8b4_29dd7ff8",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 760,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T02:00:04Z",
      "side": 1,
      "message": "The old code accepted Managers/bmc as a target.  Do we have confidence that Redfish specifies accepting these with FirmwareInventory as the target?  Do we have examples anywhere we can link in the commit message?\n\nAt the very least, we should support the old way of using the bmc as the target, even if it\u0027s wrong.  We don\u0027t want to break working code.",
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8e41121_7a034bd5",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 760,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-23T01:54:50Z",
      "side": 1,
      "message": "I couldn\u0027t find any examples in the Redfish UpdateService white paper but schema description says both software inventory instance or their related items are valid, so both seems to be allowed.\nAs per Mike perhaps both are valid https://redfishforum.com/post/4052/thread. I think using FirmwareInventory as the target seems like a better option as they seem to have a direct relation to update process. Please let me know your thoughts?",
      "parentUuid": "dd66f8b4_29dd7ff8",
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5348ad1_7e51999f",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 760,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-23T02:31:24Z",
      "side": 1,
      "message": "\u003e I couldn\u0027t find any examples in the Redfish UpdateService white paper but schema description says both software inventory instance or their related items are valid, so both seems to be allowed.\n\nCan you link that in your commit message?\n\n\u003e As per Mike perhaps both are valid https://redfishforum.com/post/4052/thread. I think using FirmwareInventory as the target seems like a better option as they seem to have a direct relation to update process. Please let me know your thoughts?\n\nGeez, ok, so either is valid.  That\u0027s not very intuitive, and I suspect at some point we\u0027ll have to support the \"point to device\" variant.\n\nCan we at least get the old /redfish/v1/Managers/\u003cbmc\u003e supported through this so when we transition we don\u0027t break existing users?",
      "parentUuid": "d8e41121_7a034bd5",
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1aedbbc_6c7bd91d",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 760,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-24T16:37:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e5348ad1_7e51999f",
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c8aad22_4d99ad77",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 918,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T02:00:04Z",
      "side": 1,
      "message": "Please don\u0027t capture req in an async lambda, especially by value.  You probably want to create your task::Payload object here, which avoids making a copy of the whole request, and only copies the values that are needed.",
      "range": {
        "startLine": 918,
        "startChar": 20,
        "endLine": 918,
        "endChar": 23
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70ea8221_6f3daad1",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 918,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-23T01:54:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c8aad22_4d99ad77",
      "range": {
        "startLine": 918,
        "startChar": 20,
        "endLine": 918,
        "endChar": 23
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2e7cc93_899f12d4",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 924,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T02:00:04Z",
      "side": 1,
      "message": "Are we sure this works?  This is going to call close() on the fd after we start the update, presumably we just gave that fd to dbus?",
      "range": {
        "startLine": 924,
        "startChar": 51,
        "endLine": 924,
        "endChar": 56
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcab2ed8_dea1cfa6",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 924,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-23T01:54:50Z",
      "side": 1,
      "message": "Yes, it has been working. Probably, you are referring to passing the memfd to the handleStartUpdate call so we don\u0027t loose reference until callback returns?",
      "parentUuid": "f2e7cc93_899f12d4",
      "range": {
        "startLine": 924,
        "startChar": 51,
        "endLine": 924,
        "endChar": 56
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33e9a50a_bb6c09c2",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 924,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-23T02:31:24Z",
      "side": 1,
      "message": "I\u0027m referring to the fact that close is going to be called on this, but dbus must be calling dup() somewhere internally.\n\nACK.",
      "parentUuid": "bcab2ed8_dea1cfa6",
      "range": {
        "startLine": 924,
        "startChar": 51,
        "endLine": 924,
        "endChar": 56
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30a2df9c_c2c01f7c",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 936,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T02:00:04Z",
      "side": 1,
      "message": "follow the Naming convention please",
      "range": {
        "startLine": 936,
        "startChar": 10,
        "endLine": 936,
        "endChar": 22
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c29536b_7533cab7",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 936,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-23T01:54:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30a2df9c_c2c01f7c",
      "range": {
        "startLine": 936,
        "startChar": 10,
        "endLine": 936,
        "endChar": 22
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9aba22e5_097af1d1",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 969,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T02:00:04Z",
      "side": 1,
      "message": "Insert returns a bool that will tell you whether or not the key already existed.  Use that for this condition instead to avoid duplicating the lookup.",
      "range": {
        "startLine": 969,
        "startChar": 0,
        "endLine": 969,
        "endChar": 58
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f5745d0_4fb2dfa2",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 969,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-23T01:54:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9aba22e5_097af1d1",
      "range": {
        "startLine": 969,
        "startChar": 0,
        "endLine": 969,
        "endChar": 58
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "185a33df_06bed9b3",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 983,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T02:00:04Z",
      "side": 1,
      "message": "operator[] creates if the key doesn\u0027t exist.  Presumably here you want find()",
      "range": {
        "startLine": 983,
        "startChar": 64,
        "endLine": 983,
        "endChar": 70
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f61d0e9_ba28db35",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 983,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-23T01:54:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "185a33df_06bed9b3",
      "range": {
        "startLine": 983,
        "startChar": 64,
        "endLine": 983,
        "endChar": 70
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48f1e4fb_61f5275d",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 989,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T02:00:04Z",
      "side": 1,
      "message": "I\u0027m not quite following this, you\u0027re looking for the path associated with the ObjectManager?  Presumably you want something associated with the software version itself?",
      "range": {
        "startLine": 989,
        "startChar": 12,
        "endLine": 989,
        "endChar": 76
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a5f06e4_1598ba6d",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 989,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-23T01:54:50Z",
      "side": 1,
      "message": "I am looking for the StartUpdate interface somewhere on \"/xyz/openbmc_project/software\" which is associated with swObjectPath (i.e. the Software Version Object Path).",
      "parentUuid": "48f1e4fb_61f5275d",
      "range": {
        "startLine": 989,
        "startChar": 12,
        "endLine": 989,
        "endChar": 76
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdaeaa8c_0af8b87f",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 989,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-23T02:31:24Z",
      "side": 1,
      "message": "gotcha.",
      "parentUuid": "3a5f06e4_1598ba6d",
      "range": {
        "startLine": 989,
        "startChar": 12,
        "endLine": 989,
        "endChar": 76
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad8e6849_ab316649",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1013,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T02:00:04Z",
      "side": 1,
      "message": "I don\u0027t see any shared ownership here.  Any reason this needs to be a shared_ptr?",
      "range": {
        "startLine": 1013,
        "startChar": 22,
        "endLine": 1013,
        "endChar": 33
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bcb6c22_d7b515bf",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1013,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-23T01:54:50Z",
      "side": 1,
      "message": "I tried making this a unqiue_pointer and passing it the call stack using std::move but i am hitting assertion for memfd not being not copy constructible issue. My understanding is that this happens because of how lambda captures the resulting closure object. For example, i had tried this -\n\ninline void\n    getSwInfo(const std::shared_ptr\u003cbmcweb::AsyncResp\u003e\u0026 asyncResp,\n              const crow::Request\u0026 req,\n              std::unique_ptr\u003cMemoryFileDescriptor\u003e memfd,\n              const std::string\u0026 applyTime,\n              const std::vector\u003cboost::urls::url\u003e\u0026 targets)\n              const boost::system::error_code\u0026 ec,\n              const dbus::utility::MapperGetSubTreePathsResponse\u0026 subtree)\n{\n   ...\n}\n\nauto memfd \u003d std::make_unique\u003cMemoryFileDescriptor\u003e(\"update-image\");\n...\ndbus::utility::getSubTreePaths(\n        \"/xyz/openbmc_project/software\", 1, interfaces,\n        [asyncResp, req, memfd\u003dstd::move(memfd), applyTimeNewVal,\n         targets](const boost::system::error_code\u0026 ec,\n                  const dbus::utility::MapperGetSubTreePathsResponse\u0026 subtree) {\n        getSwInfo(asyncResp, req, std::move(memfd), applyTimeNewVal, targets, ec, subtree);",
      "parentUuid": "ad8e6849_ab316649",
      "range": {
        "startLine": 1013,
        "startChar": 22,
        "endLine": 1013,
        "endChar": 33
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f77d811_b6bb1d6f",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1013,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-23T02:31:24Z",
      "side": 1,
      "message": "\u003e I tried making this a unqiue_pointer and passing it the call stack using std::move but i am hitting assertion for memfd not being not copy constructible issue.\n\nI would expect that this could just be passed by value with std::move(), but sure, unqiue_ptr works.\n\n\u003e My understanding is that this happens because of how lambda captures the resulting closure object. For example, i had tried this -\n\u003e \n\u003e inline void\n\u003e     getSwInfo(const std::shared_ptr\u003cbmcweb::AsyncResp\u003e\u0026 asyncResp,\n\u003e               const crow::Request\u0026 req,\n\u003e               std::unique_ptr\u003cMemoryFileDescriptor\u003e memfd,\n\u003e               const std::string\u0026 applyTime,\n\u003e               const std::vector\u003cboost::urls::url\u003e\u0026 targets)\n\u003e               const boost::system::error_code\u0026 ec,\n\u003e               const dbus::utility::MapperGetSubTreePathsResponse\u0026 subtree)\n\u003e {\n\u003e    ...\n\u003e }\n\u003e \n\u003e auto memfd \u003d std::make_unique\u003cMemoryFileDescriptor\u003e(\"update-image\");\n\u003e ...\n\u003e dbus::utility::getSubTreePaths(\n\u003e         \"/xyz/openbmc_project/software\", 1, interfaces,\n\u003e         [asyncResp, req, memfd\u003dstd::move(memfd), applyTimeNewVal,\n\u003e          targets](const boost::system::error_code\u0026 ec,\n\u003e                   const dbus::utility::MapperGetSubTreePathsResponse\u0026 subtree) {\n\u003e         getSwInfo(asyncResp, req, std::move(memfd), applyTimeNewVal, targets, ec, subtree);\n\nconst dbus::utility::MapperGetSubTreePathsResponse\u0026 subtree) \u003cADD the keyword mutable right here\u003e\n\n\nlambdas pass by const values by default.  you need the word mutable to make it pass by non-const value, so you can do a std::move()",
      "parentUuid": "4bcb6c22_d7b515bf",
      "range": {
        "startLine": 1013,
        "startChar": 22,
        "endLine": 1013,
        "endChar": 33
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "289f7043_3e66011f",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1013,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-24T16:37:31Z",
      "side": 1,
      "message": "I tried changing the memfd to pass by value with std::move(), but i noticing use after free issue in warnings, which seems like a valid issue? So, i am thinking i need to move this back to a shared_ptr. I am also noticing a similar issue use after move issue for payload?\n\n../redfish-core/lib/update_service.hpp:903:69: error: the parameter \u0027memfd\u0027 is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]\n  903 |                         task::Payload payload, MemoryFileDescriptor memfd,\n      |                                                                     ^\n      |                                                const               \u0026\n../redfish-core/lib/update_service.hpp:912:38: error: std::move of the const variable \u0027payload\u0027 has no effect; remove std::move() or make the variable non-const [performance-move-const-arg,-warnings-as-errors]\n  912 |         handleStartUpdate(asyncResp, std::move(payload), objectPath, ec1,\n      |                                      ^~~~~~~~~~       ~\n../redfish-core/lib/update_service.hpp:1010:43: error: \u0027payload\u0027 used after it was moved [bugprone-use-after-move,-warnings-as-errors]\n 1010 |             [asyncResp, payload(std::move(payload)), memfd \u003d std::move(memfd),\n      |                                           ^\n../redfish-core/lib/update_service.hpp:1010:25: note: move occurred here\n 1010 |             [asyncResp, payload(std::move(payload)), memfd \u003d std::move(memfd),",
      "parentUuid": "1f77d811_b6bb1d6f",
      "range": {
        "startLine": 1013,
        "startChar": 22,
        "endLine": 1013,
        "endChar": 33
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d3be49d_cb7fc797",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1013,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-24T16:46:19Z",
      "side": 1,
      "message": "One sec, let me just push a patch with what I think should work.  That\u0027s probably easier than explaining it here.",
      "parentUuid": "289f7043_3e66011f",
      "range": {
        "startLine": 1013,
        "startChar": 22,
        "endLine": 1013,
        "endChar": 33
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d4d1520_d52e3472",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1013,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-24T18:53:51Z",
      "side": 1,
      "message": "NVM about the path; see my other comment, I understand why we\u0027re hitting these issues.",
      "parentUuid": "2d3be49d_cb7fc797",
      "range": {
        "startLine": 1013,
        "startChar": 22,
        "endLine": 1013,
        "endChar": 33
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "746d29bf_9048b7b0",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1027,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T02:00:04Z",
      "side": 1,
      "message": "Can we wrap this in your class please?",
      "range": {
        "startLine": 1027,
        "startChar": 0,
        "endLine": 1027,
        "endChar": 44
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2b401ad_9792838c",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1027,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-23T01:54:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "746d29bf_9048b7b0",
      "range": {
        "startLine": 1027,
        "startChar": 0,
        "endLine": 1027,
        "endChar": 44
      },
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1dbdd7b_e3bb3044",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1039,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T02:00:04Z",
      "side": 1,
      "message": "I think we want depth 1 here?",
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d24bce3_cf37feae",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 18
      },
      "lineNbr": 1039,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-23T01:54:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1dbdd7b_e3bb3044",
      "revId": "a8995d2e77c59731c544a957af897cf7a9fc4c8b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "66c41557_0e594638",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-20T15:46:42Z",
      "side": 1,
      "message": "Would it make sense to have a unit test for fillEventLogLogEntryFromPropertyMap?",
      "revId": "a3cdeb5f427e2b68d37255e71e66b4d5b54831f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a5acd32_34fc2272",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-09-23T09:42:35Z",
      "side": 1,
      "message": "We are just taking the values from the dbus interface. As long as that\u0027s documented in pdi, and the data types match, it should be good.\n\nStuff like this would be a great use-case for generated code. Just generate the code from the dbus interface yaml, boom, typesafe dbus access.\n\nSo i don\u0027t see much value in a unit test here but taking a dependency on pdi and using the code generation it provides would improve the safety.",
      "parentUuid": "66c41557_0e594638",
      "revId": "a3cdeb5f427e2b68d37255e71e66b4d5b54831f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a6ae2bf_5876282a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-23T14:42:33Z",
      "side": 1,
      "message": "\u003e We are just taking the values from the dbus interface. As long as that\u0027s documented in pdi, and the data types match, it should be good.\n\u003e \n\u003e Stuff like this would be a great use-case for generated code. Just generate the code from the dbus interface yaml, boom, typesafe dbus access.\n\nTo my understanding PDI doesn\u0027t support the \"Don\u0027t require that newly added parameters exist on the interface\" support that we need to stay compatible with multiple backends.  Certainly is something we can discuss with Patrick.\n\n\n\u003e \n\u003e So i don\u0027t see much value in a unit test here but taking a dependency on pdi and using the code generation it provides would improve the safety.\n\nWe disagree about the value in unit tests here,. but that\u0027s fine.  We have plenty of other code in here that isn\u0027t unit tested",
      "parentUuid": "4a5acd32_34fc2272",
      "revId": "a3cdeb5f427e2b68d37255e71e66b4d5b54831f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36fb020d_f4d5afc1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-20T15:30:30Z",
      "side": 1,
      "message": "Overall looks good.  Just a couple duplicated inits that need cleaned up and a couple minor interface changes then this should be good.",
      "revId": "a3cdeb5f427e2b68d37255e71e66b4d5b54831f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d0566fb_2818a3ac",
        "filename": "redfish-core/include/utils/dbus_event_log_entry.hpp",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-20T15:30:30Z",
      "side": 1,
      "message": "generally we would do \"\u003d 0\" because it\u0027s more clear.\n\nsame thing with the pointers we\u0027d do \u003d nullptr.",
      "range": {
        "startLine": 15,
        "startChar": 15,
        "endLine": 15,
        "endChar": 17
      },
      "revId": "a3cdeb5f427e2b68d37255e71e66b4d5b54831f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cf10ca1_5301bea2",
        "filename": "redfish-core/include/utils/dbus_event_log_entry.hpp",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-09-23T09:42:35Z",
      "side": 1,
      "message": "Agree. \u0027{}\u0027 is just what clang-tidy suggested to me so i assumed that that\u0027s how it should be.",
      "parentUuid": "2d0566fb_2818a3ac",
      "range": {
        "startLine": 15,
        "startChar": 15,
        "endLine": 15,
        "endChar": 17
      },
      "revId": "a3cdeb5f427e2b68d37255e71e66b4d5b54831f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "630777eb_c4faf5e2",
        "filename": "redfish-core/include/utils/dbus_event_log_entry.hpp",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-20T15:30:30Z",
      "side": 1,
      "message": "Could we instead just return a std::optional\u003cDbusEventLogEntry\u003e ?\n\nI think that avoids a lot of the duplicated variable init below if we do that, because the variables are already initted in the struct itself.",
      "range": {
        "startLine": 26,
        "startChar": 7,
        "endLine": 26,
        "endChar": 11
      },
      "revId": "a3cdeb5f427e2b68d37255e71e66b4d5b54831f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04108f27_f2e1ced1",
        "filename": "redfish-core/include/utils/dbus_event_log_entry.hpp",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-09-23T09:42:35Z",
      "side": 1,
      "message": "yes.",
      "parentUuid": "630777eb_c4faf5e2",
      "range": {
        "startLine": 26,
        "startChar": 7,
        "endLine": 26,
        "endChar": 11
      },
      "revId": "a3cdeb5f427e2b68d37255e71e66b4d5b54831f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
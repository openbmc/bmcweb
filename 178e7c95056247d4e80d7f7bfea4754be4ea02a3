{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "23b4125a_596e3367",
        "filename": "http/http_response.hpp",
        "patchSetId": 16
      },
      "lineNbr": 172,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-14T18:14:39Z",
      "side": 1,
      "message": "Will an empty JSON map to a unique hash value?",
      "range": {
        "startLine": 172,
        "startChar": 8,
        "endLine": 172,
        "endChar": 30
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec335993_cc0f81d8",
        "filename": "http/http_response.hpp",
        "patchSetId": 16
      },
      "lineNbr": 172,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-14T23:43:23Z",
      "side": 1,
      "message": "no, it wont in this design.  Given that we can have non-json payloads, that was a compromise that I made in this design (same as before)\n\nWas there a change that you thought should be made here?",
      "parentUuid": "23b4125a_596e3367",
      "range": {
        "startLine": 172,
        "startChar": 8,
        "endLine": 172,
        "endChar": 30
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab602970_303cbfc2",
        "filename": "http/http_response.hpp",
        "patchSetId": 16
      },
      "lineNbr": 172,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-15T23:11:11Z",
      "side": 1,
      "message": "This works here since we return early when |ifMatch| in the request header is empty, right?\n\nAck.",
      "parentUuid": "ec335993_cc0f81d8",
      "range": {
        "startLine": 172,
        "startChar": 8,
        "endLine": 172,
        "endChar": 30
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71ce6240_53ed313e",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 16
      },
      "lineNbr": 36,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-14T18:14:39Z",
      "side": 1,
      "message": "const reference?",
      "range": {
        "startLine": 36,
        "startChar": 25,
        "endLine": 36,
        "endChar": 38
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad9794fd_d6e6e1ac",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 16
      },
      "lineNbr": 36,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-14T23:43:23Z",
      "side": 1,
      "message": "Can\u0027t do const reference.  This is what I was talking about before, where we require a copy of request.",
      "parentUuid": "71ce6240_53ed313e",
      "range": {
        "startLine": 36,
        "startChar": 25,
        "endLine": 36,
        "endChar": 38
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51b7147c_addc2f5f",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 16
      },
      "lineNbr": 36,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-15T20:00:27Z",
      "side": 1,
      "message": "I don\u0027t get it, won\u0027t std::bind_front copy a req itself?\n\nHere we copy this |request| multiple times",
      "parentUuid": "ad9794fd_d6e6e1ac",
      "range": {
        "startLine": 36,
        "startChar": 25,
        "endLine": 36,
        "endChar": 38
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "902e6ed8_9fe01f2e",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 16
      },
      "lineNbr": 36,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-15T22:17:46Z",
      "side": 1,
      "message": "If you change this to a const reference, this code no longer compiles.  I can\u0027t fully understand the move/copy semantics in this case, but if you know what needs to be done, I\u0027m happy to make the change.",
      "parentUuid": "51b7147c_addc2f5f",
      "range": {
        "startLine": 36,
        "startChar": 25,
        "endLine": 36,
        "endChar": 38
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c699ec70_332e70a9",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 16
      },
      "lineNbr": 36,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-15T23:19:02Z",
      "side": 1,
      "message": "It didn\u0027t compile because |app| doesn\u0027t take const reference to the request.\n\nI am not just randomly sending comments. I did experiments on this yesterday before I made such comment. If we don\u0027t use reference, we will call the copy constructor of Request multiple times.\n\nSo, this compiles,\n\n```\nvoid afterIfMatchRequest(crow::App\u0026 app,\n                         const std::shared_ptr\u003cbmcweb::AsyncResp\u003e\u0026 asyncResp,\n                         crow::Request\u0026 req,\n                         std::string_view ifMatchHeader,\n                         const crow::Response\u0026 resIn)\n```\n\nI believe std::bind_front does a copy first. Then it pass that copy as a reference to this |afterIfMatchRequest| function.",
      "parentUuid": "902e6ed8_9fe01f2e",
      "range": {
        "startLine": 36,
        "startChar": 25,
        "endLine": 36,
        "endChar": 38
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4571949_823bd55e",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 16
      },
      "lineNbr": 36,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-15T23:22:52Z",
      "side": 1,
      "message": "I never said you were randomly sending comments.  If it was implied by my response, I apologize, but it\u0027s definitely not what I intended.  My point was that I had tried what you suggested, and it didn\u0027t work.\n\n\u003e So, this compiles,\n\nOk, so different than your original comment, using a non-const reference looks like it works?  I thought I had tried that, but apparently I was mistaken, let me give it a shot.\n\nThanks for looking at it.",
      "parentUuid": "c699ec70_332e70a9",
      "range": {
        "startLine": 36,
        "startChar": 25,
        "endLine": 36,
        "endChar": 38
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d5f879b_3b04e035",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 16
      },
      "lineNbr": 36,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-15T23:28:33Z",
      "side": 1,
      "message": "Cool, thanks üëç I tested compilation but not testing possible lifetime issues here. I tested lifetime issues in my dummy workspace codes and no lifetime issues were found: std::bind_if does copy a |req|",
      "parentUuid": "c4571949_823bd55e",
      "range": {
        "startLine": 36,
        "startChar": 25,
        "endLine": 36,
        "endChar": 38
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea1215d8_bd0d2bed",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-14T18:14:39Z",
      "side": 1,
      "message": "nit: add a semicolon here?",
      "range": {
        "startLine": 41,
        "startChar": 25,
        "endLine": 41,
        "endChar": 26
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "351fc43f_cbe7b218",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-14T23:43:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ea1215d8_bd0d2bed",
      "range": {
        "startLine": 41,
        "startChar": 25,
        "endLine": 41,
        "endChar": 26
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e066685_15514333",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 16
      },
      "lineNbr": 127,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-14T18:14:39Z",
      "side": 1,
      "message": "If you the handler here, does it only run when there is a query parameter?",
      "range": {
        "startLine": 127,
        "startChar": 9,
        "endLine": 127,
        "endChar": 22
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fe5138f_3ebf722e",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 16
      },
      "lineNbr": 127,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-14T23:43:23Z",
      "side": 1,
      "message": "I don\u0027t think so?  It only runs if the query params were valid, which I think is ok?",
      "parentUuid": "8e066685_15514333",
      "range": {
        "startLine": 127,
        "startChar": 9,
        "endLine": 127,
        "endChar": 22
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9ee8113_c42ac0bb",
        "filename": "redfish-core/include/query.hpp",
        "patchSetId": 16
      },
      "lineNbr": 127,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-15T19:59:16Z",
      "side": 1,
      "message": "I got it wrong. The optional return value of |parseParameters| is just to indicate parsing errors.\n\nNo question here.",
      "parentUuid": "8fe5138f_3ebf722e",
      "range": {
        "startLine": 127,
        "startChar": 9,
        "endLine": 127,
        "endChar": 22
      },
      "revId": "178e7c95056247d4e80d7f7bfea4754be4ea02a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
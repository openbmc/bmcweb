{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3b4913f6_3c9bed2e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-06T22:49:13Z",
      "side": 1,
      "message": "I\u0027m not understanding why anything other than a bug would cause this.\n\n/redfish/v1/Chassis/mysatelite_foo?$expand\u003d.($depth\u003d1)\n\nWould get forwarded as:\n/redfish/v1/Chassis/foo?$expand\u003d.($depth\u003d1)\n\nwhich would still result in the correct response?",
      "range": {
        "startLine": 10,
        "startChar": 41,
        "endLine": 12,
        "endChar": 45
      },
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e922a74_e096813b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-02-06T23:30:57Z",
      "side": 1,
      "message": "Forwarding \"/redfish/v1/Chassis/foo?$expand\u003d.($depth\u003d1)\" by itself will get expanded and returned correctly if the satellite BMC supports $expand.  However, once the response is returned, we still perform param processing on it and treat the response as it if hasn\u0027t already been expanded.\n\nIn effect, /redfish/v1/Chassis/mysatelite_foo?$expand\u003d.($depth\u003d1) ends up becoming /redfish/v1/Chassis/mysatelite_foo?$expand\u003d.($depth\u003d2).",
      "parentUuid": "3b4913f6_3c9bed2e",
      "range": {
        "startLine": 10,
        "startChar": 41,
        "endLine": 12,
        "endChar": 45
      },
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b623387_28f01046",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-07T02:40:34Z",
      "side": 1,
      "message": "OH, I see.  That\u0027s a bad assumption in the expand logic.  It assumes that anything generated from within bmcweb will only ever deliver \"1 level\" of results, so it doesn\u0027t really track or propagate the depth through the search.  That\u0027s a bad assumption for aggregation.  Pretty sure we can just fix this in the expand code",
      "parentUuid": "1e922a74_e096813b",
      "range": {
        "startLine": 10,
        "startChar": 41,
        "endLine": 12,
        "endChar": 45
      },
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bf3d050_6cb43c82",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-02-07T04:23:49Z",
      "side": 1,
      "message": "What about other param logic?  I\u0027m assuming something like $filter would be alright if it gets run twice on a single response (once in the satellite and once on the aggregator).  I should check the other ones we suppose just to be sure",
      "parentUuid": "5b623387_28f01046",
      "range": {
        "startLine": 10,
        "startChar": 41,
        "endLine": 12,
        "endChar": 45
      },
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1f8795e_1dec4564",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2023-02-07T20:20:57Z",
      "side": 1,
      "message": "Hmm, IMO this is a problem caused by how we setup aggregation.\n\nIn BMCWeb handlers, the assumption is handler that doesn\u0027t call delegation has no capacity to deal with query parameters.\n\nSo if your aggregation handler setup the delegation correctly, you won\u0027t have this problem.",
      "parentUuid": "6bf3d050_6cb43c82",
      "range": {
        "startLine": 10,
        "startChar": 41,
        "endLine": 12,
        "endChar": 45
      },
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0268028f_dc44d012",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-07T23:52:59Z",
      "side": 1,
      "message": "The aggregation code isn\u0027t a single handler, it has to attach to essentially all handlers (in the same way that query delegation does).  Doing what you describe would require us to register the aggregation routes in the router, which might be possible, but would involve changing all the existing code and odata.ids in a really bad way, and still would require collections to be registered with both.",
      "parentUuid": "f1f8795e_1dec4564",
      "range": {
        "startLine": 10,
        "startChar": 41,
        "endLine": 12,
        "endChar": 45
      },
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbb336f8_553a3928",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-03-08T22:26:43Z",
      "side": 1,
      "message": "Forwarding params on aggregated responses will not be an issue once https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60727 gets merged.  I\u0027m going to close this thread as a result.\n\nNote however that even with that patch our $expand handling will cause an issue when https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60556 also gets merged.  You can find a full explanation of the projected issue at https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60727/comment/2686184a_bebdd6eb/.\n\nWith that I think we\u0027ll need to selectively disable forwarding query params when the request is up tree from a top level collection.  I\u0027m going to change this patch to account for that.",
      "parentUuid": "0268028f_dc44d012",
      "range": {
        "startLine": 10,
        "startChar": 41,
        "endLine": 12,
        "endChar": 45
      },
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "744408ed_afe38ed0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-06T22:49:13Z",
      "side": 1,
      "message": "A couple things to consider:\n1. Implementations are allowed to define OEM parameters, or might support a newer version of Redfish protocol than the aggregator, so if we\u0027re going to remove the redfish-supported query params, we should only remove the ones we know that don\u0027t play well.\n2. I\u0027d really like to understand why this is failing.\nThe check here:\nhttps://github.com/openbmc/bmcweb/blob/079360ae6e04d3f2245e00d70f83d15c5cad3630/redfish-core/include/utils/query_param.hpp#L569\n\nShould prevent the duplicated expansion of a navigation reference, because any filled in resource will have more keys than just @odata.id.",
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7636ca64_7a89eb87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-02-06T23:30:57Z",
      "side": 1,
      "message": "1. OEM parameters is an interesting case.  Selectively filtering params is probably the way to go.  Right now we don\u0027t a great way to verify if a param is supported by a satellite.  $expand for sure has issues so params that require making additional requests will probably see the same.\n\nWe don\u0027t have to strip any params if our handling code is able to detect that that operation has already occurred, or skip portions of the response that have been operated on.  To be safe for now we could block forwarding all schema defined params, but could that cause an issue with processing the params in the correct order if an OEM one should not be processed first?\n\n\n2. I think it\u0027s because that function is recursive so you end up parsing until you pass a json object that looks like\n{\n    \"@odata.id\": \"{Some_URI}\"\n}\n\nEven after expanding, the resulting json should still have links that fit that format at its lowest level.  It doesn\u0027t know if that object was added as the result of expanding a previous level.",
      "parentUuid": "744408ed_afe38ed0",
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14f1724a_3ea0e947",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-03-08T22:26:43Z",
      "side": 1,
      "message": "Forwarding params on aggregated responses will not be an issue once https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60727 gets merged.\n\nNote that even with that patch our $expand handling will cause an issue when https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60556 also gets merged.  You can find a full explanation of the projected issue at https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60727/comment/2686184a_bebdd6eb/.\n\nWith that I think we\u0027ll need to selectively disable forwarding query params when the request is up tree from a top level collection. \n\nI\u0027m setting this as WIP until one those patches gets merged.  I\u0027ll then use this patch to address that issue.",
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "639b41be_cd170307",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-03-21T15:55:21Z",
      "side": 1,
      "message": "Is this still needed?",
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c9ab452_d684a60c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-03-21T16:07:24Z",
      "side": 1,
      "message": "A form of it will be needed whenever https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60556 gets merged.  See my previous comments from March 8 for explanations and links on why that\u0027s the case.\n\nMy plan is to rebase this patch on top of that patch and make the changes I outline in those comments.  At that point it should be clearer as to why this patch is still needed.  I was also waiting to rebase until https://gerrit.openbmc.org/c/openbmc/bmcweb/+/61131 got merged since there is there is a sort of dependency on that patch as well.  That\u0027s now merged.",
      "parentUuid": "639b41be_cd170307",
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76a84af1_8fb99a90",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 1
      },
      "lineNbr": 481,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2023-02-07T20:17:02Z",
      "side": 1,
      "message": "same here",
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14d4f638_e0c22607",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 1
      },
      "lineNbr": 543,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-06T22:49:13Z",
      "side": 1,
      "message": "at some point in the future, Request::uri is going away.  Please use uriView.path(), which I think gets you what you need?",
      "range": {
        "startLine": 543,
        "startChar": 30,
        "endLine": 543,
        "endChar": 41
      },
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "762feb52_3f34b650",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 1
      },
      "lineNbr": 543,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-02-06T23:30:57Z",
      "side": 1,
      "message": "I think that\u0027ll work since it should strip query params.  I\u0027ll try it out",
      "parentUuid": "14d4f638_e0c22607",
      "range": {
        "startLine": 543,
        "startChar": 30,
        "endLine": 543,
        "endChar": 41
      },
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e237a6e_44ee96f5",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 1
      },
      "lineNbr": 543,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2023-02-07T20:16:53Z",
      "side": 1,
      "message": "Right, I saw this too. Please use urlView. It has everything you need I believe",
      "parentUuid": "762feb52_3f34b650",
      "range": {
        "startLine": 543,
        "startChar": 30,
        "endLine": 543,
        "endChar": 41
      },
      "revId": "664c8f4baf06a127d6bb6398669637294c004e31",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
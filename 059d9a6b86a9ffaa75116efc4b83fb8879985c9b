{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "037ceb31_3e20fc18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-20T21:45:10Z",
      "side": 1,
      "message": "Looking much better.  One minor thing about error handling that needs fixed then this can probably go.",
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24c42909_65224357",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-20T21:46:39Z",
      "side": 1,
      "message": "Callback should be passed by non const \u0026\u0026",
      "range": {
        "startLine": 191,
        "startChar": 29,
        "endLine": 191,
        "endChar": 62
      },
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "855e37d2_91d65683",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-21T14:32:14Z",
      "side": 1,
      "message": "Using non-const \u0026\u0026 callback conflicts if the caller uses std::bind_front().\n\n```\n\n| ../../../../../../../../../bmcweb/redfish-core/lib/fabric_adapters.hpp: In function \u0027void redfish::getValidFabricAdapterPath(..., \nstd::function\u003cvoid(const boost::system::error_code\u0026,..)\u003e\u0026\u0026)\u0027:\n| ../../../../../../../../../bmcweb/redfish-core/lib/fabric_adapters.hpp:240:24: error: invalid initialization of reference of type \n\n\u0027std::function\u003cvoid(const boost::system::error_code\u0026, .... \u003e\u0026)\u003e\u0026\u0026\u0027 \nfrom expression of type \n\u0027std::_Bind_front_t\u003cvoid (\u0026)(\n...\n std::function\u003cvoid(const boost::system::error_code\u0026, ...\u003e\u0026)\u003e \u003e\u0027\n|   240 |         std::bind_front(afterGetValidFabricAdapterPath, adapterId, std::move(callback)));\n\n```\n\nEven with the normal lambda, we can keep `const` would be needed.\nSo, I\u0027m going to switch it to \n```\n    const std::function\u003cvoid(const boost::system::error_code\u0026,\n                             const std::string\u0026 fabricAdapterPath,\n                             const std::string\u0026 serviceName)\u003e\u0026\u0026 callback,\n```\nand call it inside lambda.\n\nI think - `const std::function\u003c\u003e\u0026\u0026 callback` seems covering more situations than without `const`.",
      "parentUuid": "24c42909_65224357",
      "range": {
        "startLine": 191,
        "startChar": 29,
        "endLine": 191,
        "endChar": 62
      },
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5512b77a_308d6868",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-21T15:43:31Z",
      "side": 1,
      "message": "It turns out - CI does not accept it.\n\n```\nclang-tidy-17 -export-fixes /tmp/tmp63k1ly_5/tmpn25losy6.yaml -p\u003d/data0/jenkins/workspace/ci-repository/openbmc/bmcweb/build31w48z5a -quiet /data0/jenkins/workspace/ci-repository/openbmc/bmcweb/src/webserver_main.cpp\n../redfish-core/lib/fabric_adapters.hpp:242:51: error: std::move of the const variable \u0027callback\u0027 has no effect or make the variable non-const [performance-move-const-arg,-warnings-as-errors]\n  242 |         afterGetValidFabricAdapterPath(adapterId, std::move(callback), ec2,\n      |                                                   ^\n../redfish-core/lib/fabric_adapters.hpp:191:65: note: consider changing the 2nd parameter of \u0027afterGetValidFabricAdapterPath\u0027 from \u0027const std::function\u003cvoid (const boost::system::error_code \u0026, const std::string \u0026, const std::string \u0026)\u003e \u0026\u0026\u0027 (aka \u0027const function\u003cvoid (const boost::system::error_code \u0026, const basic_string\u003cchar\u003e \u0026, const basic_string\u003cchar\u003e \u0026)\u003e \u0026\u0026\u0027) to \u0027const std::function\u003cvoid (const boost::system::error_code \u0026, const std::string \u0026, const std::string \u0026)\u003e \u0026\u0027\n  191 |                              const std::string\u0026 serviceName)\u003e\u0026\u0026 callback,\n      |                                                                 ^\n239345 warnings generated.\nApplying fixes â€¦\n\n```\n\nCI suggests to use \n```\nconst std::function\u003cvoid (const boost::system::error_code \u0026, const std::string \u0026, const std::string \u0026)\u003e\u0026 callback\n```\n\nSo, I changed the code as such and use `std::move(callback)` at caller.",
      "parentUuid": "855e37d2_91d65683",
      "range": {
        "startLine": 191,
        "startChar": 29,
        "endLine": 191,
        "endChar": 62
      },
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a72ffb7_71eea4a2",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-22T17:28:54Z",
      "side": 1,
      "message": "Then just make it a value.  If we have to make a copy, lets make it explicit.\n\n\nThere\u0027s a bug somewhere;  We do this same pattern other places, so I would expect it to work, but sure, it\u0027s not going to be a major problem here.",
      "parentUuid": "5512b77a_308d6868",
      "range": {
        "startLine": 191,
        "startChar": 29,
        "endLine": 191,
        "endChar": 62
      },
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9adc0151_33ddc493",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-22T18:26:06Z",
      "side": 1,
      "message": "There are a few places that use `const std::function\u003c...\u003e\u0026 callback` as a parameter.\n\nhttps://github.com/search?q\u003drepo%3Aopenbmc%2Fbmcweb+%22%3E%26+callback%22\u0026type\u003dcode\n\nI think they were done as such due to same reasons.\n\nHere, as you suggested, I make it as a value",
      "parentUuid": "4a72ffb7_71eea4a2",
      "range": {
        "startLine": 191,
        "startChar": 29,
        "endLine": 191,
        "endChar": 62
      },
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58eae0a3_8da368ab",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-20T21:46:39Z",
      "side": 1,
      "message": "FYI, this pattern shows up a lot in the codebase.  Realistically there should be a mapper call that can do this for us, rather than bmcweb trying to invent a new version for every possible type.",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 215,
        "endChar": 1
      },
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a11ccbad_89f29a80",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-21T14:32:14Z",
      "side": 1,
      "message": "It would be great if mapper functions that match with `id` (not `path`). With it,  many things can be simplified.\nFor example, to use many dbus/mapper calls, we first need to search `path` from the given `id`.  As the result, we may almost always to call `getSubTree()` and compare each path with `id`.\n\nFor now, we may need to still walk thru the subtree to find the matching path.",
      "parentUuid": "58eae0a3_8da368ab",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 215,
        "endChar": 1
      },
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df09d807_2abcf83f",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 3
      },
      "lineNbr": 240,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-20T21:46:39Z",
      "side": 1,
      "message": "std::move()",
      "range": {
        "startLine": 240,
        "startChar": 67,
        "endLine": 240,
        "endChar": 75
      },
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7eea6204_93b2f17e",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 3
      },
      "lineNbr": 240,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-21T14:32:14Z",
      "side": 1,
      "message": "Changed to match with afterGetValidFabricAdapterPath() using lambda",
      "parentUuid": "df09d807_2abcf83f",
      "range": {
        "startLine": 240,
        "startChar": 67,
        "endLine": 240,
        "endChar": 75
      },
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "662c4f6c_69359b5c",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 3
      },
      "lineNbr": 267,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-20T21:45:10Z",
      "side": 1,
      "message": "Does this actually need checked?  If either of these are true, then there should be an error code set and handled on line 249.\n\nI don\u0027t see how we can hit this code.",
      "range": {
        "startLine": 262,
        "startChar": 0,
        "endLine": 267,
        "endChar": 5
      },
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39f5be66_09a665f0",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 3
      },
      "lineNbr": 267,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-21T14:32:14Z",
      "side": 1,
      "message": "Yes, previously, the matching adapterId from subtree was done inside `getValidFabricAdapterPath` and generated `resourceNotFound`.\n\nPrevious code:\n```\n\ninline void getValidFabricAdapterPath(adapterId)\n{\n    dbus::utility::getSubTree(..) {\n ....\n        for (const auto\u0026 [adapterPath, serviceMap] : subtree)\n        {\n            if (checkFabricAdapterId(adapterPath, adapterId))\n            {\n                callback(adapterPath, serviceMap.begin()-\u003efirst);\n                return;\n            }\n        }\n\u003d\u003d\u003e If not found, error is handled.\n        BMCWEB_LOG_WARNING(\"Adapter not found\");\n        messages::resourceNotFound(asyncResp-\u003eres, \"FabricAdapter\", adapterId);\n    });\n```\n\nHowever, the new code is handling such non-matching condition by seeing the empty returned `fabricAdapterPath`.",
      "parentUuid": "662c4f6c_69359b5c",
      "range": {
        "startLine": 262,
        "startChar": 0,
        "endLine": 267,
        "endChar": 5
      },
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5351d287_96a2d5af",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 3
      },
      "lineNbr": 386,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-20T21:45:10Z",
      "side": 1,
      "message": "same as above.",
      "range": {
        "startLine": 381,
        "startChar": 0,
        "endLine": 386,
        "endChar": 5
      },
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2e77079_54fd99cc",
        "filename": "redfish-core/lib/fabric_adapters.hpp",
        "patchSetId": 3
      },
      "lineNbr": 386,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-02-21T14:32:14Z",
      "side": 1,
      "message": "Yes, as described in https://gerrit.openbmc.org/c/openbmc/bmcweb/+/69499/comment/662c4f6c_69359b5c/",
      "parentUuid": "5351d287_96a2d5af",
      "range": {
        "startLine": 381,
        "startChar": 0,
        "endLine": 386,
        "endChar": 5
      },
      "revId": "059d9a6b86a9ffaa75116efc4b83fb8879985c9b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f93d644d_105b3f0b",
        "filename": "meson.build",
        "patchSetId": 21
      },
      "lineNbr": 360,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-02-01T19:42:19Z",
      "side": 1,
      "message": "you could put this in the first commit? Oh well",
      "range": {
        "startLine": 360,
        "startChar": 42,
        "endLine": 360,
        "endChar": 59
      },
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27b8cb0a_87f2c5ee",
        "filename": "meson.build",
        "patchSetId": 21
      },
      "lineNbr": 360,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-01T19:47:06Z",
      "side": 1,
      "message": "it\u0027s intentionally put in this commit because this is the first unit tests that REQUIRES 1.14.0",
      "parentUuid": "f93d644d_105b3f0b",
      "range": {
        "startLine": 360,
        "startChar": 42,
        "endLine": 360,
        "endChar": 59
      },
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e87e1da_330b1852",
        "filename": "test/http/file_test_utilities.hpp",
        "patchSetId": 21
      },
      "lineNbr": 11,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-02-01T20:29:56Z",
      "side": 1,
      "message": "Open Group documentation for mkstemp() says portable applications should use exactly 6 \u0027X\u0027 characters. I\u0027m not sure if it matters in our environment.",
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc80eef8_24050055",
        "filename": "test/http/file_test_utilities.hpp",
        "patchSetId": 21
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-01T20:38:38Z",
      "side": 1,
      "message": "I don\u0027t think it matters, but it\u0027s trivial to fix.\n\nFixed.",
      "parentUuid": "0e87e1da_330b1852",
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb822920_b7c75266",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 62,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-02-01T19:42:19Z",
      "side": 1,
      "message": "```#include \u003cstring\u003e```",
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b16f7e55_d33eafce",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 62,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-01T19:47:06Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "cb822920_b7c75266",
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a11bd4a5_498f3a42",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 63,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-02-01T19:42:19Z",
      "side": 1,
      "message": "```#include \u003cboost/system/error_code.hpp\u003e```",
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b69ea9c0_ad24dab4",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 63,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-01T19:47:06Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "a11bd4a5_498f3a42",
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd2e5053_2a1421d4",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 68,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-02-01T19:42:19Z",
      "side": 1,
      "message": "```#include \u003carray\u003e```",
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "202650cb_44add044",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 68,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-01T19:47:06Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "bd2e5053_2a1421d4",
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22e2ecb9_2673db6f",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 74,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-02-01T20:29:56Z",
      "side": 1,
      "message": "Should the additional 6 bytes of the payload be verified to make sure they aren\u0027t garbage? Or at least verify buffer[10] \u003d \u0027\\0\u0027?",
      "range": {
        "startLine": 73,
        "startChar": 4,
        "endLine": 74,
        "endChar": 79
      },
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab7913e2_c265b923",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 74,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-01T20:38:38Z",
      "side": 1,
      "message": "We already check that out \u003d\u003d 10.  in theory if it wrote the buffer that it had access to, but didn\u0027t return it, would it be a problem?",
      "parentUuid": "22e2ecb9_2673db6f",
      "range": {
        "startLine": 73,
        "startChar": 4,
        "endLine": 74,
        "endChar": 79
      },
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30ae0103_e85851e5",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 74,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-02-01T21:07:18Z",
      "side": 1,
      "message": "From reading the EXPECT_THAT() documentation it is not clear to me that it does verify the count is exactly the same between the two items.\n\nSo, if (out \u003d\u003d 11), and (buffer.data \u003d\u003d \"teststringX\"), would EXPECT_THAT still report an error here?\n\nOn a read here I wouldn\u0027t expect any more to be read than the file actually contains. I wouldn\u0027t want garbage to be returned on the read even if the buffer had room for it.",
      "parentUuid": "ab7913e2_c265b923",
      "range": {
        "startLine": 73,
        "startChar": 4,
        "endLine": 74,
        "endChar": 79
      },
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7907d684_924953a6",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 93,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-02-01T20:29:56Z",
      "side": 1,
      "message": "Same question here, should the additional 6 bytes of the payload be verified to make sure they aren\u0027t garbage? (Expect \u0027\\0\u0027?)",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 93,
        "endChar": 79
      },
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dca686f_b52303ac",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 93,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-01T20:38:38Z",
      "side": 1,
      "message": "Lets discuss above.  This will have the same conclusion.",
      "parentUuid": "7907d684_924953a6",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 93,
        "endChar": 79
      },
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d3a2899_15957140",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 93,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-02-01T21:07:18Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "6dca686f_b52303ac",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 93,
        "endChar": 79
      },
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d618343_3bdfd2e3",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 121,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-02-01T19:42:19Z",
      "side": 1,
      "message": "Why do we have to use pipe? \nWhy can\u0027t we use std::ofstream ?",
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4943ea3e_12644869",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 121,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-01T19:47:06Z",
      "side": 1,
      "message": "Because the intent of this test is to test that pipes work.\n\nofstream would test that files work, which is fine (we already have tests that cover those cases) files support getting the size, so it wouldn\u0027t be a representative test of something that is being built on the fly.",
      "parentUuid": "3d618343_3bdfd2e3",
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "747b1b9a_45ec8825",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 135,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-02-01T20:29:56Z",
      "side": 1,
      "message": "Should we confirm this is null terminated?",
      "range": {
        "startLine": 134,
        "startChar": 4,
        "endLine": 135,
        "endChar": 79
      },
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a29ca5af_96b1ec04",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 135,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-01T20:38:38Z",
      "side": 1,
      "message": "Why?  There\u0027s no expectation that this is null terminated.  string_views are not null terminated.",
      "parentUuid": "747b1b9a_45ec8825",
      "range": {
        "startLine": 134,
        "startChar": 4,
        "endLine": 135,
        "endChar": 79
      },
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "273435bd_eff27adc",
        "filename": "test/http/http_file_body_test.cpp",
        "patchSetId": 21
      },
      "lineNbr": 135,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2024-02-01T21:07:18Z",
      "side": 1,
      "message": "Since this was being read into a std::array I was expecting it would be null terminated.",
      "parentUuid": "a29ca5af_96b1ec04",
      "range": {
        "startLine": 134,
        "startChar": 4,
        "endLine": 135,
        "endChar": 79
      },
      "revId": "ef4432bec2753a2b27b3c03c350cd780b92c9a16",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b996bdea_ed19e548",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-05T20:58:54Z",
      "side": 1,
      "message": "Reading the official standard https://www.dmtf.org/sites/default/files/standards/documents/DSP0266_1.20.1.html#http-header-authentication-requirements I see only one place mentioning cookies at all, and it says `Shall` there, not RFC 2119 specified `SHALL` so I\u0027m not 100 % what it means. Apparently redfish protocol and service validators either do not consider that a violation or do not test as apparently bmcweb authenticates all the regular HTTP verbs with cookies currently.\n\nBut the standard doesn\u0027t say that cookies can not be used for non HTTP purposes, so I can imagine setting a cookie via the regular Sessions POST reply _in addition_ to the standard `X-Auth-Token` and requiring all the HTTP requests to have that header while cookie would work for WebSocket. That probably wouldn\u0027t contradict the standard wording.",
      "revId": "b66ade0a3945f51f57dbc7481363060454df7acf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41c4d756_fd79844b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-05T21:17:41Z",
      "side": 1,
      "message": "A couple problems with this.\n\n1. This is the legacy login from the phosphor-rest stuff.  We can\u0027t add fields to it without breaking clients.\n2. There isn\u0027t really a standard that governs this API (which relates to #1) which you\u0027ll note, there was no place where the behavior of this was documented outside of code.\n\n\n3. We\u0027re mixing concerns here.  This is the generic \"could apply to any service in bmcweb\" login.  Redfish might not even be enabled if this URL is used.  We can\u0027t be posting redfish-specific stuff to it.\n\n\n\nI would much rather we make adjustments to SessionService, and get it to work the way the UI needs.  As a starting point, on the SessionService POST if we supported an OEM parameter of\n\n{\n    \"Oem\": {\n                \"OpenBMC\": {\n                    LoginContext: \"Webui\",\n                }\n           }\n}\n\n\n\nWe could make the SessionCollection detect that and send back the Cookie, without effecting anything else, and \"technically\" not breaking the redfish spec\n\n\nAlternatively, a query param for something like ?openbmc_is_webui appended to the URL might be more generic, if the UI ever gets used on a non bmcweb based server.",
      "revId": "b66ade0a3945f51f57dbc7481363060454df7acf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e1eeceb_4ea74554",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-05T21:42:55Z",
      "side": 1,
      "message": "\u003e 1. This is the legacy login from the phosphor-rest stuff.  We can\u0027t add fields to it without breaking clients.\n\nAren\u0027t clients supposed to ignore unknown fields? At least my testing with current webui-vue shows it\u0027s fine with this change.\n\n\u003e 2. There isn\u0027t really a standard that governs this API (which relates to #1) which you\u0027ll note, there was no place where the behavior of this was documented outside of code.\n\nYes, so I didn\u0027t change any documentation in this commit.\n\n\u003e 3. We\u0027re mixing concerns here.  This is the generic \"could apply to any service in bmcweb\" login.  Redfish might not even be enabled if this URL is used.  We can\u0027t be posting redfish-specific stuff to it.\n\nOh, I wasn\u0027t aware a usecase like this exists.\n\n\u003e I would much rather we make adjustments to SessionService, and get it to work the way the UI needs.  As a starting point, on the SessionService POST if we supported an OEM parameter of\n\u003e \n\u003e {\n\u003e     \"Oem\": {\n\u003e                 \"OpenBMC\": {\n\u003e                     LoginContext: \"Webui\",\n\u003e                 }\n\u003e            }\n\u003e }\n\u003e \n\u003e \n\u003e \n\u003e We could make the SessionCollection detect that and send back the Cookie, without effecting anything else, and \"technically\" not breaking the redfish spec\n\nSounds like a solid idea, do you want me to try implementing it?\n\n\u003e Alternatively, a query param for something like ?openbmc_is_webui appended to the URL might be more generic, if the UI ever gets used on a non bmcweb based server.\n\nDo you consider making UI just always use `X-Auth-Token` header to match the standard and to allow interoperability with other Redfish servers out of the box without tricks? And that Oem parameter passed by the UI will be ignored by those other servers but bmcweb can add that cookie and still require `X-Auth-Token` for normal HTTP actions while the cookie will get used for WebSocket?",
      "parentUuid": "41c4d756_fd79844b",
      "revId": "b66ade0a3945f51f57dbc7481363060454df7acf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63217488_55fc3ea9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-05T22:12:11Z",
      "side": 1,
      "message": "\u003e \u003e 1. This is the legacy login from the phosphor-rest stuff.  We can\u0027t add fields to it without breaking clients.\n\u003e \n\u003e Aren\u0027t clients supposed to ignore unknown fields? At least my testing with current webui-vue shows it\u0027s fine with this change.\n\nIn redfish.... yes, that policy is in the standard.  The API you\u0027re editing isn\u0027t Redfish though.  Yes, webui-vue obviously works for it, because it consumes Redfish so it\u0027s been coded to that \"ignore extra keys\" standard.  Not all applications using /login are that lucky.\n\n\u003e \n\u003e \u003e 2. There isn\u0027t really a standard that governs this API (which relates to #1) which you\u0027ll note, there was no place where the behavior of this was documented outside of code.\n\u003e \n\u003e Yes, so I didn\u0027t change any documentation in this commit.\n\u003e \n\u003e \u003e 3. We\u0027re mixing concerns here.  This is the generic \"could apply to any service in bmcweb\" login.  Redfish might not even be enabled if this URL is used.  We can\u0027t be posting redfish-specific stuff to it.\n\u003e \n\u003e Oh, I wasn\u0027t aware a usecase like this exists.\n\u003e \n\u003e \u003e I would much rather we make adjustments to SessionService, and get it to work the way the UI needs.  As a starting point, on the SessionService POST if we supported an OEM parameter of\n\u003e \u003e \n\u003e \u003e {\n\u003e \u003e     \"Oem\": {\n\u003e \u003e                 \"OpenBMC\": {\n\u003e \u003e                     LoginContext: \"Webui\",\n\u003e \u003e                 }\n\u003e \u003e            }\n\u003e \u003e }\n\u003e \u003e \n\u003e \u003e \n\u003e \u003e \n\u003e \u003e We could make the SessionCollection detect that and send back the Cookie, without effecting anything else, and \"technically\" not breaking the redfish spec\n\u003e \n\u003e Sounds like a solid idea, do you want me to try implementing it?\n\n.......  So long as you don\u0027t yell at me if I ask you to switch to something else in the user-facing api later, yeah, lets see if we can make it work.\nMy primary concerns are:\n1. Compliant Redfish applications shouldn\u0027t be able to see that we\u0027re breaking the standard here.\n2. The UI should ideally still be able to execute the non-websocket functions if the Redfish server doesn\u0027t support cookies.\n\nGiven those, I\u0027m starting to lean toward query param, but I think the \"how we trigger it\" is less important than how we actually implement the behavior once we know it\u0027s the webui.\n\n\u003e \n\u003e \u003e Alternatively, a query param for something like ?openbmc_is_webui appended to the URL might be more generic, if the UI ever gets used on a non bmcweb based server.\n\u003e \n\u003e Do you consider making UI just always use `X-Auth-Token` header to match the standard and to allow interoperability with other Redfish servers out of the box without tricks?\n\nOf course we did..... You think we did all this craziness just for fun???? ðŸ˜‚\n\n\n\u003e And that Oem parameter passed by the UI will be ignored by those other servers but bmcweb can add that cookie and still require `X-Auth-Token` for normal HTTP actions while the cookie will get used for WebSocket?\n\nWe talked about splitting up and doing X-token for Redfish, and Cookies for websockets.  I recall the thinking was that Cookies (as implemented at least) where slightly more secure, because they require a CSRF cookie as well as the session token, and the CSRF token is never made available to javascript, so if there were a javascript vulnerability that let you export the session ID, you still couldn\u0027t log in.\n\nWhether or not that was worth the effort is debatable, but we\u0027re here now.",
      "parentUuid": "5e1eeceb_4ea74554",
      "revId": "b66ade0a3945f51f57dbc7481363060454df7acf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cf32467_0fdf1139",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-06T14:25:14Z",
      "side": 1,
      "message": "\u003e \u003e Sounds like a solid idea, do you want me to try implementing it?\n\u003e \n\u003e .......  So long as you don\u0027t yell at me if I ask you to switch to something else in the user-facing api later, yeah, lets see if we can make it work.\n\u003e My primary concerns are:\n\u003e 1. Compliant Redfish applications shouldn\u0027t be able to see that we\u0027re breaking the standard here.\n\u003e 2. The UI should ideally still be able to execute the non-websocket functions if the Redfish server doesn\u0027t support cookies.\n\u003e \n\u003e Given those, I\u0027m starting to lean toward query param, but I think the \"how we trigger it\" is less important than how we actually implement the behavior once we know it\u0027s the webui.\n\nOK, I\u0027m on it, prototyping looks good so far, I hope to share the PoC in the coming days.\n\nSo is it technically legal for the front end to send extra Oem parameter in a POST request? If yes, that looks like a more Redfish-y way than a URL query argument (and a query parameter feels odd for a POST request anyway). I expect other Redfish servers to just ignore that special request and webui should just deal with having to use `X-Auth-Token` without a cookie.",
      "parentUuid": "63217488_55fc3ea9",
      "revId": "b66ade0a3945f51f57dbc7481363060454df7acf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "801599ef_ed2d11e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-06T14:30:57Z",
      "side": 1,
      "message": "\u003e \u003e \u003e Sounds like a solid idea, do you want me to try implementing it?\n\u003e \u003e \n\u003e \u003e .......  So long as you don\u0027t yell at me if I ask you to switch to something else in the user-facing api later, yeah, lets see if we can make it work.\n\u003e \u003e My primary concerns are:\n\u003e \u003e 1. Compliant Redfish applications shouldn\u0027t be able to see that we\u0027re breaking the standard here.\n\u003e \u003e 2. The UI should ideally still be able to execute the non-websocket functions if the Redfish server doesn\u0027t support cookies.\n\u003e \u003e \n\u003e \u003e Given those, I\u0027m starting to lean toward query param, but I think the \"how we trigger it\" is less important than how we actually implement the behavior once we know it\u0027s the webui.\n\u003e \n\u003e OK, I\u0027m on it, prototyping looks good so far, I hope to share the PoC in the coming days.\n\u003e \n\u003e So is it technically legal for the front end to send extra Oem parameter in a POST request? \n\nSo long as we add an appropriate schema for it, we can add whatever we need to in OEM.\n\n\n\u003e If yes, that looks like a more Redfish-y way than a URL query argument (and a query parameter feels odd for a POST request anyway). I expect other Redfish servers to just ignore that special request and webui should just deal with having to use `X-Auth-Token` without a cookie.\n\nThat\u0027s the thing, most other redfish servers won\u0027t ignore the extra fields (because they can\u0027t really in the standard) Before support is added, bmcweb will even return an error on the extra field, the\u0027s kind of why I was leaning toward a query param (I think) the spec says to ignore extra query params.\n\nThinking about it more, we could maybe also do the XHR check that we use for the unathorized header?\n\nhttps://github.com/openbmc/bmcweb/blob/de9ad764973364a19f50bee6c3032fdacc1f51f1/include/forward_unauthorized.hpp#L44",
      "parentUuid": "7cf32467_0fdf1139",
      "revId": "b66ade0a3945f51f57dbc7481363060454df7acf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "05ae5f16_c0bb678b",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 62,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Shouldn\u0027t this be simply char, not char*?",
      "range": {
        "startLine": 62,
        "startChar": 52,
        "endLine": 62,
        "endChar": 59
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19d85c5e_3e9d18a8",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 62,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "It is simpler to pass a pointer then a variable.",
      "parentUuid": "05ae5f16_c0bb678b",
      "range": {
        "startLine": 62,
        "startChar": 52,
        "endLine": 62,
        "endChar": 59
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f52d000_83b03327",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Please implement this as a single pass parser.  it will be simpler and more efficient, and it becomes much easier to define how things like negative numbers and overflow will work.  Pseudocode is below.\n\nvalue \u003d 0;\nloop over character in fmt:\n    if !isdigit(character)\n        if (character !\u003d postfix)\n            return error\n        return value\n    new \u003d value * 10 + character - \u00270\u0027\n    if new \u003c value\n         return error;  // overflow\n    value \u003d new;\n\nreturn error",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "360dc1e3_8e061580",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 64,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "How is possible that std::strtol is less efficient then your proposition? std::strtol always check if actual pointer is null so it is safe and it verify more other errors such overflow on int variable. Implementing own parser sounds like reinventing a wheel.",
      "parentUuid": "9f52d000_83b03327",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78754b0c_c79de612",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "have you tested this?  Zero is a valid thing this could return.",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 15
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d27d3f2d_598153a1",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 67,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "Yes, I have tested it.",
      "parentUuid": "78754b0c_c79de612",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 15
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15a106b0_03d64692",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 70,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "initialize your variables.",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e04da39c_3f3a0ec4",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 70,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "Next branches initialize it.",
      "parentUuid": "15a106b0_03d64692",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9b63a1c_27a8ecfb",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 73,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "?  Use a dedicated rounding routine then?",
      "range": {
        "startLine": 73,
        "startChar": 11,
        "endLine": 73,
        "endChar": 65
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e715d36f_aad8419b",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 73,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "I will change it to std::roundf. Sounds more reasonable. Sorry for my mistake.",
      "parentUuid": "d9b63a1c_27a8ecfb",
      "range": {
        "startLine": 73,
        "startChar": 11,
        "endLine": 73,
        "endChar": 65
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75e889bf_9c1797d6",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 74,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "This is going to accept more than you intended.  Please fix.  (see below about single pass parser)",
      "range": {
        "startLine": 74,
        "startChar": 32,
        "endLine": 74,
        "endChar": 64
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62744028_f56fbd15",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 80,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "You need to go take a look at the man page on how string_views work.  This is completely incorrect.",
      "range": {
        "startLine": 80,
        "startChar": 26,
        "endLine": 80,
        "endChar": 45
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b510fa6_f8bac451",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 80,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "Yes, it holds a reference to a sequence of characters. What\u0027s exactly wrong here? Thanks in advance",
      "parentUuid": "62744028_f56fbd15",
      "range": {
        "startLine": 80,
        "startChar": 26,
        "endLine": 80,
        "endChar": 45
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5086253_2164c8e1",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 122,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "this function fails to account for overflow.",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ffcccb4_9be093fa",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 122,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "What do you mean? Do you mean that std:strtol or string_view can cause an overflow? How is it possible? Thanks in advance",
      "parentUuid": "f5086253_2164c8e1",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4b11719_65f58027",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 124,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "nullptr derefernce.",
      "range": {
        "startLine": 124,
        "startChar": 27,
        "endLine": 124,
        "endChar": 28
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd0ba49d_50c5e230",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 124,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "string_view has a static_assert on nullptr so it is not possible to create string_view with nullptr. Same when you create string_view from std::string. string is not possible to be nullptr.",
      "parentUuid": "b4b11719_65f58027",
      "range": {
        "startLine": 124,
        "startChar": 27,
        "endLine": 124,
        "endChar": 28
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "787ace3a_bbe57c3c",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 126,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "you need a way to differentiate P0D0H0M0S from a parse failure.  POssibly return a std::optional?",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "feb98cef_6669fa9a",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 126,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "Zero as output is intended. There is no need to return error if passed format is invalid. What you suggest is a future improvement for cases when advance error verification is required.",
      "parentUuid": "787ace3a_bbe57c3c",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fc58d9f_b1302b5f",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 128,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "pick a more appropriate integer type (I\u0027ve commented a similar issue on your other review)",
      "range": {
        "startLine": 128,
        "startChar": 39,
        "endLine": 128,
        "endChar": 42
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f28a034_22620ebe",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 128,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "Please, according to c++20 we should use an signed integer type of at least 25 bits. If I use hours, than the limitation is different (23 bits). I can change it to int32_t to be sure that it always cover specification.",
      "parentUuid": "1fc58d9f_b1302b5f",
      "range": {
        "startLine": 128,
        "startChar": 39,
        "endLine": 128,
        "endChar": 42
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "582fcd59_b584a5b8",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 138,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Again, I\u0027m seeing a function that doesn\u0027t handle errors, has pretty bad failure modes (like overflows, and zeros on failure), and could be written in about half the code as a single pass parser.  Can you take another shot at implementing this?",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 138,
        "endChar": 73
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7243c31f_baa5e726",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 20
      },
      "lineNbr": 138,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "Are you sure? This function uses safe calls from standard library. I\u0027ve already covered it in previous comments.",
      "parentUuid": "582fcd59_b584a5b8",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 138,
        "endChar": 73
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a25fb55d_9d6bdfd0",
        "filename": "redfish-core/include/utils/validate_params_length.hpp",
        "patchSetId": 20
      },
      "lineNbr": 3,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Please discard this whole file, and simply inline these checks.  This is obfuscation to an extreme extent that does not help the readability of the code.  Range checks should be obvious in calling scope.",
      "range": {
        "startLine": 3,
        "startChar": 11,
        "endLine": 3,
        "endChar": 12
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "125d7220_82eaaa78",
        "filename": "redfish-core/include/utils/validate_params_length.hpp",
        "patchSetId": 20
      },
      "lineNbr": 3,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-17T10:04:25Z",
      "side": 1,
      "message": "We wanted to achieve something like this.\n\nauto limits \u003d { sizeLimit(name, \"Name\", 255),\n                sizeLimit(id, \"Id\", 255), ... }; // easy to add more verifications and can be reused in other places in bmcweb in the future\nif (!validate(limits)) {\n     return false;\n}\n\nWhen you inline it you have to read it every time and check for typos for example, if you change one place you need to look for other similar cases and change all of them. Code will evolve and some change will make it hard to grep and you will miss one key place where you should make change but you didn\u0027t.\n\nWe have to validate 2 arrays and 5 string values and that would give us code below:\n\nif (array1.size() \u003e limit) {\n  messageStringValueTooLong(res, \"name\", limit);\n  return false;\n}\nfor (const auto\u0026 item : array1) {\n  if (item.size() \u003e limit) {\n      messageStringValueTooLong(res, \"name\", limit);\n      return false;\n  }\n}\nif (array2.size() \u003e limit) {\n  messageStringValueTooLong(res, \"name\", limit);\n  return false;\n}\nfor (const auto\u0026 item : array2) {\n  if (item.size() \u003e limit) {\n      messageStringValueTooLong(res, \"name\", limit);\n      return false;\n  }\n}\nif (field1.size() \u003e limit) {\n  messageStringValueTooLong(res, \"name\", limit);\n  return false;\n}\nif (field2.size() \u003e limit) {\n  messageStringValueTooLong(res, \"name\", limit);\n  return false;\n}\nif (field3.size() \u003e limit) {\n  messageStringValueTooLong(res, \"name\", limit);\n  return false;\n}\nif (field4.size() \u003e limit) {\n  messageStringValueTooLong(res, \"name\", limit);\n  return false;\n}\nif (field5.size() \u003e limit) {\n  messageStringValueTooLong(res, \"name\", limit);\n  return false;\n}",
      "parentUuid": "a25fb55d_9d6bdfd0",
      "range": {
        "startLine": 3,
        "startChar": 11,
        "endLine": 3,
        "endChar": 12
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30050ded_e8090c29",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 70,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Please don\u0027t use tuple here, as you\u0027re not doing any dynamic template programming.  Use a struct.",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e407517_ff2ec124",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 70,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2020-07-17T10:10:26Z",
      "side": 1,
      "message": "In general I would agree with your comment, but tuple here (and this whole nested structure overall) is unfortunately necessary as type passed directly to D-Bus call. \n\nAFAIK struct cannot be broken down by sdbusplus right?",
      "parentUuid": "30050ded_e8090c29",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0152a787_7f2120c9",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 72,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Please avoid \"using\" definitions like this.  Simply inline your types, as it improves the readability.",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 72,
        "endChar": 50
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2d52edf_57b9b1af",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 72,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2020-07-17T10:10:26Z",
      "side": 1,
      "message": "+1\nCurrently MetricParam and MetricParams in the code differ only by one letter and at first glance it might be confusing for someone unfamiliar with the code.",
      "parentUuid": "0152a787_7f2120c9",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 72,
        "endChar": 50
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25d4129e_e33e1d76",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 77,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "If you need this, use a struct.  Tuple is not required here.",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eda7f109_a403461f",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 77,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2020-07-17T10:10:26Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "25d4129e_e33e1d76",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51733c3f_8bfd7c1b",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 92,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Please avoid auto here.  It makes the readability more difficult.",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62d6a947_d5a8b0a9",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 92,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2020-07-17T10:10:26Z",
      "side": 1,
      "message": "+1, while auto makes sense for complex iterators etc, meaning of this variable is not obvious without jumping to function definition.",
      "parentUuid": "51733c3f_8bfd7c1b",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91e0b4b5_576493d5",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 117,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Please don\u0027t construct a map for every iteration of this, especially for only 2 lookup values.",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a0c13cb_2a8f0d66",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 117,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2020-07-17T10:10:26Z",
      "side": 1,
      "message": "Ed, what do you think about meeting in the middle and replacing this map with std::array of std::pairs?\n\nAlleged performance impact of unnecessary sorting and lookups could be mitigated by simple for-loop. That change would then reduce the performance overhead while still keeping code easy to follow and extend.",
      "parentUuid": "91e0b4b5_576493d5",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4526711_04fb496c",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 154,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2020-07-16T12:32:58Z",
      "side": 1,
      "message": "Should be \u0027255 - len(/xyz/openbmc_project/MonitoringService/Reports/TelemetryService/)\n\nConsider defining constant for that (maxSupportedIdLen)",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db468b6e_6923d8ac",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 154,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-17T10:18:36Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "b4526711_04fb496c",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fd76b2a_bfa8975b",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 154,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-17T14:24:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "db468b6e_6923d8ac",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f65799d7_0ac78af4",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 156,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2020-07-16T12:32:58Z",
      "side": 1,
      "message": "Consider changing all \u0027255\u0027 with some friendly constant, like \u0027maxShortParamLen\u0027 and all 1024 with \u0027maxLongParamLen\u0027.\n\nAdd comment above all three newly defined constants, that they are defined to prevent Denial of Service attacks.",
      "range": {
        "startLine": 156,
        "startChar": 58,
        "endLine": 156,
        "endChar": 61
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "293f46b2_b2787673",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 156,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-17T10:18:36Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "f65799d7_0ac78af4",
      "range": {
        "startLine": 156,
        "startChar": 58,
        "endLine": 156,
        "endChar": 61
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60cad539_6315c949",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 156,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-17T14:24:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "293f46b2_b2787673",
      "range": {
        "startLine": 156,
        "startChar": 58,
        "endLine": 156,
        "endChar": 61
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b33f85d9_f7cd7edd",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 165,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "There is already a utils function for this.  escapePathForDbus.  This IS something that needs to be a generic utils function, as it\u0027s used all over the place.",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9997ce49_864c3345",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 165,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2020-07-17T10:10:26Z",
      "side": 1,
      "message": "From what I\u0027ve checked escapePathForDbus does a regex_replace of all \u0027illegal\u0027 letters with \u0027_\u0027 so that\u0027s actually not the same use case.\n\nDo you rather suggest extracting lines 165-169 as a new dbus_utility function?",
      "parentUuid": "b33f85d9_f7cd7edd",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b47148d8_af0f485a",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 168,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "this is redundant to the find_first_not_of",
      "range": {
        "startLine": 168,
        "startChar": 12,
        "endLine": 168,
        "endChar": 16
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f732520_8424f129",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 168,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-17T10:04:25Z",
      "side": 1,
      "message": "Yes, but we have another requirement for name to be at least one character long. I guess LOG_ERROR needs to be updated to be more descriptive.",
      "parentUuid": "b47148d8_af0f485a",
      "range": {
        "startLine": 168,
        "startChar": 12,
        "endLine": 168,
        "endChar": 16
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c555f157_0e02e2ac",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 178,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "There are 2 values in this array.  Please simply write them out.  This obfuscates the intent a lot.",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e39f694_2847e94c",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 178,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "Using algorithm like std::any_of make it more readable, easier to use and is more optimize. Are you sure?",
      "parentUuid": "c555f157_0e02e2ac",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9e5f1a6_9acf68f6",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 180,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "you\u0027ve captured by value here, which I suspect you didn\u0027t intend.",
      "range": {
        "startLine": 180,
        "startChar": 17,
        "endLine": 180,
        "endChar": 30
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "113cc779_8a9f0076",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 180,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "Ok, we will change to reference.",
      "parentUuid": "a9e5f1a6_9acf68f6",
      "range": {
        "startLine": 180,
        "startChar": 17,
        "endLine": 180,
        "endChar": 30
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10bb5410_06ef49a0",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 187,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Please avoid auto.",
      "range": {
        "startLine": 187,
        "startChar": 8,
        "endLine": 187,
        "endChar": 13
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f910bdcd_bebeb4fb",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 202,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Please parse this out on line 152 as a std::optional",
      "range": {
        "startLine": 202,
        "startChar": 24,
        "endLine": 202,
        "endChar": 32
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da2e27bf_42b173f3",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 202,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "It is possible to fetch data from embedded json elements?",
      "parentUuid": "f910bdcd_bebeb4fb",
      "range": {
        "startLine": 202,
        "startChar": 24,
        "endLine": 202,
        "endChar": 32
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bc712df_4d2d6793",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 209,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Why is this check even necessary?  A properly written parser should be able to chug through a payload limit worth of zero padding no problem, or, if there are really limits to impose, they need to be done there, on things like overflows.",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c4d54a6_aa729c4a",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 209,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-17T10:04:25Z",
      "side": 1,
      "message": "We want to cut off every attempt to DoS us as early as we can. For not this value bigger than necessary. Still we can stop processing request early instead of trying to parse string of 40000 characters or run regexp on string longer than 255 characters.\n\nWe known that regexp are slow, we measured them and they don\u0027t seem to be real issue with this length limitation.",
      "parentUuid": "5bc712df_4d2d6793",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50c2920c_7862d1fb",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 209,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2020-07-17T10:10:26Z",
      "side": 1,
      "message": "I believe intent of this check was rather different. \nFellows from security team have recently started stressing bmcweb with fuzzer. Intent of all \u0027validateParamLength\u0027 is to prevent unnecessary processing of unnecessary big (in principle - incorrect) chunks of data.",
      "parentUuid": "5bc712df_4d2d6793",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61f9c8ff_c80c7779",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 216,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "This regex check is redundant, and expensive (std::regex is pretty darn slow).  Please see the other comment.  Simply write an appropriate, correct, and secure parser that is capable of returning errors",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6be66be3_3500b94a",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 216,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "In this case pattern is very complex and it is hard to move it to parser. Writing own parser is a reinventing a wheel. Validation of it does not point that performance is a problem. We have additional limitation for input argument to 255 signs.",
      "parentUuid": "61f9c8ff_c80c7779",
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3933644_92274585",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 258,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "This is unessesary overkill.  Please write this loop like normal, using either iterators or indexes.  Constructing a lambda to use in a std::algorithm is extreme, and incorrect, given that you\u0027re relying on ordering guarantees.",
      "range": {
        "startLine": 256,
        "startChar": 0,
        "endLine": 258,
        "endChar": 74
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f03b80c_afcc9ba4",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 258,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2020-07-17T10:18:36Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "e3933644_92274585",
      "range": {
        "startLine": 256,
        "startChar": 0,
        "endLine": 258,
        "endChar": 74
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ec85776_e8f04eae",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 262,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Please simplfy this.  You don\u0027t need to generate 2 independent vectors to create a single string.",
      "range": {
        "startLine": 262,
        "startChar": 16,
        "endLine": 262,
        "endChar": 62
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc0c1971_75ed886c",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 262,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "It is done as simply as possible. We uses a provided API from boost, so it is safe, quick and reliable. Rewriting it requires additional branching for handling trailing whitespaces and commas.\nAnyway dbusSensors is a vector of sdbusplus::message::object_path and metricProperties is a vector of std::string, so it is require to create two independent vectors.",
      "parentUuid": "4ec85776_e8f04eae",
      "range": {
        "startLine": 262,
        "startChar": 16,
        "endLine": 262,
        "endChar": 62
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "581af681_b8a14f39",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 284,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Please don\u0027t use regex here.",
      "range": {
        "startLine": 282,
        "startChar": 0,
        "endLine": 284,
        "endChar": 55
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4529f9ee_7eb695ca",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 284,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2020-07-17T10:10:26Z",
      "side": 1,
      "message": "Are you against regex here because of it\u0027s performance impact? What would you suggest here? boost::split + manual validation of members? \n\nIt could be more error prone as regex already does validation + splitting correctly, while manual implementation of code like this tends to be unnecessary convoluted.",
      "parentUuid": "581af681_b8a14f39",
      "range": {
        "startLine": 282,
        "startChar": 0,
        "endLine": 284,
        "endChar": 55
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0a00865_1cf3a73c",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 381,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-17T00:08:27Z",
      "side": 1,
      "message": "Please don\u0027t override operators in this way.",
      "range": {
        "startLine": 381,
        "startChar": 19,
        "endLine": 381,
        "endChar": 27
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1fe458d_4e859179",
        "filename": "redfish-core/lib/metric_report_definition.hpp",
        "patchSetId": 20
      },
      "lineNbr": 381,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-07-17T11:55:31Z",
      "side": 1,
      "message": "Can you provide an explanation why? What is a proper way? Thanks in advance.",
      "parentUuid": "a0a00865_1cf3a73c",
      "range": {
        "startLine": 381,
        "startChar": 19,
        "endLine": 381,
        "endChar": 27
      },
      "revId": "059e975adaec12303c621b97c2f31e152cdd2a69",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
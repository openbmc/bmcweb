{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eb855c14_2b6eac15",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 22
      },
      "lineNbr": 0,
      "author": {
        "id": 1001027
      },
      "writtenOn": "2022-04-11T00:42:26Z",
      "side": 1,
      "message": "Does it work when we use it like this?\nhttp://localhost/redfish/v1/Chassis/xxx?$expand\u003d.($levels\u003d2)\nI have a feeling it won\u0027t work, are we going to consider this situation?",
      "revId": "fc0ee651500c91f7433b994dc36c2513e1a00572",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9805d609_2890b242",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 22
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-11T02:01:17Z",
      "side": 1,
      "message": "\u003e Does it work when we use it like this?\n\u003e http://localhost/redfish/v1/Chassis/xxx?$expand\u003d.($levels\u003d2)\n\nThis was discussed heavily in the prior patch;  Yes, this would give the correct response, although might not be the most optimal.\n\n\u003e I have a feeling it won\u0027t work, are we going to consider this situation?\n\nIf you try it, and it doesn\u0027t give the server doesn\u0027t give the correct response, please let us know.  If it gives the correct response, but just slower than you\u0027d like, that\u0027s probably a good thing to add on a followup patch, but as written, I don\u0027t believe this patchset intends to improve the performance of that query.",
      "parentUuid": "eb855c14_2b6eac15",
      "revId": "fc0ee651500c91f7433b994dc36c2513e1a00572",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e31c251d_23c4b1d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 22
      },
      "lineNbr": 0,
      "author": {
        "id": 1001027
      },
      "writtenOn": "2022-04-11T07:03:50Z",
      "side": 1,
      "message": "\u003e \u003e Does it work when we use it like this?\n\u003e \u003e http://localhost/redfish/v1/Chassis/xxx?$expand\u003d.($levels\u003d2)\n\u003e \n\u003e This was discussed heavily in the prior patch;  Yes, this would give the correct response, although might not be the most optimal.\n\nSorry, I didn\u0027t find your discussion.\nMy thinking is that only the first request comes with query parameters, so when this happens:\nhttp://localhost/redfish/v1/Chassis/xxx?$expand\u003d.($levels\u003d2)\nSensors is not the first request, so we can\u0027t get the correct data from setUpRedfishRouteWithDelegation().\nCan we solve the problem this way?\n\u003e auto it \u003d finalObj.find(\"@odata.id\");\n\u003e if (it !\u003d finalObj.end())\n\u003e {\n\u003e     const std::string* uri \u003d it.value().get_ptr\u003cconst std::string*\u003e();\n\u003e     if (uri !\u003d nullptr)\n\u003e     {\n\u003e         std::filesystem::path sensor(*uri);\n\u003e         if (sensor.filename() \u003d\u003d \"Sensors\")\n\u003e         {\n\u003e             std::error_code ec;\n\u003e             crow::Request newReq(\n\u003e                 {boost::beast::http::verb::get, sensor.string(), 11},\n\u003e                 ec);\n\u003e             if (ec)\n\u003e             {\n\u003e                 messages::internalError(res);\n\u003e                 return;\n\u003e             }\n\u003e             newReq.body \u003d \"{\\\"Expand\\\":true}\";\n\u003e             auto asyncResp \u003d std::make_shared\u003cbmcweb::AsyncResp\u003e();\n\u003e             addAwaitingResponse(query, asyncResp, locationToPlace);\n\u003e             app.handle(newReq, asyncResp);\n\u003e             return;\n\u003e         }\n\u003e     }\n\u003e }\nThese codes should go here:\nhttps://github.com/openbmc/bmcweb/blob/master/redfish-core/include/utils/query_param.hpp#L312\n\n\n\u003e \u003e I have a feeling it won\u0027t work, are we going to consider this situation?\n\u003e \n\u003e If you try it, and it doesn\u0027t give the server doesn\u0027t give the correct response, please let us know.  If it gives the correct response, but just slower than you\u0027d like, that\u0027s probably a good thing to add on a followup patch, but as written, I don\u0027t believe this patchset intends to improve the performance of that query.\n\nYes, it can give correct response. Just from the code, it can only optimize the level\u003d1 case. But I don\u0027t have an environment where I can test the performance.",
      "parentUuid": "9805d609_2890b242",
      "revId": "fc0ee651500c91f7433b994dc36c2513e1a00572",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49f96976_5111a133",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 22
      },
      "lineNbr": 0,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-04-11T15:40:48Z",
      "side": 1,
      "message": "\u003e Sorry, I didn\u0027t find your discussion. My thinking is that only the first request comes with query parameters, so when this happens:\n\nThat\u0027s correct. The recursive calls at https://github.com/openbmc/bmcweb/blob/master/redfish-core/include/utils/query_param.hpp#L312 don\u0027t come with query parameters for now.\n\nIt doesn\u0027t affect the correctness, though, only this sensor collection efficient handler doesn\u0027t get invoked.\n\n\u003e http://localhost/redfish/v1/Chassis/xxx?$expand\u003d.($levels\u003d2)\nSensors is not the first request, so we can\u0027t get the correct data from setUpRedfishRouteWithDelegation(). Can we solve the problem this way?\n\nAgain, the current codes are still correct IIUC. Only the performance is not improved when you query the Chassis collection.\n\nYour idea about adding query parameters to request of Expand calls should work, but shouldn\u0027t you change the URL string? Also, you have to consider query parameter combinations as well (e.g., Expand + Select). I would imagine that in |MultiAsyncResp|, you will have to replace the recursive call with an iteration, then append all parameters in |query| to the request URL, finally assemble the JSON object at this level of Expand.\n\nAlso, it won\u0027t help much if we don\u0027t have a way to \"select\" the attributes to expand at the Chassis Collection (e.g., /Chassis/chassis/$expand\u003d.($levels\u003d2)\u0026$select\u003dSensors).\n\nAs a conclusion, this change only targets Sensor Collection, it doesn\u0027t mean to improve Chassis Collection with Expand level 2. So your concern should be addressed in new patches.\n\nLet me know if this doesn\u0027t resolve your comment.",
      "parentUuid": "e31c251d_23c4b1d1",
      "revId": "fc0ee651500c91f7433b994dc36c2513e1a00572",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38adf349_34afa618",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 22
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-11T16:04:53Z",
      "side": 1,
      "message": "\u003e As a conclusion, this change only targets Sensor Collection, it doesn\u0027t mean to improve Chassis Collection with Expand level 2. So your concern should be addressed in new patches.\n\n+1 to this overall.  I\u0027m happy to discuss making the query you showed above faster as well, but in the context of this patchset, and with the goal of keeping this patchset small and self contained, I\u0027d like to keep it largely as-is.  From my maintainers perspective, there\u0027s only one setUpRedfishWithDelegation call sofar, so if the prototype needs to change in the future, it\u0027s not as difficult of a change to effect.",
      "parentUuid": "49f96976_5111a133",
      "revId": "fc0ee651500c91f7433b994dc36c2513e1a00572",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
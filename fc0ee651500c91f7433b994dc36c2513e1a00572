{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eb855c14_2b6eac15",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 22
      },
      "lineNbr": 0,
      "author": {
        "id": 1001027
      },
      "writtenOn": "2022-04-11T00:42:26Z",
      "side": 1,
      "message": "Does it work when we use it like this?\nhttp://localhost/redfish/v1/Chassis/xxx?$expand\u003d.($levels\u003d2)\nI have a feeling it won\u0027t work, are we going to consider this situation?",
      "revId": "fc0ee651500c91f7433b994dc36c2513e1a00572",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9805d609_2890b242",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 22
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-11T02:01:17Z",
      "side": 1,
      "message": "\u003e Does it work when we use it like this?\n\u003e http://localhost/redfish/v1/Chassis/xxx?$expand\u003d.($levels\u003d2)\n\nThis was discussed heavily in the prior patch;  Yes, this would give the correct response, although might not be the most optimal.\n\n\u003e I have a feeling it won\u0027t work, are we going to consider this situation?\n\nIf you try it, and it doesn\u0027t give the server doesn\u0027t give the correct response, please let us know.  If it gives the correct response, but just slower than you\u0027d like, that\u0027s probably a good thing to add on a followup patch, but as written, I don\u0027t believe this patchset intends to improve the performance of that query.",
      "parentUuid": "eb855c14_2b6eac15",
      "revId": "fc0ee651500c91f7433b994dc36c2513e1a00572",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e31c251d_23c4b1d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 22
      },
      "lineNbr": 0,
      "author": {
        "id": 1001027
      },
      "writtenOn": "2022-04-11T07:03:50Z",
      "side": 1,
      "message": "\u003e \u003e Does it work when we use it like this?\n\u003e \u003e http://localhost/redfish/v1/Chassis/xxx?$expand\u003d.($levels\u003d2)\n\u003e \n\u003e This was discussed heavily in the prior patch;  Yes, this would give the correct response, although might not be the most optimal.\n\nSorry, I didn\u0027t find your discussion.\nMy thinking is that only the first request comes with query parameters, so when this happens:\nhttp://localhost/redfish/v1/Chassis/xxx?$expand\u003d.($levels\u003d2)\nSensors is not the first request, so we can\u0027t get the correct data from setUpRedfishRouteWithDelegation().\nCan we solve the problem this way?\n\u003e auto it \u003d finalObj.find(\"@odata.id\");\n\u003e if (it !\u003d finalObj.end())\n\u003e {\n\u003e     const std::string* uri \u003d it.value().get_ptr\u003cconst std::string*\u003e();\n\u003e     if (uri !\u003d nullptr)\n\u003e     {\n\u003e         std::filesystem::path sensor(*uri);\n\u003e         if (sensor.filename() \u003d\u003d \"Sensors\")\n\u003e         {\n\u003e             std::error_code ec;\n\u003e             crow::Request newReq(\n\u003e                 {boost::beast::http::verb::get, sensor.string(), 11},\n\u003e                 ec);\n\u003e             if (ec)\n\u003e             {\n\u003e                 messages::internalError(res);\n\u003e                 return;\n\u003e             }\n\u003e             newReq.body \u003d \"{\\\"Expand\\\":true}\";\n\u003e             auto asyncResp \u003d std::make_shared\u003cbmcweb::AsyncResp\u003e();\n\u003e             addAwaitingResponse(query, asyncResp, locationToPlace);\n\u003e             app.handle(newReq, asyncResp);\n\u003e             return;\n\u003e         }\n\u003e     }\n\u003e }\nThese codes should go here:\nhttps://github.com/openbmc/bmcweb/blob/master/redfish-core/include/utils/query_param.hpp#L312\n\n\n\u003e \u003e I have a feeling it won\u0027t work, are we going to consider this situation?\n\u003e \n\u003e If you try it, and it doesn\u0027t give the server doesn\u0027t give the correct response, please let us know.  If it gives the correct response, but just slower than you\u0027d like, that\u0027s probably a good thing to add on a followup patch, but as written, I don\u0027t believe this patchset intends to improve the performance of that query.\n\nYes, it can give correct response. Just from the code, it can only optimize the level\u003d1 case. But I don\u0027t have an environment where I can test the performance.",
      "parentUuid": "9805d609_2890b242",
      "revId": "fc0ee651500c91f7433b994dc36c2513e1a00572",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
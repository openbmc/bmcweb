{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f1916271_0a2e494d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-24T19:44:55Z",
      "side": 1,
      "message": "This points to several commits which is good, but doesn\u0027t answer the question of what this is changing in terms of path handling.\n\nLets start by getting added to the commit message:\n1. An example dbus interface that works, and produces the expected output.\n2. An example that doesn\u0027t work, what it produces instead, and why we believe that this other association is correct, and how it\u0027s different than the original.\n\nI looked at one of the commits, the meta-ibm layer looks like it hardcoded a bunch of Phosphor-inventory-manager associations that look incorrect to me.\n\n/xyz/openbmc_project/inventory/system/chassis/motherboard/dasd_backplane/panel1\n\nThe motherboard does not \"contain\" a backplane.  The chassis contains both the backplane and the front panel.\n\nThe \"system\" is contained within the chassis, not the other way around.\n\nThis looks like a case of the associations getting added incorrectly, and given the extreme complexity of the config file, I really can\u0027t help you debug it more than that.  Looking at the code, it looks like the association is getting added to the parent object, instead of the object itself, and that\u0027s why using subtree instead of object fixes the bug?\n\nThat subtree call is also doing a depth lookup based on path, not associations, so even if the paths were correct, it flies in opposition to: https://github.com/openbmc/technical-oversight-forum/issues/6\n\nThe code as written looks like it will have the problem of adding ALL objects to the ContainedBy, not just those that are at the next depth level.  For example\n\nChassis -\u003e baseboard -\u003e Add in card\n\n\nChassis Contained by would return ONLY the baseboard\nAdd in card Contained by would return ONLY the add in card\n\nAs written, this code would return the Baseboard and the Add in card under the chassis. which isn\u0027t really correct to the standard.",
      "revId": "dd5d6cc238b7066d4949cfe7b2927b7d0b3a60a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd269a3b_04bdf13e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-05-24T20:02:23Z",
      "side": 1,
      "message": "Ok, I agree that https://gerrit.openbmc.org/c/openbmc/openbmc/+/70372 has the incorrect associations (e.g. between chassis \u0026 connector4 etc) with `containing`.\nSo that json file would need to be fixed.\n\nI mis-read the goal of https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60914 to get the other nested chassis....\nThanks",
      "parentUuid": "f1916271_0a2e494d",
      "revId": "dd5d6cc238b7066d4949cfe7b2927b7d0b3a60a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e42b6c84_963f140e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-05-24T20:08:24Z",
      "side": 1,
      "message": "So perhaps, should we rethink to use `getSubTree()` to get the contained resources as you may suggested?",
      "parentUuid": "dd269a3b_04bdf13e",
      "revId": "dd5d6cc238b7066d4949cfe7b2927b7d0b3a60a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48c72300_58583f85",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-24T21:14:46Z",
      "side": 1,
      "message": "Sorry, I linked the wrong decision:\nhttps://github.com/openbmc/technical-oversight-forum/issues/18\n\n\u003e Ok, I agree that https://gerrit.openbmc.org/c/openbmc/openbmc/+/70372 has the incorrect associations.\n\n\n\u003e So perhaps, should we rethink to use getSubTree() to get the contained resources as you may suggested?\n\nIf I were you, I would start by getting some example \"fake\" EM configs set up, and start looking at the current behavior in the system that was developed against entity-manager.  I know you\u0027ve decided to not use entity-manager, and you have your own reasons for that, which are fine, but you\u0027re modifying code that was built to EM behavior, so we need to make sure we don\u0027t regress that, and we can\u0027t just be arbitrarily changing things in a way that might break other people without understanding the differences, and understanding what the intent is of the interface.",
      "parentUuid": "e42b6c84_963f140e",
      "revId": "dd5d6cc238b7066d4949cfe7b2927b7d0b3a60a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06001fcf_a3b7bbad",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-05-30T17:57:37Z",
      "side": 1,
      "message": "Besides the example to make working, it looks like the implementation of https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60914 seems improper in bmcweb.\n\nThe design https://gerrit.openbmc.org/c/openbmc/docs/+/54205 seems to show Items (not necessarily only Chassis item) that are contained by Chassis.\n\nHowever,  https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60914 is implementing sub-chassis under Chassis, as it assumes the containing resources are under Chassis without checking the contained items a Chassis.\n https://github.com/openbmc/bmcweb/blob/de0c960c4262169ea92a4b852dd5ebbe3810bf00/redfish-core/lib/chassis.hpp#L279\n\n```\n        link[\"@odata.id\"] \u003d boost::urls::format(\"/redfish/v1/Chassis/{}\",\n                                                downstreamChassis);\n```\n\nSince the code is assuming the associated resources are chassis, its result is shown as chassis\n```\n    /redfish/v1/Chassis/\u003csubchassis\u003e/\n```\n\nAs the result, by following the design https://gerrit.openbmc.org/c/openbmc/openbmc/+/70372 \u0026 https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/58441/3/yaml/xyz/openbmc_project/Inventory/Item.interface.yaml, https://gerrit.openbmc.org/c/openbmc/openbmc/+/70372 adds the resources between chassis and other items with associations (containing/contained_by).\n\nIf so, https://gerrit.openbmc.org/c/openbmc/bmcweb/+/6091 implementation will result in the improper consequences, i.e. the contained resources are shown as chassis item in redfish api.  This will cause the redfish service validator failures for p10bmc.\n\n----\nI think there are a few directions to go.\n1) Revert https://gerrit.openbmc.org/c/openbmc/bmcweb/+/6091 as it does not fully handle the use of the associations only for sub-chassis.\n\n2) Fix https://gerrit.openbmc.org/c/openbmc/bmcweb/+/6091 to limit the implementation only between the chassis.  If so, use `getAssociatedSubTreePaths()` to search only sub-chassis.\n\n3) Ideally, translate all associated endpoints to the appropriate resources. For example, a connector is also contained in a chassis, map the connector as `/redish/v1/Cables/dp0_connector1` (may not be acurate, but it may be something like that) rather than showing it as `/redfish/v1/Chassis/dp0_connector1` (in today\u0027s code).  I think this approach may become complex and difficult.",
      "parentUuid": "48c72300_58583f85",
      "revId": "dd5d6cc238b7066d4949cfe7b2927b7d0b3a60a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50be507a_8d94306c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-31T19:13:59Z",
      "side": 1,
      "message": "\u003e Besides the example to make working, it looks like the implementation of https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60914 seems improper in bmcweb.\n\nThat is certainly something you could discuss with Benjamin (not in this commit). That patch has been on master for over a year, through several releases.\n\n\u003e \n\u003e The design https://gerrit.openbmc.org/c/openbmc/docs/+/54205 seems to show Items (not necessarily only Chassis item) that are contained by Chassis.\n\u003e \n\u003e However,  https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60914 is implementing sub-chassis under Chassis, as it assumes the containing resources are under Chassis without checking the contained items a Chassis.\n\u003e  https://github.com/openbmc/bmcweb/blob/de0c960c4262169ea92a4b852dd5ebbe3810bf00/redfish-core/lib/chassis.hpp#L279\n\u003e \n\u003e ```\n\u003e         link[\"@odata.id\"] \u003d boost::urls::format(\"/redfish/v1/Chassis/{}\",\n\u003e                                                 downstreamChassis);\n\u003e ```\n\u003e \n\u003e Since the code is assuming the associated resources are chassis, its result is shown as chassis\n\u003e ```\n\u003e     /redfish/v1/Chassis/\u003csubchassis\u003e/\n\u003e ```\n\u003e \n\u003e As the result, by following the design https://gerrit.openbmc.org/c/openbmc/openbmc/+/70372 \u0026 https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/58441/3/yaml/xyz/openbmc_project/Inventory/Item.interface.yaml, https://gerrit.openbmc.org/c/openbmc/openbmc/+/70372 adds the resources between chassis and other items with associations (containing/contained_by).\n\u003e \n\u003e If so, https://gerrit.openbmc.org/c/openbmc/bmcweb/+/6091 implementation will result in the improper consequences, i.e. the contained resources are shown as chassis item in redfish api.  This will cause the redfish service validator failures for p10bmc.\n\nFrom earlier: \"If I were you, I would start by getting some example \"fake\" EM configs set up\"\n\nHave you done this yet?  We\u0027re talking in hypotheticals at this point, we need to talk in concrete \"here is a system I\u0027m trying to model\" and \"Here\u0027s the specific case that bmcweb gets wrong\".  Talking in the abstract in terms of arbitrary items and paths doesn\u0027t help here.\n\nYes, it is very possible that what got implemented doesn\u0027t match the design;  That doesn\u0027t mean that it doesn\u0027t work correctly as far as the user is concerned.\n\n\u003e \n\u003e ----\n\u003e I think there are a few directions to go.\n\u003e 1) Revert https://gerrit.openbmc.org/c/openbmc/bmcweb/+/6091 as it does not fully handle the use of the associations only for sub-chassis.\n\u003e \n\u003e 2) Fix https://gerrit.openbmc.org/c/openbmc/bmcweb/+/6091 to limit the implementation only between the chassis.  If so, use `getAssociatedSubTreePaths()` to search only sub-chassis.\n\u003e \n\u003e 3) Ideally, translate all associated endpoints to the appropriate resources. For example, a connector is also contained in a chassis, map the connector as `/redish/v1/Cables/dp0_connector1` (may not be acurate, but it may be something like that) rather than showing it as `/redfish/v1/Chassis/dp0_connector1` (in today\u0027s code).  I think this approach may become complex and difficult.\n\n#1/#2, yes, these are the options we have for literally any patch or design.\n\n#3 Connectors+cables are a completely different discussion than Chassis ContainedBy because ContainedBy is an association to a chassis.  Lets keep our discussion on contained by, until we have concrete examples where Cable overlaps.",
      "parentUuid": "06001fcf_a3b7bbad",
      "revId": "dd5d6cc238b7066d4949cfe7b2927b7d0b3a60a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b94bb5d8_1f02c417",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-06-10T14:15:37Z",
      "side": 1,
      "message": "Benjamin, Zhenwei, Jie Yang,\n\nPlease take a look at this commit.\n\nYour previous commit - https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60914 for  `getChassisContains()` \u0026 `getChassisContainedBy()` is showing the sub-chassis, using `getAssociationEndPoints()` with the associations `containing/contained_by`.\n\nHowever, if the same associations are used for the other than chassis, it may also fail by showing the other than sub-chassis as `/redfish/v1/Chassis/chassis/\u003cother-rsrc\u003e/`.\n\nFor example, https://gerrit.openbmc.org/c/openbmc/openbmc/+/70372 adds the non-chassis resources via the associations. \n\nAs the result, we are getting this \n```\n % curl -k -X GET https://${bmc}/redfish/v1/Chassis/chassis\n {\n ...\n   \"Contains\": [\n      {\n        \"@odata.id\": \"/redfish/v1/Chassis/pcieslot0\"\n      },\n      {\n        \"@odata.id\": \"/redfish/v1/Chassis/pcieslot1\"\n      },\n   ...\n\n }\n```\n   \nI think this needs to be fixed by checking the end-points whether they are `Chassis` or not.\nThis commit is to do it by using `getAssociatedSubTreePaths()`.\n\nPlease review and provide your inputs.",
      "revId": "dd5d6cc238b7066d4949cfe7b2927b7d0b3a60a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
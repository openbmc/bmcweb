{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ae507ac3_de44138d",
        "filename": "http/app.hpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-04-17T11:28:50Z",
      "side": 1,
      "message": "don\u0027t you prefer having using declarations for ssl_stream, socket etc in bmcweb namespace. If that was there the switch between different options could be done in single place and will be customisable using some compiler directive as per need.",
      "revId": "32f6bc1d5b11cd7cacf6b2580770f1e90afaeef0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98bea7df_e26841ac",
        "filename": "http/app.hpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-17T15:38:49Z",
      "side": 1,
      "message": "\u003e don\u0027t you prefer having using declarations for ssl_stream, socket etc in bmcweb namespace.\n\nFor all intents and purposes, crow:: and bmcweb:: are the same namespace these days.  Arguably at some point we should just scrub and find all the remaining crow:: things, and change them to bmcweb, but that would break a lot of forks, which I don\u0027t want to do.\n\n\u003e If that was there the switch between different options could be done in single place and will be customisable using some compiler directive as per need.\n\nFWIW, that\u0027s not something bmcweb has ever optimized for, because it would pull in a lot of extra headers into unrelated places.  Even though this was a change to many places, it was done with two sed replace commands (one for the definition and one for the include).",
      "parentUuid": "ae507ac3_de44138d",
      "revId": "32f6bc1d5b11cd7cacf6b2580770f1e90afaeef0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3305edf2_c36b1718",
        "filename": "http/app.hpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-04-18T04:02:52Z",
      "side": 1,
      "message": "Even though this was a change to many places, it was done with two sed replace commands \n\nBut we have all those files need to be reviewed right? If we had type alias in a single file then both contributer and reviewer job would have been easier. \n\nbmcweb is an application not a library.If worry is about the possibility of name collision ,that can be easily spotted and fixed in application. \n\nI still not convinced why bmcweb does not encourage type aliases for boost types. It is much easier to read, write and maintain IMO.",
      "parentUuid": "98bea7df_e26841ac",
      "revId": "32f6bc1d5b11cd7cacf6b2580770f1e90afaeef0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9a8f777_8e6885c7",
        "filename": "http/app.hpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-18T04:36:19Z",
      "side": 1,
      "message": "\u003e Even though this was a change to many places, it was done with two sed replace commands \n\u003e \n\u003e But we have all those files need to be reviewed right? If we had type alias in a single file then both contributer and reviewer job would have been easier. \n\nAll the call sites need to be reviewed for correctness, regardless of if it\u0027s a one line change or a many line change, the same as if you\u0027d replaced the behavior of a function.  The more important part is that when reviewing new code, you don\u0027t have to remember which using matches to which documentation.  Having the base class be obvious makes it a lot easier to look up the docs.\n\n\u003e \n\u003e bmcweb is an application not a library.If worry is about the possibility of name collision ,that can be easily spotted and fixed in application. \n\u003e \n\u003e I still not convinced why bmcweb does not encourage type aliases for boost types. It is much easier to read, write and maintain IMO.\n\nYour opinion is noted;  This commit is not the right place to have that discussion.  This change itself is not changing the number of using declarations.  If you have a small example that you can show how this can make code better, feel free to send the patch, or start a discussion on discord or the mailing list.",
      "parentUuid": "3305edf2_c36b1718",
      "revId": "32f6bc1d5b11cd7cacf6b2580770f1e90afaeef0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6eba0e1a_9ef7cd2b",
        "filename": "http/app.hpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-04-18T10:33:14Z",
      "side": 1,
      "message": "I was thinking about adding a common_defs.hpp with content such as\nnamespace bmcweb\n{\n    using tcpstream\u003dboost::asio::tcp::socket;\n    using sslstream \u003dboost::asio::ssl\u003ctcpstream\u003e;\n    \n}\n\nthen include common_defs wherever you need tcp and ssl stream.Any refactoring such as above will be just single change in common_defs.hpp \n\nAnyway It is my opinion. Finally it is maintainer\u0027s call. I am ok with whatever decision maintainer take.",
      "parentUuid": "c9a8f777_8e6885c7",
      "revId": "32f6bc1d5b11cd7cacf6b2580770f1e90afaeef0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2f03e23_c5db3ca9",
        "filename": "http/app.hpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-18T16:01:19Z",
      "side": 1,
      "message": "The problem with having something so general is that now EVERY compile unit needs to pull and compile in the entirety of boost ssl stream, because SSL stream is a template, the implementation is defined in the header, and it is relatively expensive to compile.\n\nIf that kind of definition were put into a compile unit (cpp file) and abstracted through a non-template header (as is my plan at some point), then we absolutely could do that (although we still wouldn\u0027t go as general as common_defs.hpp, we\u0027d do something like ssl_stream.hpp).\n\nAgain.... This is not the place to have this discussion.  Put the above idea in a patchset (even if it doesn\u0027t build) and push it to gerrit.  We can talk more about it there.",
      "parentUuid": "6eba0e1a_9ef7cd2b",
      "revId": "32f6bc1d5b11cd7cacf6b2580770f1e90afaeef0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0d2d392_82d54daf",
        "filename": "http/app.hpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-18T16:38:08Z",
      "side": 1,
      "message": "FYI, at some point, one thing I\u0027d like to have us build is a class that implements the AsyncReadStream and AsyncWriteStream requirements, so we can share the class between TLS and non TLS sockets, and keeps the boost imports within the class compile unit itself, which should save us some code, and compile times.\n\nhttps://www.boost.org/doc/libs/1_85_0/libs/beast/doc/html/beast/concepts/streams.html\n\nIn that, maybe we might have a define for this kind of thing, because it\u0027s relatively self contained, but lets talk about that when we get there.",
      "parentUuid": "a2f03e23_c5db3ca9",
      "revId": "32f6bc1d5b11cd7cacf6b2580770f1e90afaeef0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6f7524b_42e7a18a",
        "filename": "http/app.hpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-04-19T21:22:29Z",
      "side": 1,
      "message": "\u003e just scrub and find all the remaining crow:: things, and change them to bmcweb\n\nI think we should do this, but separate topic. Like a lot of this in here, separate topics. ;)",
      "parentUuid": "e0d2d392_82d54daf",
      "revId": "32f6bc1d5b11cd7cacf6b2580770f1e90afaeef0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
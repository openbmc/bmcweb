{
  "comments": [
    {
      "key": {
        "uuid": "bd7fbf65_145e8942",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 16,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-03-11T21:29:18Z",
      "side": 1,
      "message": "spelling",
      "range": {
        "startLine": 16,
        "startChar": 40,
        "endLine": 16,
        "endChar": 48
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbee8242_302f73fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 16,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-03-14T05:38:37Z",
      "side": 1,
      "message": "apologies gunnar, i hate to see you correcting my spelling mistakes.\n\nI have enabled a spell checking plugin in my vim configuration ,will not repeat these in my upcoming patch-sets.",
      "parentUuid": "bd7fbf65_145e8942",
      "range": {
        "startLine": 16,
        "startChar": 40,
        "endLine": 16,
        "endChar": 48
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "005e7b16_625e79d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 16,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-03-14T05:57:24Z",
      "side": 1,
      "message": "Random thought , Do you think,its a good idea to add some plugin to the CI scripts to check for spelling mistake in commit message \u0026 score a -1 if it is bad ?",
      "parentUuid": "fbee8242_302f73fd",
      "range": {
        "startLine": 16,
        "startChar": 40,
        "endLine": 16,
        "endChar": 48
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f598377_1756ef2a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 16,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-03-19T15:11:04Z",
      "side": 1,
      "message": "Yeah, I know redfish does something similar for their PRs. \nI think it is just,  no one has had the time.",
      "parentUuid": "005e7b16_625e79d7",
      "range": {
        "startLine": 16,
        "startChar": 40,
        "endLine": 16,
        "endChar": 48
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3478a748_b4dc6530",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 16,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-19T16:17:33Z",
      "side": 1,
      "message": "Seems like it would be high value and low effort if you wanted to implement that ManojKiran.  Feel free to propose something to the list.\n\nMy only concern would be making sure that the openbmc-specific dictionary is easily editable, and has someone maintaining it, as there are lots of acronyms that we might have to add.",
      "parentUuid": "9f598377_1756ef2a",
      "range": {
        "startLine": 16,
        "startChar": 40,
        "endLine": 16,
        "endChar": 48
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8366ca91_732c0cd9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-19T16:15:46Z",
      "side": 1,
      "message": "This is an API.  It is not meant for \"customers\" in the normal sense, it is meant for automation.",
      "range": {
        "startLine": 20,
        "startChar": 63,
        "endLine": 22,
        "endChar": 7
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad7373b4_7fe7c09d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-03-19T16:44:17Z",
      "side": 1,
      "message": "The Redfish API is meant to be human readable and machine consumable why they use JSON.",
      "parentUuid": "8366ca91_732c0cd9",
      "range": {
        "startLine": 20,
        "startChar": 63,
        "endLine": 22,
        "endChar": 7
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd019df8_d0d84f07",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-19T16:59:39Z",
      "side": 1,
      "message": "I would agree the message portion is intended to be human readable, the message args really is only meant for automation.\n\nWith that said, my main concern is the comment on line 26;  If we can get that solved, I really have no problem with this, but I don\u0027t really see a path forward here that doesn\u0027t break non-ascii post codes.",
      "parentUuid": "ad7373b4_7fe7c09d",
      "range": {
        "startLine": 20,
        "startChar": 63,
        "endLine": 22,
        "endChar": 7
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99b799d3_3e7808e3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-19T16:15:46Z",
      "side": 1,
      "message": "I\u0027m not sure how you came to this conclusion;  When systems that use hex post codes (with no asicc) publish anything in the ascii range, it will be converted incorrectly.  This seems like an issue.",
      "range": {
        "startLine": 26,
        "startChar": 18,
        "endLine": 26,
        "endChar": 43
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5839b04f_c67150d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 26,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-03-19T16:44:17Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "99b799d3_3e7808e3",
      "range": {
        "startLine": 26,
        "startChar": 18,
        "endLine": 26,
        "endChar": 43
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0be6aa1_e565d742",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 26,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-03-20T06:16:39Z",
      "side": 1,
      "message": "hmm, i sort off agree. I did thought about it but Would that be a big problem as such, because customers/automation can look at only the field they are interested in ? \n\nLike u said in other comments, Then the only way i see to solve this issue to go by compile time flag and switch registries based on machine that the code is compiled for.",
      "parentUuid": "5839b04f_c67150d7",
      "range": {
        "startLine": 26,
        "startChar": 18,
        "endLine": 26,
        "endChar": 43
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a862562_a0afc67f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-20T17:42:10Z",
      "side": 1,
      "message": "\u003e hmm, i sort off agree. I did thought about it but Would that be a big problem as such, because customers/automation can look at only the field they are interested in ? \n\nAnd how would clients know to ignore the ascii post code on IBM systems?  How would clients know to switch 0.2 version of the post codes?  Wouldn\u0027t all the clients that were written against the 0.1 version of post codes now be broken?\n\n\u003e \n\u003e Like u said in other comments, Then the only way i see to solve this issue to go by compile time flag and switch registries based on machine that the code is compiled for.\n\nI said nothing about a compile time flag, and I don\u0027t really like that, as it really means that our dbus interfaces aren\u0027t expressive enough for this kind of thing, and they need improved.  I personally don\u0027t think this commit (as-written) is needed at all, because it\u0027s trying to build a standards based API, while creating an IBM-specific message, which seems like something we should be very careful about, and do with eyes open to compatibility between systems.\n\nIf we want to have human-readable text versions of post codes, that\u0027s a much bigger problem, and something we should sort out.",
      "parentUuid": "b0be6aa1_e565d742",
      "range": {
        "startLine": 26,
        "startChar": 18,
        "endLine": 26,
        "endChar": 43
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe09aec1_953b66dc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 26,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-03-21T04:49:26Z",
      "side": 1,
      "message": "\u003e And how would clients know to ignore the ascii post code on IBM systems?  How would clients know to switch 0.2 version of the post codes?  Wouldn\u0027t all the clients that were written against the 0.1 version of post codes now be broken?\n\nHow is any other schema different ? for example take the logservice schema - it has added CollectDiagnosticData property recently ? then how does the old redfish clients parse this ? is it not the similar case here ? Client first introspects the version number and then based on it , it will understand what items are expected.\n\nis this not the same thing , that we are trying to do here ?\n\n\u003e I said nothing about a compile time flag, and I don\u0027t really like that, as it really means that our dbus interfaces aren\u0027t expressive enough for this kind of thing, and they need improved.\n\n\u003e Maybe \"if the CPU type is POWER\" would be a good strawman to use client side?  I\u0027m not a huge fan of that, but woudl get you what you\u0027re looking for.\n\napologies,probably i did not understood it correct, did you meant that we need to look at a dbus property(CPU) and switch registries here ? rather than a compile time flag ?",
      "parentUuid": "7a862562_a0afc67f",
      "range": {
        "startLine": 26,
        "startChar": 18,
        "endLine": 26,
        "endChar": 43
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c83ef1a4_49cb96af",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 31,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-03-11T21:29:18Z",
      "side": 1,
      "message": "spelling",
      "range": {
        "startLine": 31,
        "startChar": 38,
        "endLine": 31,
        "endChar": 49
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cf0ce3b_0ac670cf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-19T16:15:46Z",
      "side": 1,
      "message": "This is an API surface, \"customers\" ie humans aren\u0027t really our concern at this level.",
      "range": {
        "startLine": 32,
        "startChar": 14,
        "endLine": 32,
        "endChar": 23
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "883d7b9e_3c28723b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-03-19T16:44:17Z",
      "side": 1,
      "message": "\"customers\" sound specific to companies that sell hardware, e.g. IBM. \nMaybe human clients?",
      "parentUuid": "3cf0ce3b_0ac670cf",
      "range": {
        "startLine": 32,
        "startChar": 14,
        "endLine": 32,
        "endChar": 23
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "666a87eb_e68754c0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-19T16:59:39Z",
      "side": 1,
      "message": "I\u0027m less worried about the vernacular in this case, more worried about the idea that we\u0027re providing multiple interpretations of a code from an API surface.  \"humans\" would be fine for vernacular, but the point still exists that we\u0027re duplicating information in the API.",
      "parentUuid": "883d7b9e_3c28723b",
      "range": {
        "startLine": 32,
        "startChar": 14,
        "endLine": 32,
        "endChar": 23
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32589067_050f83c1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-19T16:15:46Z",
      "side": 1,
      "message": "How does this impact clients that used the old message code?",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 37,
        "endChar": 86
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e84b9915_ca8ced0f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 37,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-03-19T16:44:17Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "32589067_050f83c1",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 37,
        "endChar": 86
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "008ed641_07e24820",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 37,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-03-20T06:16:39Z",
      "side": 1,
      "message": "I think that standard redfish clients will only parse the data based on the Message registry version number.\n\nthe moment the client see the version number mismatch , it should not attempt to parse it right ? that way i dont think the clients are broken \u0026 they can upgrade to a newer version of the message registry and parse the new set of arguments.\n\nAnyways, i just asked this question as well in the redfish forum to get their view.",
      "parentUuid": "e84b9915_ca8ced0f",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 37,
        "endChar": 86
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2899e74_cb2e5b21",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-20T17:42:10Z",
      "side": 1,
      "message": "\u003e I think that standard redfish clients will only parse the data based on the Message registry version number.\n\u003e \n\u003e the moment the client see the version number mismatch , it should not attempt to parse it right ?\n\nThat\u0027s in no way how that works.  Message registry entries are supposed to be immutable and forward compatible.  If we want to make a breaking change, we can, but I don\u0027t really think this use case warrants it, or is worth breaking all the clients of this API to switch to another registry type.\n\n\u003e that way i dont think the clients are broken \u0026 they can upgrade to a newer version of the message registry and parse the new set of arguments.\n\nWe still haven\u0027t answered the question of how a client knows that the ascii version of the post code is useful.  I think how we determine that is going to drive more of this discussion.  Today I don\u0027t think we have any way to determine that either within OpenBMC or externally, and it\u0027s a non-trivial problem.\n\n\u003e \n\u003e Anyways, i just asked this question as well in the redfish forum to get their view.\n\nCool.  I appreciate you reaching out.  If you could link the discussion somewhere in this review (either a comment or commit message) it would help others to track the discussion.",
      "parentUuid": "008ed641_07e24820",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 37,
        "endChar": 86
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbc53eb2_ee42e15d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 37,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-03-21T04:49:26Z",
      "side": 1,
      "message": "\u003e Cool.  I appreciate you reaching out.  If you could link the discussion somewhere in this review (either a comment or commit message) it would help others to track the discussion.\n\nI have already mentioned that in the commit message line number 41.",
      "parentUuid": "d2899e74_cb2e5b21",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 37,
        "endChar": 86
      },
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1feb9f3c_a5b3ee75",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-19T16:15:46Z",
      "side": 1,
      "message": "This doesn\u0027t really answer the question i posed earlier.  This is an API, and the data is available, there\u0027s no reason to interpret it two different ways when the client is perfectly capable of doing the same conversion.",
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edd31b57_3500d51b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 40,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-03-19T16:44:17Z",
      "side": 1,
      "message": "How does the client know to translate this to ASCII?\nFrom the current API, how would the webui know to translate this to ASCII?\nThis patch set presents the data in a more human readable fashion and solves the problem of the client knowing to translate this. I think it is fair that the API expose this as ASCII. I am not sure it should really be bmcweb doing the translation, but I think it is reasonable the API displays this in ASCII.",
      "parentUuid": "1feb9f3c_a5b3ee75",
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d4d317f_8095e590",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-19T16:59:39Z",
      "side": 1,
      "message": "\u003e How does the client know to translate this to ASCII?\n\u003e From the current API, how would the webui know to translate this to ASCII?\n\nI don\u0027t have a great answer to this, but it\u0027ll definitely need answered, and this patchset doesn\u0027t answer the question either, it just blindly converts things.  Maybe \"if the CPU type is POWER\" would be a good strawman to use client side?  I\u0027m not a huge fan of that, but woudl get you what you\u0027re looking for.\n\nAn alternative would be to come up with a message type specific to Power CPUs, and leave the old message types alone.  That doesn\u0027t seem great either, but might be better than pushing this problem onto clients.\n\n\u003e This patch set presents the data in a more human readable fashion and solves the problem of the client knowing to translate this.\n\nWith respect, no, it doesn\u0027t.  It only \"solves\" it for systems that have ascii post codes.  It breaks things for systems that don\u0027t have ascii post codes, which is the majority of systems at this point.\n\n\u003e I think it is fair that the API expose this as ASCII. I am not sure it should really be bmcweb doing the translation, but I think it is reasonable the API displays this in ASCII.\n\nI have no problem with publishing ASCII, but in that case it should be the ONLY thing we publish.  We shouldn\u0027t publish both arguments, as it implies that the data is unique.",
      "parentUuid": "edd31b57_3500d51b",
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1efcd5ac_b8d2126e",
        "filename": "redfish-core/include/registries/openbmc_message_registry.hpp",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-03-11T21:29:18Z",
      "side": 1,
      "message": "We have not been bumping the registry when we add new entries but I think we should like Redfish does for their registries. \n\n\nRedfish only adds new entries / releases new registry versions every release ( 3 months) so they would only bump 4 times a year at max, we would many more times a year.\n\nI will let Ed weigh in here but I like the idea of bumping every time we add an entry although Ideally we would store old versions of the registry as well and not have to bump things like sendTestEventLog every time. \n\nMaybe for your commit, it is probably easier to remove these bumps and we can figure that out later.",
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb406b93_88a3aaf9",
        "filename": "redfish-core/include/registries/openbmc_message_registry.hpp",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-03-14T05:38:37Z",
      "side": 1,
      "message": "I think i am okay with either way. If Ed is also okay with it i can remove the bump \u0026 just change the message registry used by the post code log service to the new one.",
      "parentUuid": "1efcd5ac_b8d2126e",
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d480758c_47e4aee4",
        "filename": "redfish-core/include/registries/openbmc_message_registry.hpp",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-03-19T15:11:04Z",
      "side": 1,
      "message": "I vote let\u0027s just remove the bump.",
      "parentUuid": "fb406b93_88a3aaf9",
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aeed7140_32edf5d4",
        "filename": "redfish-core/include/registries/openbmc_message_registry.hpp",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2021-03-19T17:54:33Z",
      "side": 1,
      "message": "This version is part of the \"MessageId\" field that gets added to every Redfish LogEntry. \n Unfortunately, in a lot of the backend implementation, this version string is hardcoded in the MessageId.  I think keeping the old versions in place will keep those implementations working, but I wanted to make sure we are aware of that issue when we decide to bump this revision.",
      "parentUuid": "d480758c_47e4aee4",
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92bf71b6_037b2cc7",
        "filename": "redfish-core/include/registries/openbmc_message_registry.hpp",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-20T17:42:10Z",
      "side": 1,
      "message": "The reason I bring it up here, is that we\u0027re modifying something in a backward incompatible way (changing the definition of an existing ID).  Not reving the version means that clients have no way to handle both cases, and have no indication that the registry has changed.\n\nTechnically we should be reving this every time we change this file in any way, or at minimum every time we do an official release.  I realize we haven\u0027t done that, but if we\u0027re only adding things, there\u0027s an almost zero chance that we break existing client code.\n\nJason does bring up a good point, it\u0027s too bad we weren\u0027t more DRY about the explicit MessageId version.  I wonder if that can be fixed, and only encode the messageId, and not the version in the backend log messages, so we can rev this when we change it.\n\nThoughts?",
      "parentUuid": "aeed7140_32edf5d4",
      "revId": "c796e1660bf25ec362b6e7ce478a683923cb8352",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
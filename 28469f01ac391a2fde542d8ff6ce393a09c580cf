{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a6d67daa_664f1fe6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-18T01:30:57Z",
      "side": 1,
      "message": "Lets replace bmcweb with \"webui\" and remove the word \"wants\".\n\nTechnically bmcweb supports any of the auth methods for a websocket, it\u0027s just that browsers don\u0027t support all of them.  There\u0027s no desire for one auth over another.",
      "range": {
        "startLine": 11,
        "startChar": 30,
        "endLine": 12,
        "endChar": 63
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4c5b374_4fd78fa2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-07-02T20:10:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6d67daa_664f1fe6",
      "range": {
        "startLine": 11,
        "startChar": 30,
        "endLine": 12,
        "endChar": 63
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e028b227_8708b22c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T15:36:13Z",
      "side": 1,
      "message": "Thank you for the review!",
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77d652d7_60a45902",
        "filename": "Redfish.md",
        "patchSetId": 2
      },
      "lineNbr": 721,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T14:40:47Z",
      "side": 1,
      "message": "I\u0027d rather this be documented in code, especially given we don\u0027t really document the specification correct path.  Technically this is \"redfish\" documentation, so it\u0027s a little confusing we only document the \"wrong\" parts.\n\n\nI do appreciate trying to document it though",
      "range": {
        "startLine": 719,
        "startChar": 0,
        "endLine": 721,
        "endChar": 23
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11e06cfb_051a0574",
        "filename": "Redfish.md",
        "patchSetId": 2
      },
      "lineNbr": 721,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T15:36:13Z",
      "side": 1,
      "message": "\u003e I\u0027d rather this be documented in code, especially given we don\u0027t really document the specification correct path.  Technically this is \"redfish\" documentation, so it\u0027s a little confusing we only document the \"wrong\" parts.\n\nThis document is meant to give OpenBMC-specific information about Redfish implementation and serve as a quick reference for what\u0027s supported and what\u0027s not, right? I\u0027d say documenting all OEM specifics in it seems to be more useful compared to code comments here and there. Code comments are mostly useful to those working on this code and nearby while Redfish.md is suppposed to be useful to API consumers too, right?\n\nIf you sure it\u0027d be more helpful to move this comment to the code, no problem, it\u0027s just that the rationale isn\u0027t obvious to me, probably I\u0027m missing the intent behind Redfish.md.",
      "parentUuid": "77d652d7_60a45902",
      "range": {
        "startLine": 719,
        "startChar": 0,
        "endLine": 721,
        "endChar": 23
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a04fa79_95d799d9",
        "filename": "Redfish.md",
        "patchSetId": 2
      },
      "lineNbr": 721,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T16:07:17Z",
      "side": 1,
      "message": "\u003e \u003e I\u0027d rather this be documented in code, especially given we don\u0027t really document the specification correct path.  Technically this is \"redfish\" documentation, so it\u0027s a little confusing we only document the \"wrong\" parts.\n\u003e \n\u003e This document is meant to give OpenBMC-specific information about Redfish implementation and serve as a quick reference for what\u0027s supported and what\u0027s not, right?\n\nCorrect, but what we\u0027ve implemented here is outside the \"redfish\" specification.\n\nMy main thinking here is that API implementers look to this documentation for \"which parts of the Redfish spec does bmcweb implement\".  Considering this isn\u0027t in the redfish spec, and we don\u0027t document the redfish-official parts that we do implement, it makes it read like we only support OEM.\n\nIf this document were flushed out with the specification behavior, and this was just a minor note at the bottom, I\u0027d feel differently.\n\nI\u0027m happy to have it documented, just not in this spot.\n\n\u003e I\u0027d say documenting all OEM specifics in it seems to be more useful compared to code comments here and there. Code comments are mostly useful to those working on this code and nearby while Redfish.md is suppposed to be useful to API consumers too, right?\n\nThat\u0027s the key, API consumers shouldn\u0027t be using this interface.  This is intended only for webui-vue;  If we want to document this flow in webui-vue, we could do that, but I don\u0027t want API implementers looking at this documentation and expecting that this is something we allow.\n\nHopefully that makes sense.\n\n\u003e \n\u003e If you sure it\u0027d be more helpful to move this comment to the code, no problem, it\u0027s just that the rationale isn\u0027t obvious to me, probably I\u0027m missing the intent behind Redfish.md.",
      "parentUuid": "11e06cfb_051a0574",
      "range": {
        "startLine": 719,
        "startChar": 0,
        "endLine": 721,
        "endChar": 23
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "290f5c46_aae66430",
        "filename": "Redfish.md",
        "patchSetId": 2
      },
      "lineNbr": 721,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T16:58:42Z",
      "side": 1,
      "message": "\u003e I\u0027m happy to have it documented, just not in this spot.\n\nGot it, thanks for the clarification.",
      "parentUuid": "3a04fa79_95d799d9",
      "range": {
        "startLine": 719,
        "startChar": 0,
        "endLine": 721,
        "endChar": 23
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "495373c5_5dc55ab3",
        "filename": "Redfish.md",
        "patchSetId": 2
      },
      "lineNbr": 721,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-07-02T20:10:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "290f5c46_aae66430",
      "range": {
        "startLine": 719,
        "startChar": 0,
        "endLine": 721,
        "endChar": 23
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e5e02b8_86526aa5",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T14:40:47Z",
      "side": 1,
      "message": "Just thinking out loud for a second, could we instead use \n!req-\u003egetHeaderValue(\"X-Requested-With\").empty();\n\nThe UI currently sets this header to inform us it\u0027s doing an XHR request, so we don\u0027t accidentally send back basic auth.\n\nI think that might solve this here without having to invent another header?",
      "range": {
        "startLine": 258,
        "startChar": 0,
        "endLine": 258,
        "endChar": 2
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d16b616_a6fee2aa",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T15:36:13Z",
      "side": 1,
      "message": "I\u0027m afraid I do not follow, I didn\u0027t add any other (than the regular OpenBMC cookies) header anywhere...",
      "parentUuid": "1e5e02b8_86526aa5",
      "range": {
        "startLine": 258,
        "startChar": 0,
        "endLine": 258,
        "endChar": 2
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57ed1a67_04c8fe41",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T16:07:17Z",
      "side": 1,
      "message": "bmcweb already makes use of the \"X-Requested-With\" header to determine if the login is coming from a browser.  If we used that as our \"we should return cookies\" decision instead of the query param, we\u0027d avoid duplicating things.",
      "parentUuid": "8d16b616_a6fee2aa",
      "range": {
        "startLine": 258,
        "startChar": 0,
        "endLine": 258,
        "endChar": 2
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "465d0a9f_3ba48067",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T16:58:42Z",
      "side": 1,
      "message": "\u003e bmcweb already makes use of the \"X-Requested-With\" header to determine if the login is coming from a browser.  If we used that as our \"we should return cookies\" decision instead of the query param, we\u0027d avoid duplicating things.\n\nBut we want any Web browser based Redfish frontend to work nicely with bmcweb, not just webui-vue, so this can\u0027t be a good trigger to enable non-standard behaviour, I guess?",
      "parentUuid": "57ed1a67_04c8fe41",
      "range": {
        "startLine": 258,
        "startChar": 0,
        "endLine": 258,
        "endChar": 2
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e6b2d5a_0d2a96ac",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T19:18:42Z",
      "side": 1,
      "message": "\u003e But we want any Web browser based Redfish frontend to work nicely with bmcweb\n\nMaybe, but even if that\u0027s our goal, that\u0027s why we\u0027re using a common header, not some bmcweb/openbmc specific one.  In theory now we can detect any browser, not just webui-vue.\n\nAlso, FWIW, browsers aren\u0027t how most consume Redfish, nor are any browser specifics called out in the protocol, so to say we want this to work with \"any web browser\" is a stretch.  We have lots of anti xss headers turned on, it\u0027s not like you can have a static page just redirect bmcweb and work (maybe it does?).\n\nFWIW, in the Redfish ecosystem, even DMTF had trouble for calls to make a \"generic UI\" to the point where it\u0027s still being worked.",
      "parentUuid": "465d0a9f_3ba48067",
      "range": {
        "startLine": 258,
        "startChar": 0,
        "endLine": 258,
        "endChar": 2
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3732db0e_ca00a458",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-07-02T20:10:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5e6b2d5a_0d2a96ac",
      "range": {
        "startLine": 258,
        "startChar": 0,
        "endLine": 258,
        "endChar": 2
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33c965a2_d974f699",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T15:01:39Z",
      "side": 1,
      "message": "Why are we setting path here?  The issue is more that this is different than the other calls, which might be fine, but we should put it in its own commit so we can document why we\u0027re doing it.",
      "range": {
        "startLine": 262,
        "startChar": 40,
        "endLine": 262,
        "endChar": 46
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebd5543f_30c9e567",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T15:36:13Z",
      "side": 1,
      "message": "\u003e Why are we setting path here?  The issue is more that this is different than the other calls, which might be fine, but we should put it in its own commit so we can document why we\u0027re doing it.\n\nIt\u0027s actually not different because `/login` endpoint implies the same `/` path. But if it\u0027s not set here then the Path in the browser cookie storage gets limited to Sessions path so the cookie will be only sent for session listing and DELETE and no other endpoints :)",
      "parentUuid": "33c965a2_d974f699",
      "range": {
        "startLine": 262,
        "startChar": 40,
        "endLine": 262,
        "endChar": 46
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d678523_89f6910e",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T16:07:17Z",
      "side": 1,
      "message": "https://github.com/openbmc/bmcweb/blob/00a0fe4e361efcdeb600f3a2e88b746fa18b9715/include/login_routes.hpp#L174\n\nDoes not include any mention of the keyword \"Path\", this is why I\u0027m confused.\n\nI\u0027m assuming you tried without Path being set, and it didn\u0027t work?  Some mention of this in your commit message would be good, so we can note why it\u0027s different.",
      "parentUuid": "ebd5543f_30c9e567",
      "range": {
        "startLine": 262,
        "startChar": 40,
        "endLine": 262,
        "endChar": 46
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e4527c1_d5288a4c",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T17:15:06Z",
      "side": 1,
      "message": "\u003e https://github.com/openbmc/bmcweb/blob/00a0fe4e361efcdeb600f3a2e88b746fa18b9715/include/login_routes.hpp#L174\n\u003e \n\u003e Does not include any mention of the keyword \"Path\", this is why I\u0027m confused.\n\nhttps://www.rfc-editor.org/rfc/rfc6265#section-5.3 point 7 for this case says \"set the cookie\u0027s path to the default-path of the request-uri\" and https://www.rfc-editor.org/rfc/rfc6265#section-5.1.4 tells how to compute the default path. Basically, it was a \"happy coincidence\" that `/login` defaults to `/` for the Path, if it was `/openbmc/login` then the cookies would have been set to `Path\u003d/openbmc` and not work at all for `/redfish/v1` endpoints.\n\n\u003e I\u0027m assuming you tried without Path being set, and it didn\u0027t work?  Some mention of this in your commit message would be good, so we can note why it\u0027s different.\n\nSure, how else would a person without much clue about web technologies learn about it if not by getting puzzling results :) But then after reading the docs and seeing what the deal is about I just assumed it\u0027s common knowledge for cookie users so not something worth mentioning.",
      "parentUuid": "5d678523_89f6910e",
      "range": {
        "startLine": 262,
        "startChar": 40,
        "endLine": 262,
        "endChar": 46
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba0fbb1c_98ea10c9",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T19:18:42Z",
      "side": 1,
      "message": "\u003e \u003e https://github.com/openbmc/bmcweb/blob/00a0fe4e361efcdeb600f3a2e88b746fa18b9715/include/login_routes.hpp#L174\n\u003e \u003e \n\u003e \u003e Does not include any mention of the keyword \"Path\", this is why I\u0027m confused.\n\u003e \n\u003e https://www.rfc-editor.org/rfc/rfc6265#section-5.3 point 7 for this case says \"set the cookie\u0027s path to the default-path of the request-uri\" and https://www.rfc-editor.org/rfc/rfc6265#section-5.1.4 tells how to compute the default path. Basically, it was a \"happy coincidence\" that `/login` defaults to `/` for the Path, if it was `/openbmc/login` then the cookies would have been set to `Path\u003d/openbmc` and not work at all for `/redfish/v1` endpoints.\n\nThe above text would be perfect to put in your commit message about why you changed it to now return path where it didn\u0027t previously.  In your reading, should we be returning Path\u003d/ on all the other set-cookie calls?  I suspect things like mtls cookies would be broken if you first requested a path that wasn\u0027t root because we don\u0027t set path.  (doesn\u0027t have to be in this patch).\n\n\u003e \n\u003e \u003e I\u0027m assuming you tried without Path being set, and it didn\u0027t work?  Some mention of this in your commit message would be good, so we can note why it\u0027s different.\n\u003e \n\u003e Sure, how else would a person without much clue about web technologies learn about it if not by getting puzzling results :)\n\u003e But then after reading the docs and seeing what the deal is about I just assumed it\u0027s common knowledge for cookie users so not something worth mentioning.\n\n\nPutting that, or some variation of \"I tried the simple thing and it didn\u0027t work because XYZ, so I read RFCXXX and now it works\" helps me to not have to go look up the various standards to figure out what you did and why (which takes effort that when reviewing 10s of patches a day, I don\u0027t really have time for).\n\nLets get the commit message updated with the details and close this out.",
      "parentUuid": "3e4527c1_d5288a4c",
      "range": {
        "startLine": 262,
        "startChar": 40,
        "endLine": 262,
        "endChar": 46
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c8de2df_783dccf8",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-07-02T20:10:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba0fbb1c_98ea10c9",
      "range": {
        "startLine": 262,
        "startChar": 40,
        "endLine": 262,
        "endChar": 46
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81d19c47_05a5c783",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T15:01:39Z",
      "side": 1,
      "message": "Can we wrap this in a method please?  I see this same located two other places already, and it would be nice to be able to modify them in one spot.",
      "range": {
        "startLine": 260,
        "startChar": 0,
        "endLine": 266,
        "endChar": 63
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f90bd4b5_10f5bf03",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T15:36:13Z",
      "side": 1,
      "message": "I thought about that but also thought that you might want to get rid of /login altogether when the standard Redfish reaches feature parity.\n\nAs to the other path, the MTLS one, it also sets `IsAuthenticated` cookie and never checks it or does anything else with it. I wonder if it was added in mistake.\n\nBut even if /login is removed then it\u0027d still be two and two is more than one, so DRY tells us a helper should be created instead, sure, agreed.",
      "parentUuid": "81d19c47_05a5c783",
      "range": {
        "startLine": 260,
        "startChar": 0,
        "endLine": 266,
        "endChar": 63
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad31282b_bede12c2",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T16:07:17Z",
      "side": 1,
      "message": "\u003e I thought about that but also thought that you might want to get rid of /login altogether when the standard Redfish reaches feature parity.\n\nHaving this in its own method won\u0027t take away from that goal when it comes.\n\nThe reality is also that /login at most will at most be wrapped in an option flag.  Its existed for too long and too many things rely on it to remove the code entirely.\n\n\u003e \n\u003e As to the other path, the MTLS one, it also sets `IsAuthenticated` cookie and never checks it or does anything else with it. I wonder if it was added in mistake.\n\nIsAuthenticated was used by the UI for cases where we had things like mTLS that would authenticate without Javascript, but we still needed to inform javascript \"hey, you\u0027re already logged in, don\u0027t post the login screen\".\n\nwebui-vue broke this path, and we haven\u0027t fixed it.  Lets keep IsAuthenticated for now just to be consistent between the auth paths, and at some point we\u0027ll have to look at getting mtls auth working on webui-vue.\n\n\u003e \n\u003e But even if /login is removed then it\u0027d still be two and two is more than one, so DRY tells us a helper should be created instead, sure, agreed.\n\nThank you.",
      "parentUuid": "f90bd4b5_10f5bf03",
      "range": {
        "startLine": 260,
        "startChar": 0,
        "endLine": 266,
        "endChar": 63
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77706970_2bf24eb9",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T16:58:42Z",
      "side": 1,
      "message": "\u003e \u003e \n\u003e \u003e As to the other path, the MTLS one, it also sets `IsAuthenticated` cookie and never checks it or does anything else with it. I wonder if it was added in mistake.\n\u003e \n\u003e IsAuthenticated was used by the UI for cases where we had things like mTLS that would authenticate without Javascript, but we still needed to inform javascript \"hey, you\u0027re already logged in, don\u0027t post the login screen\".\n\nI do not see how this can make any sense as that IsAuthenticated cookie is always set along with XSRF-Token cookie (which is /not/ HttpOnly) so the frontend can always assume it\u0027s currently logged in if it has XSRF-Token and always know that it\u0027s not logged in when it doesn\u0027t have it. This token is needed anyway for WS.\n \n\u003e webui-vue broke this path\n\nThe logic behind it seems flawed so no wonder it ended up being fragile.\n\nInstead webui-vue should just try loading any page it\u0027s asked for, no matter if it thinks it\u0027s logged in or not, best case, mtls works and it gets the page and the cookie in response, worst case, it gets 401 and knows it needs to redirect to login page.\n\nThis shouldn\u0027t require any additional cookies AFAICT. Or am I missing some essential deal breaking detail here?",
      "parentUuid": "ad31282b_bede12c2",
      "range": {
        "startLine": 260,
        "startChar": 0,
        "endLine": 266,
        "endChar": 63
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bcf8f27_9f7290d0",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T19:18:42Z",
      "side": 1,
      "message": "\u003e \u003e \u003e \n\u003e \u003e \u003e As to the other path, the MTLS one, it also sets `IsAuthenticated` cookie and never checks it or does anything else with it. I wonder if it was added in mistake.\n\u003e \u003e \n\u003e \u003e IsAuthenticated was used by the UI for cases where we had things like mTLS that would authenticate without Javascript, but we still needed to inform javascript \"hey, you\u0027re already logged in, don\u0027t post the login screen\".\n\u003e \n\u003e I do not see how this can make any sense as that IsAuthenticated cookie is always set along with XSRF-Token cookie (which is /not/ HttpOnly) so the frontend can always assume it\u0027s currently logged in if it has XSRF-Token and always know that it\u0027s not logged in when it doesn\u0027t have it. This token is needed anyway for WS.\n\nI\u0027m happy to explain the above to you, but not in the context of of a code review comment.  Lets keep this thread focused on the change I asked for, which is refactoring this to use common code where we can.\n\n\u003e  \n\u003e \u003e webui-vue broke this path\n\u003e \n\u003e The logic behind it seems flawed so no wonder it ended up being fragile.\n\nIt worked fine for the whole lifecycle of phosphor-webui;  It\u0027s not about it being fragile, it\u0027s about webui-vue completely ignoring the feature when they did a \"replacement\" UI.\n\nSome historical reading if you\u0027re curious.\nhttps://lore.kernel.org/openbmc/OF91B43372.8E81A7D9-ON002585EA.0056113C-002585EA.0060099C@notes.na.collabserv.com/\n\n\u003e \n\u003e Instead webui-vue should just try loading any page it\u0027s asked for, no matter if it thinks it\u0027s logged in or not, best case, mtls works and it gets the page and the cookie in response, worst case, it gets 401 and knows it needs to redirect to login page.\n\u003e \n\u003e This shouldn\u0027t require any additional cookies AFAICT. Or am I missing some essential deal breaking detail here?\n\nI believe the original theory is that if we\u0027re authenticating via MTLS, we didn\u0027t want any session token to even exist (because its existence could in theory be used as a chain of the attack) so we\u0027re better off returning a non-secret.\n\nObviously the current code doesn\u0027t live up to that intent, (I\u0027m not sure if it did previously and we just broke it at some point in a refactor), but that intent makes sense to me.  If we ever get around to doing webui-mtls auth in the future, we\u0027ll have to look at this again.",
      "parentUuid": "77706970_2bf24eb9",
      "range": {
        "startLine": 260,
        "startChar": 0,
        "endLine": 266,
        "endChar": 63
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a22d534_cca9d70c",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-07-02T20:10:45Z",
      "side": 1,
      "message": "I hope I found a suitable location for the common set/clear cookies method, if not, ready to rework but I\u0027d need a hint at a better place.",
      "parentUuid": "3bcf8f27_9f7290d0",
      "range": {
        "startLine": 260,
        "startChar": 0,
        "endLine": 266,
        "endChar": 63
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62c186e7_f068c536",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 266,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-07-02T20:16:07Z",
      "side": 1,
      "message": "Where you put it is fine.",
      "parentUuid": "4a22d534_cca9d70c",
      "range": {
        "startLine": 260,
        "startChar": 0,
        "endLine": 266,
        "endChar": 63
      },
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c78b1df2_fe31627f",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T14:40:47Z",
      "side": 1,
      "message": "We should add this header in either path.",
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2853fa46_ff553c5c",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T15:36:13Z",
      "side": 1,
      "message": "\u003e We should add this header in either path.\n\nWhy? If we know our client is special and asks for our special sauce why send the standard header? Also, it contains the token that\u0027s supposed to be secret from JS code if we claim the non-standard cookie auth is done for additional security the SESSION HttpOnly cookie provides but here we would be giving injected JS an opportunity to catch it.",
      "parentUuid": "c78b1df2_fe31627f",
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12049e40_f6ff519a",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T16:07:17Z",
      "side": 1,
      "message": "\u003e \u003e We should add this header in either path.\n\u003e \n\u003e Why? \n\nIn a word, consistency.  The special header is only additive, so even if we got in some strange scenario where the special header is being used, but the client was expecting x-auth, it would function.\n\nAlso, a more minor thing, if we keep the X-auth-token, we\u0027re technically still \"redfish correct\" in our response to the POST.\n\n\u003e If we know our client is special and asks for our special sauce why send the standard header? Also, it contains the token that\u0027s supposed to be secret from JS code if we claim the non-standard cookie auth is done for additional security\n\nLets be clear, cookie auth is done for websocket support.  I\u0027m not prepared to justify the claim that it\u0027s more secure the X-auth-token.\n\n\u003e the SESSION HttpOnly cookie provides but here we would be giving injected JS an opportunity to catch it.\n\nMy opinion here isn\u0027t terribly strong.  If you want to keep the code as is, all good.",
      "parentUuid": "2853fa46_ff553c5c",
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b599335e_05ff05aa",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T16:35:55Z",
      "side": 1,
      "message": "\u003e \u003e If we know our client is special and asks for our special sauce why send the standard header? Also, it contains the token that\u0027s supposed to be secret from JS code if we claim the non-standard cookie auth is done for additional security\n\u003e \n\u003e Lets be clear, cookie auth is done for websocket support.  I\u0027m not prepared to justify the claim that it\u0027s more secure the X-auth-token.\n\nWhy do we need the cookie auth in addition to the subprotocol token auth for WS? What\u0027s the threat you have in mind here? That JS will get injected code somehow and that code would steal and exfiltrate the temporary token but then since it\u0027s not able to read the SESSION cookie the WS won\u0027t be accessible to the outside processes? But in fact it will be accessible to the other tabs in the same web browser because CORS isn\u0027t applied to web sockets. But then you say the SESSION cookie will be removed on logout and /then/ the WS will no longer be accessible? Sounds far-fetched, guess that\u0027s not what you think about.\n\nAnd if you say we need cookie auth only for websockets then why websocket needs to be protected any more seriously than all the standard API calls (if they were using just the standard X-Auth-Token)?\n\n\u003e\u003e the SESSION HttpOnly cookie provides but here we would be giving injected JS an opportunity to catch it.\n\u003e \n\u003e My opinion here isn\u0027t terribly strong.  If you want to keep the code as is, all good.\n\nMy impression so far is that if Redfish members think X-Auth-Token is secure enough for the web browser clients and HttpOnly is an overkill then OpenBMC probably shouldn\u0027t complicate the matters too much and get rid of cookie auth altogether, and websocket checking the same X-Auth-Token on upgrade path (passed as subprotocol string) is as secure as the rest of the API, I\u0027m yet to see any difference. I might be very wrong here, far from being an expert in web technologies.",
      "parentUuid": "12049e40_f6ff519a",
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1436e9c6_18ca6196",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T19:01:31Z",
      "side": 1,
      "message": "\u003e \u003e \u003e If we know our client is special and asks for our special sauce why send the standard header? Also, it contains the token that\u0027s supposed to be secret from JS code if we claim the non-standard cookie auth is done for additional security\n\u003e \u003e \n\u003e \u003e Lets be clear, cookie auth is done for websocket support.  I\u0027m not prepared to justify the claim that it\u0027s more secure the X-auth-token.\n\u003e \n\u003e Why do we need the cookie auth in addition to the subprotocol token auth for WS?\n\u003e What\u0027s the threat you have in mind here? That JS will get injected code somehow and that code would steal and exfiltrate the temporary token but then since it\u0027s not able to read the SESSION cookie the WS won\u0027t be accessible to the outside processes? But in fact it will be accessible to the other tabs in the same web browser because CORS isn\u0027t applied to web sockets. But then you say the SESSION cookie will be removed on logout and /then/ the WS will no longer be accessible? Sounds far-fetched, guess that\u0027s not what you think about.\n\n\nIf you\u0027re looking for history, this code review isn\u0027t the right place to discuss (although I\u0027m happy to have that conversation).  Keep in mind, I wasn\u0027t a part of the subprotocol addition, so the context of that is hopefully captured in commit messages.\n\nI know you have strong opinions on various communication forums, so I\u0027ll leave it up to you which OpenBMC forum you want to start the above discussion (I\u0027m available on all of the active openbmc ones).\n\n\nIn the context of this commit, I\u0027ve written down the change I\u0027d like to see, and also said I\u0027m not that tied to it if I don\u0027t see it.  We can close this discussion whether or not you want to make the change, and honestly either way is fine.\n\n\u003e \n\u003e And if you say we need cookie auth only for websockets then why websocket needs to be protected any more seriously than all the standard API calls (if they were using just the standard X-Auth-Token)?\n\u003e \n\u003e \u003e\u003e the SESSION HttpOnly cookie provides but here we would be giving injected JS an opportunity to catch it.\n\u003e \u003e \n\u003e \u003e My opinion here isn\u0027t terribly strong.  If you want to keep the code as is, all good.\n\u003e \n\u003e My impression so far is that if Redfish members think X-Auth-Token is secure enough for the web browser clients and HttpOnly is an overkill then OpenBMC probably shouldn\u0027t complicate the matters too much and get rid of cookie auth altogether, and websocket checking the same X-Auth-Token on upgrade path (passed as subprotocol string) is as secure as the rest of the API, I\u0027m yet to see any difference. I might be very wrong here, far from being an expert in web technologies.\n\nYou can also rephrase \"get rid of X\" as \"break existing clients that use X\", which we try to avoid in the ecosystem if we can.\n\nPeoples opinions on this stuff are wide and varied;  bmcweb tries to support as many opinions in one codebase as we can securely, which is why we currently support 5 different ways to authenticate, and also why they\u0027re all selectable at build time AND runtime.\n\nIf you don\u0027t want to use cookie auth, there\u0027s a meson config for that already and a way to disable it at runtime.  websockets from a browser will not function if you disable cookie auth but that\u0027s not a bmcweb problem, that\u0027s a webui-vue problem, so if you want to discuss that in that context (not in this patch), we can.\n\n\u003e My impression so far is that if Redfish members\n\nConsidering I am a DMTF Redfish member......   I\u0027m not really sure how to take this 😊\n\nWe\u0027re discussing protocol specifics that go beyond Redfish, so while I certainly value Redfish forums opinion, it\u0027s kind of irrelevant.  Their opinion applies to the Redfish protocol (for which we have full support).  bmcweb implements Redfish and \"more\", so there are cases where Redfish itself isn\u0027t sufficient, or hasn\u0027t caught up to us (mutual TLS being a good example of something we implemented YEARS ago, and Redfish is just now catching up on).",
      "parentUuid": "b599335e_05ff05aa",
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9db60740_ac441f31",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T19:22:57Z",
      "side": 1,
      "message": "\u003e I know you have strong opinions on various communication forums, so I\u0027ll leave it up to you which OpenBMC forum you want to start the above discussion (I\u0027m available on all of the active openbmc ones).\n\nOK, I\u0027ll try to re-start this discussion on the mailing list.\n\n\u003e In the context of this commit, I\u0027ve written down the change I\u0027d like to see, and also said I\u0027m not that tied to it if I don\u0027t see it.  We can close this discussion whether or not you want to make the change, and honestly either way is fine.\n\nWhen making a decision I like to come to consensus with all experienced parties involved. Here I think I still have a point but if it doesn\u0027t sound convincing to you then either the point is bad or I haven\u0027t yet succeeded explaining it to you.\n\n\u003e You can also rephrase \"get rid of X\" as \"break existing clients that use X\", which we try to avoid in the ecosystem if we can.\n\nNo existing clients count on cookie auth being available via the standard Redfish Session creating method. So if you just agreed to relax the security requirements for WS a bit and allow authenticating with the subprotocol alone (without cookies) that would seem like a viable way forward of converting webui-vue to standard auth.",
      "parentUuid": "1436e9c6_18ca6196",
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f07b01e_2a001e54",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-13T20:11:37Z",
      "side": 1,
      "message": "\u003e So if you just agreed to relax the security requirements for WS a bit and allow authenticating with the subprotocol alone (without cookies) that would seem like a viable way forward of converting webui-vue to standard auth.\n\nFWIW, it\u0027s done using cookies because it reduces the amount of code that\u0027s presented to an unathenticated attacker, which reduces the possibility of an unauthenticated attack being found.  Subprotocol runs a lot more code before it can decide a connection is unauthenticated, and all that code is specific to websockets (so harder to test). while I\u0027d like to believe that code is bug and race condition free, not executing it at all is easier.",
      "parentUuid": "9db60740_ac441f31",
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c05b016f_ec314668",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-07-02T20:10:45Z",
      "side": 1,
      "message": "X-Auth-Token is sent unconditionally as per your request.\n\nHowever I\u0027m asking you to give it one final thought. The way it currently is the token is returned as HttpOnly cookie but also as reply header for this particular endpoint once. So if we assume webui-vue JS got injected something malicious somehow then it can intercept that response and get access to the secret token which was supposed to be absolutely inaccessible to JS.",
      "parentUuid": "0f07b01e_2a001e54",
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b7165fc_ca247e9a",
        "filename": "redfish-core/lib/redfish_sessions.hpp",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-07-02T20:16:07Z",
      "side": 1,
      "message": "\u003e X-Auth-Token is sent unconditionally as per your request.\n\u003e \n\u003e However I\u0027m asking you to give it one final thought. The way it currently is the token is returned as HttpOnly cookie but also as reply header for this particular endpoint once. So if we assume webui-vue JS got injected something malicious somehow then it can intercept that response and get access to the secret token which was supposed to be absolutely inaccessible to JS.\n\nYou make a fair argument that we shouldn\u0027t return X-Auth-Token when we get this header.  If you wanted to change to make it so we don\u0027t send an X-Auth-Token in the case where we\u0027re sending cookies, that seems reasonable to me",
      "parentUuid": "c05b016f_ec314668",
      "revId": "28469f01ac391a2fde542d8ff6ce393a09c580cf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
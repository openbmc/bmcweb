{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "aa4d5a53_d65b1544",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "There\u0027s lots of CI failures here.  Please take a look and correct them.",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2405043_3a373cf7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:49Z",
      "side": 1,
      "message": "Glad to see progress here.  Let me know if you need any help.",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bfb92b4_02780258",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "For new code, please use the if constexpr approach web\u0027ve been doing in bmcweb_config.h\n\nalso, optionally including headers is something we no longer do due to build breakages.  Happy to discuss if you think our approach is wrong or could be improved holistically, just not in the context of new code.",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e96e791d_b3925866",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "Will have a go at this, let me check bmcweb_config.h",
      "parentUuid": "5bfb92b4_02780258",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e56c967_ac826fd5",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "In TLS, is this something we even need to be checking for?  Meta doesn\u0027t use this, but does anyone?  I suspect this can just be removed for all things, or at the very least made a generic option, non meta specific.",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 26
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38b16cf9_dbad52b7",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "Good point, let me try making this a generic option.",
      "parentUuid": "1e56c967_ac826fd5",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 26
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f45f372c_f310e2a2",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:59:47Z",
      "side": 1,
      "message": "Also, lets check to see if the Redfish spec specifies this explicitly.",
      "parentUuid": "38b16cf9_dbad52b7",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 26
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acc2bc0c_552a2db8",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "You\u0027re now running BOTH sets of user parsing code, without a check to see if one succeeded.  I suspect we just need to make this flip between one set of logic and another.",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 165,
        "endChar": 59
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b28514d_91085d5e",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "My impression is that lines 147:159 are more to sanitise the Subject string returned by `X509_NAME_get_text_by_NID()` (i.e. just to ensure it\u0027s a sane C++ string) (i.e. I\u0027d likely need to redo the same sanitisation logic if we were to split), let me know if this is what you meant by both sets.",
      "parentUuid": "acc2bc0c_552a2db8",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 165,
        "endChar": 59
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb4ed4cd_9465261b",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "yeah, that\u0027s a fair point.  ACK",
      "parentUuid": "0b28514d_91085d5e",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 165,
        "endChar": 59
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7e10a52_49b82f32",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "Please remove the regex, especially for security critical code.  std::regex is not very performant, and can generally be replaced with a simple parser that doesn\u0027t require regex compilation on startup.  There\u0027s a bug that goes through documenting all the removals, and why.",
      "range": {
        "startLine": 9,
        "startChar": 18,
        "endLine": 9,
        "endChar": 33
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "434baae4_9fcd2004",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "For example, are you sure that zero or more match is correct here?  An empty username seems like it wouldn\u0027t be valid.\n\nIf this were a simple parser, it\u0027d be a lot easier to explain in a comment whether that\u0027s intentional or not.",
      "range": {
        "startLine": 11,
        "startChar": 20,
        "endLine": 11,
        "endChar": 21
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f408b6f_ff69f4a6",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "The zero match is correct, e.g. `host:/blah.facebook.com` is a valid subject for a host certificates.\n\nI\u0027ve tried a non-regex parser initially and I thought it was a bit too complex, will try my hand at it again.",
      "parentUuid": "434baae4_9fcd2004",
      "range": {
        "startLine": 11,
        "startChar": 20,
        "endLine": 11,
        "endChar": 21
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a7b1857_1d7f6d03",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "they\u0027re both complex, one is code we can read and compiles at compile time, one has a runtime overhead ðŸ˜Š\n\nfor non-bmc use cases, regex is generally a perfectly acceptable choice, so i don\u0027t fault you for going that route.",
      "parentUuid": "2f408b6f_ff69f4a6",
      "range": {
        "startLine": 11,
        "startChar": 20,
        "endLine": 11,
        "endChar": 21
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93a30455_43ef20af",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "Is this using a standard like spiffe?  I would much rather have generic parsing code that parses out the hostname than code that explicitly looks for facebook.com.  If the cert is signed, it\u0027s up to the signer if they want to sign other hosts.  \"was signed by facebook.com\" isn\u0027t really something the bmc should be enforcing just as a technical simplification, and clear separation of responsibilities.  ie, the BMC trusts any data that\u0027s signed, no need to do further verification, that\u0027s the responsibility of the signer.",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dee2f9b_9d923510",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "\u003e Is this using a standard like spiffe? \n\nNo, AFAICT this is a Meta-specific convention (so unfortunately not very generic). \n\nThe host suffix bit is there more to be able to remove it easily later. We don\u0027t use these to uniquely identify hosts internally and avoids issues with username character count limits.",
      "parentUuid": "93a30455_43ef20af",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0eb63d75_b6c58c27",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1dee2f9b_9d923510",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7a5f3ca_6a63a638",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "this implies that the user on the bmc is going to be user_foo, not foo based on returning this.  I\u0027m assuming that\u0027s not what you intend?  Users on the bmc are going to be \"foo\"",
      "range": {
        "startLine": 40,
        "startChar": 42,
        "endLine": 40,
        "endChar": 57
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eced6539_e4f15015",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "Internally, we have three basic types of certs (\"user\", \"svc\", and \"host\") and the idea is to map those to BMC users with the \u003ctype\u003e being used as prefix to eliminate  collisions if we have a service and a user and service with the same name, e.g:\n\n  \"user:zeus/dev123.facebook.com\" -\u003e \"user_zeus\"\n  \"svc:zeus\" -\u003e \"svc_zeus\"",
      "parentUuid": "b7a5f3ca_6a63a638",
      "range": {
        "startLine": 40,
        "startChar": 42,
        "endLine": 40,
        "endChar": 57
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b5d0f54_a1a9da0b",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "\u003e Internally, we have three basic types of certs (\"user\", \"svc\", and \"host\") and the idea is to map those to BMC users with the \u003ctype\u003e being used as prefix to eliminate  collisions if we have a service and a user and service with the same name, e.g:\n\nright, so the core of the problem here is that on OpenBMC (and linux in general) \"name\" isn\u0027t used to differentiate service vs user.  OpenBMC has no sense of a service login at this point (well, it kinda does, but I\u0027m assuming your service isn\u0027t the same as OpenBMCs definition of service), only the idea of a \"user\" so just collapsing it down to name means that things like IPMI can now break this code, by creating a user called \"foo\" instead of \"user_foo\"\n\nAs far as this patchset goes, this is the thing that I\u0027d like to see ironed out at OpenBMC/dbus level.\n\nas far as a bmc is concerned, what is a \"service\" and is it any different than a user?  In this code, they\u0027re treated essentially the same.\n\n\u003e \n\u003e   \"user:zeus/dev123.facebook.com\" -\u003e \"user_zeus\"\n\u003e   \"svc:zeus\" -\u003e \"svc_zeus\"",
      "parentUuid": "eced6539_e4f15015",
      "range": {
        "startLine": 40,
        "startChar": 42,
        "endLine": 40,
        "endChar": 57
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37928848_a29b747b",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "nit, probably want warning here or error here.  If the intermediate is signing bad requests, something has gone very... very wrong.",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 51,
        "endChar": 24
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9240d565_b902283b",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "Can we avoid using an in-out parameter here?  The input and the output represent different things.  Putting them in one variable is confusing.",
      "range": {
        "startLine": 55,
        "startChar": 4,
        "endLine": 55,
        "endChar": 11
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7b48228_fccc878a",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "Lets make this option anem a less company specific enum, because I suspect others are going to have additional options, and I know things like spifee exist that might come up in the future.  something like:\n\ntls-username-parsing-mode: {CommonName, Meta, Spiffe, ....}",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 104
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e787a389_f6b91114",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a7b48228_fccc878a",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 104
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f77c76f3_7ef03475",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "s/anem/enum/g",
      "parentUuid": "e787a389_f6b91114",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 104
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c08b030_eb5f3ca6",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 450,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "We intentionally run all unit tests with all options enabled.   Unit tests by definition shouldn\u0027t care what the config options are, unless they effect the actual output, in which case they should only be switching between the two behaviors in tests.",
      "range": {
        "startLine": 448,
        "startChar": 0,
        "endLine": 450,
        "endChar": 5
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
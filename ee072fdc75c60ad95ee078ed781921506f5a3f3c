{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "aa4d5a53_d65b1544",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "There\u0027s lots of CI failures here.  Please take a look and correct them.",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2405043_3a373cf7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:49Z",
      "side": 1,
      "message": "Glad to see progress here.  Let me know if you need any help.",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bfb92b4_02780258",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "For new code, please use the if constexpr approach web\u0027ve been doing in bmcweb_config.h\n\nalso, optionally including headers is something we no longer do due to build breakages.  Happy to discuss if you think our approach is wrong or could be improved holistically, just not in the context of new code.",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e96e791d_b3925866",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "Will have a go at this, let me check bmcweb_config.h",
      "parentUuid": "5bfb92b4_02780258",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ccebc4e1_86f81549",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-11-30T03:25:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e96e791d_b3925866",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e56c967_ac826fd5",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "In TLS, is this something we even need to be checking for?  Meta doesn\u0027t use this, but does anyone?  I suspect this can just be removed for all things, or at the very least made a generic option, non meta specific.",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 26
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38b16cf9_dbad52b7",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "Good point, let me try making this a generic option.",
      "parentUuid": "1e56c967_ac826fd5",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 26
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f45f372c_f310e2a2",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:59:47Z",
      "side": 1,
      "message": "Also, lets check to see if the Redfish spec specifies this explicitly.",
      "parentUuid": "38b16cf9_dbad52b7",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 26
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50b3d603_204b0429",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-11-30T03:25:49Z",
      "side": 1,
      "message": "Implemented as a -Dmutual-tls-enforce-key-agreement-bit option (default enabled)",
      "parentUuid": "f45f372c_f310e2a2",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 26
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88dcf8f4_5b339064",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-30T18:06:51Z",
      "side": 1,
      "message": "Did we discuss with redfish about what the correct check for this is?  I suspect it doesn\u0027t need to be an option, and we just were overly pessimistic before.",
      "parentUuid": "50b3d603_204b0429",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 26
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29f589bf_52d140c0",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-12-05T18:28:21Z",
      "side": 1,
      "message": "We did not, what\u0027d be the best channel to reach out to them?\n\nFor what is worth, I did not find anything supporting the usage of the key agreement bit in redfish docs, but it seems we\u0027re enforcing this bit since the original [design proposal](https://github.com/openbmc/docs/commit/38b2c1a2f44f1e5625657de9a16fd940a0af0e9e#diff-c6088da881d672cf38ae970eed8e476f00ad1a10bc5520d059680b56cde5447aR211) and [code](https://gerrit.openbmc.org/c/openbmc/bmcweb/+/23588), I can try reaching out to the original author as well to get more details.\n\nGiven the flag preserves the original behaviour by default, I can create a new change removing the enforcement and shift this discussion there, what do you think?",
      "parentUuid": "88dcf8f4_5b339064",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 26
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dab92731_d21bd0e3",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-05T18:46:40Z",
      "side": 1,
      "message": "\u003e We did not, what\u0027d be the best channel to reach out to them?\n\u003e \n\nRedfish forum or DMTF github.\n\n\n\u003e For what is worth, I did not find anything supporting the usage of the key agreement bit in redfish docs, but it seems we\u0027re enforcing this bit since the original [design proposal](https://github.com/openbmc/docs/commit/38b2c1a2f44f1e5625657de9a16fd940a0af0e9e#diff-c6088da881d672cf38ae970eed8e476f00ad1a10bc5520d059680b56cde5447aR211) and [code](https://gerrit.openbmc.org/c/openbmc/bmcweb/+/23588), I can try reaching out to the original author as well to get more details.\n\n\nKeep in mind, the original commit predates mutual TLS being supported in the standard, and given some of the bugs I\u0027ve seen, I\u0027m not convinced it gets a lot of usage.\n\nI\u0027m also happy to accept an argument that comes from an SSL/TLS standard for this not to be enforced, I\u0027m just very worried about a \"choose your own adventure\" to security.  Either:\n\nA. The standards say that this bit should be enforced, and we shouldn\u0027t let people choose to not enforce it outside of an \"insecure\" option.\n\nB. (more likely the case) The original authors didn\u0027t understand the spec correctly, were overly restrictive, and we don\u0027t need to enforce this bit in any cases.\n\nLets see if we can gets some background to backup B.\n\n\u003e \n\u003e Given the flag preserves the original behaviour by default, I can create a new change removing the enforcement and shift this discussion there, what do you think?\n\nyep, I commented before that separating out the two changes would\u0027ve been better, because they\u0027re fundamentally different.",
      "parentUuid": "29f589bf_52d140c0",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 26
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acc2bc0c_552a2db8",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "You\u0027re now running BOTH sets of user parsing code, without a check to see if one succeeded.  I suspect we just need to make this flip between one set of logic and another.",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 165,
        "endChar": 59
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b28514d_91085d5e",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "My impression is that lines 147:159 are more to sanitise the Subject string returned by `X509_NAME_get_text_by_NID()` (i.e. just to ensure it\u0027s a sane C++ string) (i.e. I\u0027d likely need to redo the same sanitisation logic if we were to split), let me know if this is what you meant by both sets.",
      "parentUuid": "acc2bc0c_552a2db8",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 165,
        "endChar": 59
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb4ed4cd_9465261b",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "yeah, that\u0027s a fair point.  ACK",
      "parentUuid": "0b28514d_91085d5e",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 165,
        "endChar": 59
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "202efd6d_0bee43b7",
        "filename": "http/mutual_tls.hpp",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-11-01T13:52:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb4ed4cd_9465261b",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 165,
        "endChar": 59
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7e10a52_49b82f32",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "Please remove the regex, especially for security critical code.  std::regex is not very performant, and can generally be replaced with a simple parser that doesn\u0027t require regex compilation on startup.  There\u0027s a bug that goes through documenting all the removals, and why.",
      "range": {
        "startLine": 9,
        "startChar": 18,
        "endLine": 9,
        "endChar": 33
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20d2b9ed_2a04971c",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-11-30T03:25:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7e10a52_49b82f32",
      "range": {
        "startLine": 9,
        "startChar": 18,
        "endLine": 9,
        "endChar": 33
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "434baae4_9fcd2004",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "For example, are you sure that zero or more match is correct here?  An empty username seems like it wouldn\u0027t be valid.\n\nIf this were a simple parser, it\u0027d be a lot easier to explain in a comment whether that\u0027s intentional or not.",
      "range": {
        "startLine": 11,
        "startChar": 20,
        "endLine": 11,
        "endChar": 21
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f408b6f_ff69f4a6",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "The zero match is correct, e.g. `host:/blah.facebook.com` is a valid subject for a host certificates.\n\nI\u0027ve tried a non-regex parser initially and I thought it was a bit too complex, will try my hand at it again.",
      "parentUuid": "434baae4_9fcd2004",
      "range": {
        "startLine": 11,
        "startChar": 20,
        "endLine": 11,
        "endChar": 21
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a7b1857_1d7f6d03",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "they\u0027re both complex, one is code we can read and compiles at compile time, one has a runtime overhead 😊\n\nfor non-bmc use cases, regex is generally a perfectly acceptable choice, so i don\u0027t fault you for going that route.",
      "parentUuid": "2f408b6f_ff69f4a6",
      "range": {
        "startLine": 11,
        "startChar": 20,
        "endLine": 11,
        "endChar": 21
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "134ffbe8_acf0d316",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-11-30T03:25:49Z",
      "side": 1,
      "message": "Implemented logic using string operations, let me know what you think",
      "parentUuid": "1a7b1857_1d7f6d03",
      "range": {
        "startLine": 11,
        "startChar": 20,
        "endLine": 11,
        "endChar": 21
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93a30455_43ef20af",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "Is this using a standard like spiffe?  I would much rather have generic parsing code that parses out the hostname than code that explicitly looks for facebook.com.  If the cert is signed, it\u0027s up to the signer if they want to sign other hosts.  \"was signed by facebook.com\" isn\u0027t really something the bmc should be enforcing just as a technical simplification, and clear separation of responsibilities.  ie, the BMC trusts any data that\u0027s signed, no need to do further verification, that\u0027s the responsibility of the signer.",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dee2f9b_9d923510",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "\u003e Is this using a standard like spiffe? \n\nNo, AFAICT this is a Meta-specific convention (so unfortunately not very generic). \n\nThe host suffix bit is there more to be able to remove it easily later. We don\u0027t use these to uniquely identify hosts internally and avoids issues with username character count limits.",
      "parentUuid": "93a30455_43ef20af",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0eb63d75_b6c58c27",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1dee2f9b_9d923510",
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7a5f3ca_6a63a638",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "this implies that the user on the bmc is going to be user_foo, not foo based on returning this.  I\u0027m assuming that\u0027s not what you intend?  Users on the bmc are going to be \"foo\"",
      "range": {
        "startLine": 40,
        "startChar": 42,
        "endLine": 40,
        "endChar": 57
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eced6539_e4f15015",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "Internally, we have three basic types of certs (\"user\", \"svc\", and \"host\") and the idea is to map those to BMC users with the \u003ctype\u003e being used as prefix to eliminate  collisions if we have a service and a user and service with the same name, e.g:\n\n  \"user:zeus/dev123.facebook.com\" -\u003e \"user_zeus\"\n  \"svc:zeus\" -\u003e \"svc_zeus\"",
      "parentUuid": "b7a5f3ca_6a63a638",
      "range": {
        "startLine": 40,
        "startChar": 42,
        "endLine": 40,
        "endChar": 57
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b5d0f54_a1a9da0b",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "\u003e Internally, we have three basic types of certs (\"user\", \"svc\", and \"host\") and the idea is to map those to BMC users with the \u003ctype\u003e being used as prefix to eliminate  collisions if we have a service and a user and service with the same name, e.g:\n\nright, so the core of the problem here is that on OpenBMC (and linux in general) \"name\" isn\u0027t used to differentiate service vs user.  OpenBMC has no sense of a service login at this point (well, it kinda does, but I\u0027m assuming your service isn\u0027t the same as OpenBMCs definition of service), only the idea of a \"user\" so just collapsing it down to name means that things like IPMI can now break this code, by creating a user called \"foo\" instead of \"user_foo\"\n\nAs far as this patchset goes, this is the thing that I\u0027d like to see ironed out at OpenBMC/dbus level.\n\nas far as a bmc is concerned, what is a \"service\" and is it any different than a user?  In this code, they\u0027re treated essentially the same.\n\n\u003e \n\u003e   \"user:zeus/dev123.facebook.com\" -\u003e \"user_zeus\"\n\u003e   \"svc:zeus\" -\u003e \"svc_zeus\"",
      "parentUuid": "eced6539_e4f15015",
      "range": {
        "startLine": 40,
        "startChar": 42,
        "endLine": 40,
        "endChar": 57
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef6a7a7d_1e11a133",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-11-01T13:52:53Z",
      "side": 1,
      "message": "\u003e In this code, they\u0027re treated essentially the same.\n\nThat\u0027s the intention, the idea is to leverage a BMC user as a natural way to map an external identity (a person, a service, or a host) to a set of permissions.\n\nI agree the term \"service\" is a bit confusing here. At Meta, that\u0027s generally understood as a containerised cloud service (that has a `svc:\u003cservice_name\u003e` identity/cert that\u0027s used to interact with other services), and unlike e.g. a linux \"service user\" to set permissions to daemon processes (though with the same intent of restricting permissions to a \"service\").",
      "parentUuid": "8b5d0f54_a1a9da0b",
      "range": {
        "startLine": 40,
        "startChar": 42,
        "endLine": 40,
        "endChar": 57
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc6f7eb6_9db22389",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-11-30T18:06:51Z",
      "side": 1,
      "message": "\u003e \u003e In this code, they\u0027re treated essentially the same.\n\u003e \n\u003e That\u0027s the intention, the idea is to leverage a BMC user as a natural way to map an external identity (a person, a service, or a host) to a set of permissions.\n\nRight.... but in this case you\u0027re not mapping it to a set of permissions, you\u0027re mapping it to an /etc/shadow user.  \n\n\u003e \n\u003e I agree the term \"service\" is a bit confusing here. At Meta, that\u0027s generally understood as a containerised cloud service (that has a `svc:\u003cservice_name\u003e` identity/cert that\u0027s used to interact with other services), and unlike e.g. a linux \"service user\" to set permissions to daemon processes (though with the same intent of restricting permissions to a \"service\").\n\nyep, I understood what a service was, I was mostly remarking that on the BMC there is no concept of a service.  As a concrete example, should we be naming service users service_foo instead of svc_foo?  I don\u0027t think there\u0027s anything that would say one way or another.\n\nMy worry is that if we set this precedent from within bmcweb without a discussion with phosphor-user-manager maintainers, we\u0027ll have inadvertently started storing user meta data in the username itself, which we should understand the consequences of before we do it.",
      "parentUuid": "ef6a7a7d_1e11a133",
      "range": {
        "startLine": 40,
        "startChar": 42,
        "endLine": 40,
        "endChar": 57
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e80d8bfa_dbd1f85b",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-12-05T18:28:21Z",
      "side": 1,
      "message": "\u003e My worry is that if we set this precedent from within bmcweb without a discussion with phosphor-user-manager maintainers\n\nWhat\u0027d be a good way to reach out to them?\n\nIn principle, my reasoning was that if an org decides on using BMC users as an abstraction, potential conflicts with BMC\u0027s user naming rules would come with the territory and the risk would be on us (Meta) to adapt/resolve any issues that arise from this (I can add comments to make it clearer if it helps)\n\nFor example, without this change, I imagine there\u0027d be a similar risk if we were able to produce client subject CNs using the same convention (eg. client certs with `Subject CN \u003d \"svc_service_name\"`).",
      "parentUuid": "fc6f7eb6_9db22389",
      "range": {
        "startLine": 40,
        "startChar": 42,
        "endLine": 40,
        "endChar": 57
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3e68ca7_a4b60375",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-05T18:46:40Z",
      "side": 1,
      "message": "\u003e \u003e My worry is that if we set this precedent from within bmcweb without a discussion with phosphor-user-manager maintainers\n\u003e \n\u003e What\u0027d be a good way to reach out to them?\n\nthe normal project communication paths.  The mailing list, discord, or opening a documentation review.\n\n\u003e \n\u003e In principle, my reasoning was that if an org decides on using BMC users as an abstraction, potential conflicts with BMC\u0027s user naming rules would come with the territory and the risk would be on us (Meta) to adapt/resolve any issues that arise from this (I can add comments to make it clearer if it helps)\n\u003e \n\u003e For example, without this change, I imagine there\u0027d be a similar risk if we were able to produce client subject CNs using the same convention (eg. client certs with `Subject CN \u003d \"svc_service_name\"`).\n\nI\u0027m ignoring the above, because the discussion needs to be in a forum where the right people can respond.  A bmcweb code review isn\u0027t the right place to have this discussion.",
      "parentUuid": "e80d8bfa_dbd1f85b",
      "range": {
        "startLine": 40,
        "startChar": 42,
        "endLine": 40,
        "endChar": 57
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a31fb254_94a72bb5",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-12-05T18:54:03Z",
      "side": 1,
      "message": "Does this matter if we\u0027re not planning to use phosphor-user-manager to manage these users?  I don\u0027t think we can possibly add all of our services and users into phosphor-user-manager directly.",
      "parentUuid": "c3e68ca7_a4b60375",
      "range": {
        "startLine": 40,
        "startChar": 42,
        "endLine": 40,
        "endChar": 57
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcc76efc_37613036",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-05T19:05:53Z",
      "side": 1,
      "message": "Currently the existing mTLS+Redfish code is implemented against pam and phosphor-user-manager, if you guys plan on making phosphor-user-manager optional, that\u0027s a much bigger discussion that again, I don\u0027t really think should happen in a bmcweb code review, and ideally would have at least a rough sketch of how it\u0027s intended to work before we start merging patches that break interface boundaries.  (I dislike the design process, so I don\u0027t want to make you go through that level of scrutiny).\n\nI would ask questions like how you intend to make AccountService (which isn\u0027t optional in the redfish spec) work without a Phosphor-user-manager backend, and other things that seem important.\n\nWith that said, if that\u0027s the case that you intend to follow this up with more implementation and discussion, but you don\u0027t want to do it now, what I would say is to refactor the code to only parse out user type, and post them the existing PUM way without the namespace (which should get a majority of the code merged), and we can follow up with service/host once you guys have sketched out how to make bmcweb work without a user backend.  Seem like an ok path?",
      "parentUuid": "a31fb254_94a72bb5",
      "range": {
        "startLine": 40,
        "startChar": 42,
        "endLine": 40,
        "endChar": 57
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37928848_a29b747b",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "nit, probably want warning here or error here.  If the intermediate is signing bad requests, something has gone very... very wrong.",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 51,
        "endChar": 24
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36fea8b6_965a3bed",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-11-01T13:52:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "37928848_a29b747b",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 51,
        "endChar": 24
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9240d565_b902283b",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "Can we avoid using an in-out parameter here?  The input and the output represent different things.  Putting them in one variable is confusing.",
      "range": {
        "startLine": 55,
        "startChar": 4,
        "endLine": 55,
        "endChar": 11
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a1e4b6d_155b544a",
        "filename": "http/mutual_tls_meta.hpp",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-11-01T13:52:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9240d565_b902283b",
      "range": {
        "startLine": 55,
        "startChar": 4,
        "endLine": 55,
        "endChar": 11
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7b48228_fccc878a",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "Lets make this option anem a less company specific enum, because I suspect others are going to have additional options, and I know things like spifee exist that might come up in the future.  something like:\n\ntls-username-parsing-mode: {CommonName, Meta, Spiffe, ....}",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 104
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e787a389_f6b91114",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-10-31T21:49:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a7b48228_fccc878a",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 104
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f77c76f3_7ef03475",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:58:38Z",
      "side": 1,
      "message": "s/anem/enum/g",
      "parentUuid": "e787a389_f6b91114",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 104
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6d37b97_6d434f64",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-11-30T03:25:49Z",
      "side": 1,
      "message": "Done, added as `-Dmutual-tls-common-name-parsing\u003d\u0027meta\u0027` option",
      "parentUuid": "f77c76f3_7ef03475",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 104
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c08b030_eb5f3ca6",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 450,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-31T21:16:38Z",
      "side": 1,
      "message": "We intentionally run all unit tests with all options enabled.   Unit tests by definition shouldn\u0027t care what the config options are, unless they effect the actual output, in which case they should only be switching between the two behaviors in tests.",
      "range": {
        "startLine": 448,
        "startChar": 0,
        "endLine": 450,
        "endChar": 5
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d17fd7fb_a3683488",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 450,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2023-11-01T13:52:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1c08b030_eb5f3ca6",
      "range": {
        "startLine": 448,
        "startChar": 0,
        "endLine": 450,
        "endChar": 5
      },
      "revId": "ee072fdc75c60ad95ee078ed781921506f5a3f3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "84437f94_7a2836ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T17:04:50Z",
      "side": 1,
      "message": "Most of the comments seem to be about needing null checks, which, it\u0027s not clear how to add in all cases, because that would introduce a failure path that\u0027s not possible, but would need to be modeled in all the APIs.\n\nWhich pattern do you think is better, pointers, or visit?",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a80c7414_5eda0bf0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-09T17:22:05Z",
      "side": 1,
      "message": "Please also review the prior patch: https://gerrit.openbmc.org/c/openbmc/bmcweb/+/65645",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6c06bb2_02a8c449",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-08T16:53:32Z",
      "side": 1,
      "message": "why no null check here? \nand what is the strategy if both are null?\n\n1)can we assume that at least one is true? will clang-tidy pass ?\n2) can  we create one new string_response ?",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62bc30a1_206c9e25",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T17:04:50Z",
      "side": 1,
      "message": "\u003e why no null check here? \n\nBecause it\u0027s not possible.\n\n\u003e and what is the strategy if both are null?\n\nWhen/how could that happen?\n\n\u003e \n\u003e 1)can we assume that at least one is true? will clang-tidy pass ?\n\nThe build passes, so yes, tidy passes.\n\n\u003e 2) can  we create one new string_response ?\n\nI don\u0027t understand what you\u0027re suggesting.",
      "parentUuid": "f6c06bb2_02a8c449",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23b71acb_73533066",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T04:18:31Z",
      "side": 1,
      "message": "When/how could that happen?\nThe fundamental problem here is ,technically a variant can hold non of the alternatives. A default constructed variant could be  assigned to the string response variable, if we are not careful. \n\nYou seems to have issue in using a throwing function ,even though we know that it will never throw. But you are happy to ignore the needed null checks if we use get_if. \nIn a way the argument is \"i am not okay with a terminate due to exception, but ok with a crash due to null pointer access\".  \nIf we are not giving a complete solution , then get_if or boost:variant will not do anything better. \n\nI added the null check comment everywhere just to put those places in your notice",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa7f4c99_ae8ed8ce",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T04:18:31Z",
      "side": 1,
      "message": "I don\u0027t understand what you\u0027re suggesting.\n I was asking if we can create a new string response in case of non of the alternatives are held by variant.",
      "parentUuid": "62bc30a1_206c9e25",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "031d6923_0ffd86f0",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-09T16:17:10Z",
      "side": 1,
      "message": "\u003e When/how could that happen?\n\u003e The fundamental problem here is ,technically a variant can hold non of the alternatives.\n\nvariant2 cannot.  it will always hold one of the alteratives.\n\n\u003e A default constructed variant could be  assigned to the string response variable, if we are not careful. \n\u003e \n\nThe variant default constructs to the first item in the list.  This is true of both std::variant and boost::variant2\n\n\u003e You seems to have issue in using a throwing function ,even though we know that it will never throw. But you are happy to ignore the needed null checks if we use get_if.\n\nWe have tidy checks that have issues with throwing functions.  If a function throws, it will crash all of bmcweb.  Considering everything in the Response object is a handlable error, we can\u0027t really throw exceptions.\n\n\u003e In a way the argument is \"i am not okay with a terminate due to exception, but ok with a crash due to null pointer access\".  \n\nThis is not the argument.  The argument here is that this code iterates all the possible values.  If you prefer, I can move it back to variant::visit, which would require neither exceptions nor pointer dereferences.\n\n\u003e If we are not giving a complete solution , then get_if or boost:variant will not do anything better. \n\u003e \n\u003e I added the null check comment everywhere just to put those places in your notice\n\nYou asked for null checks, but you didnt\u0027 suggest what you wanted to do if that pointer is null.  for things returning a reference, would you like us to convert back to string_resposne?  If so, that\u0027s doable.",
      "parentUuid": "23b71acb_73533066",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "717996e6_e36c8f18",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-09T16:17:10Z",
      "side": 1,
      "message": "In variant2 there\u0027s no possibility for none of the alternatives to be held by the variant.  It is one or the other, there is no valueless_by_exception.",
      "parentUuid": "fa7f4c99_ae8ed8ce",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18e963fd_e74163be",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 60,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-08T16:53:32Z",
      "side": 1,
      "message": "why no null check here?",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c34ee1a_8bce3943",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 60,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T17:04:50Z",
      "side": 1,
      "message": "Same as above.  Not possible.\n\nThe only alternative would be visit, which we could do, but I wanted to look at the pointer option.",
      "parentUuid": "18e963fd_e74163be",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "922c5e7e_4cf875f1",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 106,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T16:51:46Z",
      "side": 1,
      "message": "When changed to std::variant, this operation seems to throw, which isn\u0027t great.",
      "range": {
        "startLine": 106,
        "startChar": 28,
        "endLine": 106,
        "endChar": 29
      },
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cef2952c_60690b5a",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 106,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T04:18:31Z",
      "side": 1,
      "message": "True that is the reason I invented safemove wrapper. I don\u0027t know how we can avoid it. The root cause seems to be from file body move. We should wrap this code around try-catch irrespective of what move assignment we use(individual alternatives move  or variant move)",
      "parentUuid": "922c5e7e_4cf875f1",
      "range": {
        "startLine": 106,
        "startChar": 28,
        "endLine": 106,
        "endChar": 29
      },
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf3ebcec_3f2c7994",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 106,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-09T16:17:10Z",
      "side": 1,
      "message": "\u003e True that is the reason I invented safemove wrapper. I don\u0027t know how we can avoid it.\n\nI would much rather we rely on variant2, which is documented, than a method we created ourselves.\n\n\u003e The root cause seems to be from file body move. We should wrap this code around try-catch irrespective of what move assignment we use(individual alternatives move  or variant move)\n\nAs-written, this doesn\u0027t throw on a move.  Why would we add a try-catch?",
      "parentUuid": "cef2952c_60690b5a",
      "range": {
        "startLine": 106,
        "startChar": 28,
        "endLine": 106,
        "endChar": 29
      },
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0759f76_662c8902",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 145,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-08T16:53:32Z",
      "side": 1,
      "message": "it could be neither, valueless by exception is not possible in boost variant?",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e175670_48b9835b",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 145,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T17:04:50Z",
      "side": 1,
      "message": "\u003e valueless by exception is not possible in boost variant\n\nCorrect.  This is an important difference in the design of variant2.",
      "parentUuid": "b0759f76_662c8902",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac70c1f9_85bb058b",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 145,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T04:18:31Z",
      "side": 1,
      "message": "But how does boost variant handle non of alternatives case? Is there any compile time check to avoid such scenrio. Like disabling of default constructor?",
      "parentUuid": "4e175670_48b9835b",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "456197fd_02d85a20",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 145,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-09T16:17:10Z",
      "side": 1,
      "message": "\u003e But how does boost variant handle non of alternatives case?\n\nNon alternatives is not possible.  It will always be one of the template params.\n\n\u003e Is there any compile time check to avoid such scenrio. Like disabling of default constructor?\n\nI\u0027m not sure what you\u0027re asking, but I\u0027m guessing that it\u0027s answered by the variant2 documentation:\nhttps://www.boost.org/doc/libs/1_80_0/libs/variant2/doc/html/variant2.html",
      "parentUuid": "ac70c1f9_85bb058b",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e878f1b7_5eead450",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 177,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T06:44:18Z",
      "side": 1,
      "message": "Don\u0027t you think that this will increase size of change-set? This is a backward compatibility issue in the usage of body(). Some one might have used the pattern body() +\u003d\"****\" in their code. \nNow we must add another \"if\" check everywhere body() has been used. \nMy Suggestion would be to use the intent of the user here. \nIf he calls body() then he wanted to use string body as response. Then it is better to move to string-body if the current alternative is not that. So create string-body and return the reference to it.",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d65e8e80_07e9a668",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 177,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-09T16:17:10Z",
      "side": 1,
      "message": "\u003e Don\u0027t you think that this will increase size of change-set?\n\nYes, but there\u0027s not that many calls to body().\n\n\u003e This is a backward compatibility issue in the usage of body().\n\u003e Some one might have used the pattern body() +\u003d\"****\" in their code. \n\nI\u0027m assuming you mean downstream code?  That\u0027s not something we optimize for.  People can write whatever they want, including making this same change.  If we have to optimize for everyones downstream API changes, we can never change any internal method call, which isn\u0027t really doable.\n\n\u003e Now we must add another \"if\" check everywhere body() has been used. \n\nCorrect, because now Response might not be of type string.\n\n\u003e My Suggestion would be to use the intent of the user here. \n\u003e If he calls body() then he wanted to use string body as response. Then it is better to move to string-body if the current alternative is not that. So create string-body and return the reference to it.\n\nThere are cases where that\u0027s not true, but I can give it a shot.",
      "parentUuid": "e878f1b7_5eead450",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb0d497a_0c121abe",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 218,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-08T16:53:32Z",
      "side": 1,
      "message": "why no null check here?",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad2d3519_84a314ba",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 218,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T17:04:50Z",
      "side": 1,
      "message": "Same as above.",
      "parentUuid": "eb0d497a_0c121abe",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25348046_29d2901d",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 386,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-08T16:53:32Z",
      "side": 1,
      "message": "what if null",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a102996_da1f0bbe",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 386,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T17:04:50Z",
      "side": 1,
      "message": "Same as above.",
      "parentUuid": "25348046_29d2901d",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0bcad0f_cf314f55",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 401,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T06:44:18Z",
      "side": 1,
      "message": "do we really need to do this if the current alternative is filebody response?\n\ntechnically we can call a single move at the emplace argument itself right? I meant that when I said no need for temp object. \nBut not sure if moving just the sliced part(base) of an object like this is a good idea or not.",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffd68182_ea42fb97",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 401,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-09T16:17:10Z",
      "side": 1,
      "message": "\u003e do we really need to do this if the current alternative is filebody response?\n\nin the case where someone calls?\n\nres.openfile();\nres.openfile();\n\nWhy would someone do that?\n\n\u003e \n\u003e technically we can call a single move at the emplace argument itself right?\n\nWe can\u0027t, because you will then be reading values from a moved object.\n\n\u003e I meant that when I said no need for temp object. \n\u003e But not sure if moving just the sliced part(base) of an object like this is a good idea or not.\n\nCan you give me the exact code you think we should use here that you think handles dangling reference problems?  I\u0027m a little confused at your response.",
      "parentUuid": "a0bcad0f_cf314f55",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13afbc43_5c45beac",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 403,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T06:44:18Z",
      "side": 1,
      "message": "Did you test if the emplace forwarding argument to response constructor properly?\nyou can create a test case where add some header to stringbody resopnse then call\nopenFile then check the headers are still present.",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f53469c_0d741fbc",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 403,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-09T16:17:10Z",
      "side": 1,
      "message": "\u003e Did you test if the emplace forwarding argument to response constructor properly?\n\u003e you can create a test case where add some header to stringbody resopnse then call\n\u003e openFile then check the headers are still present.\n\nACK.",
      "parentUuid": "13afbc43_5c45beac",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
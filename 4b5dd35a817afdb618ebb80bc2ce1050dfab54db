{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "84437f94_7a2836ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T17:04:50Z",
      "side": 1,
      "message": "Most of the comments seem to be about needing null checks, which, it\u0027s not clear how to add in all cases, because that would introduce a failure path that\u0027s not possible, but would need to be modeled in all the APIs.\n\nWhich pattern do you think is better, pointers, or visit?",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6c06bb2_02a8c449",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-08T16:53:32Z",
      "side": 1,
      "message": "why no null check here? \nand what is the strategy if both are null?\n\n1)can we assume that at least one is true? will clang-tidy pass ?\n2) can  we create one new string_response ?",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62bc30a1_206c9e25",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T17:04:50Z",
      "side": 1,
      "message": "\u003e why no null check here? \n\nBecause it\u0027s not possible.\n\n\u003e and what is the strategy if both are null?\n\nWhen/how could that happen?\n\n\u003e \n\u003e 1)can we assume that at least one is true? will clang-tidy pass ?\n\nThe build passes, so yes, tidy passes.\n\n\u003e 2) can  we create one new string_response ?\n\nI don\u0027t understand what you\u0027re suggesting.",
      "parentUuid": "f6c06bb2_02a8c449",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23b71acb_73533066",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T04:18:31Z",
      "side": 1,
      "message": "When/how could that happen?\nThe fundamental problem here is ,technically a variant can hold non of the alternatives. A default constructed variant could be  assigned to the string response variable, if we are not careful. \n\nYou seems to have issue in using a throwing function ,even though we know that it will never throw. But you are happy to ignore the needed null checks if we use get_if. \nIn a way the argument is \"i am not okay with a terminate due to exception, but ok with a crash due to null pointer access\".  \nIf we are not giving a complete solution , then get_if or boost:variant will not do anything better. \n\nI added the null check comment everywhere just to put those places in your notice",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa7f4c99_ae8ed8ce",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 46,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T04:18:31Z",
      "side": 1,
      "message": "I don\u0027t understand what you\u0027re suggesting.\n I was asking if we can create a new string response in case of non of the alternatives are held by variant.",
      "parentUuid": "62bc30a1_206c9e25",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18e963fd_e74163be",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 60,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-08T16:53:32Z",
      "side": 1,
      "message": "why no null check here?",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c34ee1a_8bce3943",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 60,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T17:04:50Z",
      "side": 1,
      "message": "Same as above.  Not possible.\n\nThe only alternative would be visit, which we could do, but I wanted to look at the pointer option.",
      "parentUuid": "18e963fd_e74163be",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "922c5e7e_4cf875f1",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 106,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T16:51:46Z",
      "side": 1,
      "message": "When changed to std::variant, this operation seems to throw, which isn\u0027t great.",
      "range": {
        "startLine": 106,
        "startChar": 28,
        "endLine": 106,
        "endChar": 29
      },
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cef2952c_60690b5a",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 106,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T04:18:31Z",
      "side": 1,
      "message": "True that is the reason I invented safemove wrapper. I don\u0027t know how we can avoid it. The root cause seems to be from file body move. We should wrap this code around try-catch irrespective of what move assignment we use(individual alternatives move  or variant move)",
      "parentUuid": "922c5e7e_4cf875f1",
      "range": {
        "startLine": 106,
        "startChar": 28,
        "endLine": 106,
        "endChar": 29
      },
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0759f76_662c8902",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 145,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-08T16:53:32Z",
      "side": 1,
      "message": "it could be neither, valueless by exception is not possible in boost variant?",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e175670_48b9835b",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 145,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T17:04:50Z",
      "side": 1,
      "message": "\u003e valueless by exception is not possible in boost variant\n\nCorrect.  This is an important difference in the design of variant2.",
      "parentUuid": "b0759f76_662c8902",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac70c1f9_85bb058b",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 145,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-09T04:18:31Z",
      "side": 1,
      "message": "But how does boost variant handle non of alternatives case? Is there any compile time check to avoid such scenrio. Like disabling of default constructor?",
      "parentUuid": "4e175670_48b9835b",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb0d497a_0c121abe",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 218,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-08T16:53:32Z",
      "side": 1,
      "message": "why no null check here?",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad2d3519_84a314ba",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 218,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T17:04:50Z",
      "side": 1,
      "message": "Same as above.",
      "parentUuid": "eb0d497a_0c121abe",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25348046_29d2901d",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 386,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-08-08T16:53:32Z",
      "side": 1,
      "message": "what if null",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a102996_da1f0bbe",
        "filename": "http/http_response.hpp",
        "patchSetId": 14
      },
      "lineNbr": 386,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-08T17:04:50Z",
      "side": 1,
      "message": "Same as above.",
      "parentUuid": "25348046_29d2901d",
      "revId": "4b5dd35a817afdb618ebb80bc2ce1050dfab54db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
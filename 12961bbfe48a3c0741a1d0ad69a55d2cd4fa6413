{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7813d109_9c05c08a",
        "filename": "README.md",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-21T19:03:10Z",
      "side": 1,
      "message": "Forgot to check in a file?  I don\u0027t see any handling for TemporaryFileSystem",
      "range": {
        "startLine": 76,
        "startChar": 17,
        "endLine": 76,
        "endChar": 36
      },
      "revId": "12961bbfe48a3c0741a1d0ad69a55d2cd4fa6413",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ab4d91e_f9a629be",
        "filename": "README.md",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-07-21T19:27:29Z",
      "side": 1,
      "message": "I\u0027ve added it in the service file",
      "parentUuid": "7813d109_9c05c08a",
      "range": {
        "startLine": 76,
        "startChar": 17,
        "endLine": 76,
        "endChar": 36
      },
      "revId": "12961bbfe48a3c0741a1d0ad69a55d2cd4fa6413",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94ef374a_6d3556a8",
        "filename": "include/duplicatable_file_handle.hpp",
        "patchSetId": 3
      },
      "lineNbr": 112,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-21T19:03:10Z",
      "side": 1,
      "message": "Like I said on the previous patch, lets add this when moveToPath when and if it\u0027s required.  It\u0027s still not clear to me what use case requires doing a post-creation copy to a different path.  I understand you have emmc use cases, but I suspect there\u0027s simpler designs that involve linking the bmcweb temporary file storage to the appropriate place in the first place. (using systemd TemporaryDirectory)",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 112,
        "endChar": 5
      },
      "revId": "12961bbfe48a3c0741a1d0ad69a55d2cd4fa6413",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12f93716_4a15ff9c",
        "filename": "include/duplicatable_file_handle.hpp",
        "patchSetId": 3
      },
      "lineNbr": 112,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-07-21T19:27:29Z",
      "side": 1,
      "message": "But there are some pre-checks which needs to be performed in bmcweb before pldm or any other app starts update.\nother apps ack on the inotify event which is created when the file is copied to /tmp/images",
      "parentUuid": "94ef374a_6d3556a8",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 112,
        "endChar": 5
      },
      "revId": "12961bbfe48a3c0741a1d0ad69a55d2cd4fa6413",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e85c5c0_3ae8fe11",
        "filename": "include/duplicatable_file_handle.hpp",
        "patchSetId": 3
      },
      "lineNbr": 112,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-22T17:44:51Z",
      "side": 1,
      "message": "/tmp/images is on the same device, it doesn\u0027t require std::filesystem::copy_file.",
      "parentUuid": "12f93716_4a15ff9c",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 112,
        "endChar": 5
      },
      "revId": "12961bbfe48a3c0741a1d0ad69a55d2cd4fa6413",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cedfa896_92e37a49",
        "filename": "include/duplicatable_file_handle.hpp",
        "patchSetId": 3
      },
      "lineNbr": 112,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-22T18:18:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e85c5c0_3ae8fe11",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 112,
        "endChar": 5
      },
      "revId": "12961bbfe48a3c0741a1d0ad69a55d2cd4fa6413",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba16690b_0b059459",
        "filename": "include/duplicatable_file_handle.hpp",
        "patchSetId": 3
      },
      "lineNbr": 112,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-07-22T18:24:41Z",
      "side": 1,
      "message": "This method will be called for the inotify update flow.\n\nLet me take an example of pldm update, In the current PLDM update workflow:\n1. BMCWeb performs preliminary validation (checking firmwareUpdateInProgress status, verifying target devices, etc.)\n2. Upon successful validation, BMCWeb writes the firmware image from the HTTP request body to /tmp/images\n3. PLDM\u0027s inotify watch on /tmp/images detects the new file via IN_CLOSE_WRITE event\n4. This callback method is invoked to process the firmware package\n5. PLDM creates a software object that BMCWeb uses to monitor update progress\n\nWith the proposed memory optimization changes, we need to preserve this same workflow.\nHowever, since /tmp/images and /tmp/bmcweb reside on different filesystems, we cannot use filesystem::rename() for an efficient move operation. Using copy_file() would be inefficient as it performs both copy and delete operations, effectively requiring double the package size in available memory. This is why I suggested implementing a meson build option to configure the path.",
      "parentUuid": "3e85c5c0_3ae8fe11",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 112,
        "endChar": 5
      },
      "revId": "12961bbfe48a3c0741a1d0ad69a55d2cd4fa6413",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8084f83_7327a1a4",
        "filename": "include/duplicatable_file_handle.hpp",
        "patchSetId": 3
      },
      "lineNbr": 112,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-22T19:12:35Z",
      "side": 1,
      "message": "That\u0027s fine, the problem I have is with std::filesystem::copy_file.  These are directories on the same mount, that code will never execute.",
      "parentUuid": "ba16690b_0b059459",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 112,
        "endChar": 5
      },
      "revId": "12961bbfe48a3c0741a1d0ad69a55d2cd4fa6413",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed564193_a2a3254f",
        "filename": "include/duplicatable_file_handle.hpp",
        "patchSetId": 3
      },
      "lineNbr": 116,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-21T19:03:10Z",
      "side": 1,
      "message": "Why are we duping the FD here?  This could lead to leaked descriptors.  The name \"moveToFd\" implies that the element is closed.",
      "range": {
        "startLine": 116,
        "startChar": 17,
        "endLine": 116,
        "endChar": 20
      },
      "revId": "12961bbfe48a3c0741a1d0ad69a55d2cd4fa6413",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4344cdfe_68be1503",
        "filename": "include/duplicatable_file_handle.hpp",
        "patchSetId": 3
      },
      "lineNbr": 116,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-22T18:18:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed564193_a2a3254f",
      "range": {
        "startLine": 116,
        "startChar": 17,
        "endLine": 116,
        "endChar": 20
      },
      "revId": "12961bbfe48a3c0741a1d0ad69a55d2cd4fa6413",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
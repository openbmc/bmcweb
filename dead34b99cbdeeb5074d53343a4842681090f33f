{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bc5cb6a5_f930ea26",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-02-20T17:30:11Z",
      "side": 1,
      "message": "The other BootProgress states are all enum string values which are in plain english. A hex code here seems out of place. \n\n\n\n       \"BootProgressTypes\": {\n            \"enum\": [\n                \"None\",\n                \"PrimaryProcessorInitializationStarted\",\n                \"BusInitializationStarted\",\n                \"MemoryInitializationStarted\",\n                \"SecondaryProcessorInitializationStarted\",\n                \"PCIResourceConfigStarted\",\n                \"SystemHardwareInitializationComplete\",\n                \"SetupEntered\",\n                \"OSBootStarted\",\n                \"OSRunning\",\n                \"OEM\"\n            ],\n            \"enumDescriptions\": {\n                \"BusInitializationStarted\": \"The system has started initializing the buses.\",\n                \"MemoryInitializationStarted\": \"The system has started initializing the memory.\",\n                \"None\": \"The system is not booting.\",\n                \"OEM\": \"A boot progress state in an OEM-defined format.\",\n                \"OSBootStarted\": \"The operating system has started booting.\",\n                \"OSRunning\": \"The operating system is running.\",\n                \"PCIResourceConfigStarted\": \"The system has started initializing the PCI resources.\",\n                \"PrimaryProcessorInitializationStarted\": \"The system has started initializing the primary processor.\",\n                \"SecondaryProcessorInitializationStarted\": \"The system has started initializing the remaining processors.\",\n                \"SetupEntered\": \"The system has entered the setup utility.\",\n                \"SystemHardwareInitializationComplete\": \"The system has completed initializing all hardware.\"\n            },",
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b3dc84d_cd41bbd3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1000992
      },
      "writtenOn": "2023-02-21T08:22:16Z",
      "side": 1,
      "message": "Hi Gunnar,\n\nThe BootProgress\u0027s OemLastState contains the 9-byte hex values of the BootProgress code report as an example in SBMR spec DEN0069D_SBMR_2.0.pdf document section F.2.2.\n\"BootProgress\": {\n        \"LastState\": \"OEM\",\n        \"LastStateTime\": \"2022-11-14T06:12:09.936477+00:00\",\n        \"OemLastState\": \"0x010000000010010000\"\n    }\nPlease check the DEN0069D_SBMR_2.0.pdf document section F.2.2.\n\nF.2.2 Example boot progress codes (Redfish)\n\nDMTF Redfish Schema Supplement [7] [47] version 2020.3 and newer introduced a method to read the last Boot Progress Code using the ComputerSystem.BootProgress Redfish object. Using this feature, the user can read the last Boot Progress Code that was reported by system firmware to the BMC. The DMTF schema defines a handful of standard boot progress codes and a method for reporting implementation-specific OEM defined codes.\nSBMR recommends that Level M2.1-based server systems report the Boot Progress Codes through Redfish out-of-band and in-band interfaces. When possible, implementations should use the DMTF-defined standard codes. If the Boot Progress Code does not map to one of the DMTF defined codes, SBMR recommends reporting the codes as defined in Section F.2. Achieve this by setting the Redfish BootProgress.LastState property to OEM and setting the BootProgress.OEMLastState property to the 9-byte hex values defined in Section F.2.\n\nHere is an example of the Redfish JSON mockup for Boot Progress property and how it maps to the UEFI and IPMI definitions:\n\nExample 1 - Host processor power-on initialization\n(Refer to IPMI Example 1 in Section F.2.1)\n\nUEFI PI Status Code Definition:\nEFI_COMPUTING_UNIT_HOST_PROCESSOR | EFI_CU_HP_PC_POWER_ON_INIT, Instance \u003d 0\n\nIPMI command to send the progress code to the BMC:\n0x2C 0x02 0xAE 0x01 0x00 0x00 0x00 0x00 0x10 0x01 0x00 0x00\n\nRedfish JSON mockup when reading the Progress Code from the Redfish interface:\n\"BootProgress\": {\n        \"LastState\": \"OEM\",\n        \"OemLastState\": \"0x010000000010010000\",\n        \"LastStateTime\": \"2020-03-13T04:14:13+06:00\"\n    }",
      "parentUuid": "bc5cb6a5_f930ea26",
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77fdd6ab_b523a650",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1000940
      },
      "writtenOn": "2023-02-21T08:38:28Z",
      "side": 1,
      "message": "Hi Gunnar,\nLet check BootProgress structure in ComputerSystem schema https://redfish.dmtf.org/schemas/v1/ComputerSystem.v1_20_0.json. We have 2 different properties:\n- LastState: contain values as you listed.\n- OemLastState: The OEM-specific last state. This is a free form string.\n\nIn this commit, Hieu supports setting OemLastState from PostCode when LastState\u003dOEM. Refer to https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/57842 for discussion before.\n\nHieu,\n9-bytes are just for PostCodes from SBMR definition. Other platforms might use different PostCodes. Your commit supports getting PostCodes data to set to OemLastState for all values, not just 9 bytes",
      "parentUuid": "0b3dc84d_cd41bbd3",
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ceb678c9_9da287c6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000992
      },
      "writtenOn": "2023-02-19T14:02:05Z",
      "side": 1,
      "message": "Hi Gunnar,\n\nI have update it, please help review.",
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4f92b32_3363cc46",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-04-06T19:21:40Z",
      "side": 1,
      "message": "unaddressed comments",
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef8738ea_cf4bc8f8",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 8
      },
      "lineNbr": 912,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-02-20T17:30:11Z",
      "side": 1,
      "message": "Don\u0027t we already have this same call on line 844?",
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56b515f5_d8b2f873",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 8
      },
      "lineNbr": 912,
      "author": {
        "id": 1000992
      },
      "writtenOn": "2023-02-21T08:22:16Z",
      "side": 1,
      "message": "The OemLastState shall only be present if LastState is OEM.\nPlease check the Redfish Schema Supplement DSP0268_2021.2.pdf (6.23 ComputerSystem 1.16.0, BootProgress (v1.13+)).\nSo the purpose of this code is just to show the OemLastState if LastState is OEM.",
      "parentUuid": "ef8738ea_cf4bc8f8",
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5421a7f5_153c0db5",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 8
      },
      "lineNbr": 912,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-04-06T19:21:40Z",
      "side": 1,
      "message": "Why can\u0027t this same call on line 844, have if ( \u003d\u003d \"OEM\") like this code does?",
      "parentUuid": "56b515f5_d8b2f873",
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02a0f6b6_6484abf3",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 8
      },
      "lineNbr": 913,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-04-06T19:21:40Z",
      "side": 1,
      "message": "pass by reference please",
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f19d07f_d9d5b384",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 8
      },
      "lineNbr": 914,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-03-14T00:55:15Z",
      "side": 1,
      "message": "Per the developing guide, please don\u0027t write lambdas that are more than a few lines of code.",
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cb3f573_c94a539e",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 8
      },
      "lineNbr": 921,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-03-14T00:55:15Z",
      "side": 1,
      "message": "?.  This doesn\u0027t seem right.",
      "range": {
        "startLine": 921,
        "startChar": 0,
        "endLine": 921,
        "endChar": 65
      },
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5337dd48_552338ae",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 8
      },
      "lineNbr": 932,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-03-14T00:55:15Z",
      "side": 1,
      "message": "especially don\u0027t declare two tiers of lambdas.",
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cda35c5f_ed6d0c91",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 8
      },
      "lineNbr": 938,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-03-14T00:55:15Z",
      "side": 1,
      "message": "please use the existing helper functions for this.  THey will remove most of your code below.",
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75fddfed_cc65baf1",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 8
      },
      "lineNbr": 946,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-03-14T00:55:15Z",
      "side": 1,
      "message": "You\u0027re pushing the \"raw\" value as hex, but is that correct for all systems?  There are a number of systems for which this is an ascii string, and hex wouldn\u0027t make sense.  I suspect we need another interface for this?",
      "range": {
        "startLine": 946,
        "startChar": 35,
        "endLine": 946,
        "endChar": 44
      },
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cc07775_268e4152",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 8
      },
      "lineNbr": 978,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-02-20T17:30:11Z",
      "side": 1,
      "message": "I don\u0027t think this business logic should be in bmcweb. \nI think bmcweb should get the value from D-Bus.",
      "range": {
        "startLine": 938,
        "startChar": 0,
        "endLine": 978,
        "endChar": 17
      },
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f70411c1_e0e1dac8",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 8
      },
      "lineNbr": 978,
      "author": {
        "id": 1000992
      },
      "writtenOn": "2023-02-21T08:22:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6cc07775_268e4152",
      "range": {
        "startLine": 938,
        "startChar": 0,
        "endLine": 978,
        "endChar": 17
      },
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa949cfe_c19b5ef6",
        "filename": "redfish-core/lib/systems.hpp",
        "patchSetId": 8
      },
      "lineNbr": 978,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-03-14T00:55:15Z",
      "side": 1,
      "message": "+1.  This comment does not look done.  There is still significant business logic for determining and parsing an OemLastState parameter in bmcweb.",
      "parentUuid": "f70411c1_e0e1dac8",
      "range": {
        "startLine": 938,
        "startChar": 0,
        "endLine": 978,
        "endChar": 17
      },
      "revId": "dead34b99cbdeeb5074d53343a4842681090f33f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
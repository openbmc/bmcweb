{
  "comments": [
    {
      "key": {
        "uuid": "d7cd3864_ab020619",
        "filename": "include/multipart_parser.hpp",
        "patchSetId": 51
      },
      "lineNbr": 117,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-12-03T08:53:59Z",
      "side": 1,
      "message": "You can return std::error_code instead of passing it as reference. And use no discard attribute to get compiler warning when result is ignored.\n\nhttps://en.cppreference.com/w/cpp/language/attributes/nodiscard",
      "range": {
        "startLine": 117,
        "startChar": 4,
        "endLine": 117,
        "endChar": 8
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d6707d1_f2043be9",
        "filename": "include/multipart_parser.hpp",
        "patchSetId": 51
      },
      "lineNbr": 117,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-12-03T09:53:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7cd3864_ab020619",
      "range": {
        "startLine": 117,
        "startChar": 4,
        "endLine": 117,
        "endChar": 8
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8a32c23_e045cf65",
        "filename": "include/ut/multipart_test.cpp",
        "patchSetId": 51
      },
      "lineNbr": 68,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-12-03T08:42:30Z",
      "side": 1,
      "message": "nit: This can be extracted to, it\u0027s not important part of test so you can make it class viariable and use TEST_F.",
      "range": {
        "startLine": 68,
        "startChar": 4,
        "endLine": 68,
        "endChar": 71
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe3e9a8e_bd5c7b91",
        "filename": "include/ut/multipart_test.cpp",
        "patchSetId": 51
      },
      "lineNbr": 68,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-12-03T09:53:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b8a32c23_e045cf65",
      "range": {
        "startLine": 68,
        "startChar": 4,
        "endLine": 68,
        "endChar": 71
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e4821ee_2931dfcb",
        "filename": "include/ut/multipart_test.cpp",
        "patchSetId": 51
      },
      "lineNbr": 82,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-12-03T08:42:30Z",
      "side": 1,
      "message": "nit: This can be extracted to, it\u0027s not important part of test so you can make it class viariable and use TEST_F.",
      "range": {
        "startLine": 82,
        "startChar": 4,
        "endLine": 82,
        "endChar": 23
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa2059b0_d70053b4",
        "filename": "include/ut/multipart_test.cpp",
        "patchSetId": 51
      },
      "lineNbr": 82,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-12-03T09:53:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9e4821ee_2931dfcb",
      "range": {
        "startLine": 82,
        "startChar": 4,
        "endLine": 82,
        "endChar": 23
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72433715_feb0147b",
        "filename": "include/ut/multipart_test.cpp",
        "patchSetId": 51
      },
      "lineNbr": 84,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-12-03T08:42:30Z",
      "side": 1,
      "message": "nit: This can be extracted to, it\u0027s not important part of test so you can make it class viariable and use TEST_F.",
      "range": {
        "startLine": 84,
        "startChar": 4,
        "endLine": 84,
        "endChar": 27
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25d57b82_e974153f",
        "filename": "include/ut/multipart_test.cpp",
        "patchSetId": 51
      },
      "lineNbr": 84,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-12-03T09:53:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72433715_feb0147b",
      "range": {
        "startLine": 84,
        "startChar": 4,
        "endLine": 84,
        "endChar": 27
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44a9b998_25470b22",
        "filename": "include/ut/multipart_test.cpp",
        "patchSetId": 51
      },
      "lineNbr": 85,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-12-03T08:42:30Z",
      "side": 1,
      "message": "nit: Does it need to be same ec as the one passed to reqIn? If not make sure they are two different variables. Units tests are also documentation, so someone can assume that it has to be same error_code.",
      "range": {
        "startLine": 85,
        "startChar": 24,
        "endLine": 85,
        "endChar": 26
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29d2a8f8_55c10db7",
        "filename": "include/ut/multipart_test.cpp",
        "patchSetId": 51
      },
      "lineNbr": 85,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-12-03T09:53:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44a9b998_25470b22",
      "range": {
        "startLine": 85,
        "startChar": 24,
        "endLine": 85,
        "endChar": 26
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7900862c_34a79a69",
        "filename": "include/ut/multipart_test.cpp",
        "patchSetId": 51
      },
      "lineNbr": 201,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-12-03T08:42:30Z",
      "side": 1,
      "message": "Did you test all error codes?",
      "range": {
        "startLine": 201,
        "startChar": 56,
        "endLine": 201,
        "endChar": 75
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d28288ff_74a91575",
        "filename": "include/ut/multipart_test.cpp",
        "patchSetId": 51
      },
      "lineNbr": 201,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-12-03T09:53:58Z",
      "side": 1,
      "message": "Yes",
      "parentUuid": "7900862c_34a79a69",
      "range": {
        "startLine": 201,
        "startChar": 56,
        "endLine": 201,
        "endChar": 75
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdc86c0b_a9f47195",
        "filename": "include/ut/multipart_test.cpp",
        "patchSetId": 51
      },
      "lineNbr": 201,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-12-03T09:56:50Z",
      "side": 1,
      "message": "Tesed these error codes:\nERROR_BOUNDARY_FORMAT \u0026 ERROR_BOUNDARY_CR \u0026 ERROR_BOUNDARY_LF \u0026 ERROR_BOUNDARY_DATA \u0026 ERROR_EMPTY_HEADER \u0026 ERROR_HEADER_VALUE \u0026 ERROR_HEADER_ENDING",
      "parentUuid": "d28288ff_74a91575",
      "range": {
        "startLine": 201,
        "startChar": 56,
        "endLine": 201,
        "endChar": 75
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aceb578_83fdf039",
        "filename": "include/ut/multipart_test.cpp",
        "patchSetId": 51
      },
      "lineNbr": 201,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2021-12-03T14:59:59Z",
      "side": 1,
      "message": "There are still 3 enum values that are not tested:\n\n    ERROR_OVERFLOW \u003d 500,\n    ERROR_UNDERFLOW,\n    ERROR_HEADER_NAME",
      "parentUuid": "cdc86c0b_a9f47195",
      "range": {
        "startLine": 201,
        "startChar": 56,
        "endLine": 201,
        "endChar": 75
      },
      "revId": "3b44fe25cea1474b428adf101fd91d781a631050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "2e25ea1a_70afc44e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-21T17:49:50Z",
      "side": 1,
      "message": "Please rebase your patch on top of the patch to add 2020.4 schemas, and review the patch to add the new schemas.",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 9,
        "endChar": 40
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9dffafd_90328fc5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000444
      },
      "writtenOn": "2021-01-25T06:17:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e25ea1a_70afc44e",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 9,
        "endChar": 40
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb9e75bc_37c62b56",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-21T17:52:45Z",
      "side": 1,
      "message": "This significantly changes how pagination works, as most implementations paginate the requests, and rely on the fact that leg entry items are immutable.  Considering that the Resolved field can be changed _after_ the log is created, this messes with pagination.\n\nCan you please talk to this use case, and make recommendations for how the clients that implement pagination and polling should ensure that this parameter is caught.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 65
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29cb50a2_471bd2b3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-01-22T03:43:09Z",
      "side": 1,
      "message": "I know IBM as well other companies use this, why Redfish added.\n\n\u003e how the clients that implement pagination and polling should ensure that this parameter is caught\n\nFilter resolved logEntries out?\n\n\u003e Considering that the Resolved field can be changed _after_ the log is created, this messes with pagination.\n\nHow does it mess with pagination? Are you sorting by created/id? Could also sort by modified if it helps?",
      "parentUuid": "bb9e75bc_37c62b56",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 65
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea980bf8_c32218fa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-22T23:15:55Z",
      "side": 1,
      "message": "\u003e I know IBM as well other companies use this, why Redfish added.\n\u003e \n\u003e \u003e how the clients that implement pagination and polling should ensure that this parameter is caught\n\u003e \n\u003e Filter resolved logEntries out?\n\nCan you describe this better?  Filtering out resolved logEntries doesn\u0027t fix the pagination problem, and arguably makes it worse, because you can actually miss events if they\u0027re resolved faster than your polling interval, unless i\u0027m missing something about your idea.\n\n\u003e \n\u003e \u003e Considering that the Resolved field can be changed _after_ the log is created, this messes with pagination.\n\u003e \n\u003e How does it mess with pagination? Are you sorting by created/id? Could also sort by modified if it helps?\n\nIf I want to write an interface that reads all logs, generally I would;\n\nQuery the log collection with start\u003d0 and top\u003dreasonable page size.\nthen increment start, polling the logs, until no entries are returned.\nthen would would monitor for new logs with start\u003dcurrentIndex on some sort of loop\n\nDoing this sort of log streaming relies on the fact that the ID for a given log entry is immutable, and logs of a given ID won\u0027t change.  This is how most paging collection APIs work.\n\nIf a log that happened in the past has the potential to change, now I can no longer rely on any of the above to get an accurate state of the logs at any give set of time unless the BMC changes the log ID every time the resolved field is changed, which it doesn\u0027t look like it does today.",
      "parentUuid": "29cb50a2_471bd2b3",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 65
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c04bbf93_49c9d721",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-02-01T14:36:07Z",
      "side": 1,
      "message": "\u003e then would would monitor for new logs with start\u003dcurrentIndex on some sort of loop\n\nIdeally this would be something like Redfish events for \"monitor for new logs\"?\n\nCan\u0027t you subscribe to redfish events for the log changes? As well as new logs?\n\nHow in the above case does the \"interface that reads all logs\" get updated when a log is deleted ?",
      "parentUuid": "ea980bf8_c32218fa",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 65
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e145014f_436e23f9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-04T20:00:32Z",
      "side": 1,
      "message": "\u003e \u003e then would would monitor for new logs with start\u003dcurrentIndex on some sort of loop\n\u003e \n\u003e Ideally this would be something like Redfish events for \"monitor for new logs\"?\n\u003e \n\u003e Can\u0027t you subscribe to redfish events for the log changes? As well as new logs?\n\nThat\u0027s one way a client could implement, but not how most REST based log collection schemes were done when this was first committed.  Also, we didn\u0027t always have event service, so code got written against the collection that I\u0027d really like to not break.\n\n\u003e \n\u003e How in the above case does the \"interface that reads all logs\" get updated when a log is deleted ?\n\n\nThis usually isn\u0027t a concern for a streaming log service, but you make a good point, it wouldn\u0027t be registered.",
      "parentUuid": "c04bbf93_49c9d721",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 65
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9283c28d_571eaff7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-02-09T00:05:47Z",
      "side": 1,
      "message": "\u003e \u003e How in the above case does the \"interface that reads all logs\" get updated when a log is deleted ?\n\n\u003e This usually isn\u0027t a concern for a streaming log service, but you make a good point, it wouldn\u0027t be registered.\n\nIf it isn\u0027t a concern for deleting a log, then I wouldn\u0027t think it would be a concern for resolved..",
      "parentUuid": "e145014f_436e23f9",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 65
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03352a39_c4428149",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-21T20:27:16Z",
      "side": 1,
      "message": "A log line changing after its happened is definitely a concern.  A log line getting deleted doesn\u0027t matter because most implementations assume they\u0027re on a circular buffer anyway.\n\nI suspect we just need to update the IDs such that the unresolved log lines go after the resolved ones, and this problem goes away.",
      "parentUuid": "9283c28d_571eaff7",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 65
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54ada203_13860603",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-01-22T03:43:09Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 14,
        "startChar": 33,
        "endLine": 14,
        "endChar": 34
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ee7b221_b01e5c41",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-01-22T03:43:09Z",
      "side": 1,
      "message": "before",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 6
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63828ca7_0fff0612",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000444
      },
      "writtenOn": "2021-01-25T06:17:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8ee7b221_b01e5c41",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 6
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "afdf5658_56549bfe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000444
      },
      "writtenOn": "2021-01-25T06:17:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54ada203_13860603",
      "range": {
        "startLine": 14,
        "startChar": 33,
        "endLine": 14,
        "endChar": 34
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36d2baad_fd023eab",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-21T20:27:16Z",
      "side": 1,
      "message": "Can you do a test that doesn\u0027t involve marking it manually?  I can\u0027t imagine that the normal use case for this parameter would generally require manual intervention from a user.  I\u0027m assuming you would normally expect the system to mark it resolved automatically when the condition fixes itself.",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 44
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3e7090d_d957beac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-02-25T20:43:15Z",
      "side": 1,
      "message": "It is both. \nA user might mark the condition as fixed or the system might.",
      "parentUuid": "36d2baad_fd023eab",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 44
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2b2adf5_43d97712",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-25T22:54:16Z",
      "side": 1,
      "message": "What\u0027s the behavior when the user marks it resolved?  This seems easy to define for oneshot events (like the read failure below), but for things like thresholds and other things, having a resolved flag would imply that when you \"resolve\" it, if the condition is still present, the event would get added to the top of the logs, right?  Is that the behavior in this case?",
      "parentUuid": "e3e7090d_d957beac",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 44
      },
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64624439_a9d7adf6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-01-22T03:29:43Z",
      "side": 1,
      "message": "Validator?",
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2971973_4d1e0c13",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000444
      },
      "writtenOn": "2021-01-25T06:17:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64624439_a9d7adf6",
      "revId": "57ad2ec8567156e11c2bbdf8be82373b64b7aa55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}
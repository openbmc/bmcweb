{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "36dedc46_d9d375a9",
        "filename": "include/event_service_store.hpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-22T17:25:48Z",
      "side": 1,
      "message": "why did this method need to change?  this method takes no ownership, so returning by value seems reasonable.\n\nthe struct can be put into a shared pointer later if required.",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77430290_e6b3b44b",
        "filename": "include/event_service_store.hpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-10-22T18:42:54Z",
      "side": 1,
      "message": "Ultimately the `UserSubscription` object from `fromJson()` is going to used as a `shared_ptr\u003cUserSubscription\u003e` object as a part of `Subscription` and also for `subscriptionsMap[]` and `subscriptionsConfigMap[]`.\n\nIf it returns a UserSubscription (or optional\u003c\u003e) object, it will need to be passed again to create a shared_ptr\u003cUserSubscription\u003e in Subscription constructor or subscriptionsMap.\n\nSo, I think it may be more efficient to create it as a shared_ptr once here,  and share the pointer for Subscription, subscriptionsMap, and subscriptionsConfigMap.",
      "parentUuid": "36dedc46_d9d375a9",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2296098f_7358f720",
        "filename": "include/event_service_store.hpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-22T19:24:03Z",
      "side": 1,
      "message": "\u003e Ultimately the `UserSubscription` object from `fromJson()` is going to used as a `shared_ptr\u003cUserSubscription\u003e` object as a part of `Subscription` and also for `subscriptionsMap[]` and `subscriptionsConfigMap[]`.\n\nif this function had unit tests (like it should) it wouldn\u0027t always \"ultimately\" be in a shared ptr.  Keeping it not a shared ptr at this point makes the code simpler\n\n\u003e \n\u003e If it returns a UserSubscription (or optional\u003c\u003e) object, it will need to be passed again to create a shared_ptr\u003cUserSubscription\u003e in Subscription constructor or subscriptionsMap.\n\u003e \n\u003e So, I think it may be more efficient to create it as a shared_ptr once here,  and share the pointer for Subscription, subscriptionsMap, and subscriptionsConfigMap.\n\n\nThe second pass is done by a std::move, so it\u0027s not a large copy.",
      "parentUuid": "77430290_e6b3b44b",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a225ca5c_a96b5e71",
        "filename": "include/event_service_store.hpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-10-22T22:29:31Z",
      "side": 1,
      "message": "I changed as you suggested",
      "parentUuid": "2296098f_7358f720",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59a3314f_15acd1a7",
        "filename": "include/event_service_store.hpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-10-31T12:57:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a225ca5c_a96b5e71",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8def4019_14d8695f",
        "filename": "include/event_service_store.hpp",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-22T17:25:48Z",
      "side": 1,
      "message": "same here.  this function takes no ownership of user sub.  why is it passing an owning object?",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa6e291a_8308f437",
        "filename": "include/event_service_store.hpp",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-10-22T18:42:54Z",
      "side": 1,
      "message": "As `UserSubscription` data is used in both `subscriptionsMap[]` and `subscriptionsConfigMap[]`, it would be more efficient by replacing the matching `subscriptionsConfigMap[id].second` with `userSub` (shared_ptr), and it can avoid the copy of the content of the userSubscription.",
      "parentUuid": "8def4019_14d8695f",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a617493_69edd0a2",
        "filename": "include/event_service_store.hpp",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-22T19:24:03Z",
      "side": 1,
      "message": "ACK, I see the ownership transfer now.",
      "parentUuid": "aa6e291a_8308f437",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26a6bf2a_a15a9ac0",
        "filename": "include/event_service_store.hpp",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-10-31T12:57:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a617493_69edd0a2",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5547917d_b5e61f7e",
        "filename": "include/event_service_store.hpp",
        "patchSetId": 3
      },
      "lineNbr": 343,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-22T19:24:03Z",
      "side": 1,
      "message": "Now that these are all shared pointers and we\u0027re making no copies, isn\u0027t this just replacing the existing entry in the map with the same pointer?",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54c6328e_f6c54426",
        "filename": "include/event_service_store.hpp",
        "patchSetId": 3
      },
      "lineNbr": 343,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-10-22T22:29:31Z",
      "side": 1,
      "message": "That\u0027s right. \nIn fact, updateUserSubscriptionConfig() is not needed. \nI kept it as is to maintain the same semantics, i.e. it is updated for both subscriptionsMap \u0026 subscriptionsConfigMap, but I think we can remove it now.",
      "parentUuid": "5547917d_b5e61f7e",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4b4e0c5_45d71ab6",
        "filename": "include/event_service_store.hpp",
        "patchSetId": 3
      },
      "lineNbr": 343,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-10-31T12:57:34Z",
      "side": 1,
      "message": "I removed `updateUserSubscriptionConfig`",
      "parentUuid": "54c6328e_f6c54426",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65391250_f17f5edc",
        "filename": "include/event_service_store.hpp",
        "patchSetId": 3
      },
      "lineNbr": 343,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-04T08:42:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4b4e0c5_45d71ab6",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91d6f395_77c254eb",
        "filename": "include/persistent_data.hpp",
        "patchSetId": 3
      },
      "lineNbr": 273,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-22T19:27:04Z",
      "side": 1,
      "message": "This is making a shared_ptr copy for no real reason.  Can we just do\nif (it-\u003esecond \u003d\u003d nullptr){\n   continue;\n}\n\nconst UserSubscription\u0026 subValue \u003d *it.second;",
      "range": {
        "startLine": 273,
        "startChar": 12,
        "endLine": 273,
        "endChar": 45
      },
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8c6586a_7d8a60b3",
        "filename": "include/persistent_data.hpp",
        "patchSetId": 3
      },
      "lineNbr": 273,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-10-22T22:29:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "91d6f395_77c254eb",
      "range": {
        "startLine": 273,
        "startChar": 12,
        "endLine": 273,
        "endChar": 45
      },
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13e7efea_673aa353",
        "filename": "redfish-core/include/event_service_manager.hpp",
        "patchSetId": 3
      },
      "lineNbr": 277,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-22T17:25:48Z",
      "side": 1,
      "message": "why was this added?  sse connections don’t have user params, so if this is now a pointer, presumably sse connections should be nullptr?",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "485d6e76_7821d723",
        "filename": "redfish-core/include/event_service_manager.hpp",
        "patchSetId": 3
      },
      "lineNbr": 277,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-10-22T18:42:54Z",
      "side": 1,
      "message": "SSE subscription also uses UserSubscription data for its parameters - https://github.com/openbmc/bmcweb/blob/29d7ca982d61f3cb83e98e44e585d42f2f1b803c/redfish-core/lib/eventservice_sse.hpp#L50\n\nSo, UserSubscription object would still be needed.",
      "parentUuid": "13e7efea_673aa353",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37fb440c_28bfd11f",
        "filename": "redfish-core/include/event_service_manager.hpp",
        "patchSetId": 3
      },
      "lineNbr": 277,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-04T08:42:43Z",
      "side": 1,
      "message": "Ug, ok, that\u0027s not the intent, but something to clean up later.",
      "parentUuid": "485d6e76_7821d723",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33e28320_620bc47f",
        "filename": "redfish-core/lib/eventservice_sse.hpp",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-22T19:29:13Z",
      "side": 1,
      "message": "Need to check for nullptr here.",
      "range": {
        "startLine": 51,
        "startChar": 21,
        "endLine": 51,
        "endChar": 23
      },
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b51e62f9_718836ce",
        "filename": "redfish-core/lib/eventservice_sse.hpp",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-10-22T22:29:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33e28320_620bc47f",
      "range": {
        "startLine": 51,
        "startChar": 21,
        "endLine": 51,
        "endChar": 23
      },
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d793371_ef1ad44a",
        "filename": "redfish-core/lib/eventservice_sse.hpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-22T19:31:14Z",
      "side": 1,
      "message": "now that I look at it, this arguably isn\u0027t even correct for SSE subscriptions.  Oh well, something to fix in another patch.",
      "revId": "9e79330731a3ffef5abe0506e720d8e4923d29e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1b89bff4_e178df3a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-12T23:32:12Z",
      "side": 1,
      "message": "Missing testing.",
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7fef24f_3d1be54e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-14T15:36:10Z",
      "side": 1,
      "message": "I\u0027m waiting for the backend change to test, and I\u0027ll update the commit message after that.",
      "parentUuid": "1b89bff4_e178df3a",
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f59e1087_d407068d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-20T18:29:17Z",
      "side": 1,
      "message": "Can you mark this WIP until then?  If you have specific questions, feel free to ask, but if something has never been tested, it\u0027s definitely not ready to check in, and should be marked as such.",
      "parentUuid": "c7fef24f_3d1be54e",
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "441fc37e_b46bc578",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-21T15:40:05Z",
      "side": 1,
      "message": "Marked as WIP while waiting for backend change.",
      "parentUuid": "f59e1087_d407068d",
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c14b7c3c_ab5e61b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-21T15:55:54Z",
      "side": 1,
      "message": "Do you have patches out to peci-pcie to replicate this behavior as well?  If so, can you link them here?",
      "parentUuid": "441fc37e_b46bc578",
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f333166_caf16f76",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-03-27T18:35:22Z",
      "side": 1,
      "message": "We don\u0027t use peci-pcie",
      "parentUuid": "c14b7c3c_ab5e61b5",
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5bc4bca_c9431bfa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-27T18:40:39Z",
      "side": 1,
      "message": "..... and?  Is that supposed to imply that Myung doesn\u0027t need to fix peci-pcie?",
      "parentUuid": "5f333166_caf16f76",
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83ffc836_a2dde7c9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-06-07T21:43:06Z",
      "side": 1,
      "message": "We don\u0027t use peci-pcie.  (I also do not know how to deal with it as of now).\n\nIt turns out that it is testable using the existing upstream p10bmc obmc-phosphor-image build on QEMU.\n\nIt will show the default lanesInUse value (i.e. maxint) like\n\n```\n$ curl -k -X GET https://${bmc}/redfish/v1/Systems/system/PCIeDevices/pcie_card11\n{\n  \"@odata.id\": \"/redfish/v1/Systems/system/PCIeDevices/pcie_card11\",\n  \"@odata.type\": \"#PCIeDevice.v1_9_0.PCIeDevice\",\n  \"Id\": \"pcie_card11\",\n....\n  \"PCIeInterface\": {\n    \"LanesInUse\": 4294967295\n  },\n...\n}%\n```\n\nThis will cause Redfish Service Validator failure\n```\n1 err.Edm.Int64 errors in /redfish/v1/Systems/system/PCIeDevices/pcie_card11\n1 failProp errors in /redfish/v1/Systems/system/PCIeDevices/pcie_card11\n1 fails errors in /redfish/v1/Systems/system/PCIeDevices/pcie_card11\n\nERROR - LanesInUse: Value out of assigned max range, 4294967295 \u003e 32\n```\n\nWith this fix, it is successful.\n\n\n----\nSo, I don\u0027t think the other backend change is required to get this commit to merge.\nCan we accept this?\n\n---\n\nBTW, we\u0027re currently working on downstream PLDM to modify LanesInUse.\n(However, this does not alter this bmcweb change)",
      "parentUuid": "e5bc4bca_c9431bfa",
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18a84a90_3aaa1142",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-07T21:55:37Z",
      "side": 1,
      "message": "I\u0027m having a tough time understanding the above.  Have we inspected peci-pcie (or talked to the maintainers) to verify this change doesn\u0027t break it for the unavailable case?  Previously in code it was using *lanesInUse \u003d\u003d 0 to denote unavailable, and this change is proposing we change the definition.  We can\u0027t just break working code without discussion.\n\nHave we linked the backend change in the commit message that updates this behavior?",
      "parentUuid": "83ffc836_a2dde7c9",
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "683974aa_9d062c79",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-14T16:12:40Z",
      "side": 1,
      "message": "Is there a related backend change for this?  I\u0027m having a tough time understanding what case we\u0027re handling here, and looking at code would probably help me if you could give me a pointer.",
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9feccdba_9a4e6b6e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-14T17:15:29Z",
      "side": 1,
      "message": "This patch is neither tested, nor does it have changes to the existing backends (peci-pcie is the only one I know of) to match this new interface, so this patchset is stalled anyway until those things happen.",
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3d535fd_41d273b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-14T20:00:43Z",
      "side": 1,
      "message": "I\u0027m dealing with the IBM downstream pldm - https://github.com/ibm-openbmc/pldm/blob/ca00ba4e2847c7f52f22f9da22d5be7e986bcaeb/oem/ibm/libpldmresponder/file_io_type_pcie.cpp#L381",
      "parentUuid": "683974aa_9d062c79",
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07574ba5_a8695895",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-14T20:07:51Z",
      "side": 1,
      "message": "Looks like it hasn\u0027t been updated to support your change yet?  I don\u0027t see explicit handling of maxint.",
      "parentUuid": "d3d535fd_41d273b3",
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01aef9c1_c8c7de08",
        "filename": "redfish-core/lib/pcie.hpp",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-12T23:33:10Z",
      "side": 1,
      "message": "Isn\u0027t this incorrect?  Shouldn\u0027t we be setting it to null, per Redfish?",
      "range": {
        "startLine": 484,
        "startChar": 56,
        "endLine": 485,
        "endChar": 44
      },
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69e5c2e7_c9f88d11",
        "filename": "redfish-core/lib/pcie.hpp",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-03-13T08:22:54Z",
      "side": 1,
      "message": "The default means, unknown in this case? Not unsupported? If not unsupported, leave off. If unknown, then null. \n\nFrom https://gerrit.openbmc.org/c/openbmc/bmcweb/+/69864\n\n9.6.1 Properties Overview Page 88 in\nhttps://www.dmtf.org/sites/default/files/standards/documents/DSP0266_1.19.0.pdf\n\n\"If an implementation supports a property, it shall always provide a value for that property. If a value is unknown at the time of the operation due to an internal error, or inaccessibility of the data, the value of null is an acceptable value if supported by the schema definition.\"",
      "parentUuid": "01aef9c1_c8c7de08",
      "range": {
        "startLine": 484,
        "startChar": 56,
        "endLine": 485,
        "endChar": 44
      },
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cf72fe3_d92c6d2e",
        "filename": "redfish-core/lib/pcie.hpp",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-14T03:48:33Z",
      "side": 1,
      "message": "What we need defined in phosphor-dbus-interfaces (if we\u0027re not going to just do it in code) is a definition for:\n\n1. When the value can\u0027t be gotten because of an error.\n2. When a value can\u0027t be gotten because it\u0027s not supported on this system.\n3. When a value can\u0027t be gotten because it\u0027s unavailable (power is off).\n\nLooking at the PDI patchset, it\u0027s not clear to me that those 3 cases are covered.\n\nWhat I would expect is that we\u0027d have a new optional interface for pcie lanes in use.\n\n1. Can\u0027t be gotten because of an error?  Dbus error\n2. Can\u0027t be gotten because it\u0027s not supported on this system?  Don\u0027t expose the DBUS interface\n3. Value can\u0027t be gotten because it\u0027s unavailable, return MAXINT.\n\n\nThen Redfish would respond with\n\n1. Return a 500 internal error to the user\n2. Omitting the property\n3. Returning the value as null.\n\n\n\nThis commit looks like it does only part of the fix.",
      "parentUuid": "69e5c2e7_c9f88d11",
      "range": {
        "startLine": 484,
        "startChar": 56,
        "endLine": 485,
        "endChar": 44
      },
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41a6a91b_e4f30e29",
        "filename": "redfish-core/lib/pcie.hpp",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-14T15:19:17Z",
      "side": 1,
      "message": "\u003e What I would expect is that we\u0027d have a new optional interface for pcie lanes in use.\n\nIf we go this direction, almost every property is going to end up in its own \"optional\" interface.  Someone is going to make an argument that everything the BMC does has some condition where we can\u0027t figure it out.  I\u0027m not on board with that.\n\n\u003e This commit looks like it does only part of the fix.\n\nIsn\u0027t it better though?  My understanding was that the recent change was due to the fact that they wanted to be able to represent 0 lanes in use.  That appears to be what is available now with this change.\n\nThis change is really not doing anything with respect to \"errors\" and the existing code didn\u0027t do anything with respect to them either.  All this change is doing is aligning the bmcweb with the phosphor-dbus-interfaces w.r.t. the \"default\" value (which is what implementations get if they don\u0027t explicitly set the property at a dbus level).",
      "parentUuid": "1cf72fe3_d92c6d2e",
      "range": {
        "startLine": 484,
        "startChar": 56,
        "endLine": 485,
        "endChar": 44
      },
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e50f371a_9fcb686d",
        "filename": "redfish-core/lib/pcie.hpp",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-14T16:12:40Z",
      "side": 1,
      "message": "\u003e \u003e What I would expect is that we\u0027d have a new optional interface for pcie lanes in use.\n\u003e \n\u003e If we go this direction, almost every property is going to end up in its own \"optional\" interface.  Someone is going to make an argument that everything the BMC does has some condition where we can\u0027t figure it out.  I\u0027m not on board with that.\n\nIn what I\u0027m proposing, \"We can\u0027t figure this out\" translates to MAXINT.  \"We can\u0027t provide this information on this system\" would be the optional interface.  In general I don\u0027t really see what you say being the case.  Property support tends to be batched together, and even if we end up with an interface per property because we have that wide variety of system support, is that really a problem?\n\nIn this case, the port capabilities likely come from smbios tables, whereas the lanes in use come from directly polling the serdes.  For even that reason I think it still makes sense to separate them, so that multiple services can each host their part of the interface.\n\npeci-pcie sidestepped this by pulling the PCIe information directly from the serdes, but I\u0027d be surprised if that worked on all systems.\n\n\nWith that said, is there something you\u0027re suggesting to handle 1, 2, and 3 above?  I\u0027m open to other options, but what I suggested is how most of the other interfaces work.\n\n\u003e \n\u003e \u003e This commit looks like it does only part of the fix.\n\u003e \n\u003e Isn\u0027t it better though?  My understanding was that the recent change was due to the fact that they wanted to be able to represent 0 lanes in use.  That appears to be what is available now with this change.\n\n\nRight, but now they\u0027ve also represented an error as omitting the property.  Redfish requires that we handle those 3 distinct cases differently, and as it stands now, there\u0027s no way to know the difference between 1, 2, and 3 above.\n\n\u003e \n\u003e This change is really not doing anything with respect to \"errors\" and the existing code didn\u0027t do anything with respect to them either.  All this change is doing is aligning the bmcweb with the phosphor-dbus-interfaces w.r.t. the \"default\" value (which is what implementations get if they don\u0027t explicitly set the property at a dbus level).\n\nFrom the PDI definition: \"known due to some unknown reason, like hardware failure or link down.\"\n\nFailure is literally in the description of the property now.  If that gets removed, and we handle the case where it\u0027s 0 as an error (because now exposing something that handles 0 lanes is an error) that would be an improvement.",
      "parentUuid": "41a6a91b_e4f30e29",
      "range": {
        "startLine": 484,
        "startChar": 56,
        "endLine": 485,
        "endChar": 44
      },
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aef2e314_5214b22e",
        "filename": "redfish-core/lib/pcie.hpp",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-14T16:59:01Z",
      "side": 1,
      "message": "\u003e Property support tends to be batched together, and even if we end up with an interface per property because we have that wide variety of system support, is that really a problem?\n\nYes.  There are already too many permutations of what is acceptable in the Inventory namespace.  Breaking out everything into separate interface because one system can or can\u0027t get that particular piece of data is where we\u0027ll end up.  There\u0027s always going to be this \"one weird system\".\n\n\u003e With that said, is there something you\u0027re suggesting to handle 1, 2, and 3 above? I\u0027m open to other options, but what I suggested is how most of the other interfaces work.\n\nI\u0027m not interested in differentiating them.  This is so low value in my mind and on the use-side of a client that I don\u0027t really care to invest more time myself in it. You really need to be able to differentiate at a Redfish Client level that the PCIe Lanes In Use somehow had an internal error in the BMC (that wasn\u0027t already reported through the event log)?  If someone else finds it valuable enough and wants to propose an implementation, I\u0027ll review it, but \"split out this particular property into a separate interface\" probably isn\u0027t going to cut it because it is just setting it up for everything else.",
      "parentUuid": "e50f371a_9fcb686d",
      "range": {
        "startLine": 484,
        "startChar": 56,
        "endLine": 485,
        "endChar": 44
      },
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9452adba_82015368",
        "filename": "redfish-core/lib/pcie.hpp",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-14T17:13:54Z",
      "side": 1,
      "message": "\u003e \u003e Property support tends to be batched together, and even if we end up with an interface per property because we have that wide variety of system support, is that really a problem?\n\u003e \n\u003e Yes.  There are already too many permutations of what is acceptable in the Inventory namespace.  Breaking out everything into separate interface because one system can or can\u0027t get that particular piece of data is where we\u0027ll end up.  There\u0027s always going to be this \"one weird system\".\n\u003e \n\u003e \u003e With that said, is there something you\u0027re suggesting to handle 1, 2, and 3 above? I\u0027m open to other options, but what I suggested is how most of the other interfaces work.\n\u003e \n\u003e I\u0027m not interested in differentiating them.\n\nCool.  Clearly Myung is, or this patch wouldn\u0027t need to exist?  Redfish differentiates them, so I\u0027m stuck where I can either:\n1. Accept code that\u0027s functionally incorrect to the standard, and doesn\u0027t implement Redfish properly.\n2. Make an interface proposal myself.\n3. Deny this patch until someone else proposes a different PDI change.\n\n\u003e  This is so low value in my mind and on the use-side of a client that I don\u0027t really care to invest more time myself in it.\n\nFWIW, there are absolutely implementations that care about this distinction.  It\u0027s used for debugging if a link didn\u0027t come up, or if a link downtrained to a lower speed/width.  That\u0027s why this interface was implemented in the first place.\n\n\u003e You really need to be able to differentiate at a Redfish Client level that the PCIe Lanes In Use somehow had an internal error in the BMC (that wasn\u0027t already reported through the event log)?\n\nThe distinction between \"lane not in use\" and \"not supported on this platform\" is arguably more important than \"Had an internal error\".  I just bring it up for completeness.\n\n\u003e  If someone else finds it valuable enough and wants to propose an implementation, I\u0027ll review it, but \"split out this particular property into a separate interface\" probably isn\u0027t going to cut it because it is just setting it up for everything else.\n\n\nwhat does \"setting it up for everything else\" mean here?  As in, today we propose breaking out this one property, tomorrow we ask to separate every property on dbus?  I really don\u0027t think that is going to happen.  Systems that don\u0027t have a direct serdes connection to check the link status are common.",
      "parentUuid": "aef2e314_5214b22e",
      "range": {
        "startLine": 484,
        "startChar": 56,
        "endLine": 485,
        "endChar": 44
      },
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "537368ec_ec197684",
        "filename": "redfish-core/lib/pcie.hpp",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-14T17:28:51Z",
      "side": 1,
      "message": "\u003e Cool. Clearly Myung is, or this patch wouldn\u0027t need to exist? Redfish differentiates them, so I\u0027m stuck where I can either:\n\nNo... the change is to make it so that 0 is valid data.\n\n\u003e It\u0027s used for debugging if a link didn\u0027t come up, or if a link downtrained to a lower speed/width. That\u0027s why this interface was implemented in the first place.\n\nAll of these cases are 0.\n\n\u003e The distinction between \"lane not in use\" and \"not supported on this platform\" is arguably more important than \"Had an internal error\". I just bring it up for completeness.\n\nAren\u0027t these implemented as 0 and maxint represent respectively with the current interface definition?\n\n\u003e As in, today we propose breaking out this one property, tomorrow we ask to separate every property on dbus? I really don\u0027t think that is going to happen.\n\nNearly every property in the Inventory namespace you could make an argument \"my EEPROM doesn\u0027t contain this data\".",
      "parentUuid": "9452adba_82015368",
      "range": {
        "startLine": 484,
        "startChar": 56,
        "endLine": 485,
        "endChar": 44
      },
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0d1f7e1_ac8a8a20",
        "filename": "redfish-core/lib/pcie.hpp",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-14T17:40:22Z",
      "side": 1,
      "message": "\u003e \u003e Cool. Clearly Myung is, or this patch wouldn\u0027t need to exist? Redfish differentiates them, so I\u0027m stuck where I can either:\n\u003e \n\u003e No... the change is to make it so that 0 is valid data.\n\u003e \n\u003e \u003e It\u0027s used for debugging if a link didn\u0027t come up, or if a link downtrained to a lower speed/width. That\u0027s why this interface was implemented in the first place.\n\u003e \n\u003e All of these cases are 0.\n\n\nfrom what got checked in\n```\n\"Deafult value of\n maxint is to accommodate the situation where the value of this\n property is not known due to some unknown reason, like hardware\n failure or link down.\"\n```\n          \nAccording to that, the value for link down is MAXINT, not zero.  Am I misreading that?  That\u0027s basically the crux of the comment I made on the PDI review.  I suspect if \"link down \u003d\u003d 0 lanes\" gets put in, and the backends get updated (and this commit gets changed to actually handle zero as a redfish status of disabled), then I think we\u0027re good.\n\nIt\u0027s imperfect because we still miss out on \"This isn\u0027t supported on this platform\" but I\u0027m happy to kick that can down the road forever, at least for what\u0027s there we can build a correct Redfish API.\n\n\u003e \n\u003e \u003e The distinction between \"lane not in use\" and \"not supported on this platform\" is arguably more important than \"Had an internal error\". I just bring it up for completeness.\n\u003e \n\u003e Aren\u0027t these implemented as 0 and maxint represent respectively with the current interface definition?\n\nNot so far as I\u0027m reading in the description.  I see no mention of 0 being a special case anywhere.\n\n\u003e \n\u003e \u003e As in, today we propose breaking out this one property, tomorrow we ask to separate every property on dbus? I really don\u0027t think that is going to happen.\n\u003e \n\u003e Nearly every property in the Inventory namespace you could make an argument \"my EEPROM doesn\u0027t contain this data\".\n\nsure, and in those cases, we omit the data from the Redfish schema, so the user-facing result looks right (sometimes by breaking the documentation in PDI by abusing empty string).\n\nIf we\u0027re going with 0 \u003d\u003d lane not used, maxint \u003d\u003d data unavailable, lets get PDI updated, and that should be an improvement to this without having to open the every interface is optional conversation.",
      "parentUuid": "537368ec_ec197684",
      "range": {
        "startLine": 484,
        "startChar": 56,
        "endLine": 485,
        "endChar": 44
      },
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d74ebfec_84f3f41e",
        "filename": "redfish-core/lib/pcie.hpp",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-14T18:08:22Z",
      "side": 1,
      "message": "\u003e According to that, the value for link down is MAXINT, not zero. Am I misreading that? That\u0027s basically the crux of the comment I made on the PDI review.\n\nGot it.  Let\u0027s go ahead and adjust the wording there.\n\nLink down should be \"0 lanes in use\".\n\nI guess I was just so excited that someone finally took care of that commit after 2 years that I didn\u0027t read too deeply on all the words.\n\n\u003e sure, and in those cases, we omit the data from the Redfish schema, so the user-facing result looks right (sometimes by breaking the documentation in PDI by abusing empty string).\n\nYou have the same problem though.  Is \"\" at a dbus property level due to:\n- The eeprom field is empty.\n- The eeprom field is missing.\n- The eeprom field has a bad CRC.\n\n\u003e If we\u0027re going with 0 \u003d\u003d lane not used, maxint \u003d\u003d data unavailable, lets get PDI updated, and that should be an improvement to this without having to open the every interface is optional conversation.\n\n:thumbsup:",
      "parentUuid": "d0d1f7e1_ac8a8a20",
      "range": {
        "startLine": 484,
        "startChar": 56,
        "endLine": 485,
        "endChar": 44
      },
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96046929_b77ed7fa",
        "filename": "redfish-core/lib/pcie.hpp",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-14T18:25:20Z",
      "side": 1,
      "message": "No problem, I get it.  Myung, does the above conversation make sense to you, and can you put up a new patchset to that effect in PDI?",
      "parentUuid": "d74ebfec_84f3f41e",
      "range": {
        "startLine": 484,
        "startChar": 56,
        "endLine": 485,
        "endChar": 44
      },
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1869e89a_03f94e42",
        "filename": "redfish-core/lib/pcie.hpp",
        "patchSetId": 1
      },
      "lineNbr": 485,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2024-03-14T20:00:43Z",
      "side": 1,
      "message": "I submitted a PDI description update  - https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/70056",
      "parentUuid": "96046929_b77ed7fa",
      "range": {
        "startLine": 484,
        "startChar": 56,
        "endLine": 485,
        "endChar": 44
      },
      "revId": "411e86cc76298313db83e605833a29f1751a4534",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
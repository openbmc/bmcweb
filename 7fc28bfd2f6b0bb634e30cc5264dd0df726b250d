{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1cafc3f4_ed3b262b",
        "filename": "redfish-core/lib/network_protocol.hpp",
        "patchSetId": 3
      },
      "lineNbr": 310,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-04T20:57:16Z",
      "side": 1,
      "message": "Why did this change?  Old code was better, and std::string can devolve implicitly into std::string_view.",
      "range": {
        "startLine": 310,
        "startChar": 0,
        "endLine": 310,
        "endChar": 57
      },
      "revId": "7fc28bfd2f6b0bb634e30cc5264dd0df726b250d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2ce6298_bf4ea1cb",
        "filename": "redfish-core/lib/network_protocol.hpp",
        "patchSetId": 3
      },
      "lineNbr": 310,
      "author": {
        "id": 1001252
      },
      "writtenOn": "2022-04-05T11:59:55Z",
      "side": 1,
      "message": "I\u0027ve tried keeping `const std::string_view` here, but the argument will be corrupted. Below is some logs.\n\nJan 30 17:35:19 intel-obmc bmcweb[364]: (1970-01-30 17:35:19) [DEBUG \"network_protocol.hpp\":412] Encoded service name dropbear\nJan 30 17:35:19 intel-obmc bmcweb[364]: (1970-01-30 17:35:19) [DEBUG \"network_protocol.hpp\":416] Encoded path /xyz/openbmc_project/control/service/dropbear length 45\nJan 30 17:35:19 intel-obmc bmcweb[364]: (1970-01-30 17:35:19) [DEBUG \"network_protocol.hpp\":322] netBasePath: xyz.openbmc_project.Control.Service.Attribute len: 45\n\nJan 30 17:44:47 intel-obmc bmcweb[364]: (1970-01-30 17:44:47) [DEBUG \"network_protocol.hpp\":412] Encoded service name phosphor-ipmi-net@\nJan 30 17:44:47 intel-obmc bmcweb[364]: (1970-01-30 17:44:47) [DEBUG \"network_protocol.hpp\":416] Encoded path /xyz/openbmc_project/control/service/_70hosphor_2dipmi_2dnet_40 length 63\nJan 30 17:44:47 intel-obmc bmcweb[364]: (1970-01-30 17:44:47) [DEBUG \"network_protocol.hpp\":322] netBasePath: /xyz/openbmc_project/control/service/_6fbmc_2dconsole_40ttyS2\nJan 30 17:44:47 intel-obmc bmcweb[364]: 0 len: 63\n\nI cannot figure out why it is happened... Maybe some lifetime issue?",
      "parentUuid": "1cafc3f4_ed3b262b",
      "range": {
        "startLine": 310,
        "startChar": 0,
        "endLine": 310,
        "endChar": 57
      },
      "revId": "7fc28bfd2f6b0bb634e30cc5264dd0df726b250d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c549196_0a4ec5df",
        "filename": "redfish-core/lib/network_protocol.hpp",
        "patchSetId": 3
      },
      "lineNbr": 310,
      "author": {
        "id": 1001252
      },
      "writtenOn": "2022-04-05T12:21:11Z",
      "side": 1,
      "message": "Oh I found the reason, the document of `operator basic_string_view` of std::string says\n\n\u003e It is the programmer\u0027s responsibility to ensure that the resulting string view does not outlive the string.\n\nhttps://en.cppreference.com/w/cpp/string/basic_string/operator_basic_string_view\n\nIn my code, the underlying std::string lives in the call to handleProtocolEnabled(), but as async_method_call() immediatly returns, it will be destoryed before the handler of async_method_call() is called. The underlying pointer of the string_view dangles and gives garbled data.\n\nIn prvious code, string_view always points to the inlined `const char*`, there wasn\u0027t such lifetime issue.\n\nPassing `const std::string\u0026` here won\u0027t bring extra cost as encodeServiceObjectPath() returns std::string.",
      "parentUuid": "e2ce6298_bf4ea1cb",
      "range": {
        "startLine": 310,
        "startChar": 0,
        "endLine": 310,
        "endChar": 57
      },
      "revId": "7fc28bfd2f6b0bb634e30cc5264dd0df726b250d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6195a59_895fbacd",
        "filename": "redfish-core/lib/network_protocol.hpp",
        "patchSetId": 3
      },
      "lineNbr": 310,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-06T15:06:55Z",
      "side": 1,
      "message": "Yep, that\u0027s a good point.  Old code had a lifetime issue.  Fine as is.",
      "parentUuid": "3c549196_0a4ec5df",
      "range": {
        "startLine": 310,
        "startChar": 0,
        "endLine": 310,
        "endChar": 57
      },
      "revId": "7fc28bfd2f6b0bb634e30cc5264dd0df726b250d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b0a5ec3_a423fa53",
        "filename": "redfish-core/lib/network_protocol.hpp",
        "patchSetId": 3
      },
      "lineNbr": 310,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-02T15:57:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6195a59_895fbacd",
      "range": {
        "startLine": 310,
        "startChar": 0,
        "endLine": 310,
        "endChar": 57
      },
      "revId": "7fc28bfd2f6b0bb634e30cc5264dd0df726b250d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
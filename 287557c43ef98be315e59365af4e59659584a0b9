{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0711b45c_4c1ff89a",
        "filename": "redfish-core/include/utils/chassis_utils.hpp",
        "patchSetId": 12
      },
      "lineNbr": 11,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-07-20T01:01:51Z",
      "side": 1,
      "message": "Is this variable used somewhere else? If not, consider getting the declaration into the function?",
      "range": {
        "startLine": 11,
        "startChar": 37,
        "endLine": 11,
        "endChar": 58
      },
      "revId": "287557c43ef98be315e59365af4e59659584a0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a51a79e1_449ea5a8",
        "filename": "redfish-core/include/utils/chassis_utils.hpp",
        "patchSetId": 12
      },
      "lineNbr": 11,
      "author": {
        "id": 1000998
      },
      "writtenOn": "2022-07-20T15:59:13Z",
      "side": 1,
      "message": "See https://gerrit.openbmc.org/c/openbmc/bmcweb/+/52534/comments/a1767cf5_2d90d7b7. There are some use cases where we can\u0027t easily use the find function, but would need the same set of interfaces. The actual usage would be in the cleanup that\u0027s needed to use the stuff in this file in the various places where we are looking for chassis.",
      "parentUuid": "0711b45c_4c1ff89a",
      "range": {
        "startLine": 11,
        "startChar": 37,
        "endLine": 11,
        "endChar": 58
      },
      "revId": "287557c43ef98be315e59365af4e59659584a0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fba762e8_237d997d",
        "filename": "redfish-core/include/utils/chassis_utils.hpp",
        "patchSetId": 12
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-21T16:58:01Z",
      "side": 1,
      "message": "I don\u0027t quite understand the answer.  Does that cleanup need to come first then?  As-written, we\u0027re duplicating data, and in a way that\u0027s pretty doable to just have a single definition for.",
      "parentUuid": "a51a79e1_449ea5a8",
      "range": {
        "startLine": 11,
        "startChar": 37,
        "endLine": 11,
        "endChar": 58
      },
      "revId": "287557c43ef98be315e59365af4e59659584a0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d261cefd_887f5d0c",
        "filename": "redfish-core/include/utils/chassis_utils.hpp",
        "patchSetId": 12
      },
      "lineNbr": 11,
      "author": {
        "id": 1000998
      },
      "writtenOn": "2022-07-21T18:29:18Z",
      "side": 1,
      "message": "Perhaps it will be clearer if I explain what I was planning. This patch provides the common definitions needed for finding chassis. Subsequent patches would implement the following cleanup: \n1. Use getValidChassisPath where we are searching for chassis by name. (e.g https://github.com/openbmc/bmcweb/blob/a926c53e9ceb83ea5dd02f889ef6ba1f2ad358f3/redfish-core/lib/chassis.hpp#L222)\n2. Use dBusChassisInterfaces where we need the interface list for other purposes. (e.g. https://github.com/openbmc/bmcweb/blob/a926c53e9ceb83ea5dd02f889ef6ba1f2ad358f3/redfish-core/lib/chassis.hpp#L154)",
      "parentUuid": "fba762e8_237d997d",
      "range": {
        "startLine": 11,
        "startChar": 37,
        "endLine": 11,
        "endChar": 58
      },
      "revId": "287557c43ef98be315e59365af4e59659584a0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "651940a0_a742c368",
        "filename": "redfish-core/include/utils/chassis_utils.hpp",
        "patchSetId": 12
      },
      "lineNbr": 19,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-07-20T01:01:51Z",
      "side": 1,
      "message": "nit: #space is not consistent",
      "range": {
        "startLine": 19,
        "startChar": 19,
        "endLine": 19,
        "endChar": 20
      },
      "revId": "287557c43ef98be315e59365af4e59659584a0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e9fd0a2_0f8ae2d4",
        "filename": "redfish-core/include/utils/chassis_utils.hpp",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-07-20T01:01:51Z",
      "side": 1,
      "message": "I have seen several times that different committers want to create a function like this: get object path of given interfaces then execute callbacks.\n\nThis function seems to me don\u0027t need to be chassis specific. Shall we enhance the existing getCollections?\n\nWhat are your opinions, existing maintainers?",
      "range": {
        "startLine": 22,
        "startChar": 5,
        "endLine": 22,
        "endChar": 24
      },
      "revId": "287557c43ef98be315e59365af4e59659584a0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3379e7b7_07241888",
        "filename": "redfish-core/include/utils/chassis_utils.hpp",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000998
      },
      "writtenOn": "2022-07-20T15:59:13Z",
      "side": 1,
      "message": "I agree. Ed suggested adding something to the object mapper to do this since it\u0027s more efficient to do it there. I was planning to come up with a prototype of that, but in the meantime, I think it might be easier to get this in to unblock dependencies while we figure out a more general solution.",
      "parentUuid": "9e9fd0a2_0f8ae2d4",
      "range": {
        "startLine": 22,
        "startChar": 5,
        "endLine": 22,
        "endChar": 24
      },
      "revId": "287557c43ef98be315e59365af4e59659584a0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a44400d_31b14740",
        "filename": "redfish-core/include/utils/chassis_utils.hpp",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-21T16:58:01Z",
      "side": 1,
      "message": "\u003e get object path of given interfaces then execute callbacks.\n\nI\u0027m fine if true generalization happens in another patch.  That\u0027s actually preferred because it keeps the patchsets small and mergable.\n\n\n\u003e I agree. Ed suggested adding something to the object mapper to do this since it\u0027s more efficient to do it there. I was planning to come up with a prototype of that, but in the meantime, I think it might be easier to get this in to unblock dependencies while we figure out a more general solution.\n\nYep, pretty sure I said that and seems reasonable to me.",
      "parentUuid": "3379e7b7_07241888",
      "range": {
        "startLine": 22,
        "startChar": 5,
        "endLine": 22,
        "endChar": 24
      },
      "revId": "287557c43ef98be315e59365af4e59659584a0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4fdc54c_be2d301a",
        "filename": "redfish-core/include/utils/chassis_utils.hpp",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000998
      },
      "writtenOn": "2022-07-21T18:29:18Z",
      "side": 1,
      "message": "Let\u0027s save the generalization for another patch then.",
      "parentUuid": "5a44400d_31b14740",
      "range": {
        "startLine": 22,
        "startChar": 5,
        "endLine": 22,
        "endChar": 24
      },
      "revId": "287557c43ef98be315e59365af4e59659584a0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "992e0232_77f92b8b",
        "filename": "redfish-core/include/utils/chassis_utils.hpp",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-09-14T14:17:28Z",
      "side": 1,
      "message": "Why template. Are there any case where callback takes something other than std::string? Use std::function instead.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 69
      },
      "revId": "287557c43ef98be315e59365af4e59659584a0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73650d8f_6c4c4750",
        "filename": "redfish-core/include/utils/chassis_utils.hpp",
        "patchSetId": 12
      },
      "lineNbr": 49,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2022-09-14T14:17:28Z",
      "side": 1,
      "message": "I wonder why optional. If there is error you should not check returned valued, if there is no error this value will be always present. But from the API point of view you are supposed to check any optional before it is used. How about using empty object instead?",
      "range": {
        "startLine": 49,
        "startChar": 8,
        "endLine": 49,
        "endChar": 34
      },
      "revId": "287557c43ef98be315e59365af4e59659584a0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
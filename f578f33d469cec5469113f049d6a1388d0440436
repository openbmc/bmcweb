{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "72357545_088f3e28",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-05T20:58:37Z",
      "side": 1,
      "message": "Ok, I think I see the confusion here (and I\u0027m not sure I know the right behavior here, but I have a guess).\n\nLevel 1 expands each object in the sensor collection\nRelatedItem is a collection, and at a property level it has AutoExpandReferences set, which means that L2 has already been expanded.  This DOESN\u0027T mean that the expansion doesn\u0027t count against the depth, because it was already expanded, just automatically in the standard.\n\nWe should get the experts looking at this, but to my eye, this looks correct.  You would need expand level 3 to expand\n\nSensorCollection.Members\nSensor.RelatedItem\nRelatedItem[0]\n\nand get the result you want.  Does depth\u003d3 get you what you\u0027re looking for?",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 57,
        "endChar": 7
      },
      "revId": "f578f33d469cec5469113f049d6a1388d0440436",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "158f66d8_2496dfb7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-06-05T21:56:48Z",
      "side": 1,
      "message": "I don\u0027t think we should have auto expand count as a level of depth.  We don\u0027t do that anywhere else from what I can tell.  For example, Members in a Chassis collection is also AutoExpandReferences https://github.com/openbmc/bmcweb/blob/master/static/redfish/v1/schema/ChassisCollection_v1.xml#L63\n\nIf I\u0027m understanding it correctly then with what you\u0027re describing we should be doing /redfish/v1/Chassis?$expand\u003d.($levels\u003d2) in order to get the individual Chassis objects.\n\nI think the issue is efficient sensor expand is not completely compatible with the updated expand (https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60727).  The efficient version makes assumptions which have been removed from the overall expand approach",
      "parentUuid": "72357545_088f3e28",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 57,
        "endChar": 7
      },
      "revId": "f578f33d469cec5469113f049d6a1388d0440436",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c32decd_db74a0a3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-05T22:34:43Z",
      "side": 1,
      "message": "\u003e I don\u0027t think we should have auto expand count as a level of depth.\n\nWe shouldn\u0027t guess here.  Either it\u0027s written in the spec, in which case we should do what it says, or it\u0027s not, and we should get the behavior called out.\n\n\u003e in order to get the individual Chassis objects.\n\nNo, because Chassis has ContainsTarget\u003dTrue, so when you navitage the thing, it\u0027s actually the thing, not an expanded reference.\n\n\u003e I think the issue is efficient sensor expand is not completely compatible with the updated expand\n\nYep, that could be.",
      "parentUuid": "158f66d8_2496dfb7",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 57,
        "endChar": 7
      },
      "revId": "f578f33d469cec5469113f049d6a1388d0440436",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ea5d7b4_02fdd2e7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2023-06-05T23:18:35Z",
      "side": 1,
      "message": "\u003e Does depth\u003d3 get you what you\u0027re looking for?\n\nyeah, depth\u003d3 does get the expected output.\n\n---\n\num. That would make sense, however, this is only an issue with delegated expand + default.\n\nFor example,\n\n```\nroot@yscbj4-nfd01:~# wget -qO- \u0027http://localhost:80/redfish/v1/Systems/system/Storage/storage\u0027\n{\n  \"@odata.id\": \"/redfish/v1/Systems/system/Storage/storage\",\n  \"@odata.type\": \"#Storage.v1_9_1.Storage\",\n  \"Drives\": [\n    {\n      \"@odata.id\": \"/redfish/v1/Chassis/storage/Drives/drive\"\n    }\n  ],\n  ...\n}\n```\n\n\u003e \u0027http://localhost:80/redfish/v1/Systems/system/Storage/storage?$expand\u003d.($levels\u003d1)\u0027\n\nsould expand the Drive.\n\nSo the behavior is different between only default handler and delegated + default.\n\nMy issue on this is that the default handler is counting the levels that has already been expected by delegated handler.\n\nWith\nquery.expandLevel \u003d 2 -\u003e\n  query.expandLevel \u003d 1 and delegated.expandLevel \u003d 1.\n\nThe query.expandLevel just looks at the thing already expanded by delegated.expandLevel and does nothing.\n\nWith query.expandLevel \u003d 3 -\u003e\n  query.expandLevel \u003d 2 and delegated.expandLevel \u003d 1.\nThis would work since we still have 1 level of expand left.",
      "parentUuid": "8c32decd_db74a0a3",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 57,
        "endChar": 7
      },
      "revId": "f578f33d469cec5469113f049d6a1388d0440436",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baa4aa03_f1aa846e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-06-05T23:42:56Z",
      "side": 1,
      "message": "\u003e We shouldn\u0027t guess here. Either it\u0027s written in the spec, in which case we should do what it says, or it\u0027s not, and we should get the behavior called out.\n\nThe spec seems to suggest that it\u0027s actually AutoExpand and not AutoExpandReferences that count as a level https://www.dmtf.org/sites/default/files/standards/documents/DSP0266_1.18.0.pdf#page\u003d48\n\n```\nThe $expand query parameter has a set of possible options that determine which hyperlinks in a\nresource are included in the expanded response. Some resources may already be expanded due to the\nresource\u0027s schema annotation AutoExpand , such as the Temperature object in the Thermal resource.\n```\n\nThe Temperatures array has AutoExpand unlike the other resources we\u0027ve mentioned https://github.com/openbmc/bmcweb/blob/master/static/redfish/v1/schema/Thermal_v1.xml#L94\n\nThe response from /redfish/v1/Chassis/{ChassisId}/Thermal actually has the Temperature resources expanded\n\n```\ncurl -s \u0027localhost/redfish/v1/Chassis/chassis/Thermal\u0027\n{\n  \"@odata.id\": \"/redfish/v1/Chassis/chassis/Thermal\",\n  \"@odata.type\": \"#Thermal.v1_4_0.Thermal\",\n  \"Fans\": [],\n  \"Id\": \"Thermal\",\n  \"Name\": \"Thermal\",\n  \"Redundancy\": [],\n  \"Temperatures\": [\n    {\n      \"@odata.id\": \"/redfish/v1/Chassis/chassis/Thermal#/Temperatures/0\",\n      \"@odata.type\": \"#Thermal.v1_3_0.Temperature\",\n      \"MaxReadingRangeTemp\": 125.0,\n      \"MemberId\": \"sensor\",\n      \"MinReadingRangeTemp\": 0.0,\n      \"Name\": \"Sensor\",\n      \"ReadingCelsius\": 47.0,\n      \"Status\": {\n        \"Health\": \"OK\",\n        \"State\": \"Enabled\"\n      }\n    },\n    ...\n}\n```\n\nThat type of auto expand will get correctly counted as a level by the existing expand implementation.",
      "parentUuid": "4ea5d7b4_02fdd2e7",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 57,
        "endChar": 7
      },
      "revId": "f578f33d469cec5469113f049d6a1388d0440436",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf9460de_be273885",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-07T16:13:27Z",
      "side": 1,
      "message": "\u003e \u003e We shouldn\u0027t guess here. Either it\u0027s written in the spec, in which case we should do what it says, or it\u0027s not, and we should get the behavior called out.\n\u003e \n\u003e The spec seems to suggest that it\u0027s actually AutoExpand and not AutoExpandReferences that count as a level https://www.dmtf.org/sites/default/files/standards/documents/DSP0266_1.18.0.pdf#page\u003d48\n\u003e \n\u003e ```\n\u003e The $expand query parameter has a set of possible options that determine which hyperlinks in a\n\u003e resource are included in the expanded response. Some resources may already be expanded due to the\n\u003e resource\u0027s schema annotation AutoExpand , such as the Temperature object in the Thermal resource.\n\nI buy that interpretation.\n\n\u003e ```\n\u003e \n\u003e The Temperatures array has AutoExpand unlike the other resources we\u0027ve mentioned https://github.com/openbmc/bmcweb/blob/master/static/redfish/v1/schema/Thermal_v1.xml#L94\n\u003e \n\u003e The response from /redfish/v1/Chassis/{ChassisId}/Thermal actually has the Temperature resources expanded\n\u003e \n\u003e ```\n\u003e curl -s \u0027localhost/redfish/v1/Chassis/chassis/Thermal\u0027\n\u003e {\n\u003e   \"@odata.id\": \"/redfish/v1/Chassis/chassis/Thermal\",\n\u003e   \"@odata.type\": \"#Thermal.v1_4_0.Thermal\",\n\u003e   \"Fans\": [],\n\u003e   \"Id\": \"Thermal\",\n\u003e   \"Name\": \"Thermal\",\n\u003e   \"Redundancy\": [],\n\u003e   \"Temperatures\": [\n\u003e     {\n\u003e       \"@odata.id\": \"/redfish/v1/Chassis/chassis/Thermal#/Temperatures/0\",\n\u003e       \"@odata.type\": \"#Thermal.v1_3_0.Temperature\",\n\u003e       \"MaxReadingRangeTemp\": 125.0,\n\u003e       \"MemberId\": \"sensor\",\n\u003e       \"MinReadingRangeTemp\": 0.0,\n\u003e       \"Name\": \"Sensor\",\n\u003e       \"ReadingCelsius\": 47.0,\n\u003e       \"Status\": {\n\u003e         \"Health\": \"OK\",\n\u003e         \"State\": \"Enabled\"\n\u003e       }\n\u003e     },\n\u003e     ...\n\u003e }\n\u003e ```\n\u003e \n\u003e That type of auto expand will get correctly counted as a level by the existing expand implementation.",
      "parentUuid": "baa4aa03_f1aa846e",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 57,
        "endChar": 7
      },
      "revId": "f578f33d469cec5469113f049d6a1388d0440436",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a03564a_b475f4be",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-06-07T22:10:51Z",
      "side": 1,
      "message": "\u003e I buy that interpretation\n\nIn that case are there any concerns with reverting to the approach used in Patchset 9?  It\u0027s compatible with that interpretation and plays well with aggregation.  If we don\u0027t use a depth-based method (e.g. Patchset 11) then serious additional work would be required to support both of those.",
      "parentUuid": "cf9460de_be273885",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 57,
        "endChar": 7
      },
      "revId": "f578f33d469cec5469113f049d6a1388d0440436",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b471f185_1c775850",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-07T22:43:24Z",
      "side": 1,
      "message": "Sounds fine to me so long as willy is ok with it.",
      "parentUuid": "6a03564a_b475f4be",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 57,
        "endChar": 7
      },
      "revId": "f578f33d469cec5469113f049d6a1388d0440436",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef155437_a3dbda50",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2023-06-07T22:52:07Z",
      "side": 1,
      "message": "I am fine with it. I have reverted back to PATCH 9/10 for now.\n\nIt was moved away from it due to Nan\u0027s concern, so would want to check to see if that understanding is aligned.",
      "parentUuid": "b471f185_1c775850",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 57,
        "endChar": 7
      },
      "revId": "f578f33d469cec5469113f049d6a1388d0440436",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31abc319_e8b8b20c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-05T20:31:33Z",
      "side": 1,
      "message": "@carson, I\u0027m having trouble parsing your replies;  Are you cool with this as written, or does it still need some iteration to support aggregation properly?",
      "revId": "f578f33d469cec5469113f049d6a1388d0440436",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "874bd898_c2f2838f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-06-05T20:45:07Z",
      "side": 1,
      "message": "Sorry about that.  I\u0027m not cool with it as written (Patchset 11).  It effectively reverts https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60727 and thus reintroduces the original aggregated $expand issue that was fixed by that patch.\n\nI tested Patchset 9 and I\u0027m good with that one.  It makes considerations for depth expanded so we won\u0027t get burned by assuming whether or not aggregated resources have been expanded.",
      "parentUuid": "31abc319_e8b8b20c",
      "revId": "f578f33d469cec5469113f049d6a1388d0440436",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
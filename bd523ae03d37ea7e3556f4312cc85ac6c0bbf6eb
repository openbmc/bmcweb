{
  "comments": [
    {
      "key": {
        "uuid": "b893801e_327b9e3c",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-17T00:10:08Z",
      "side": 1,
      "message": "nit, string_view is generally preferred today.",
      "range": {
        "startLine": 111,
        "startChar": 41,
        "endLine": 111,
        "endChar": 53
      },
      "revId": "bd523ae03d37ea7e3556f4312cc85ac6c0bbf6eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d8e91cc_6ff85b2e",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-12-17T00:13:16Z",
      "side": 1,
      "message": "oh nice. We moved to cpp20.\n\nLet me update it.",
      "parentUuid": "b893801e_327b9e3c",
      "range": {
        "startLine": 111,
        "startChar": 41,
        "endLine": 111,
        "endChar": 53
      },
      "revId": "bd523ae03d37ea7e3556f4312cc85ac6c0bbf6eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b5d4db0_6d48aa7c",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-17T00:25:18Z",
      "side": 1,
      "message": "string_view was c++17, and we had boost::string_view long before that ðŸ˜Š",
      "parentUuid": "2d8e91cc_6ff85b2e",
      "range": {
        "startLine": 111,
        "startChar": 41,
        "endLine": 111,
        "endChar": 53
      },
      "revId": "bd523ae03d37ea7e3556f4312cc85ac6c0bbf6eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "549c10ef_5fb2cce9",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-12-17T00:40:58Z",
      "side": 1,
      "message": "oh right. I think only like start_with was added to string_view in 20 and I was waiting for that in some project.\n\nNice",
      "parentUuid": "7b5d4db0_6d48aa7c",
      "range": {
        "startLine": 111,
        "startChar": 41,
        "endLine": 111,
        "endChar": 53
      },
      "revId": "bd523ae03d37ea7e3556f4312cc85ac6c0bbf6eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f07da6d3_9c9144cd",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-17T00:10:08Z",
      "side": 1,
      "message": "This condition needs checked first before the loop, right?  Otherwise you\u0027re priming the loop with an invalid index.\n\nIn practice, this probably works because I think npos is probably MAX_INT on most implementations, but we shouldn\u0027t rely on that.\n\nI wonder if we should walk the string backwards, something like\n\ninline std::string getResourceName(const std::string_view id){\nwhile(id.rbegin() !\u003d id.rend() \u0026\u0026 std::isdigit(*id.rbegin())){\n    id.remove_suffix(1);\n}\nif (id.rbegin() !\u003d id.rend() \u0026\u0026 *id.rbegin() \u003d\u003d \u0027_\u0027){\n   id.remove_suffix(1);\n}\nreturn {id};\n}\n\n\nMaybe is more clear and handles more edge cases?",
      "range": {
        "startLine": 122,
        "startChar": 12,
        "endLine": 122,
        "endChar": 38
      },
      "revId": "bd523ae03d37ea7e3556f4312cc85ac6c0bbf6eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fa367de_05dc8bd8",
        "filename": "include/dbus_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-12-17T00:40:58Z",
      "side": 1,
      "message": "seems like it underflow and actually do the loop. But since the test didn\u0027t have the valid name to be all number, if didn\u0027t catch it.\n\nLet me add that test case.\n\nYeah, looking from the back is probably easier. Thanks.",
      "parentUuid": "f07da6d3_9c9144cd",
      "range": {
        "startLine": 122,
        "startChar": 12,
        "endLine": 122,
        "endChar": 38
      },
      "revId": "bd523ae03d37ea7e3556f4312cc85ac6c0bbf6eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}
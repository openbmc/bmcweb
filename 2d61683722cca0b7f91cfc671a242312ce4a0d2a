{
  "comments": [
    {
      "key": {
        "uuid": "c438920f_3764fe67",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-08T18:43:40Z",
      "side": 1,
      "message": "What other dependencies are needed to test this?  What daemon is hosting this API?",
      "revId": "2d61683722cca0b7f91cfc671a242312ce4a0d2a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "587603a1_bb7d570d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-06-09T04:59:48Z",
      "side": 1,
      "message": "Ed - On Nvidia\u0027s platforms, the source of this information is firmware running on GPUs or other entities connected to the GPU and to the BMC. The information itself is served to the BMC using a proprietary protocol. The BMC has a daemon that implements this protocol and then hosts the information on D-Bus.\n\nSharad - we may have to add this detail to the commit message.",
      "parentUuid": "c438920f_3764fe67",
      "revId": "2d61683722cca0b7f91cfc671a242312ce4a0d2a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99292e7d_fd5d8549",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000997
      },
      "writtenOn": "2021-06-10T19:23:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "587603a1_bb7d570d",
      "revId": "2d61683722cca0b7f91cfc671a242312ce4a0d2a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f63d45a_a65afc0a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-10T19:52:30Z",
      "side": 1,
      "message": "Great, lets get a link to the source for that daemon included in this commit message.",
      "parentUuid": "99292e7d_fd5d8549",
      "revId": "2d61683722cca0b7f91cfc671a242312ce4a0d2a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "820b4794_dfc21fd7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-06-11T05:02:26Z",
      "side": 1,
      "message": "Ed - we don\u0027t have approvals to upstream that daemon yet (primarily because of the protocol it implements to talk to GPUs). I understand your point about dead code, but to understand better - is this about testability or being able to look at the provider daemon code or both? Is all code in bmcweb testable on a certain reference platform or QEMU? A certain provider daemon may just not create any D-Bus objects on QEMU because the relevant hardware may not be emulated, right? In this particular case, you would not only need that daemon but additional hardware, to test.\n\nSince we can\u0027t push up that daemon, what would you recommend?",
      "parentUuid": "2f63d45a_a65afc0a",
      "revId": "2d61683722cca0b7f91cfc671a242312ce4a0d2a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b80b35e3_f953cc0b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-06-15T16:56:54Z",
      "side": 1,
      "message": "\u003e Ed - we don\u0027t have approvals to upstream that daemon yet (primarily because of the protocol it implements to talk to GPUs). I understand your point about dead code, but to understand better - is this about testability or being able to look at the provider daemon code or both? Is all code in bmcweb testable on a certain reference platform or QEMU? A certain provider daemon may just not create any D-Bus objects on QEMU because the relevant hardware may not be emulated, right? In this particular case, you would not only need that daemon but additional hardware, to test.\n\u003e \n\u003e Since we can\u0027t push up that daemon, what would you recommend?\n\nTalking to your management chain about how open source software functions, and relaying the fact that open source can\u0027t maintain code we can\u0027t see.  While I do want to see these features made available, if the project is unable to support them because the useful half the code has been held back, that doesn\u0027t help the project overall, and means that this code effectively doesn\u0027t function for anyone in the open source capacity, which largely defeats the \"Open\" part of OpenBMC.\n\nWe discussed a little on discord.\n\nI understand your company has worries about disclosing hardware early, which I can respect.  The best advice I can think of would be to implement these features against something that\u0027s already shipping and public (doesn\u0027t even have to be your companies hardware).  That would make sure that the appropriate backends existed for these things, and they could be tested and used by someone on a supported system.  I\u0027m sure there are people in open source (myself included) that would help you to test on other systems if you\u0027re unable to source your own.\n\nFrom my perspective, as a maintainer, I can\u0027t maintain code that I can\u0027t see.  If this interface needed to change tomorrow, which happens from time to time, there\u0027s no way to make sure it doesn\u0027t break if there\u0027s no backend for it.\n\nHopefully that somewhat explains that rationale for waiting for backend support on this patch.",
      "parentUuid": "820b4794_dfc21fd7",
      "revId": "2d61683722cca0b7f91cfc671a242312ce4a0d2a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1222d1c_b308f54f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-06-29T12:46:03Z",
      "side": 1,
      "message": "Ed - thanks for your input. I had a discussion about this I believe the option of making these commits work with existing backends is the currently feasible option for us. I\u0027ve pushed a commit to EM that is relevant in terms of testing these commits - https://gerrit.openbmc-project.xyz/c/openbmc/entity-manager/+/44546. I couldn\u0027t test on actual hardware, might need some help there, you will find details in the commit message. Please let me know if this EM commit enables getting this bmcweb commits to a mergeable state.",
      "parentUuid": "b80b35e3_f953cc0b",
      "revId": "2d61683722cca0b7f91cfc671a242312ce4a0d2a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b5519002_37641281",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "lets just remove this from the commit message;  Mutual TLS itself as implemented here doesn\u0027t identify the bmc as a special user.  Some future implementation that adds multiple root certificates might, but lets push that to a later time.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 71
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b316f23_0c5c0511",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T05:26:34Z",
      "side": 1,
      "message": "I was giving some examples for the MTLS use cases. One of the use case is redfish aggregation where we use CN from certificate to create user session. I can remove it if it is confusing.",
      "parentUuid": "b5519002_37641281",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 71
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "493a5599_b35a1dd0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-05T23:00:26Z",
      "side": 1,
      "message": "My point is that THIS commit doesn\u0027t implement that, so it\u0027s confusing.  If you made it clear that in the future we might do that, it would be fine to keep, but I think it\u0027s just easier to remove.  This patchset can stand on its own.",
      "parentUuid": "5b316f23_0c5c0511",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 71
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e66d6e41_a7b5728e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-06T14:14:29Z",
      "side": 1,
      "message": "Removed",
      "parentUuid": "493a5599_b35a1dd0",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 71
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98406b19_08e9642b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2024-06-05T11:30:05Z",
      "side": 1,
      "message": "why does bmc needs to create self signed client certificates?\nmtls certificates will be expected to be uploaded on BMC by user while configuring MTLS right?",
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3cd4d5f_3376b899",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-05T12:37:28Z",
      "side": 1,
      "message": "what happens if the certificate is not present in the expected path? \nWhat is the fallback?\nI have already said that , this self signed certificate is of no use. It is there as a fallback. \nWe have two choice\n1) place self signed certificate \nor\n2) check the presence of certificate in the path, then decide whether MTLS should be enabled in client ssl context or not.\nI am open for any of these approach.",
      "parentUuid": "98406b19_08e9642b",
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52fba909_dd1ba409",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-05T23:00:26Z",
      "side": 1,
      "message": "\u003e what happens if the certificate is not present in the expected path?\n\nThe fallback should be to connect without an client certificate, the same as how we do today.  That path needs to work anyway, because not all servers will be enabled for client connections.",
      "parentUuid": "f3cd4d5f_3376b899",
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "412daa96_071fde83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-06T04:30:56Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "52fba909_dd1ba409",
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c0dbe5e_1c52a7d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "Hardcoded \"root\" user implies that users will be using the root user, which defeats your earlier point about identifying the bmc as a special user.  The common name in the Certificate should determine the user, and because we don\u0027t have control of the certificate signing (only a CA has that) we can just take whatever user was signed by the CA when the client certificate is configured.\n\nWe should not generate a self-signed client cert.  There\u0027s no point, as it won\u0027t be trusted by any implementation given there\u0027s no public CA, as you point out.  If strong mtls verification is not enabled, no client cert is the same as an untrusted client cert.",
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c87ff529_c8d8beb8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-06T14:14:29Z",
      "side": 1,
      "message": "There is no self signed certificate for client. Assumption is that the CA certified client.pem should have valid CN if that is to be used for aggregation session.\nProvisioning flow will take care of it. Http_client need not have any business here",
      "parentUuid": "3c0dbe5e_1c52a7d9",
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa021d3d_a8696c56",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-06T16:47:59Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "c87ff529_c8d8beb8",
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb69c6d6_6db08670",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-06T16:49:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa021d3d_a8696c56",
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ed8c3ad_32a6bc28",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "How?  With the goal of not making this patch huge, I\u0027m happy to push this to another patch, but we need some kind of indication of how you expect this to work.  Right now, simply self signing a certificate can\u0027t prove that we\u0027ve implemented mtls correctly.\n\nIf you tested this by provisioning certificates by hand, say that.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 26,
        "endChar": 59
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a142737_725f0734",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-06T14:14:29Z",
      "side": 1,
      "message": "I have added the detailed testing step in the commit. Yes did a manual certificate provisioning done . I mean copied CA certified entity certificates in /etc/ssl/certs/https folder . And placed corresponding root CA in /etc/ssl/certs/authority folder. \n\nTested various scenarios",
      "parentUuid": "9ed8c3ad_32a6bc28",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 26,
        "endChar": 59
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f3f3c1d_07658014",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-06-03T21:15:19Z",
      "side": 1,
      "message": "originated. \n\nI suspect this is your CI fail\n\n    Running shellcheck\n    commit_gitlint: FAILED\n    commit_spelling: FAILED",
      "range": {
        "startLine": 35,
        "startChar": 12,
        "endLine": 35,
        "endChar": 22
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1441d877_fc088596",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "now that we\u0027re not generating it at connection time, if the client tls certificate is updated, how is it picked up?  I suspect this optimization causes new connections to be created with the old certificate when it\u0027s updated.",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fa0157a_d7f44262",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T05:17:35Z",
      "side": 1,
      "message": "I was expecting a restart of bmcweb if any certificate changes. The same argument goes to server certificate also right? How does new server certificate getting picked up?",
      "parentUuid": "1441d877_fc088596",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6adfdd4_8fd7816b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T05:30:37Z",
      "side": 1,
      "message": "no, bmcweb for server certificates picks them up without dropping connections or requiring a restart.  I‚Äôd expect similar here.\n\ntake a look at how bmcweb handles HUP and it will make more sense.",
      "parentUuid": "6fa0157a_d7f44262",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b82bdec_1b150014",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T07:24:35Z",
      "side": 1,
      "message": "How? I could see loadCertificate called from startAsyncWaitForSignal , which is triggered by tls property changes. Here we are cancelling acceptor. Aren\u0027t we supposed to call doAccept again? or are you saying that async_accept will take care of this?\n\nI think I can use same logic here too. Only issue is how do we get to know about certificate change? In both server and client certificate case I don\u0027t see any monitoring happening for certificate file update. Am I missing something here?",
      "parentUuid": "f6adfdd4_8fd7816b",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c65804e_2961cf80",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T15:25:17Z",
      "side": 1,
      "message": "\u003e How? I could see loadCertificate called from startAsyncWaitForSignal , which is triggered by tls property changes. Here we are cancelling acceptor. Aren\u0027t we supposed to call doAccept again? or are you saying that async_accept will take care of this?\n\nYou ask how, they you point out the code where we do it.  The gist is that we track certificates as shared pointers, and we replace the \"main\" shared pointer when we have a new certificate.\n\n\u003e \n\u003e I think I can use same logic here too. Only issue is how do we get to know about certificate change? In both server and client certificate case I don\u0027t see any monitoring happening for certificate file update. Am I missing something here?\n\nit would be HUP, just another callback in startAsyncWaitForSignal",
      "parentUuid": "2b82bdec_1b150014",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a6dbba2_6fb349b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T16:01:54Z",
      "side": 1,
      "message": "note, canceling the acceptor is just because the first connection is constructed before the accept call.  Arguably we could organize that code better so the cancel isn\u0027t required, but canceling was the easiest thing.",
      "parentUuid": "2c65804e_2961cf80",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de8371d9_41c8d7bc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T17:14:35Z",
      "side": 1,
      "message": "Actually, for the client case, I think it also needs to include some variation of the client certificate (hash or something) in the clientKey, so that we differentiate connections with the right cert with ones that have the wrong cert.\n\nWhen we change a certificate, that client key will change, which will cause a new connection to be opened instead of reusing the old, and we\u0027ll get a new connection.  In this way we will also be able to support per-subscription keys.",
      "parentUuid": "0a6dbba2_6fb349b5",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "778ab3ad_3d574418",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-06T14:14:29Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9f3f3c1d_07658014",
      "range": {
        "startLine": 35,
        "startChar": 12,
        "endLine": 35,
        "endChar": 22
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8fa8af3_0153604c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-06T14:14:29Z",
      "side": 1,
      "message": "Are you suggesting that we need to disconnect all keep_alive connection created, if there is a certificate change? Now I have modified the code to pick latest client certificate whenever a new connection is made. Caching the ssl context logic is removed",
      "parentUuid": "de8371d9_41c8d7bc",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99726d06_45ebaa70",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-06T16:47:59Z",
      "side": 1,
      "message": "\u003e Are you suggesting that we need to disconnect all keep_alive connection created, if there is a certificate change?\n\nNot explicitly, but that\u0027s what will happen if the connections stop being used.\n\n\u003e Now I have modified the code to pick latest client certificate whenever a new connection is made. Caching the ssl context logic is removed",
      "parentUuid": "b8fa8af3_0153604c",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d210807_f4270cad",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-06T16:49:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99726d06_45ebaa70",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5e7724e_2df3d066",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:50:20Z",
      "side": 1,
      "message": "What is a \"developer test\"",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 14
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3af4b81_61e655dc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T05:26:34Z",
      "side": 1,
      "message": "Ran manual test execution by the developer to test aggregation using MTLS certificate",
      "parentUuid": "c5e7724e_2df3d066",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 14
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38b8ec1f_c3f6e1ec",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T05:30:37Z",
      "side": 1,
      "message": "right, so give some details about what you did manually.  just putting ‚Äúdeveloper test‚Äù doesn‚Äôt help someone to replicate your results",
      "parentUuid": "a3af4b81_61e655dc",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 14
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdcbebef_8aa3fe5f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T07:24:35Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "38b8ec1f_c3f6e1ec",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 14
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cf0249c_dc5b05c7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:50:20Z",
      "side": 1,
      "message": "Describe this better than \"worked well\" please.\n\nWere you testing against bmcweb as an aggregation source, or something else?\nWhat was your aggregation topology like?\ndid you run the service validator?\ndid you load a bad (untrusted) certificate and verify the connection was rejected, and we returned the correct error code?\nDid you test AggregationSource returned the correct data?",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 47
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7063889_c2e0b6a8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2024-06-05T11:30:05Z",
      "side": 1,
      "message": "please update test results here",
      "parentUuid": "1cf0249c_dc5b05c7",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 47
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84ca94dc_8afe4195",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-06T14:14:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7063889_c2e0b6a8",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 47
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2e3afa9_a81a6e9d",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "why weak_ptr here?",
      "range": {
        "startLine": 161,
        "startChar": 9,
        "endLine": 161,
        "endChar": 17
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72367ba4_ac071d19",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-05T07:24:49Z",
      "side": 1,
      "message": "Yes this has to be changed now as per you comment below for reloading certificate run time.\nWhat is your opinion about the reusing the ssl context. It may have some advantage for the retry paths and large number of connections.\n\nIs the complexity worth the performance benefit we get?",
      "parentUuid": "d2e3afa9_a81a6e9d",
      "range": {
        "startLine": 161,
        "startChar": 9,
        "endLine": 161,
        "endChar": 17
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e7e5282_20317b28",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-05T23:00:26Z",
      "side": 1,
      "message": "I\u0027d expect this to be shared-ptr, not weak_ptr.  Why is it weak ptr?\n\n\n\u003e What is your opinion about the reusing the ssl context.\n\nI\u0027d be surprised if it was a significant performance benefit.  They\u0027re pretty cheap to construct I think?  It might save memory, but we\u0027re creating 10s of connections, not 1000s, so I doubt it will matter.",
      "parentUuid": "72367ba4_ac071d19",
      "range": {
        "startLine": 161,
        "startChar": 9,
        "endLine": 161,
        "endChar": 17
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0189eb22_5bb2b727",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-06T04:30:56Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9e7e5282_20317b28",
      "range": {
        "startLine": 161,
        "startChar": 9,
        "endLine": 161,
        "endChar": 17
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7a7f8b9_ab8b9e3f",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 609,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "We shouldn\u0027t try to lock the context if we\u0027re not in ssl mode.",
      "range": {
        "startLine": 609,
        "startChar": 0,
        "endLine": 609,
        "endChar": 33
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edde5ba2_b7299420",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 609,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-05T07:24:49Z",
      "side": 1,
      "message": "true. will change it",
      "parentUuid": "e7a7f8b9_ab8b9e3f",
      "range": {
        "startLine": 609,
        "startChar": 0,
        "endLine": 609,
        "endChar": 33
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc34de43_aefedb44",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 609,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-06T14:14:29Z",
      "side": 1,
      "message": "moved back to previous implementation",
      "parentUuid": "edde5ba2_b7299420",
      "range": {
        "startLine": 609,
        "startChar": 0,
        "endLine": 609,
        "endChar": 33
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c693259_ae6b63d8",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 727,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "unrelated whitespace change.",
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41f432f9_36409046",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 727,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-06T14:14:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c693259_ae6b63d8",
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "508ec401_2a3c22d0",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 854,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-03T19:24:43Z",
      "side": 1,
      "message": "This is reading the certificate from current working directory.  Shouldn\u0027t we be reading from somewhere specific?",
      "range": {
        "startLine": 854,
        "startChar": 62,
        "endLine": 854,
        "endChar": 74
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f6dbce2_fa9b8798",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 854,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T05:39:53Z",
      "side": 1,
      "message": "yes it has been done by the ensureCertificate function",
      "parentUuid": "508ec401_2a3c22d0",
      "range": {
        "startLine": 854,
        "startChar": 62,
        "endLine": 854,
        "endChar": 74
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b9523d3_47dcd2b6",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 854,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-05T23:00:26Z",
      "side": 1,
      "message": "Right, which isn\u0027t really correct to the system.",
      "parentUuid": "2f6dbce2_fa9b8798",
      "range": {
        "startLine": 854,
        "startChar": 62,
        "endLine": 854,
        "endChar": 74
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d8188f8_5349326e",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 854,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-06T14:14:29Z",
      "side": 1,
      "message": "check the new implementation. Removed the self signed certificate creation for client",
      "parentUuid": "3b9523d3_47dcd2b6",
      "range": {
        "startLine": 854,
        "startChar": 62,
        "endLine": 854,
        "endChar": 74
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29391a98_0e905966",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 855,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-03T19:24:43Z",
      "side": 1,
      "message": "Root seems odd for this call?",
      "range": {
        "startLine": 855,
        "startChar": 62,
        "endLine": 855,
        "endChar": 68
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75194ccf_ab70bb60",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 855,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T05:39:53Z",
      "side": 1,
      "message": "Yes , I kept it as root to start a discussion over that. How do think it should be done? Dont we create a default self signed certificate with some CN? We have done it for server certificate(\u0027testhost\u0027) . Shouldn\u0027t we do the same for client? Are we open for a meson variable for this?",
      "parentUuid": "29391a98_0e905966",
      "range": {
        "startLine": 855,
        "startChar": 62,
        "endLine": 855,
        "endChar": 68
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b9ff44e_fc1022b5",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 855,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T06:04:26Z",
      "side": 1,
      "message": "\u003e Dont we create a default self signed certificate with some CN?\n\nthe CN for the server cert is \"TestHost\" and is only used because if you don\u0027t have a server cert, no client can connect.  For client auth, we should just not use a client cert if one isn\u0027t available;  Client certs are not required, only server certs.\n\n\u003e Are we open for a meson variable for this?\n\nI fear that you\u0027re not understanding how mutual TLS provisioning works;\n\nMutually trusted entity creates a private key, and a certificate authority.\n\nEither with a CSR from the BMC, or with a newly made private, CA (off BMC) creates and signs a certificate for mutual authentication.  Certificate will include the common name (username) that the BMC is authorized to use.\n\nCA gives cert, or cert+private key to BMC\n\nBMC connects using cert.\n\nAt no point does this involve the BMC itself deciding on its username, the CA decides that.",
      "parentUuid": "75194ccf_ab70bb60",
      "range": {
        "startLine": 855,
        "startChar": 62,
        "endLine": 855,
        "endChar": 68
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e5687a7_fe6e7dfa",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 855,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-05T07:09:47Z",
      "side": 1,
      "message": "I did exactly what you described in my testing. \nMy question was not around how MTLS works.\nMTLS is the property of both server and client. Even if client provides certificates, it is up to the server to decide on if MTLS should be enabled or not. \nIn our case we have use cases for http clients to talk to non MTLS servers. Whether a server is MTLS enabled or not is not decided by the http_client. \n\nSo rather than giving a runtime configuration to decide on usage of client certificate,I thought it is better to assume that there is a client.pem always available in specified dir. Bmc can always override the certificate by installing a CA signed entity certificate with same name.  My implementation is done based on that.\n\nSince we have self signed client certificate now , we wanted to decide on what should be the CN for it. This CN can be one of the bmcuser name which already has some privileges , which will be helpful in developer testing for aggregation. \n\nSo I was asking should we hardcode the CN or take it from compiler generated variable?\n\nI am ok with not having default certificate generation. But that make some more checks in code to see if certificate available or client_MTLS feature flag enabled etc.",
      "parentUuid": "0b9ff44e_fc1022b5",
      "range": {
        "startLine": 855,
        "startChar": 62,
        "endLine": 855,
        "endChar": 68
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9523960_4bc456ac",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 855,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2024-06-05T11:30:05Z",
      "side": 1,
      "message": "I agree with Ed here, there is no point in deciding username in BMC itself.",
      "parentUuid": "9e5687a7_fe6e7dfa",
      "range": {
        "startLine": 855,
        "startChar": 62,
        "endLine": 855,
        "endChar": 68
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13332722_7b1d3c59",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 855,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-05T12:39:43Z",
      "side": 1,
      "message": "this is needed only if we implement fallback self signed client certificate.",
      "parentUuid": "b9523960_4bc456ac",
      "range": {
        "startLine": 855,
        "startChar": 62,
        "endLine": 855,
        "endChar": 68
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d91e3ea4_3a789f2c",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 855,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-05T12:43:51Z",
      "side": 1,
      "message": "I decided on the self signed certificate , because bmcweb is not strictly validating the client certificate. It just uses the CN to create user session.\nI thought that there may be  cases for aggregator to work with weaker mtls validation",
      "parentUuid": "13332722_7b1d3c59",
      "range": {
        "startLine": 855,
        "startChar": 62,
        "endLine": 855,
        "endChar": 68
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4b60e87_e932c332",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 855,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-05T23:00:26Z",
      "side": 1,
      "message": "\u003e So rather than giving a runtime configuration to decide on usage of client certificate,I thought it is better to assume that there is a client.pem always available in specified dir.\n\nWe need to store the client certificate in phosphor-certificate-manager, so that the Redfish CertificateCollection things work.\n\n\n\u003e we wanted to decide on what should be the CN for it.\n\nFor a self signed client certificate, the CN doesn\u0027t matter, there is nothing that trusts the certificate, so the CN can just be empty string.\n\nBut again, if a client certificate hasn\u0027t been provisioned, we should not generate a self signed one.  There\u0027s no point.",
      "parentUuid": "d91e3ea4_3a789f2c",
      "range": {
        "startLine": 855,
        "startChar": 62,
        "endLine": 855,
        "endChar": 68
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ef9edf0_93d273a1",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 855,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-06T04:30:56Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b4b60e87_e932c332",
      "range": {
        "startLine": 855,
        "startChar": 62,
        "endLine": 855,
        "endChar": 68
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d58c970a_579d5e32",
        "filename": "include/ssl_key_handler.hpp",
        "patchSetId": 2
      },
      "lineNbr": 550,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-03T17:38:33Z",
      "side": 1,
      "message": "Why are we modifying the server certificate creation routines?  We already have client certificate creation routines here.",
      "range": {
        "startLine": 550,
        "startChar": 48,
        "endLine": 550,
        "endChar": 67
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b934ecd5_82f13959",
        "filename": "include/ssl_key_handler.hpp",
        "patchSetId": 2
      },
      "lineNbr": 550,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-05T07:27:10Z",
      "side": 1,
      "message": "most of the code are same. Will refactor the code to have a reusable part and serve/client specific parts.",
      "parentUuid": "d58c970a_579d5e32",
      "range": {
        "startLine": 550,
        "startChar": 48,
        "endLine": 550,
        "endChar": 67
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "538fdb97_a861dfb7",
        "filename": "include/ssl_key_handler.hpp",
        "patchSetId": 2
      },
      "lineNbr": 550,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-06T14:14:29Z",
      "side": 1,
      "message": "refactored the code. please review",
      "parentUuid": "b934ecd5_82f13959",
      "range": {
        "startLine": 550,
        "startChar": 48,
        "endLine": 550,
        "endChar": 67
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
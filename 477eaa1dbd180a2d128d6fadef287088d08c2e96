{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b5519002_37641281",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "lets just remove this from the commit message;  Mutual TLS itself as implemented here doesn\u0027t identify the bmc as a special user.  Some future implementation that adds multiple root certificates might, but lets push that to a later time.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 71
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b316f23_0c5c0511",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T05:26:34Z",
      "side": 1,
      "message": "I was giving some examples for the MTLS use cases. One of the use case is redfish aggregation where we use CN from certificate to create user session. I can remove it if it is confusing.",
      "parentUuid": "b5519002_37641281",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 71
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c0dbe5e_1c52a7d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "Hardcoded \"root\" user implies that users will be using the root user, which defeats your earlier point about identifying the bmc as a special user.  The common name in the Certificate should determine the user, and because we don\u0027t have control of the certificate signing (only a CA has that) we can just take whatever user was signed by the CA when the client certificate is configured.\n\nWe should not generate a self-signed client cert.  There\u0027s no point, as it won\u0027t be trusted by any implementation given there\u0027s no public CA, as you point out.  If strong mtls verification is not enabled, no client cert is the same as an untrusted client cert.",
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ed8c3ad_32a6bc28",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "How?  With the goal of not making this patch huge, I\u0027m happy to push this to another patch, but we need some kind of indication of how you expect this to work.  Right now, simply self signing a certificate can\u0027t prove that we\u0027ve implemented mtls correctly.\n\nIf you tested this by provisioning certificates by hand, say that.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 26,
        "endChar": 59
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f3f3c1d_07658014",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-06-03T21:15:19Z",
      "side": 1,
      "message": "originated. \n\nI suspect this is your CI fail\n\n    Running shellcheck\n    commit_gitlint: FAILED\n    commit_spelling: FAILED",
      "range": {
        "startLine": 35,
        "startChar": 12,
        "endLine": 35,
        "endChar": 22
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1441d877_fc088596",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "now that we\u0027re not generating it at connection time, if the client tls certificate is updated, how is it picked up?  I suspect this optimization causes new connections to be created with the old certificate when it\u0027s updated.",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fa0157a_d7f44262",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T05:17:35Z",
      "side": 1,
      "message": "I was expecting a restart of bmcweb if any certificate changes. The same argument goes to server certificate also right? How does new server certificate getting picked up?",
      "parentUuid": "1441d877_fc088596",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6adfdd4_8fd7816b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T05:30:37Z",
      "side": 1,
      "message": "no, bmcweb for server certificates picks them up without dropping connections or requiring a restart.  I’d expect similar here.\n\ntake a look at how bmcweb handles HUP and it will make more sense.",
      "parentUuid": "6fa0157a_d7f44262",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b82bdec_1b150014",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T07:24:35Z",
      "side": 1,
      "message": "How? I could see loadCertificate called from startAsyncWaitForSignal , which is triggered by tls property changes. Here we are cancelling acceptor. Aren\u0027t we supposed to call doAccept again? or are you saying that async_accept will take care of this?\n\nI think I can use same logic here too. Only issue is how do we get to know about certificate change? In both server and client certificate case I don\u0027t see any monitoring happening for certificate file update. Am I missing something here?",
      "parentUuid": "f6adfdd4_8fd7816b",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c65804e_2961cf80",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T15:25:17Z",
      "side": 1,
      "message": "\u003e How? I could see loadCertificate called from startAsyncWaitForSignal , which is triggered by tls property changes. Here we are cancelling acceptor. Aren\u0027t we supposed to call doAccept again? or are you saying that async_accept will take care of this?\n\nYou ask how, they you point out the code where we do it.  The gist is that we track certificates as shared pointers, and we replace the \"main\" shared pointer when we have a new certificate.\n\n\u003e \n\u003e I think I can use same logic here too. Only issue is how do we get to know about certificate change? In both server and client certificate case I don\u0027t see any monitoring happening for certificate file update. Am I missing something here?\n\nit would be HUP, just another callback in startAsyncWaitForSignal",
      "parentUuid": "2b82bdec_1b150014",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5e7724e_2df3d066",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:50:20Z",
      "side": 1,
      "message": "What is a \"developer test\"",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 14
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3af4b81_61e655dc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T05:26:34Z",
      "side": 1,
      "message": "Ran manual test execution by the developer to test aggregation using MTLS certificate",
      "parentUuid": "c5e7724e_2df3d066",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 14
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38b8ec1f_c3f6e1ec",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T05:30:37Z",
      "side": 1,
      "message": "right, so give some details about what you did manually.  just putting “developer test” doesn’t help someone to replicate your results",
      "parentUuid": "a3af4b81_61e655dc",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 14
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdcbebef_8aa3fe5f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T07:24:35Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "38b8ec1f_c3f6e1ec",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 14
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cf0249c_dc5b05c7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:50:20Z",
      "side": 1,
      "message": "Describe this better than \"worked well\" please.\n\nWere you testing against bmcweb as an aggregation source, or something else?\nWhat was your aggregation topology like?\ndid you run the service validator?\ndid you load a bad (untrusted) certificate and verify the connection was rejected, and we returned the correct error code?\nDid you test AggregationSource returned the correct data?",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 47
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2e3afa9_a81a6e9d",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "why weak_ptr here?",
      "range": {
        "startLine": 161,
        "startChar": 9,
        "endLine": 161,
        "endChar": 17
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7a7f8b9_ab8b9e3f",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 609,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "We shouldn\u0027t try to lock the context if we\u0027re not in ssl mode.",
      "range": {
        "startLine": 609,
        "startChar": 0,
        "endLine": 609,
        "endChar": 33
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c693259_ae6b63d8",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 727,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T00:47:55Z",
      "side": 1,
      "message": "unrelated whitespace change.",
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "508ec401_2a3c22d0",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 854,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-03T19:24:43Z",
      "side": 1,
      "message": "This is reading the certificate from current working directory.  Shouldn\u0027t we be reading from somewhere specific?",
      "range": {
        "startLine": 854,
        "startChar": 62,
        "endLine": 854,
        "endChar": 74
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f6dbce2_fa9b8798",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 854,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T05:39:53Z",
      "side": 1,
      "message": "yes it has been done by the ensureCertificate function",
      "parentUuid": "508ec401_2a3c22d0",
      "range": {
        "startLine": 854,
        "startChar": 62,
        "endLine": 854,
        "endChar": 74
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29391a98_0e905966",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 855,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-03T19:24:43Z",
      "side": 1,
      "message": "Root seems odd for this call?",
      "range": {
        "startLine": 855,
        "startChar": 62,
        "endLine": 855,
        "endChar": 68
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75194ccf_ab70bb60",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 855,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-06-04T05:39:53Z",
      "side": 1,
      "message": "Yes , I kept it as root to start a discussion over that. How do think it should be done? Dont we create a default self signed certificate with some CN? We have done it for server certificate(\u0027testhost\u0027) . Shouldn\u0027t we do the same for client? Are we open for a meson variable for this?",
      "parentUuid": "29391a98_0e905966",
      "range": {
        "startLine": 855,
        "startChar": 62,
        "endLine": 855,
        "endChar": 68
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b9ff44e_fc1022b5",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 855,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-04T06:04:26Z",
      "side": 1,
      "message": "\u003e Dont we create a default self signed certificate with some CN?\n\nthe CN for the server cert is \"TestHost\" and is only used because if you don\u0027t have a server cert, no client can connect.  For client auth, we should just not use a client cert if one isn\u0027t available;  Client certs are not required, only server certs.\n\n\u003e Are we open for a meson variable for this?\n\nI fear that you\u0027re not understanding how mutual TLS provisioning works;\n\nMutually trusted entity creates a private key, and a certificate authority.\n\nEither with a CSR from the BMC, or with a newly made private, CA (off BMC) creates and signs a certificate for mutual authentication.  Certificate will include the common name (username) that the BMC is authorized to use.\n\nCA gives cert, or cert+private key to BMC\n\nBMC connects using cert.\n\nAt no point does this involve the BMC itself deciding on its username, the CA decides that.",
      "parentUuid": "75194ccf_ab70bb60",
      "range": {
        "startLine": 855,
        "startChar": 62,
        "endLine": 855,
        "endChar": 68
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d58c970a_579d5e32",
        "filename": "include/ssl_key_handler.hpp",
        "patchSetId": 2
      },
      "lineNbr": 550,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-03T17:38:33Z",
      "side": 1,
      "message": "Why are we modifying the server certificate creation routines?  We already have client certificate creation routines here.",
      "range": {
        "startLine": 550,
        "startChar": 48,
        "endLine": 550,
        "endChar": 67
      },
      "revId": "477eaa1dbd180a2d128d6fadef287088d08c2e96",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
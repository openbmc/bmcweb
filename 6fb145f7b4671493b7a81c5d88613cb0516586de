{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6a73bbb3_5bcaa5e0",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 519,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T21:15:21Z",
      "side": 1,
      "message": "We probably need to forward errors to the caller in this case to let them know that they only got partial results.\n\nNow.... how do we do that correctly?  IDK.  let me know if you need help interpreting the dead sea scrolls.... I mean the redfish standard.",
      "range": {
        "startLine": 512,
        "startChar": 0,
        "endLine": 519,
        "endChar": 0
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da313e46_1750c06c",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 519,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-15T19:53:23Z",
      "side": 1,
      "message": "\u003e Now.... how do we do that correctly?\nI\u0027m not sure either.  If we get partial results then we\u0027d still want to return a 200 with those results.  I\u0027ve looked over the schema for the Chassis collection as an example (https://redfish.dmtf.org/schemas/ChassisCollection.json).  It doesn\u0027t look like there\u0027s a field we can use to say that some items are likely missing.\n\nThere are also scenarios where the collection might not exist on a satellite, but we wouldn\u0027t normally expect it to anyway.  We could be searching for something like Fabrics which exists in the schema but is not currently supported in bmcweb.  Maybe some of the satellites support that resource collection. In that case I don\u0027t think it\u0027s noteworthy that the collection does not exist on the other satellites.\n\nSince this is the initial check, what we can do is set asyncResp to return the received error as long as asyncResp was not already going to return a 200.  That way we wouldn\u0027t be clobbering the partial results.\n\nI\u0027ve made the change to do so.  I\u0027ll leave this open in case you have a better idea.",
      "parentUuid": "6a73bbb3_5bcaa5e0",
      "range": {
        "startLine": 512,
        "startChar": 0,
        "endLine": 519,
        "endChar": 0
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b80d9ee_a3aadacd",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 519,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-23T22:03:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da313e46_1750c06c",
      "range": {
        "startLine": 512,
        "startChar": 0,
        "endLine": 519,
        "endChar": 0
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b44c9e5_bc0a735f",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 522,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T21:15:21Z",
      "side": 1,
      "message": "Couple things here:\n\n1. This is a possible nullptr dereference.  always check for validity.\n2. This should be a helper function on the Response object.  Ideally with the same prototype as the Request object to be similar.\n3. On most stl objects, operator[] creates a key if it doesn\u0027t exist, which isn\u0027t really what you intended here.  I forget if boost::beast::fields follows stl here, but I suspect it would.\n\nAs a safety check, we also need to check content-encoding.  in the context of this patch, feel free to just bail out if content-encoding is set to anything, but we don\u0027t want to accidentally parse a gzip payload as json, as it could give security vulnerabillities.",
      "range": {
        "startLine": 522,
        "startChar": 32,
        "endLine": 522,
        "endChar": 34
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11454ce5_766041f9",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 522,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-15T19:53:23Z",
      "side": 1,
      "message": "This same situation exists in the earlier router patch (https://gerrit.openbmc.org/c/openbmc/bmcweb/+/53310).  For now I\u0027ll use the same function call I created for that patch.  I\u0027ll come back to this an update it with the final version of what I use in that patch.",
      "parentUuid": "4b44c9e5_bc0a735f",
      "range": {
        "startLine": 522,
        "startChar": 32,
        "endLine": 522,
        "endChar": 34
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9aa1de17_6d352359",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 522,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-23T22:03:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11454ce5_766041f9",
      "range": {
        "startLine": 522,
        "startChar": 32,
        "endLine": 522,
        "endChar": 34
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "209ef1fb_fcf4e73a",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 524,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T21:15:21Z",
      "side": 1,
      "message": "Please don\u0027t do this fallback.  I understand why you did it, and I appreciate the thought, but its against the security standard, and encourages implementations to ignore putting in this field.",
      "range": {
        "startLine": 524,
        "startChar": 13,
        "endLine": 524,
        "endChar": 35
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "247bf8dd_a1fd6c71",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 524,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-15T19:53:23Z",
      "side": 1,
      "message": "I removed the fallback and added a check at the end to notify the user if the response was not a json.",
      "parentUuid": "209ef1fb_fcf4e73a",
      "range": {
        "startLine": 524,
        "startChar": 13,
        "endLine": 524,
        "endChar": 35
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59c401bc_5747dee0",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 530,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T21:15:21Z",
      "side": 1,
      "message": "Also needs reported to the user somehow.",
      "range": {
        "startLine": 530,
        "startChar": 0,
        "endLine": 530,
        "endChar": 79
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4affe1f5_5e8a22e3",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 530,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-15T19:53:23Z",
      "side": 1,
      "message": "We can return an operationFailed message as long as it won\u0027t require overwriting what would be an otherwise valid response.  That would be the desired resource collection exists on the aggregating BMC or we were able to retrieve it from a satellite BMC.\n\nI\u0027ve made the change.",
      "parentUuid": "59c401bc_5747dee0",
      "range": {
        "startLine": 530,
        "startChar": 0,
        "endLine": 530,
        "endChar": 79
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6e22d90_38853146",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 601,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-06-28T17:14:47Z",
      "side": 1,
      "message": "I feel like I shouldn\u0027t sort the array in an effort to keep all of the local resources together.",
      "range": {
        "startLine": 601,
        "startChar": 14,
        "endLine": 601,
        "endChar": 71
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4ab81d1_5e7012a4",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 601,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T21:15:21Z",
      "side": 1,
      "message": "ideally sort before the array (generally sort on dbus path or something simpler).  Yes, technically, we don\u0027t have to sort per the standard, but in my experience, you shortcut a lot of submitted \"bugs\" by having some sort order that makes sense to humans (ironically, that\u0027s why the current function is called \"human sort\")\n\n\"local resources then aggregated resources\" seems like a reasonable sort order to me, and relatively explainable.\n\nwhere people tend to get touchy is when you get stuff like:\n\ndimm1\ndimm11\ndimm12\ndimm2\ndimm20\ndimm21\n\nect.\n\n\nAlso, per the standard, we need to return a consistent response, so the response order can\u0027t be based on the order that http calls return.",
      "parentUuid": "e6e22d90_38853146",
      "range": {
        "startLine": 601,
        "startChar": 14,
        "endLine": 601,
        "endChar": 71
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9f88f71_b63eaca7",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 601,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-15T19:53:23Z",
      "side": 1,
      "message": "\u003e \"local resources then aggregated resources\" seems like a reasonable sort order to me, and relatively explainable.\nSounds reasonable to me as well\n\n\u003e Also, per the standard, we need to return a consistent response, so the response order can\u0027t be based on the order that http calls return.\nThen we definitely need a consistent way to sort the members array.  I could create some sort of expanded human sort where I group the members array by prefix and then sort within the prefix.  I would assume that the lack of a prefix means that the resource is on the aggregating bmc and should appear first.\n\nI would modify the response\u0027s completion handler to:\n1. Query D-Bus to retrieve the known prefixes\n2. Sort the members array (if it exists) as described above\n3. Call the original completion handler\n\nI\u0027d update the completion handler at the start of beginAggregation()",
      "parentUuid": "e4ab81d1_5e7012a4",
      "range": {
        "startLine": 601,
        "startChar": 14,
        "endLine": 601,
        "endChar": 71
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e05eef40_1fc85414",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 601,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-25T03:16:11Z",
      "side": 1,
      "message": "Generally I\u0027m a fan of just inserting in order in this case.  \"do action when all things are done\" is a really hard concept in bmcweb (and async daemons in general) and involve reference counting and a bunch of other mess, simply making sure that you insert by AlphaNumLess (probably by using std::upper_bound) would shortcut the need for reference counting an destructors.\n\nI think in the other thread we\u0027ve decided that dbus isn\u0027t going to own the prefix definition, so we can skip 1.\n\nstep 2 can be replaced by the above \"insert in place\" operation.\nwhich removes the need to have any step 3\n\nWDYT?",
      "parentUuid": "a9f88f71_b63eaca7",
      "range": {
        "startLine": 601,
        "startChar": 14,
        "endLine": 601,
        "endChar": 71
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6b07c04_ff2e9f29",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 601,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-25T20:11:06Z",
      "side": 1,
      "message": "\u003e Generally I\u0027m a fan of just inserting in order in this case.  \"do action when all things are done\" is a really hard concept in bmcweb (and async daemons in general) and involve reference counting and a bunch of other mess, simply making sure that you insert by AlphaNumLess (probably by using std::upper_bound) would shortcut the need for reference counting an destructors.\n\u003e \n\u003e I think in the other thread we\u0027ve decided that dbus isn\u0027t going to own the prefix definition, so we can skip 1.\n\u003e \n\u003e step 2 can be replaced by the above \"insert in place\" operation.\n\u003e which removes the need to have any step 3\n\u003e \n\u003e WDYT?\nI said response in my original reply, but I meant AsyncResp.  I feel like most of those concerns would be covered by waiting to sort until the completion handler of the AsyncResp since that wouldn\u0027t get called until all things are done.\n\nHowever I think your insert in place method is preferable since I wouldn\u0027t have to modify the completion handler.  I\u0027ll add this change and also assume that:\n1. local resources do not have a prefix\n2. aggregated resources will contain the prefix \"aggregated\u003c#\u003e_\" at the start of their resource ID.\nThose assumptions align with this thread https://gerrit.openbmc.org/c/openbmc/bmcweb/+/53797/comments/cbfc9dd5_5c1a8918",
      "parentUuid": "e05eef40_1fc85414",
      "range": {
        "startLine": 601,
        "startChar": 14,
        "endLine": 601,
        "endChar": 71
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c79add1_d9f4f79e",
        "filename": "redfish-core/include/redfish_aggregator.hpp",
        "patchSetId": 2
      },
      "lineNbr": 601,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-23T22:03:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6b07c04_ff2e9f29",
      "range": {
        "startLine": 601,
        "startChar": 14,
        "endLine": 601,
        "endChar": 71
      },
      "revId": "6fb145f7b4671493b7a81c5d88613cb0516586de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2f68cfda_dea1004a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-03-04T02:06:50Z",
      "side": 1,
      "message": "Note that I changed the approach to rely on the existence of the resource identifier \"@odata.id\" to denote when we\u0027ve stepped into a resource that was previously expanded.  I think that\u0027s fine because the former would not be recognized as valid json response so we shouldn\u0027t worry about trying to $expand it.\n\nFor the sake of consistency I also updated the existing $expand unit tests so that they also now include \"@odata.id\": \"{URI}\".  A test response that was previously:\n{\n  \"Foo\": {\n    \"/foobar\"\n  }\n}\n\nIs now:\n{\n  \"@odata.id\": \"/redfish/v1\",\n  \"Foo\": {\n    \"/foobar\"\n  }\n}\n\nNote that single level expand will still work correctly on non-aggregated responses that do not include \"@odata.id\".  It\u0027s when the response has already been expanded that our expand handler code can\u0027t figure out the appropriate depth without using \"@odata.id\".",
      "revId": "1a6224a5d52dac34d2d9836ba45efab791886f3a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0cdaf08_248916cd",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 5
      },
      "lineNbr": 610,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-03-04T01:23:50Z",
      "side": 1,
      "message": "Isn\u0027t this branch already covered on 594?",
      "range": {
        "startLine": 604,
        "startChar": 0,
        "endLine": 610,
        "endChar": 9
      },
      "revId": "1a6224a5d52dac34d2d9836ba45efab791886f3a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "712df827_52580e81",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 5
      },
      "lineNbr": 610,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-03-04T02:24:57Z",
      "side": 1,
      "message": "I\u0027ll double check, but I don\u0027t think so.  Let\u0027s say we have this object in obj:\n{\n  \"@odata.id\": \"/redfish/v1\",\n  \"Chassis\": {\n    \"@odata.id\": \"/redfish/v1/Chassis\"\n}\n\nIf we don\u0027t include this skip then we\u0027d call findNavigationReferencesRecursive() on the \"@odata.id\": \"/redfish/v1\" element, as well as the \"Chassis\" element.  Then at the beginning of findNavigationReferencesRecursive() starting at 570 we\u0027d end up matching and add \"/redfish/v1\" as a URI that we should expand.\n\n\nNow let\u0027s say we\u0027re doing a single level expand and the original object is\n{\n  \"@odata.id\": \"/redfish/v1\",\n  \"Chassis\": {\n    \"@odata.id\": \"/redfish/v1/Chassis\",\n    \"Members\": [\n      {\n        \"@odata.id\": \"/redfish/v1/Chassis/Foo\"\n      }\n    ]\n  }\n}\n\nIn that scenario we shouldn\u0027t expand anything.  The check on 594 will decrement the depth to \"0\" when first parse the object.  594 later catches when obj becomes\n{\n  \"@odata.id\": \"/redfish/v1/Chassis\",\n  \"Members\": [\n    {\n      \"@odata.id\": \"/redfish/v1/Chassis/Foo\"\n    }\n  ]\n}\n\nIf we don\u0027t stop traversal at that point then we\u0027ll fall into the for loop on 602 and end up returning \"/redfish/v1/Chassis/Foo\" as a URI that needs to be expanded.",
      "parentUuid": "d0cdaf08_248916cd",
      "range": {
        "startLine": 604,
        "startChar": 0,
        "endLine": 610,
        "endChar": 9
      },
      "revId": "1a6224a5d52dac34d2d9836ba45efab791886f3a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7390dc6_2e4118b3",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 5
      },
      "lineNbr": 610,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-03-04T02:42:58Z",
      "side": 1,
      "message": "The tests still passed after I commented it out.  I was confused until I realized what was going on. In the for loop we only pass element.second.  That means when the element is the resource identifier we\u0027ll only pass the URI which is a string.  That means we\u0027ll fail the check on 565 after attempting to read it as an nlohmann::json::object_t.  \n\nThis check on 604 then ends up just saving us an attempt at parsing a string as array_t and then object_t.  I\u0027ll go ahead and remove it so that we don\u0027t have to do this check on every single element.",
      "parentUuid": "712df827_52580e81",
      "range": {
        "startLine": 604,
        "startChar": 0,
        "endLine": 610,
        "endChar": 9
      },
      "revId": "1a6224a5d52dac34d2d9836ba45efab791886f3a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fee82da_67bbde53",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 5
      },
      "lineNbr": 610,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-03-04T02:57:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7390dc6_2e4118b3",
      "range": {
        "startLine": 604,
        "startChar": 0,
        "endLine": 610,
        "endChar": 9
      },
      "revId": "1a6224a5d52dac34d2d9836ba45efab791886f3a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2686184a_bebdd6eb",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 5
      },
      "lineNbr": 640,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-03-04T02:06:50Z",
      "side": 1,
      "message": "TLDR; I think https://gerrit.openbmc.org/c/openbmc/bmcweb/+/60556 won\u0027t play well with $expand and we should disable forwarding query params to satellite BMCs when the URI is up tree from a top level collection.  Think \u0027/redfish/v1?$expand\u003d.($levels\u003d1)\u0027, \u0027/redfish/v1/UpdateService?$expand\u003d.(levels\u003d2)\u0027, etc.\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nSomething to keep an eye on whenever that patch lands.  When it does then let\u0027s say we receive the request \u0027/redfish/v1/UpdateService?$expand\u003d.($levels\u003d2)\u0027, the satellite supports $expand, and we forward the request as-is.\n\nThe satellite response would be expanded such that the FirmwareInventory entries /redfish/v1/UpdateService/FirmwareInventory/{id} are expanded in the Members array of /redfish/v1/UpdateService/FirmwareInventory.\n\nThe initial response from the aggregating BMC would only be for /redfish/v1/UpdateService.\n\nThe aggregator has to combine them into a single response.  The processing code does not consider that the satellite response may have been expanded.  It only transfers properties from the satellite response if they do not already exist in the aggregator\u0027s response and have the form:\n\n\"Property\": {\n  \"@odata.id\": {top level collection URI}\n}\n\nMy guess is none of that would get copied over and thus the satellite performing $expand is wasted.  If the Property is associated with a resource that is only supported on the satellite then the link wouldn\u0027t get added at all.\n\nIt\u0027d be a major headache if we had to support selectively combining responses at differing levels of $expand.  In the example, the initial response will look like the multi-level $expand has been performed, but it will only contain FirmwareInventory entries from the satellite since the aggregating BMC has not actually had a chance to locally generate a response for /redfish/v1/UpdateService/FirmwareInventory.  It\u0027ll be even more difficult to do all of that whenever we add support for aggregating multiple satellite BMCs.\n\nIn the $expand code whenever we hit a top level collection we\u0027d have to make sure we have entries from all known satellites as well as the aggregating BMC.  If we don\u0027t then we\u0027d have to somehow query that top level collection, but only on whatever expected entities are not represented in the Members array since they potentially haven\u0027t had a chance to be expanded yet.\n\nI think the best approach by far would be to remove the query params from forwarded requests if the resource is uptree from a top level collection.  Once we reach a top level collection we\u0027ll begin including the query params since it\u0027ll work correctly from that point.",
      "range": {
        "startLine": 635,
        "startChar": 0,
        "endLine": 640,
        "endChar": 26
      },
      "revId": "1a6224a5d52dac34d2d9836ba45efab791886f3a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "381058b8_be704e11",
        "filename": "test/redfish-core/include/utils/query_param_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 659,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-03-04T01:23:50Z",
      "side": 1,
      "message": "Nit, can you either append to the existing string, or break apart the construction here?  Doing both makes this code hard to read.",
      "range": {
        "startLine": 655,
        "startChar": 0,
        "endLine": 659,
        "endChar": 49
      },
      "revId": "1a6224a5d52dac34d2d9836ba45efab791886f3a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfe9e491_cc9b627f",
        "filename": "test/redfish-core/include/utils/query_param_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 659,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-03-04T02:24:57Z",
      "side": 1,
      "message": "Sure will do",
      "parentUuid": "381058b8_be704e11",
      "range": {
        "startLine": 655,
        "startChar": 0,
        "endLine": 659,
        "endChar": 49
      },
      "revId": "1a6224a5d52dac34d2d9836ba45efab791886f3a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ccad5b8_cfed3934",
        "filename": "test/redfish-core/include/utils/query_param_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 659,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2023-03-04T02:57:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dfe9e491_cc9b627f",
      "range": {
        "startLine": 655,
        "startChar": 0,
        "endLine": 659,
        "endChar": 49
      },
      "revId": "1a6224a5d52dac34d2d9836ba45efab791886f3a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
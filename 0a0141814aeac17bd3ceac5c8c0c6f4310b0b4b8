{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "74396cf4_cfc75ad7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-02T15:50:19Z",
      "side": 1,
      "message": "I\u0027ve discussed with several of the reviewers on this patchset, but to make sure that information is replicated here, because people seem to be reviewing this now:\n\n- Per owasp and best practices, the behavior this patchset is suggesting is the correct thing to do.\n- This validation has not been present for a long time (since bmcweb started).\n- Making this change has the potential to functionally break many clients that didn\u0027t specify type upfront.  The OpenBMC documentation doesn\u0027t even set the type:\nhttps://github.com/openbmc/docs/blob/master/REDFISH-cheatsheet.md\n\nBecause of the last point, this patchset is far less trivial to execute on than it would appear.  I have not seen patchsets to fix the documentation or make the required changes to OpenBMC-specific clients.  Also, at a minimum, I suspect this behavior will need to be behind an option flag for some time to allow clients to catch up.  Both of those would be required to be provided for this to be merged as a default behavior.\n\nAs far as the vulnerability side, I still haven\u0027t been provided the detailed set of steps to reproduce the security vulnerability, but my understanding is that it requires the ability for an attacker to execute arbitrary code from within the browser js context, which in practice, makes it a lesser issue, because that level of execution already gives access to credentials.  If my understanding is incorrect, please provide the steps to reproduce that don\u0027t involve compromising the browser context.\n\nMy understanding for the reasoning behind the OWASP guidelines is that not checking content-type could potentially allow injection attacks if a server parses multiple read types, and a server can read one type as another, thus bypassing the escaping rules for a given client.  Considering bmcweb does not parse any types besides json, this seems like it also mitigates the risk somewhat.\n\nI suspect this overall is something we should continue to work on, but we need to execute with thought to those that use Redfish.\n\nPlease add details of the client impact, as well as dependencies into the commit message of this patch.",
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "757da6d9_a07aaf06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T15:16:26Z",
      "side": 1,
      "message": "Is this still being worked?",
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3654103_171c27fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001114
      },
      "writtenOn": "2022-07-13T19:10:26Z",
      "side": 1,
      "message": "Yes, I will come back with updated patch soon.",
      "parentUuid": "757da6d9_a07aaf06",
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4d1fd71_4c348ac4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001114
      },
      "writtenOn": "2022-07-13T19:10:26Z",
      "side": 1,
      "message": "Thank you for feedback. I think that adding proper flag is great idea.\n\nAbout vulnerability, the context can be from another side (as in case of mTLS browser automatically uses certificate even without js context).\n\nI will provide details if the client impact with updated patch.",
      "parentUuid": "74396cf4_cfc75ad7",
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cbb5823_f38b9e82",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T06:14:02Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "f3654103_171c27fb",
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3bf0ab2_d038e21b",
        "filename": "include/openbmc_dbus_rest.hpp",
        "patchSetId": 3
      },
      "lineNbr": 1534,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2022-04-29T23:04:45Z",
      "side": 1,
      "message": "Since this is repeated multiple times, it might be more clear as:\n\ninline bool contentTypeIsJson(const crow::Request\u0026 req)\n{\n    std::string_view contentType \u003d req.getHeaderValue(\"content-type\");\n    return boost::starts_with(contentType, \"application/json\");\n}\n\n// and then just calling it like:\n\nif (!contentTypeIsJson(req))\n{\n    // set error\n    return;\n}",
      "range": {
        "startLine": 1533,
        "startChar": 4,
        "endLine": 1534,
        "endChar": 61
      },
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83a962a1_694c3bdc",
        "filename": "include/openbmc_dbus_rest.hpp",
        "patchSetId": 3
      },
      "lineNbr": 1534,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T06:16:49Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "c3bf0ab2_d038e21b",
      "range": {
        "startLine": 1533,
        "startChar": 4,
        "endLine": 1534,
        "endChar": 61
      },
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "983fbb5e_8afe26a9",
        "filename": "include/openbmc_dbus_rest.hpp",
        "patchSetId": 3
      },
      "lineNbr": 1534,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-09-30T23:05:57Z",
      "side": 1,
      "message": "This has been consolidated into a single helper function in the newest patch.",
      "parentUuid": "83a962a1_694c3bdc",
      "range": {
        "startLine": 1533,
        "startChar": 4,
        "endLine": 1534,
        "endChar": 61
      },
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d02834e_958a5422",
        "filename": "redfish-core/lib/certificate_service.hpp",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2022-04-29T23:04:45Z",
      "side": 1,
      "message": "this check should be before the json::parse() to prevent attempting to parse invalid data.",
      "range": {
        "startLine": 115,
        "startChar": 8,
        "endLine": 115,
        "endChar": 60
      },
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f0d1489_fc2dab87",
        "filename": "redfish-core/lib/task.hpp",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2022-04-29T23:04:45Z",
      "side": 1,
      "message": "this check should be before the json::parse() to prevent attempting to parse invalid data.",
      "range": {
        "startLine": 56,
        "startChar": 12,
        "endLine": 56,
        "endChar": 64
      },
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "174de24f_7d2b3f5d",
        "filename": "redfish-core/lib/task.hpp",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T15:27:32Z",
      "side": 1,
      "message": "+1.  Also, using starts_with here is an instance of common error #12.",
      "parentUuid": "7f0d1489_fc2dab87",
      "range": {
        "startLine": 56,
        "startChar": 12,
        "endLine": 56,
        "endChar": 64
      },
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8472713a_d913b07b",
        "filename": "redfish-core/lib/task.hpp",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1001114
      },
      "writtenOn": "2022-07-13T19:10:26Z",
      "side": 1,
      "message": "starts_here is used because sometimes encoding can be appended to content-type.\nFor example: `application/json; charset\u003dutf-8`\n\nIf you have better proposal let me know.",
      "parentUuid": "174de24f_7d2b3f5d",
      "range": {
        "startLine": 56,
        "startChar": 12,
        "endLine": 56,
        "endChar": 64
      },
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "059c0883_312dd91d",
        "filename": "redfish-core/lib/task.hpp",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T06:14:02Z",
      "side": 1,
      "message": "Just check for both strings directly.\n\nfrom the redfish spec:\n\"Services shall accept the ContentType header set to either\napplication/json or application/json;charset\u003dutf-8.\"\n\n\nso just write the code to accept either.",
      "parentUuid": "8472713a_d913b07b",
      "range": {
        "startLine": 56,
        "startChar": 12,
        "endLine": 56,
        "endChar": 64
      },
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32331409_7bbaba0e",
        "filename": "redfish-core/lib/task.hpp",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-09-30T23:05:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "059c0883_312dd91d",
      "range": {
        "startLine": 56,
        "startChar": 12,
        "endLine": 56,
        "endChar": 64
      },
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "517095b6_e232e444",
        "filename": "redfish-core/src/error_messages.cpp",
        "patchSetId": 3
      },
      "lineNbr": 163,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-02T06:16:49Z",
      "side": 1,
      "message": "This message doesn\u0027t exist in the Base registry.  I suspect you need to use one of the existing ones.",
      "range": {
        "startLine": 163,
        "startChar": 15,
        "endLine": 163,
        "endChar": 33
      },
      "revId": "0a0141814aeac17bd3ceac5c8c0c6f4310b0b4b8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
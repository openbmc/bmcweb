{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d6771115_e3f37d63",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-12T18:58:17Z",
      "side": 1,
      "message": "Lots more details needed here around how you\u0027re propagating errors, and what the intended logic is.\n\nHow are return codes handled?\nhow are error messages handled?\nWhat portions of the spec are we obeying here.",
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b5b7e45_d54e9c34",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-08-12T19:08:28Z",
      "side": 1,
      "message": "Thanks for your comments. \n\nYour other comments are all related to this. So I will just respond here\n\nIn this commit, the behavior is well explained/tested in unit test, I can add more words in commit message.\n\nWe do this in this commit:\n\n1. if the finalResponse is already errored out, we return that error;\n2. if finalResponse is ok, but the some intermediate response errored out, we set finalResponse to that error;\n\nThis means finalResponse only respects the first error.\n\n\u003e What portions of the spec are we obeying here.\n\nI didn\u0027t find any clarification about error propagation on expand.\n\nSo, you wanna add combine all error messages of response? Is this behavior in the spec? I could see it can returns more useful errors and good for clients. Appending error messages is easy. But how to combine error code? Is there a spec to follow?",
      "parentUuid": "d6771115_e3f37d63",
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22bcb9a3_6b9934d4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-12T19:31:36Z",
      "side": 1,
      "message": "\u003e This means finalResponse only respects the first error.\n\nThe last time this issue came up, that wasn\u0027t the conclusion, because we should be propogating all errors to the user.  Please take a look at the existing code, I think it can be reused as-is, and the behavior is already what we want I think.\n\n\u003e Is this behavior in the spec? \n\nYes, and this is the behavior bmcweb uses elsewhere, that had a lot of discussion put into it including talking with DMTF many years ago.  If we\u0027re breaking that behavior, I\u0027d like us to be clear WHY we\u0027re doing something different in expand compared to when we do async aggregation of errors.",
      "parentUuid": "7b5b7e45_d54e9c34",
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8313b6f0_9dd0e8dd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-08-15T17:57:43Z",
      "side": 1,
      "message": "The commit message has been updated.",
      "parentUuid": "22bcb9a3_6b9934d4",
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06243f23_f251488a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-12T19:39:21Z",
      "side": 1,
      "message": "Totally agree this is hard to test given we need to simulate bugs in the implementation;  I think your approach is the best we\u0027re going to be able to do at the moment.",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 17,
        "endChar": 0
      },
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39c55a9b_3adc0ace",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 2
      },
      "lineNbr": 664,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-12T18:58:17Z",
      "side": 1,
      "message": "nit, do we want to just inline this code?  placeResult is a 4 line function, and given that this is doing things like checking return codes, you\u0027d think you\u0027d want that check in the calling scope.",
      "range": {
        "startLine": 664,
        "startChar": 0,
        "endLine": 664,
        "endChar": 65
      },
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c11542a_c9541314",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 2
      },
      "lineNbr": 664,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-08-15T17:57:07Z",
      "side": 1,
      "message": "Separating it makes unit test much easier. So I prefer keeping it as is",
      "parentUuid": "39c55a9b_3adc0ace",
      "range": {
        "startLine": 664,
        "startChar": 0,
        "endLine": 664,
        "endChar": 65
      },
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6acda340_35bb4c29",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 2
      },
      "lineNbr": 669,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-12T18:58:17Z",
      "side": 1,
      "message": "I think we can rely ONLY on the error field existing, we don\u0027t need to check return codes here for anything more than adding.",
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b06f3750_7a12e7d0",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 2
      },
      "lineNbr": 669,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-08-15T17:57:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6acda340_35bb4c29",
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6a2dd72_368224cc",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 2
      },
      "lineNbr": 671,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-12T18:58:17Z",
      "side": 1,
      "message": "Duplicated check?",
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65384770_4a41efd8",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 2
      },
      "lineNbr": 671,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-08-12T19:09:10Z",
      "side": 1,
      "message": "No. here is subResponse, the above is finalResponse",
      "parentUuid": "e6a2dd72_368224cc",
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ebe8481_f67fdc53",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 2
      },
      "lineNbr": 671,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-12T19:31:36Z",
      "side": 1,
      "message": "You\u0027re right, I missed that.  ACK.",
      "parentUuid": "65384770_4a41efd8",
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95e2d3aa_f0b4e0d9",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 2
      },
      "lineNbr": 676,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-12T18:58:17Z",
      "side": 1,
      "message": "This doesn\u0027t function if there are multiple errors.  There\u0027s code in error_messages.cpp that handles this case already, we should just reuse that logic, as we already know it\u0027s \"correct\" to what we intend, and I think handles this with:\n\n1. The first error gets propogated to the top level.\n2. Subsequent errors convert the top level error to a \"GeneralError\" and append the errors to the list.\n\nI think that\u0027s the same behavior we need here.",
      "range": {
        "startLine": 676,
        "startChar": 0,
        "endLine": 676,
        "endChar": 67
      },
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01bb64d2_f1b0819f",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 2
      },
      "lineNbr": 676,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-08-15T17:57:07Z",
      "side": 1,
      "message": "Yes, I used `addMessageToErrorJson` here.",
      "parentUuid": "95e2d3aa_f0b4e0d9",
      "range": {
        "startLine": 676,
        "startChar": 0,
        "endLine": 676,
        "endChar": 67
      },
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dda73ad_a8d87536",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-12T18:58:17Z",
      "side": 1,
      "message": "This needs more logic in it.  what if finalResponse is 500, and subResponse is 200?  The 500 will get overridden, right?\n\nwe probably need to handle it something to the effect of.\n\nIf (subresponse.resultInt() \u003e finalResponse.resultInt){\n   finalResponse.resultInt(subResponse.resultInt);\n}\n\nnow, I\u0027m not sure \u003e is the right operator above, we might need an explicit list of \"X error is greater than Y error\".  For example, 401 might be higher than 404.",
      "range": {
        "startLine": 679,
        "startChar": 0,
        "endLine": 679,
        "endChar": 51
      },
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc2f12e5_09d4196a",
        "filename": "redfish-core/include/utils/query_param.hpp",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-08-15T17:57:07Z",
      "side": 1,
      "message": "\u003e what if finalResponse is 500, and subResponse is 200?  The 500 will get overridden, right?\n\nThe current code is correct. It will return early before we override a wrong code. But current code doesn\u0027t add multiple errors.\n\n\u003e now, I\u0027m not sure \u003e is the right operator above, we might need an explicit list of \"X error is greater than Y error\".  For example, 401 might be higher than 404.\n\nWhat\u0027s the relational? Report the worst code? Where can we get the explicit list of \"X error is greater than Y error\"? Do we accept max for now?",
      "parentUuid": "1dda73ad_a8d87536",
      "range": {
        "startLine": 679,
        "startChar": 0,
        "endLine": 679,
        "endChar": 51
      },
      "revId": "3c73a116ae64e21a4e9ec4eb4b7583f67056cc91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
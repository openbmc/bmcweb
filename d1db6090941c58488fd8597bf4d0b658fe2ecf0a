{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "453e7977_bd864d3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-09-08T14:19:40Z",
      "side": 1,
      "message": "And one issue we\u0027re discovering with this is that\u0027s it\u0027s a \"From\" firmware level type issue. i.e. you could be fine when you first ship a system with the smaller timeout, but if the image grows past a certain size in your next release, you now have no way to fix this issue without doing some intermediate firmware release that bumps the timeout. So best to have a large timeout that covers all possible growth in the future.\n\nFor us, we package the host firmware in our image, and that\u0027s where all of the growth occurred.",
      "revId": "d1db6090941c58488fd8597bf4d0b658fe2ecf0a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f44a4f1_2cb363da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-09-08T15:25:39Z",
      "side": 1,
      "message": "FWIW, I warned you guys there be dragons when you upped the body size limit to 400MB ðŸ˜Š\n\nOne thing you might try is reducing the compression level on the current package you produce to make it easier for the bmc to decompress quickly.",
      "parentUuid": "453e7977_bd864d3b",
      "revId": "d1db6090941c58488fd8597bf4d0b658fe2ecf0a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d2e2d0c_c3eb4b62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-09-08T15:25:39Z",
      "side": 1,
      "message": "I\u0027m on the fence here for a couple reasons:\n1. Anything that\u0027s expected to take over 10 seconds should be using TaskService, so that users don\u0027t think their system has locked up, or hit the limits on their browser/curl/whatever\n2. Once that\u0027s done, should we just be upping this timer to something VERY large, like a minute?  If we hit it, we\u0027re in a failure mode anyway, so the actual timeout likely doesn\u0027t really matter.\n\nWere either of these considered?",
      "revId": "d1db6090941c58488fd8597bf4d0b658fe2ecf0a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d635764_9c1fbadd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-09-08T19:18:19Z",
      "side": 1,
      "message": "1. There is a task returned after this write, untar, inotify fire, and\ncreation of a software D-Bus object, we could move this task, so a task is returned right after the upload is complete (before write, untar, inotify fire and creation of software D-Bus Object), but there would be a few disadvantages, and I am not convinced it makes things better. \n\nThe main disadvantage is, it is easier to see why the update failed (e.g., we return ImageFailure, ManifestFileFailure, AlreadyExists, BusyFailure messages) vs. a task. In my experience, most of the code update fails happen here. We could still accomplish the same thing via a task, but it is an extra step, and for a smaller image on a fast connection, now you have to read that task. Another disadvantage would be the complexity of having a task monitor the write, untar, etc but I think that can be done. \n\nSo this POST (image upload), given a 125 MB image and a 100 Mbits/s upload is going to take 10 seconds to upload. At 50 Mbits/s, double that to 20 seconds.. I guess I am fine with the extra 6-10 seconds for the write/untar/etc, given that the upload is already long for an image this size :/. \nFor a small image, this whole thing is most likely much faster. \nWe are looking to see what we can do to decrease our image size and looking at performance (only a few systems hit this, not sure the untar got the cycles it needed) but we are right against this 10 seconds and hitting this is really bad (code update failing). \n\n2. If you think we should move the task, certainly can, and yeah we can up to something VERY large, 30 seconds, 45 seconds, 1 min. I am just not sure for the broader code base, it is the best course of action.",
      "parentUuid": "2d2e2d0c_c3eb4b62",
      "revId": "d1db6090941c58488fd8597bf4d0b658fe2ecf0a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7728b77_f7ef99ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-09-08T19:18:19Z",
      "side": 1,
      "message": "We are continuing to see what we can do to lower the code update image size/decompress time, but we don\u0027t see a solution that means we no longer need this change.",
      "parentUuid": "4f44a4f1_2cb363da",
      "revId": "d1db6090941c58488fd8597bf4d0b658fe2ecf0a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e710b5e9_e44c9bc6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-09-08T19:18:19Z",
      "side": 1,
      "message": "d",
      "revId": "d1db6090941c58488fd8597bf4d0b658fe2ecf0a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
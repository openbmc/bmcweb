{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "95950aed_c2b89d89",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-28T04:05:29Z",
      "side": 1,
      "message": "More details needed:  How are certificates loaded?  What cipher suites are used?  Are ECC keys allowed?\n\nPlease provide more detail in your commit message.",
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e770c0b7_d119054a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-06T18:07:30Z",
      "side": 1,
      "message": "ED, I added more context in commit message.\n\nCurrently i checked with RootCA certificate(PEM) file and haven\u0027t checked other certificates. Also its set to default ciphers currently. I thought of checking with same cipher which we use for webserver(MozillaCiphers) and can be enhanced in future.\n\n            std::string mozillaModern \u003d \"ECDHE-ECDSA-AES256-GCM-SHA384:\"\n                                        \"ECDHE-RSA-AES256-GCM-SHA384:\"\n                                        \"ECDHE-ECDSA-CHACHA20-POLY1305:\"\n                                        \"ECDHE-RSA-CHACHA20-POLY1305:\"\n                                        \"ECDHE-ECDSA-AES128-GCM-SHA256:\"\n                                        \"ECDHE-RSA-AES128-GCM-SHA256:\"\n                                        \"ECDHE-ECDSA-AES256-SHA384:\"\n                                        \"ECDHE-RSA-AES256-SHA384:\"\n                                        \"ECDHE-ECDSA-AES128-SHA256:\"\n                                        \"ECDHE-RSA-AES128-SHA256\";",
      "parentUuid": "95950aed_c2b89d89",
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ffcf2e7_6ae10000",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-14T00:10:38Z",
      "side": 1,
      "message": "we need to do whatever the current owasp guidelines say.",
      "parentUuid": "e770c0b7_d119054a",
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8df4d10_17fd03bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-06-30T17:10:29Z",
      "side": 1,
      "message": "Thank you Ed and Carson for comments. I will look into the comments and implementation associated changes by early next week. ",
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5d89cf8_9f91336d",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-28T04:07:23Z",
      "side": 1,
      "message": "This patchset has the same problem the last one did, it doesn\u0027t load root certificates, so there is no way to verify a client.\n\nIn the beast examples, there\u0027s a function called load_root_certificates that does this that you can look at.",
      "range": {
        "startLine": 212,
        "startChar": 0,
        "endLine": 212,
        "endChar": 47
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39ac317f_f484c84e",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-28T04:18:57Z",
      "side": 1,
      "message": "also set_verify_mode",
      "parentUuid": "b5d89cf8_9f91336d",
      "range": {
        "startLine": 212,
        "startChar": 0,
        "endLine": 212,
        "endChar": 47
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95be5adc_8f9bfc93",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-01T20:02:34Z",
      "side": 1,
      "message": "Not to keep piling on, you\u0027re also missing this block of code (stolen from the examples)\n\n        // Set SNI Hostname (many hosts need this to handshake successfully)\n        if(! SSL_set_tlsext_host_name(...., host))\n        {\n            ...\n        }\n        \n        \nLots of webservers these days have SNI verification turned on, so you\u0027ll need this as well",
      "parentUuid": "39ac317f_f484c84e",
      "range": {
        "startLine": 212,
        "startChar": 0,
        "endLine": 212,
        "endChar": 47
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ef03abb_eb6febb8",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-06T00:04:15Z",
      "side": 1,
      "message": "Thanks Ed for pointers. I addressed all ( Certificate load, verify mode setting and SNI hostname setting) the comments.",
      "parentUuid": "95be5adc_8f9bfc93",
      "range": {
        "startLine": 212,
        "startChar": 0,
        "endLine": 212,
        "endChar": 47
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee9d9d37_053476da",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-06-28T20:11:17Z",
      "side": 1,
      "message": "Why do we need to ignore this error in general? Why does it not matter when SSL is not enabled?",
      "range": {
        "startLine": 278,
        "startChar": 22,
        "endLine": 278,
        "endChar": 69
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d759492_b1466f4c",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-28T20:24:03Z",
      "side": 1,
      "message": "It\u0027s pretty common among https servers to just sever the connection when a request is complete, and not do the proper TLS shutdown.  Generally the error is benign, and can be ignored.  In theory we could log it, but so many servers do it that it\u0027s not really worth thinking about unless it caused a real error in the http request (which would have a different code).",
      "parentUuid": "ee9d9d37_053476da",
      "range": {
        "startLine": 278,
        "startChar": 22,
        "endLine": 278,
        "endChar": 69
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a9176bc_1088754c",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-01T00:02:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9d759492_b1466f4c",
      "range": {
        "startLine": 278,
        "startChar": 22,
        "endLine": 278,
        "endChar": 69
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6df4d050_24112630",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 405,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-06-28T20:11:17Z",
      "side": 1,
      "message": "Do we need the timer since we\u0027re not doing a read or write operation?",
      "range": {
        "startLine": 404,
        "startChar": 8,
        "endLine": 405,
        "endChar": 53
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5b3789d_d94e5872",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 405,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-06-28T20:24:03Z",
      "side": 1,
      "message": "+1.  Ideally we should be just using the timer here in all cases.  Also, not relying on tcp_stream makes it faster and saves a ton of binary space:\n\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/51943",
      "parentUuid": "6df4d050_24112630",
      "range": {
        "startLine": 404,
        "startChar": 8,
        "endLine": 405,
        "endChar": 53
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7852bbc2_ef9d2d9a",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 405,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-06T00:04:15Z",
      "side": 1,
      "message": "Agree with both of you. This can be taken as separate commit( As Ed already started on it). If you are  ok, I can take 51943 commit forward and bring it out of WIP.",
      "parentUuid": "e5b3789d_d94e5872",
      "range": {
        "startLine": 404,
        "startChar": 8,
        "endLine": 405,
        "endChar": 53
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df75c5e9_fb3e9df5",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 405,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "\u003e Agree with both of you. This can be taken as separate commit( As Ed already started on it). If you are  ok, I can take 51943 commit forward and bring it out of WIP.\n\nFeel free to take it over.  I believe the code is mostly correct, just needs some testing (and likely debugging).",
      "parentUuid": "7852bbc2_ef9d2d9a",
      "range": {
        "startLine": 404,
        "startChar": 8,
        "endLine": 405,
        "endChar": 53
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec8914ef_a740b7aa",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 405,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-13T18:48:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "df75c5e9_fb3e9df5",
      "range": {
        "startLine": 404,
        "startChar": 8,
        "endLine": 405,
        "endChar": 53
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "715bb5e5_490352ed",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 416,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-06-28T20:11:17Z",
      "side": 1,
      "message": "Why do we not need to return when there\u0027s an error like we do below without SSL enabled?",
      "range": {
        "startLine": 410,
        "startChar": 16,
        "endLine": 416,
        "endChar": 17
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1f27cdb_2fa960c9",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 416,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-06T00:04:15Z",
      "side": 1,
      "message": "Same as above. Just on safer side, close connection  is attempted in either case.",
      "parentUuid": "715bb5e5_490352ed",
      "range": {
        "startLine": 410,
        "startChar": 16,
        "endLine": 416,
        "endChar": 17
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f16fdff_fa9d4fcc",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 416,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-06T18:29:48Z",
      "side": 1,
      "message": "Leaving comment open to give Carson a chance to accept the statement.",
      "parentUuid": "f1f27cdb_2fa960c9",
      "range": {
        "startLine": 410,
        "startChar": 16,
        "endLine": 416,
        "endChar": 17
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12aa161c_8129fa5b",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 416,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-12T17:34:58Z",
      "side": 1,
      "message": "I\u0027m alright with removing the return here, but it\u0027s because I\u0027ve found that the return statement in the code without SSL enabled can break the flow in certain situations.",
      "parentUuid": "9f16fdff_fa9d4fcc",
      "range": {
        "startLine": 410,
        "startChar": 16,
        "endLine": 416,
        "endChar": 17
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4feda30_88dca32f",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 474,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-06-28T20:11:17Z",
      "side": 1,
      "message": "Why do we not need to return when there\u0027s an error like we do below without SSL enabled?",
      "range": {
        "startLine": 468,
        "startChar": 16,
        "endLine": 474,
        "endChar": 17
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bd790b0_9038331d",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 474,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-06T00:04:15Z",
      "side": 1,
      "message": "Since we are closing the connection, If there is error in shutdown case also, We need to make sure connection is closed. So going ahead with close() call even in error cases(just on safer side).",
      "parentUuid": "a4feda30_88dca32f",
      "range": {
        "startLine": 468,
        "startChar": 16,
        "endLine": 474,
        "endChar": 17
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86728782_d7ebf1bb",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 826,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-06-28T20:11:17Z",
      "side": 1,
      "message": "You\u0027re not accounting for the use of SSL when sending the message.  Connections stay in the pool after they are created and the same pool can be used by multiple entities.  It could be the case that a connection was previously created without SSL and now you are attempting to use it to send a message with SSL or vice-versa.\n\nWhen a connection is grabbed you need to make sure that it and the message match in terms of if SSL is enabled.  If they don\u0027t match then the connection needs to be reconfigured before the message is sent.",
      "range": {
        "startLine": 825,
        "startChar": 8,
        "endLine": 826,
        "endChar": 73
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aebfce2a_d6d65dde",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 826,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-06-28T20:11:17Z",
      "side": 1,
      "message": "Connections remain in the pool once they\u0027ve been created.  An existing connection could have been previously created without SSL enabled and now you\u0027re trying to send a message using SSL or vice-versa.\n\nYou need to make sure that the message to be sent and the connection grabbed agree in terms of using SSL.  If they don\u0027t then the connection needs to be reconfigured to match as part of the process.",
      "range": {
        "startLine": 823,
        "startChar": 8,
        "endLine": 826,
        "endChar": 73
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8f0dcd3_ecd41d15",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 826,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-06T00:04:15Z",
      "side": 1,
      "message": "Addressed.",
      "parentUuid": "aebfce2a_d6d65dde",
      "range": {
        "startLine": 823,
        "startChar": 8,
        "endLine": 826,
        "endChar": 73
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d263023_c920d407",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 826,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2022-07-06T00:04:15Z",
      "side": 1,
      "message": "Yeah, Good catch. I missed this case. Thank you.\nCorrected the code now.",
      "parentUuid": "86728782_d7ebf1bb",
      "range": {
        "startLine": 825,
        "startChar": 8,
        "endLine": 826,
        "endChar": 73
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f67e96a9_0a42bef3",
        "filename": "http/http_client.hpp",
        "patchSetId": 2
      },
      "lineNbr": 826,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-07-12T17:34:58Z",
      "side": 1,
      "message": "Sorry, I\u0027m not sure how I ended up flagging this same thing twice without realizing it.",
      "parentUuid": "f8f0dcd3_ecd41d15",
      "range": {
        "startLine": 823,
        "startChar": 8,
        "endLine": 826,
        "endChar": 73
      },
      "revId": "e054a8688a17e2ec3895a3ce1c63b72a8e8e431c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
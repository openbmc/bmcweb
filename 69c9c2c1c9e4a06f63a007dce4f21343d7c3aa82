{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9ce82a77_98fc1c2b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-03T20:52:19Z",
      "side": 1,
      "message": "The whole point of this was to make sure that these binary files were not directly downloadable by browsers, as it can lead to injection attacks (ie, if I hide a windows EXE in a log payload) and have the user execute this.\n\nThis is not to say that this patchset as written is doing the wrong thing, it just seems like it\u0027s trying to bypass that explicit design decision on this API, which makes me wonder if we implemented it wrong in the first place if a browser can even download these to a file.",
      "range": {
        "startLine": 17,
        "startChar": 27,
        "endLine": 17,
        "endChar": 34
      },
      "revId": "69c9c2c1c9e4a06f63a007dce4f21343d7c3aa82",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d4ccd78_308819b9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-08-10T17:19:48Z",
      "side": 1,
      "message": "Here is the GUI code attempting to download the additional data:\nhttps://github.com/openbmc/webui-vue/blob/9b79a6e7e3df3d3cbaf9a7750bbe343628022026/src/views/Logs/EventLogs/EventLogs.vue#L155\nhttps://github.com/openbmc/webui-vue/blob/9b79a6e7e3df3d3cbaf9a7750bbe343628022026/src/locales/en-US.json#L251\n\nToday this results in a 400 Bad Request due to isOctetAccepted failing even though firefox and chrome both have a ,*/*;q\u003d0.8",
      "parentUuid": "9ce82a77_98fc1c2b",
      "range": {
        "startLine": 17,
        "startChar": 27,
        "endLine": 17,
        "endChar": 34
      },
      "revId": "69c9c2c1c9e4a06f63a007dce4f21343d7c3aa82",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fe0c9d9_17553dc6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-11T04:42:04Z",
      "side": 1,
      "message": "I looked at that code, so far as I can tell.... it\u0027s literally trying to do explicitly what we intentionally tried in the API to disallow (downloading a binary payload to a file).  Maybe I misread it?\n\nIf that\u0027s the goal, it\u0027s possible there\u0027s some level of design we need to change here?  I don\u0027t recall the full discussion, but the normal security issue is:\n1. Nefarious user loads executable data into log message\n2. Unsuspecting user downloads, and executes.\n\n\nNow, maybe this is far-fetched these days with OSes not allowing execute by default, but it\u0027s probably worth discussing?",
      "parentUuid": "9d4ccd78_308819b9",
      "range": {
        "startLine": 17,
        "startChar": 27,
        "endLine": 17,
        "endChar": 34
      },
      "revId": "69c9c2c1c9e4a06f63a007dce4f21343d7c3aa82",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e9c602e_d0b2dff9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-08-15T17:03:35Z",
      "side": 1,
      "message": "\u003e I looked at that code, so far as I can tell.... it\u0027s literally trying to do explicitly what we intentionally tried in the API to disallow (downloading a binary payload to a file).  Maybe I misread it?\n\nIt is doing exactly that, it is downloading the attachment. But how is downloading the attachment via cURL or some other network tool, different than downloading it via the GUI? \n\nThe attachment is base 64 encoded, https://github.com/openbmc/bmcweb/blob/2b82937ecef572954b49569177b16831cbc09cfe/redfish-core/lib/log_services.hpp#L1756. \n\nI see the security concern but it is base 64 encoded, it is already allowed today via Wget, etc, this \" Nefarious user loads executable data; Unsuspecting user downloads, and executes\" isn\u0027t something special with OpenBMC, companies don\u0027t have to have this API (the GUI doesn\u0027t show this button unless there is an AdditionalDataUri on the log entry).",
      "parentUuid": "7fe0c9d9_17553dc6",
      "range": {
        "startLine": 17,
        "startChar": 27,
        "endLine": 17,
        "endChar": 34
      },
      "revId": "69c9c2c1c9e4a06f63a007dce4f21343d7c3aa82",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1db058f8_e3d84e39",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-22T20:26:04Z",
      "side": 1,
      "message": "\u003e \u003e I looked at that code, so far as I can tell.... it\u0027s literally trying to do explicitly what we intentionally tried in the API to disallow (downloading a binary payload to a file).  Maybe I misread it?\n\u003e \n\u003e It is doing exactly that, it is downloading the attachment. But how is downloading the attachment via cURL or some other network tool, different than downloading it via the GUI? \n\u003e \n\u003e The attachment is base 64 encoded, https://github.com/openbmc/bmcweb/blob/2b82937ecef572954b49569177b16831cbc09cfe/redfish-core/lib/log_services.hpp#L1756. \n\u003e \n\u003e I see the security concern but it is base 64 encoded, it is already allowed today via Wget, etc, this \" Nefarious user loads executable data; Unsuspecting user downloads, and executes\" isn\u0027t something special with OpenBMC, companies don\u0027t have to have this API (the GUI doesn\u0027t show this button unless there is an AdditionalDataUri on the log entry).\n\n\n\u003e Unsuspecting user downloads, and executes\" isn\u0027t something special with OpenBMC\n\nYes and no.  We have a lot of APIs that are likely to be able to have injection attacks, and we have no ability to run any kind of site-wide anti-virus or injection mitigation, so we differ pretty significantly from say, a website that hosts binaries.\n\nFWIW, I\u0027m going to close out this thread.  Happy to keep talking about it somewhere, but holding up your review for it for behavior that\u0027s already on master doesn\u0027t make sense to me.",
      "parentUuid": "6e9c602e_d0b2dff9",
      "range": {
        "startLine": 17,
        "startChar": 27,
        "endLine": 17,
        "endChar": 34
      },
      "revId": "69c9c2c1c9e4a06f63a007dce4f21343d7c3aa82",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a75d8d43_3ebba7d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-03T20:54:17Z",
      "side": 1,
      "message": "Also, FWIW, holy hell parsing ACCEPT headers per the spec is complicated;\n\nhttps://www.xml.com/pub/a/2005/06/08/restful.html",
      "revId": "69c9c2c1c9e4a06f63a007dce4f21343d7c3aa82",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4796d91a_c6d3c8f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:21:07Z",
      "side": 1,
      "message": "is this still being worked?",
      "revId": "69c9c2c1c9e4a06f63a007dce4f21343d7c3aa82",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40997267_421473a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-03-31T20:19:27Z",
      "side": 1,
      "message": "I\u0027ll come back to it in the next month. Marked as WIP",
      "parentUuid": "4796d91a_c6d3c8f6",
      "revId": "69c9c2c1c9e4a06f63a007dce4f21343d7c3aa82",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a37086e0_d4390b8e",
        "filename": "include/http_utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-03T20:52:19Z",
      "side": 1,
      "message": "if we use string view here we avoid a copy when we do the substr below (I think)?",
      "range": {
        "startLine": 37,
        "startChar": 9,
        "endLine": 37,
        "endChar": 20
      },
      "revId": "69c9c2c1c9e4a06f63a007dce4f21343d7c3aa82",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba03b4be_ec81403f",
        "filename": "include/http_utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-08-10T17:19:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a37086e0_d4390b8e",
      "range": {
        "startLine": 37,
        "startChar": 9,
        "endLine": 37,
        "endChar": 20
      },
      "revId": "69c9c2c1c9e4a06f63a007dce4f21343d7c3aa82",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1563b9be_d9f172fb",
        "filename": "include/http_utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-03T20:52:19Z",
      "side": 1,
      "message": "Was about to comment this on the last patchset, but you already found it.",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 43
      },
      "revId": "69c9c2c1c9e4a06f63a007dce4f21343d7c3aa82",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f6a5ac3_a03f9af4",
        "filename": "include/http_utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-08-10T17:19:48Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "1563b9be_d9f172fb",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 43
      },
      "revId": "69c9c2c1c9e4a06f63a007dce4f21343d7c3aa82",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
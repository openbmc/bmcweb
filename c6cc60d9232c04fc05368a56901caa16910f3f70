{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c5582c41_6eec1b8a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2023-08-28T20:53:47Z",
      "side": 1,
      "message": "Great idea. One step closer to bmcweb as non-root! I don\u0027t know if you have thought about plaintext passwords over D-Bus, but I wrote up my recommendation.",
      "revId": "c6cc60d9232c04fc05368a56901caa16910f3f70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9711f185_8114145f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-28T22:06:04Z",
      "side": 1,
      "message": "My thinking is actually doing a point to point dbus connection over a unix socket, so passwords don\u0027t fly over dbus, but that wasn\u0027t immediately possible (it\u0027ll take some sdbusplus changes to figure out) but that was my thought.\n\nOpen to whatever thoughts you might have.",
      "parentUuid": "c5582c41_6eec1b8a",
      "revId": "c6cc60d9232c04fc05368a56901caa16910f3f70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ecbeaea_4b5f090a",
        "filename": "include/pam_authenticate.hpp",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2023-08-28T20:53:47Z",
      "side": 1,
      "message": "int fd \u003d open(\"/tmp\", O_RDWR|O_EXCL|O_TMPFILE);\nif (fd \u003c 0) { // handle error }\nif (write(fd, password.data(), password.size()) !\u003d password.size())\n{ // handle error }\nsdbusplus::message::unix_fd pwfile{fd};\n\n...\n\nasync_method_call(..., username, pwfile);\nclose(pwfile);",
      "revId": "c6cc60d9232c04fc05368a56901caa16910f3f70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ce3013e_217879c6",
        "filename": "include/pam_authenticate.hpp",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-28T22:06:04Z",
      "side": 1,
      "message": "I\u0027m sure you mean exactly how we handle this:\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/66298\n\nI didn\u0027t mention it in that commit, but that\u0027s why I cleaned that code up;  It\u0027s possible I want to reuse it here.\n\nLet me know if that works for what you were thinking.",
      "parentUuid": "9ecbeaea_4b5f090a",
      "revId": "c6cc60d9232c04fc05368a56901caa16910f3f70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58ca9b0b_83a6717f",
        "filename": "src/pam_main.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2023-08-28T20:53:47Z",
      "side": 1,
      "message": "It is not that much more effort to pass a file handle an a lot more secure. Write the password to a temporaray file, pass the file handle, read the file. Then The password doesn\u0027t go over D-Bus in plaintext.",
      "range": {
        "startLine": 166,
        "startChar": 36,
        "endLine": 166,
        "endChar": 63
      },
      "revId": "c6cc60d9232c04fc05368a56901caa16910f3f70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82680052_4393ac1a",
        "filename": "src/pam_main.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-28T22:06:04Z",
      "side": 1,
      "message": "Agreed.\n\nLike I said, my initial plan was to do this with point to point dbus over a unix socket, but in the worst case, might fall back to the same thing we do for virtual media.  TBD if I can get point to point DBus working.\n\nKeep the good ideas coming.  I do appreciate them.",
      "parentUuid": "58ca9b0b_83a6717f",
      "range": {
        "startLine": 166,
        "startChar": 36,
        "endLine": 166,
        "endChar": 63
      },
      "revId": "c6cc60d9232c04fc05368a56901caa16910f3f70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4f67e01_b0037d80",
        "filename": "src/pam_main.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2023-08-30T20:36:12Z",
      "side": 1,
      "message": "The pipe/socket would work too. To make that work for a pipe, all you should have to do is pass the fd over D-Bus to set up the connection. I don\u0027t think you need to make any more changes to sdbusplus.\n\nFor a socket, I think you would just need to pass the abstract socket name (which should be unique) and then require the servers side to only accept one connection so you don\u0027t have any snoops.\n\nWith a pipe, you will need to have some sort of protocol, because its a stream, but over the socket, you can be packet based, which is nicer. I don\u0027t have a super strong opinion just as long as it is not in plaintext over D-Bus.",
      "parentUuid": "82680052_4393ac1a",
      "range": {
        "startLine": 166,
        "startChar": 36,
        "endLine": 166,
        "endChar": 63
      },
      "revId": "c6cc60d9232c04fc05368a56901caa16910f3f70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aecaa2a0_76f22695",
        "filename": "src/pam_main.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-30T23:00:38Z",
      "side": 1,
      "message": "\u003e The pipe/socket would work too. To make that work for a pipe, all you should have to do is pass the fd over D-Bus to set up the connection. I don\u0027t think you need to make any more changes to sdbusplus.\n\nYep, this is exactly what virtual media does today.\n\n\u003e \n\u003e For a socket, I think you would just need to pass the abstract socket name (which should be unique) and then require the servers side to only accept one connection so you don\u0027t have any snoops.\n\nI was thinking of making it socket activated in systemd, which I THINK avoids snoops from non-root processes?\n\n\u003e \n\u003e With a pipe, you will need to have some sort of protocol, because its a stream, but over the socket, you can be packet based, which is nicer. I don\u0027t have a super strong opinion just as long as it is not in plaintext over D-Bus.\n\nThat\u0027s an interesting thought.  The existing virtual media code endcodes both the username and password as null terminated strings (which I\u0027m not a huge fan of) but does seem to work.  You\u0027re thinking we\u0027d run a UDP/Datagram socket?  That might be a simplification;  I can play with it.  I mostly was thinking the unix socket route because we have code that does it, so either it\u0027s insecure, and needs changed anyway to a better mechanism, or it\u0027s secure enough, and should be good enough for this purpose.  But maybe my thinking is faulty.",
      "parentUuid": "f4f67e01_b0037d80",
      "range": {
        "startLine": 166,
        "startChar": 36,
        "endLine": 166,
        "endChar": 63
      },
      "revId": "c6cc60d9232c04fc05368a56901caa16910f3f70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a1e3e9b_8e5c40cf",
        "filename": "src/pam_main.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-08-13T03:49:40Z",
      "side": 1,
      "message": "\u003e For a socket, I think you would just need to pass the abstract socket name (which should be unique) and then require the servers side to only accept one connection so you don\u0027t have any snoops.\n\u003e \n\u003e With a pipe, you will need to have some sort of protocol, because its a stream, but over the socket, you can be packet based, which is nicer. I don\u0027t have a super strong opinion just as long as it is not in plaintext over D-Bus.\n\nUse [socketpair(2)](https://www.man7.org/linux/man-pages/man2/socketpair.2.html), `AF_UNIX` and `SOCK_SEQPACKET`?\n\nThere\u0027s also [memfd_create](https://www.man7.org/linux/man-pages/man2/memfd_create.2.html) and [File Sealing](https://www.man7.org/linux/man-pages/man2/fcntl.2.html) to continue down the fd-passing route.",
      "parentUuid": "aecaa2a0_76f22695",
      "range": {
        "startLine": 166,
        "startChar": 36,
        "endLine": 166,
        "endChar": 63
      },
      "revId": "c6cc60d9232c04fc05368a56901caa16910f3f70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3778f6e_51a0a905",
        "filename": "src/pam_main.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-13T03:56:09Z",
      "side": 1,
      "message": "Agreed.  I was really hoping that sysytemd-logind had some solution to this, but it doesn\u0027t really seem to in my testing.\n\nI\u0027m still trying to get stuff to actually breathe, then I\u0027ll regroup on this patchset with the \"right\" way.\n\nIn terms of a socket, I was actually thinking AF_UNIX + SOCK_DGRAM, and just ensure that a username + password always fits in one packet.  That\u0027s a way of cheating to not have to invent more of a new protocol.",
      "parentUuid": "6a1e3e9b_8e5c40cf",
      "range": {
        "startLine": 166,
        "startChar": 36,
        "endLine": 166,
        "endChar": 63
      },
      "revId": "c6cc60d9232c04fc05368a56901caa16910f3f70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6c393f3_191f4bf0",
        "filename": "src/pam_main.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-09-02T16:40:01Z",
      "side": 1,
      "message": "aren\u0027t we enforcing encryption on transit here? The approach discussed here seems to be talking about transferring data in non encrypted format. Is it OK?",
      "parentUuid": "c3778f6e_51a0a905",
      "range": {
        "startLine": 166,
        "startChar": 36,
        "endLine": 166,
        "endChar": 63
      },
      "revId": "c6cc60d9232c04fc05368a56901caa16910f3f70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
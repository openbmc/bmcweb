{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "daf341a9_2d7a3d0a",
        "filename": "http/ut/utility_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-07-15T00:46:52Z",
      "side": 1,
      "message": "For new codes, could we get better test names? Please take a look at the https://gerrit.openbmc.org/c/openbmc/bmcweb/+/55142",
      "range": {
        "startLine": 97,
        "startChar": 5,
        "endLine": 97,
        "endChar": 12
      },
      "revId": "f079c8e8e78f472da82d7d3bfcfa2e02dc21de27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6e584a1_94c71c43",
        "filename": "http/ut/utility_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1001143
      },
      "writtenOn": "2022-07-18T20:51:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "daf341a9_2d7a3d0a",
      "range": {
        "startLine": 97,
        "startChar": 5,
        "endLine": 97,
        "endChar": 12
      },
      "revId": "f079c8e8e78f472da82d7d3bfcfa2e02dc21de27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e63af65c_cb1edad6",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 554,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-07-15T00:46:52Z",
      "side": 1,
      "message": "If we don\u0027t error out if the input is not valid (beyond 6), could you help at least document the behavior explicitly just like the other function here?",
      "range": {
        "startLine": 554,
        "startChar": 20,
        "endLine": 554,
        "endChar": 23
      },
      "revId": "f079c8e8e78f472da82d7d3bfcfa2e02dc21de27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "567a234c_b4380ecb",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 554,
      "author": {
        "id": 1001143
      },
      "writtenOn": "2022-07-18T20:51:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e63af65c_cb1edad6",
      "range": {
        "startLine": 554,
        "startChar": 20,
        "endLine": 554,
        "endChar": 23
      },
      "revId": "f079c8e8e78f472da82d7d3bfcfa2e02dc21de27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e50c046c_e1237f7e",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 556,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-07-15T00:46:52Z",
      "side": 1,
      "message": "if the max is 6, why do you use uint64_t? Is a normal `int` just working?",
      "range": {
        "startLine": 556,
        "startChar": 31,
        "endLine": 556,
        "endChar": 39
      },
      "revId": "f079c8e8e78f472da82d7d3bfcfa2e02dc21de27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f2099c9_17bd6788",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 556,
      "author": {
        "id": 1001143
      },
      "writtenOn": "2022-07-18T20:51:06Z",
      "side": 1,
      "message": "Reduced to uint_8",
      "parentUuid": "e50c046c_e1237f7e",
      "range": {
        "startLine": 556,
        "startChar": 31,
        "endLine": 556,
        "endChar": 39
      },
      "revId": "f079c8e8e78f472da82d7d3bfcfa2e02dc21de27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31101a41_92dd2031",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 556,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-19T18:16:40Z",
      "side": 1,
      "message": "Sorry to get here late, generally if we don\u0027t have a specific reason to use a specific size, we try to use int, or size_t, because that will generate the most efficient code for that processor, using the native type.",
      "parentUuid": "3f2099c9_17bd6788",
      "range": {
        "startLine": 556,
        "startChar": 31,
        "endLine": 556,
        "endChar": 39
      },
      "revId": "f079c8e8e78f472da82d7d3bfcfa2e02dc21de27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14801d2b_447208dd",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 569,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-07-15T00:46:52Z",
      "side": 1,
      "message": "What does \u003cSSS\u003e mean? Does it mean if it exists, it should return exactly 3 digits?\n\nThis is probably the outstanding question we need to figure out.",
      "range": {
        "startLine": 569,
        "startChar": 10,
        "endLine": 569,
        "endChar": 14
      },
      "revId": "f079c8e8e78f472da82d7d3bfcfa2e02dc21de27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69bde198_97c46ca9",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 569,
      "author": {
        "id": 1001143
      },
      "writtenOn": "2022-07-18T20:51:06Z",
      "side": 1,
      "message": "To me, the following sentence explains it clearly: \"Shall be one or more digits where the number of digits implies the precision.\" In other words, \u003cSSS\u003e does not necessarily return exactly 3 digits -- it depends on the precision that we are intending to express. \n\nCapping it to 6 fraction digits is just a limitation of the current implementation. From what I understand, the spec does not limit the number fraction digits -- there could be 100 digits if a system is able to actually track time with that much precision. \n\n(Side note: I tried to modify getDateTime() to receive boost::posix_time::nanoseconds instead of boost::posix_time::microseconds but got some build errors along the way -- perhaps because it needs 96 bits of storage: https://stackoverflow.com/questions/19769795/how-to-enable-nanoseconds-in-boostposix-time)",
      "parentUuid": "14801d2b_447208dd",
      "range": {
        "startLine": 569,
        "startChar": 10,
        "endLine": 569,
        "endChar": 14
      },
      "revId": "f079c8e8e78f472da82d7d3bfcfa2e02dc21de27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4ec3a17_f22c88e2",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 569,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-07-18T23:03:34Z",
      "side": 1,
      "message": "Reasonable to me.\n\nEd and Gunner, any objections?",
      "parentUuid": "69bde198_97c46ca9",
      "range": {
        "startLine": 569,
        "startChar": 10,
        "endLine": 569,
        "endChar": 14
      },
      "revId": "f079c8e8e78f472da82d7d3bfcfa2e02dc21de27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5d68ada_9d0a9189",
        "filename": "http/utility.hpp",
        "patchSetId": 3
      },
      "lineNbr": 569,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-19T18:16:40Z",
      "side": 1,
      "message": "Capping to 6 digits for the moment seems reasonable to me.  I don\u0027t think we have use cases beyond that.",
      "parentUuid": "f4ec3a17_f22c88e2",
      "range": {
        "startLine": 569,
        "startChar": 10,
        "endLine": 569,
        "endChar": 14
      },
      "revId": "f079c8e8e78f472da82d7d3bfcfa2e02dc21de27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
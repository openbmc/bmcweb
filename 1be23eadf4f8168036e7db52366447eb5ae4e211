{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3f55263e_fe72ce07",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-20T00:54:57Z",
      "side": 1,
      "message": "Can we get some unit tests for the new hashing functions added please?",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c590c646_06bf383c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1002540
      },
      "writtenOn": "2025-08-20T18:39:16Z",
      "side": 1,
      "message": "Tests are included in `test/redfish-core/include/utils/json_utils_test.cpp`, do you mean you want them to be expanded?",
      "parentUuid": "3f55263e_fe72ce07",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e546e6e7_abed6f12",
        "filename": "http/http_response.hpp",
        "patchSetId": 7
      },
      "lineNbr": 234,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-11T17:50:53Z",
      "side": 1,
      "message": "continued nit, should we put something like\n\nif(etag){\n   BMCWEB_LOG_WARNING(\"Response etag was incorrectly set twice\");\n}\n\nso that it\u0027s easier to track as a bug?\n\n\nFeel free to change if you\u0027re doing another patch, but not required for merge.",
      "range": {
        "startLine": 234,
        "startChar": 15,
        "endLine": 234,
        "endChar": 22
      },
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a103fd02_88408fe5",
        "filename": "http/http_response.hpp",
        "patchSetId": 7
      },
      "lineNbr": 237,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-20T00:54:57Z",
      "side": 1,
      "message": "The naming of this isn\u0027t great now.  \"compute\" would imply that it\u0027s not being pulled from a cache.  Maybe rename to \"get\"?",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a06bc891_ac943dd1",
        "filename": "http/http_response.hpp",
        "patchSetId": 7
      },
      "lineNbr": 237,
      "author": {
        "id": 1002540
      },
      "writtenOn": "2025-08-25T18:19:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a103fd02_88408fe5",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fcf7b3ff_a38e4489",
        "filename": "http/http_response.hpp",
        "patchSetId": 7
      },
      "lineNbr": 237,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-25T20:52:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a06bc891_ac943dd1",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78db65fb_75a621c2",
        "filename": "redfish-core/include/redfish_oem_routing.hpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-20T00:57:19Z",
      "side": 1,
      "message": "?  Any reason we\u0027re doing this in a redfish-specific function?  etag is an http concept.\n\nAlso, this is only the OEM router, so I suspect this isn\u0027t doing what you think it\u0027s doing.",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0db7e581_be8ff509",
        "filename": "redfish-core/include/redfish_oem_routing.hpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1002540
      },
      "writtenOn": "2025-08-20T18:39:16Z",
      "side": 1,
      "message": "Existing code buries `expectedHash` here, breaking if-none-match specifically for resources that use OEM subroutes (managers.hpp).",
      "parentUuid": "78db65fb_75a621c2",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34652146_7c77713c",
        "filename": "redfish-core/include/redfish_oem_routing.hpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-25T20:52:13Z",
      "side": 1,
      "message": "I\u0027m not following... what do you mean \"buries\"? I see no mention of expectedHash here.\n\n\u003e breaking if-none-match specifically for resources that use OEM subroutes\n\nWhy is that?  The oem sub route will generate a hash, yes, but then when it\u0027s rolled up, the hash will be recomputed, right?",
      "parentUuid": "0db7e581_be8ff509",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f708af59_70b05b4a",
        "filename": "redfish-core/include/redfish_oem_routing.hpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1002540
      },
      "writtenOn": "2025-09-11T17:50:05Z",
      "side": 1,
      "message": "`expectedHash` (now renamed `expectedEtag`) comes from the request\u0027s if-none-match header; this isn\u0027t the etag we compute for the response.  The change is necessary because `multiResp` is newly created here and the expectedEtag value is initialized as empty,  The if-none-match comparison gets called on `multiResp`, so we need to move the value for `expectedEtag` from the original `asyncResp` here to `multiResp`.\n\nI moved this functionality to query_param.hpp `startMultiFragmentHandle` to match where `jsonValue` is also copied from the original Response to the new one.",
      "parentUuid": "34652146_7c77713c",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f635df28_38046b92",
        "filename": "redfish-core/include/redfish_oem_routing.hpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-11T17:50:53Z",
      "side": 1,
      "message": "I\u0027m also not understanding why this needs modified at all.  There are no OEM parameters that get ignored today, so even if this was a data structure issue, this code shouldn\u0027t be called for any of the datetime things?",
      "parentUuid": "34652146_7c77713c",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55e69f93_78b01f85",
        "filename": "redfish-core/include/redfish_oem_routing.hpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1002540
      },
      "writtenOn": "2025-09-11T18:04:57Z",
      "side": 1,
      "message": "It doesn\u0027t really have anything to do with the datetime things, it\u0027s just another thing preventing if-none-match from working specifically on this one resource.  Could be a separate PR but I included it here since it\u0027s a small change.",
      "parentUuid": "f635df28_38046b92",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad5610a5_6ddaaa3c",
        "filename": "redfish-core/include/redfish_oem_routing.hpp",
        "patchSetId": 7
      },
      "lineNbr": 240,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-11T17:50:53Z",
      "side": 1,
      "message": "Now that I understand this, this definitely doesn\u0027t work because there will be multiple pieces appended in an expand query.  The way you\u0027ve written it, this one just handles the last expanded one and uses that as the hash.  The order in which they\u0027re expanded is not consistent, and the etag needs to apply to the entire resource, not just the last-added member.",
      "range": {
        "startLine": 240,
        "startChar": 0,
        "endLine": 240,
        "endChar": 69
      },
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f18c4238_7659809b",
        "filename": "redfish-core/include/redfish_oem_routing.hpp",
        "patchSetId": 7
      },
      "lineNbr": 240,
      "author": {
        "id": 1002540
      },
      "writtenOn": "2025-09-11T18:04:57Z",
      "side": 1,
      "message": "This is the incoming etag value from the client\u0027s \u0027if-none-match\u0027 header in their request, it\u0027s not the etag value that\u0027s actually calculated from the content of the response.",
      "parentUuid": "ad5610a5_6ddaaa3c",
      "range": {
        "startLine": 240,
        "startChar": 0,
        "endLine": 240,
        "endChar": 69
      },
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a68b312c_f9a9a6c1",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 7
      },
      "lineNbr": 958,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-20T00:54:57Z",
      "side": 1,
      "message": "Please don\u0027t use things from the libraries details namespace.  There\u0027s two solutions to this:\n1. Hash combine is pretty simple.  We can inline the implementation.\n2. I believe boost has a public hash combine.\n\nI\u0027d probably prefer the first",
      "range": {
        "startLine": 958,
        "startChar": 28,
        "endLine": 958,
        "endChar": 34
      },
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9772f64d_66a69fb0",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 7
      },
      "lineNbr": 958,
      "author": {
        "id": 1002540
      },
      "writtenOn": "2025-08-25T18:19:33Z",
      "side": 1,
      "message": "Added implementation in `json_utils.hpp`",
      "parentUuid": "a68b312c_f9a9a6c1",
      "range": {
        "startLine": 958,
        "startChar": 28,
        "endLine": 958,
        "endChar": 34
      },
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bdd0fc9_aec6a8b8",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 7
      },
      "lineNbr": 961,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-20T00:54:57Z",
      "side": 1,
      "message": "This implementation is going to result in \n\n{\"ignored_key\": \"bar\"}\nand\n{}\n\nProducing the same hash.  I\u0027m not sure we want that structurally.  Should we instead still hash the key, and just not hash the value?  Or hash the value as a known hex value, so we don\u0027t get a collision?",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6d3eddc_4246143b",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 7
      },
      "lineNbr": 961,
      "author": {
        "id": 1002540
      },
      "writtenOn": "2025-08-25T18:19:33Z",
      "side": 1,
      "message": "Agree it makes sense for hash not to match object that just doesn\u0027t have the ignored key, reworked to still hash the key (and ignore only the value) for keys matching `keyToIgnore`.",
      "parentUuid": "9bdd0fc9_aec6a8b8",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af62af10_ff4727b6",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 7
      },
      "lineNbr": 961,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-25T20:52:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6d3eddc_4246143b",
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f4a7a3c_b98536c6",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 7
      },
      "lineNbr": 965,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-20T00:54:57Z",
      "side": 1,
      "message": "nit, we generally just put std::string.  They\u0027re equivalent, but std::string is easier for folks to understand.",
      "range": {
        "startLine": 965,
        "startChar": 35,
        "endLine": 965,
        "endChar": 59
      },
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "985b735c_47a7c253",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 7
      },
      "lineNbr": 965,
      "author": {
        "id": 1002540
      },
      "writtenOn": "2025-08-25T18:19:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f4a7a3c_b98536c6",
      "range": {
        "startLine": 965,
        "startChar": 35,
        "endLine": 965,
        "endChar": 59
      },
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1087a0e4_ed76f12e",
        "filename": "redfish-core/include/utils/json_utils.hpp",
        "patchSetId": 7
      },
      "lineNbr": 965,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-25T20:52:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "985b735c_47a7c253",
      "range": {
        "startLine": 965,
        "startChar": 35,
        "endLine": 965,
        "endChar": 59
      },
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa64c023_8bb4df64",
        "filename": "redfish-core/lib/managers.hpp",
        "patchSetId": 7
      },
      "lineNbr": 949,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-20T00:54:57Z",
      "side": 1,
      "message": "Can we make this a real function?  We\u0027re already a couple lambda scopes deep here.",
      "range": {
        "startLine": 944,
        "startChar": 43,
        "endLine": 949,
        "endChar": 17
      },
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1358fe5a_fcce75d7",
        "filename": "redfish-core/lib/managers.hpp",
        "patchSetId": 7
      },
      "lineNbr": 949,
      "author": {
        "id": 1002540
      },
      "writtenOn": "2025-08-25T18:19:33Z",
      "side": 1,
      "message": "Added function in `etag_utils.hpp`",
      "parentUuid": "aa64c023_8bb4df64",
      "range": {
        "startLine": 944,
        "startChar": 43,
        "endLine": 949,
        "endChar": 17
      },
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4d81b6a_303f924b",
        "filename": "redfish-core/lib/task.hpp",
        "patchSetId": 7
      },
      "lineNbr": 565,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-20T00:54:57Z",
      "side": 1,
      "message": "Please verify your #includes are correct.",
      "range": {
        "startLine": 565,
        "startChar": 43,
        "endLine": 565,
        "endChar": 57
      },
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d08d1a5c_c51861ec",
        "filename": "redfish-core/lib/task.hpp",
        "patchSetId": 7
      },
      "lineNbr": 565,
      "author": {
        "id": 1002540
      },
      "writtenOn": "2025-08-25T18:19:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b4d81b6a_303f924b",
      "range": {
        "startLine": 565,
        "startChar": 43,
        "endLine": 565,
        "endChar": 57
      },
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "627aefae_302019a7",
        "filename": "redfish-core/lib/task.hpp",
        "patchSetId": 7
      },
      "lineNbr": 565,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-25T20:52:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d08d1a5c_c51861ec",
      "range": {
        "startLine": 565,
        "startChar": 43,
        "endLine": 565,
        "endChar": 57
      },
      "revId": "1be23eadf4f8168036e7db52366447eb5ae4e211",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
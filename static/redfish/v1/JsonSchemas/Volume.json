{
    "$id": "http://redfish.dmtf.org/schemas/swordfish/v1/Volume.json",
    "$ref": "#/definitions/Volume",
    "$schema": "http://redfish.dmtf.org/schemas/v1/redfish-schema-v1.json",
    "copyright": "Copyright 2015-2022 Storage Networking Industry Association (SNIA), USA. All rights reserved.",
    "definitions": {
        "EncryptionTypes": {
            "enum": [
                "NativeDriveEncryption",
                "ControllerAssisted",
                "SoftwareAssisted"
            ],
            "enumDescriptions": {
                "ControllerAssisted": "The volume is being encrypted by the storage controller entity.",
                "NativeDriveEncryption": "The volume is utilizing the native drive encryption capabilities of the drive hardware.",
                "SoftwareAssisted": "The volume is being encrypted by software running on the system or the operating system."
            },
            "type": "string"
        },
        "InitializeMethod": {
            "enum": [
                "Skip",
                "Background",
                "Foreground"
            ],
            "enumDescriptions": {
                "Background": "The volume will be available for use immediately, with data erasure and preparation to happen as background tasks.",
                "Foreground": "Data erasure and preparation tasks will complete before the volume is presented as available for use.",
                "Skip": "The volume will be available for use immediately, with no preparation."
            },
            "type": "string"
        },
        "InitializeType": {
            "deprecated": "Deprecated in favor of the InitializeMethod enumerated type.",
            "enum": [
                "Fast",
                "Slow"
            ],
            "enumDescriptions": {
                "Fast": "The volume is prepared for use quickly, typically by erasing just the beginning and end of the space so that partitioning can be performed.",
                "Slow": "The volume is prepared for use slowly, typically by completely erasing the volume."
            },
            "type": "string"
        },
        "LBAFormatType": {
            "description": "LBAFormatType is defined in the NVMe specification set. This field indicates the LBA data size supported; implementations may report up to 16 values. For more details refer to the appropriate NVMe specification.",
            "enum": [
                "LBAFormat0",
                "LBAFormat1",
                "LBAFormat2",
                "LBAFormat3",
                "LBAFormat4",
                "LBAFormat5",
                "LBAFormat6",
                "LBAFormat7",
                "LBAFormat8",
                "LBAFormat9",
                "LBAFormat10",
                "LBAFormat11",
                "LBAFormat12",
                "LBAFormat13",
                "LBAFormat14",
                "LBAFormat15"
            ],
            "enumDescriptions": {
                "LBAFormat0": "LBAFormat0 is a required type. Indicates the LBA data size supported.",
                "LBAFormat1": "Indicates the LBA data size if supported.",
                "LBAFormat10": "Indicates the LBA data size supported if supported.",
                "LBAFormat11": "Indicates the LBA data size supported if supported.",
                "LBAFormat12": "Indicates the LBA data size supported if supported.",
                "LBAFormat13": "Indicates the LBA data size supported if supported.",
                "LBAFormat14": "Indicates the LBA data size supported if supported.",
                "LBAFormat15": "Indicates the LBA data size supported if supported.",
                "LBAFormat2": "Indicates the LBA data size supported if supported.",
                "LBAFormat3": "Indicates the LBA data size supported if supported.",
                "LBAFormat4": "Indicates the LBA data size supported if supported.",
                "LBAFormat5": "Indicates the LBA data size supported if supported.",
                "LBAFormat6": "Indicates the LBA data size supported if supported.",
                "LBAFormat7": "Indicates the LBA data size supported if supported.",
                "LBAFormat8": "Indicates the LBA data size supported if supported.",
                "LBAFormat9": "Indicates the LBA data size supported if supported."
            },
            "type": "string",
            "versionAdded": "v1_7_0"
        },
        "RAIDType": {
            "enum": [
                "RAID0",
                "RAID1",
                "RAID3",
                "RAID4",
                "RAID5",
                "RAID6",
                "RAID10",
                "RAID01",
                "RAID6TP",
                "RAID1E",
                "RAID50",
                "RAID60",
                "RAID00",
                "RAID10E",
                "RAID1Triple",
                "RAID10Triple",
                "None"
            ],
            "enumDescriptions": {
                "None": "A placement policy with no redundancy at the device level.",
                "RAID0": "A placement policy where consecutive logical blocks of data are uniformly distributed across a set of independent storage devices without offering any form of redundancy.",
                "RAID00": "A placement policy that creates a RAID 0 stripe set over two or more RAID 0 sets.",
                "RAID01": "A data placement policy that creates a mirrored device (RAID 1) over a set of striped devices (RAID 0).",
                "RAID1": "A placement policy where each logical block of data is stored on more than one independent storage device.",
                "RAID10": "A placement policy that creates a striped device (RAID 0) over a set of mirrored devices (RAID 1).",
                "RAID10E": "A placement policy that uses a RAID 0 stripe set over two or more RAID 10 sets.",
                "RAID10Triple": "A placement policy that uses a striped device (RAID 0) over a set of triple mirrored devices (RAID 1Triple).",
                "RAID1E": "A placement policy that uses a form of mirroring implemented over a set of independent storage devices where logical blocks are duplicated on a pair of independent storage devices so that data is uniformly distributed across the storage devices.",
                "RAID1Triple": "A placement policy where each logical block of data is mirrored three times across a set of three independent storage devices.",
                "RAID3": "A placement policy using parity-based protection where logical bytes of data are uniformly distributed across a set of independent storage devices and where the parity is stored on a dedicated independent storage device.",
                "RAID4": "A placement policy using parity-based protection where logical blocks of data are uniformly distributed across a set of independent storage devices and where the parity is stored on a dedicated independent storage device.",
                "RAID5": "A placement policy using parity-based protection for storing stripes of 'n' logical blocks of data and one logical block of parity across a set of 'n+1' independent storage devices where the parity and data blocks are interleaved across the storage devices.",
                "RAID50": "A placement policy that uses a RAID 0 stripe set over two or more RAID 5 sets of independent storage devices.",
                "RAID6": "A placement policy using parity-based protection for storing stripes of 'n' logical blocks of data and two logical blocks of independent parity across a set of 'n+2' independent storage devices where the parity and data blocks are interleaved across the storage devices.",
                "RAID60": "A placement policy that uses a RAID 0 stripe set over two or more RAID 6 sets of independent storage devices.",
                "RAID6TP": "A placement policy that uses parity-based protection for storing stripes of 'n' logical blocks of data and three logical blocks of independent parity across a set of 'n+3' independent storage devices where the parity and data blocks are interleaved across the storage devices."
            },
            "enumLongDescriptions": {
                "None": "A placement policy with no redundancy at the device level.",
                "RAID0": "A placement policy where consecutive logical blocks of data are uniformly distributed across a set of independent storage devices without offering any form of redundancy. This is commonly referred to as data striping. This form of RAID will encounter data loss with the failure of any storage device in the set.",
                "RAID00": "A placement policy that creates a RAID 0 stripe set over two or more RAID 0 sets. This is commonly referred to as RAID 0+0. This form of data layout is not fault tolerant; if any storage device fails there will be data loss.",
                "RAID01": "A data placement policy that creates a mirrored device (RAID 1) over a set of striped devices (RAID 0). This is commonly referred to as RAID 0+1 or RAID 0/1. Data stored using this form of RAID is able to survive a single RAID 0 data set failure without data loss.",
                "RAID1": "A placement policy where each logical block of data is stored on more than one independent storage device. This is commonly referred to as mirroring. Data stored using this form of RAID is able to survive a single storage device failure without data loss.",
                "RAID10": "A placement policy that creates a striped device (RAID 0) over a set of mirrored devices (RAID 1). This is commonly referred to as RAID 1/0. Data stored using this form of RAID is able to survive storage device failures in each RAID 1 set without data loss.",
                "RAID10E": "A placement policy that uses a RAID 0 stripe set over two or more RAID 10 sets. This is commonly referred to as Enhanced RAID 10. Data stored using this form of RAID is able to survive a single device failure within each nested RAID 1 set without data loss.",
                "RAID10Triple": "A placement policy that uses a striped device (RAID 0) over a set of triple mirrored devices (RAID 1Triple). This form of RAID can survive up to two failures in each triple mirror set without data loss.",
                "RAID1E": "A placement policy that uses a form of mirroring implemented over a set of independent storage devices where logical blocks are duplicated on a pair of independent storage devices so that data is uniformly distributed across the storage devices. This is commonly referred to as RAID 1 Enhanced. Data stored using this form of RAID is able to survive a single storage device failure without data loss.",
                "RAID1Triple": "A placement policy where each logical block of data is mirrored three times across a set of three independent storage devices. This is commonly referred to as three-way mirroring. This form of RAID can survive two device failures without data loss.",
                "RAID3": "A placement policy using parity-based protection where logical bytes of data are uniformly distributed across a set of independent storage devices and where the parity is stored on a dedicated independent storage device. Data stored using this form of RAID is able to survive a single storage device failure without data loss. If the storage devices use rotating media, they are assumed to be rotationally synchronized, and the data stripe size should be no larger than the exported block size.",
                "RAID4": "A placement policy using parity-based protection where logical blocks of data are uniformly distributed across a set of independent storage devices and where the parity is stored on a dedicated independent storage device. Data stored using this form of RAID is able to survive a single storage device failure without data loss.",
                "RAID5": "A placement policy using parity-based protection for storing stripes of 'n' logical blocks of data and one logical block of parity across a set of 'n+1' independent storage devices where the parity and data blocks are interleaved across the storage devices. Data stored using this form of RAID is able to survive a single storage device failure without data loss.",
                "RAID50": "A placement policy that uses a RAID 0 stripe set over two or more RAID 5 sets of independent storage devices. Data stored using this form of RAID is able to survive a single storage device failure within each RAID 5 set without data loss.",
                "RAID6": "A placement policy using parity-based protection for storing stripes of 'n' logical blocks of data and two logical blocks of independent parity across a set of 'n+2' independent storage devices where the parity and data blocks are interleaved across the storage devices. Data stored using this form of RAID is able to survive any two independent storage device failures without data loss.",
                "RAID60": "A placement policy that uses a RAID 0 stripe set over two or more RAID 6 sets of independent storage devices. Data stored using this form of RAID is able to survive two device failures within each RAID 6 set without data loss.",
                "RAID6TP": "A placement policy that uses parity-based protection for storing stripes of 'n' logical blocks of data and three logical blocks of independent parity across a set of 'n+3' independent storage devices where the parity and data blocks are interleaved across the storage devices. This is commonly referred to as Triple Parity RAID. Data stored using this form of RAID is able to survive any three independent storage device failures without data loss."
            },
            "enumVersionAdded": {
                "None": "v1_4_2"
            },
            "type": "string"
        },
        "ReadCachePolicyType": {
            "enum": [
                "ReadAhead",
                "AdaptiveReadAhead",
                "Off"
            ],
            "enumDescriptions": {
                "AdaptiveReadAhead": "A caching technique in which the controller dynamically determines whether to pre-fetch data anticipating future read requests, based on previous cache hit ratio.",
                "Off": "The read cache is disabled.",
                "ReadAhead": "A caching technique in which the controller pre-fetches data anticipating future read requests."
            },
            "type": "string"
        },
        "Volume": {
            "anyOf": [
                {
                    "$ref": "http://redfish.dmtf.org/schemas/v1/odata-v4.json#/definitions/idRef"
                },
                {
                    "$ref": "http://redfish.dmtf.org/schemas/swordfish/v1/Volume.v1_0_4.json#/definitions/Volume"
                },
                {
                    "$ref": "http://redfish.dmtf.org/schemas/swordfish/v1/Volume.v1_1_5.json#/definitions/Volume"
                },
                {
                    "$ref": "http://redfish.dmtf.org/schemas/swordfish/v1/Volume.v1_2_5.json#/definitions/Volume"
                },
                {
                    "$ref": "http://redfish.dmtf.org/schemas/swordfish/v1/Volume.v1_3_4.json#/definitions/Volume"
                },
                {
                    "$ref": "http://redfish.dmtf.org/schemas/swordfish/v1/Volume.v1_4_3.json#/definitions/Volume"
                },
                {
                    "$ref": "http://redfish.dmtf.org/schemas/swordfish/v1/Volume.v1_5_1.json#/definitions/Volume"
                },
                {
                    "$ref": "http://redfish.dmtf.org/schemas/swordfish/v1/Volume.v1_6_2.json#/definitions/Volume"
                },
                {
                    "$ref": "http://redfish.dmtf.org/schemas/swordfish/v1/Volume.v1_7_0.json#/definitions/Volume"
                },
                {
                    "$ref": "http://redfish.dmtf.org/schemas/swordfish/v1/Volume.v1_8_0.json#/definitions/Volume"
                }
            ],
            "deletable": true,
            "description": "Volume contains properties used to describe a volume, virtual disk, LUN, or other logical storage entity for any system.",
            "insertable": false,
            "longDescription": "This resource shall be used to represent a volume, virtual disk, logical disk, LUN, or other logical storage for a Redfish implementation.",
            "updatable": true,
            "uris": [
                "/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}",
                "/redfish/v1/CompositionService/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
                "/redfish/v1/ResourceBlocks/{ResourceBlockId}/Storage/{StorageId}/Volumes/{VolumeId}",
                "/redfish/v1/ResourceBlocks/{ResourceBlockId}/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
                "/redfish/v1/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
                "/redfish/v1/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
                "/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
                "/redfish/v1/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
                "/redfish/v1/Storage/{StorageId}/Volumes/{VolumeId}",
                "/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
                "/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
                "/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
                "/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
                "/redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageId}/Volumes/{VolumeId}",
                "/redfish/v1/StorageServices/{StorageServiceId}/ConsistencyGroups/{ConsistencyGroupId}/Volumes/{VolumeId}",
                "/redfish/v1/StorageServices/{StorageServiceId}/FileSystems/{FileSystemId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
                "/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/AllocatedVolumes/{VolumeId}",
                "/redfish/v1/StorageServices/{StorageServiceId}/StoragePools/{StoragePoolId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{VolumeId}",
                "/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}",
                "/redfish/v1/StorageServices/{StorageServiceId}/Volumes/{VolumeId}/CapacitySources/{CapacitySourceId}/ProvidingVolumes/{ProvidingVolumeId}"
            ]
        },
        "VolumeType": {
            "enum": [
                "RawDevice",
                "NonRedundant",
                "Mirrored",
                "StripedWithParity",
                "SpannedMirrors",
                "SpannedStripesWithParity"
            ],
            "enumDescriptions": {
                "Mirrored": "The volume is a mirrored device.",
                "NonRedundant": "The volume is a non-redundant storage device.",
                "RawDevice": "The volume is a raw physical device without any RAID or other virtualization applied.",
                "SpannedMirrors": "The volume is a spanned set of mirrored devices.",
                "SpannedStripesWithParity": "The volume is a spanned set of devices which uses parity to retain redundant information.",
                "StripedWithParity": "The volume is a device which uses parity to retain redundant information."
            },
            "type": "string"
        },
        "VolumeUsageType": {
            "enum": [
                "Data",
                "SystemData",
                "CacheOnly",
                "SystemReserve",
                "ReplicationReserve"
            ],
            "enumDescriptions": {
                "CacheOnly": "The volume is allocated for use as a non-consumable cache only volume.",
                "Data": "The volume is allocated for use as a consumable data volume.",
                "ReplicationReserve": "The volume is allocated for use as a non-consumable reserved volume for replication use.",
                "SystemData": "The volume is allocated for use as a consumable data volume reserved for system use.",
                "SystemReserve": "The volume is allocated for use as a non-consumable system reserved volume."
            },
            "enumLongDescriptions": {
                "CacheOnly": "The volume shall be allocated for use as a non-consumable cache only volume.",
                "Data": "The volume shall be allocated for use as a consumable data volume.",
                "ReplicationReserve": "The volume shall be allocated for use as a non-consumable reserved volume for replication use.",
                "SystemData": "The volume shall be allocated for use as a consumable data volume reserved for system use.",
                "SystemReserve": "The volume shall be allocated for use as a non-consumable system reserved volume."
            },
            "type": "string"
        },
        "WriteCachePolicyType": {
            "enum": [
                "WriteThrough",
                "ProtectedWriteBack",
                "UnprotectedWriteBack",
                "Off"
            ],
            "enumDescriptions": {
                "Off": "The write cache is disabled.",
                "ProtectedWriteBack": "A caching technique in which the completion of a write request is signaled as soon as the data is in cache, and actual writing to non-volatile media is guaranteed to occur at a later time.",
                "UnprotectedWriteBack": "A caching technique in which the completion of a write request is signaled as soon as the data is in cache; actual writing to non-volatile media is not guaranteed to occur at a later time.",
                "WriteThrough": "A caching technique in which the completion of a write request is not signaled until data is safely stored on non-volatile media."
            },
            "enumLongDescriptions": {
                "Off": "Indicates that the write cache shall be disabled.",
                "ProtectedWriteBack": "A caching technique in which the completion of a write request is signaled as soon as the data is in cache, and actual writing to non-volatile media is guaranteed to occur at a later time.",
                "UnprotectedWriteBack": "A caching technique in which the completion of a write request is signaled as soon as the data is in cache; actual writing to non-volatile media is not guaranteed to occur at a later time.",
                "WriteThrough": "A caching technique in which the completion of a write request is not signaled until data is safely stored on non-volatile media."
            },
            "enumVersionAdded": {
                "Off": "v1_4_1"
            },
            "type": "string"
        },
        "WriteCacheStateType": {
            "enum": [
                "Unprotected",
                "Protected",
                "Degraded"
            ],
            "enumDescriptions": {
                "Degraded": "Indicates an issue with the cache state in which the cache space is diminished or disabled due to a failure or an outside influence such as a discharged battery.",
                "Protected": "Indicates that the cache state type in use generally protects write requests on non-volatile media.",
                "Unprotected": "Indicates that the cache state type in use generally does not protect write requests on non-volatile media."
            },
            "enumLongDescriptions": {
                "Degraded": "Indicates an issue with the cache state in which the cache space is diminished or disabled due to a failure or an outside influence such as a discharged battery.",
                "Protected": "Indicates that the cache state type in use generally protects write requests on non-volatile media.",
                "Unprotected": "Indicates that the cache state type in use generally does not protect write requests on non-volatile media."
            },
            "type": "string"
        },
        "WriteHoleProtectionPolicyType": {
            "enum": [
                "Off",
                "Journaling",
                "DistributedLog",
                "Oem"
            ],
            "enumDescriptions": {
                "DistributedLog": "The policy that distributes additional log among the volume's capacity sources to address write hole issue.",
                "Journaling": "The policy that uses separate block device for write-ahead logging to address write hole issue.",
                "Oem": "The policy that is Oem specific.",
                "Off": "The volume is not using any policy to address the write hole issue."
            },
            "enumLongDescriptions": {
                "DistributedLog": "The policy that distributes additional log (e.q. checksum of the parity) among the volume's capacity sources to address write hole issue. Additional data is used to detect data corruption on the volume.",
                "Journaling": "The policy that uses separate block device for write-ahead logging to address write hole issue. All write operations on the RAID volume are first logged on dedicated journaling device that is not part of the volume.",
                "Oem": "The policy that is Oem specific. The mechanism details are unknown unless provided separately by the Oem.",
                "Off": "The support for addressing the write hole issue is disabled. The volume is not performing any additional activities to close the RAID write hole."
            },
            "type": "string"
        }
    },
    "owningEntity": "SNIA",
    "title": "#Volume.Volume"
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4b74d6e9_b575764c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 38
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-15T21:28:10Z",
      "side": 1,
      "message": "As written, I\u0027m not sure how this patchset helps.  It drops 10 lines in the cable example of IMO, relatively straightforward to read code (even if it includes loops), and replaces it with 700ish lines of very hard to read code, that, unless I\u0027m mistaken, doesn\u0027t replicate the behavior of the old code faithfully.\n\nI encourage you to keep working on refining the idea, and continue porting over more examples to try to get your idea to a net-negative line count, as well as simplify it, but as written, if this were deployed everywhere, I think it would hurt our debugability and readability.",
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88967f60_f3bf29f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 38
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-15T21:42:51Z",
      "side": 1,
      "message": "This also adds about 2kB to the binary size for one conversion of one instance of a unpackPropertiesNoThrow call.  Assuming this scaling holds, there are 41 unpack properties calls;  41 * 2KB \u003d 82KB, which means that if this patch is executed, it will add about 12% to the total binary size of bmcweb.  Please keep that in mind when making changes.",
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d516a07_0ba99538",
        "filename": "redfish-core/include/utils/dbus_to_json.hpp",
        "patchSetId": 38
      },
      "lineNbr": 44,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-15T21:28:10Z",
      "side": 1,
      "message": "Isn\u0027t this basically the same as:\n\nstd::function\u003cconst DbusVariantType\u0026,\n              const sdbusplus::message::object_path\u0026,\n              std::string_view, std::string_view,\n              MetaData\u0026\u003e\n              \n?",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 44,
        "endChar": 2
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "025fb1d8_1b9af8be",
        "filename": "redfish-core/include/utils/dbus_to_json.hpp",
        "patchSetId": 38
      },
      "lineNbr": 44,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-06-19T16:52:37Z",
      "side": 1,
      "message": "yes. But not as heavy as std::function. A quick protoype reveals the difference in assembly generation https://godbolt.org/z/WccnYvq56",
      "parentUuid": "5d516a07_0ba99538",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 44,
        "endChar": 2
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a787a39_c82e7047",
        "filename": "redfish-core/include/utils/dbus_to_json.hpp",
        "patchSetId": 38
      },
      "lineNbr": 44,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-20T16:46:22Z",
      "side": 1,
      "message": "Lets start with the simplest code, and we can optimize as it\u0027s appropriate.",
      "parentUuid": "025fb1d8_1b9af8be",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 44,
        "endChar": 2
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b46d367a_8d314736",
        "filename": "redfish-core/include/utils/dbus_to_json.hpp",
        "patchSetId": 38
      },
      "lineNbr": 145,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-15T21:28:10Z",
      "side": 1,
      "message": "I like to think I\u0027m ok with c++, but code like this is really a lot tougher to read and understand.\n\nalso, this would be our first usage of concepts in the project that I\u0027m aware of.  That\u0027s not to say you shouldn\u0027t, but lets make sure it actually reduces the complexity.",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 145,
        "endChar": 44
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "939fc631_ee129f10",
        "filename": "redfish-core/include/utils/dbus_to_json.hpp",
        "patchSetId": 38
      },
      "lineNbr": 145,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-06-19T16:52:37Z",
      "side": 1,
      "message": "These concepts are used to pick proper overloads based on caller site usage. Most of them are very rare cases, but still needed to be added for complete support. This is similar to the crow::black_magic:: templates hidden behind BMCWEB_ROUTE. That reduces the caller site code a lot.",
      "parentUuid": "b46d367a_8d314736",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 145,
        "endChar": 44
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d0ed747_c43a6b1c",
        "filename": "redfish-core/include/utils/dbus_to_json.hpp",
        "patchSetId": 38
      },
      "lineNbr": 145,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-20T16:46:22Z",
      "side": 1,
      "message": "\u003e These concepts are used to pick proper overloads based on caller site usage. Most of them are very rare cases, but still needed to be added for complete support. This is similar to the crow::black_magic:: templates hidden behind BMCWEB_ROUTE. That reduces the caller site code a lot.\n\nYou will notice that in the last year I\u0027ve significantly reduced both the complexity and size of the black_magic namespace.  I would eventually like it to go away entirely, but for the moment it\u0027s down to 170 lines.  This code actively goes the other direction.\n\n\u003e That reduces the caller site code a lot.\n\nThis isn\u0027t true in a lot of cases, and just putting complexity outside of the call site doesn\u0027t solve the problem.  We need code that works, regardless of how many lines are written.",
      "parentUuid": "939fc631_ee129f10",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 145,
        "endChar": 44
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0fe2950_3cdd60c6",
        "filename": "redfish-core/include/utils/dbus_to_json.hpp",
        "patchSetId": 38
      },
      "lineNbr": 158,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-15T21:28:10Z",
      "side": 1,
      "message": "You\u0027ve invented your own nlohmann::json::json_pointer type here.  Please don\u0027t invent your own, use what already exists, and we know escapes properly.",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 158,
        "endChar": 5
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dc3db4f_43e0aaa1",
        "filename": "redfish-core/include/utils/dbus_to_json.hpp",
        "patchSetId": 38
      },
      "lineNbr": 158,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-06-19T16:52:37Z",
      "side": 1,
      "message": "changed the implementation",
      "parentUuid": "f0fe2950_3cdd60c6",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 158,
        "endChar": 5
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b638983_9ac96e3d",
        "filename": "redfish-core/include/utils/dbus_to_json.hpp",
        "patchSetId": 38
      },
      "lineNbr": 192,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-15T21:28:10Z",
      "side": 1,
      "message": "Why are these objects special?  There\u0027s no way to map a unix_fd to a redfish output directly.",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 192,
        "endChar": 75
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2d371b2_dc164717",
        "filename": "redfish-core/include/utils/dbus_to_json.hpp",
        "patchSetId": 38
      },
      "lineNbr": 192,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-06-19T16:52:37Z",
      "side": 1,
      "message": "GenericNodeMapper specialization takes advantage of automatic conversion of types to nlohmann json. This avoids an explicit template arguments in mapToKey call. The types avoided here do not support such automatic conversion. But you can convert these types to Json by giving the template argument.",
      "parentUuid": "4b638983_9ac96e3d",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 192,
        "endChar": 75
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24b5906f_44919037",
        "filename": "redfish-core/include/utils/dbus_to_json.hpp",
        "patchSetId": 38
      },
      "lineNbr": 192,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-20T16:46:22Z",
      "side": 1,
      "message": "\u003e GenericNodeMapper specialization takes advantage of automatic conversion of types to nlohmann json. This avoids an explicit template arguments in mapToKey call. The types avoided here do not support such automatic conversion. But you can convert these types to Json by giving the template argument.\n\nThat seems confusing as an API, but I think I understand now.",
      "parentUuid": "e2d371b2_dc164717",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 192,
        "endChar": 75
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7abcd1f_8a532c12",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-15T21:28:10Z",
      "side": 1,
      "message": "Like has been pointed out to you already, please don\u0027t use using namespace, per the coding standard.",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 34
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14f7da59_6ea806d7",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 39,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-06-19T16:52:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a7abcd1f_8a532c12",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 34
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78ed0b62_3068f03c",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 41,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-06-15T19:40:26Z",
      "side": 1,
      "message": "I am struggling to see how this is easier code to write and maintain..",
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4541074_fdbd32eb",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 41,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-15T21:28:10Z",
      "side": 1,
      "message": "+1.  Yes, in this example it is 10 lines less code at the call site (21 lines instead of 32), but it:\n\nA. Uses quite a few inline lambdas, that we know cause debugability problems (inline lambdas don\u0027t print very good call stacks) and review problems (clang format likes to changes them significantly on what should be trivial diffs).\nB. Invokes a significant number of background lines (200 lines) of code that are harder to debug.\nC. Instantiates multiple templates that are non-standard.",
      "parentUuid": "78ed0b62_3068f03c",
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d484448f_629b7ebe",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 41,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-06-19T16:52:37Z",
      "side": 1,
      "message": "It depends on familiarity. If you read the code you will see that you are just stating the intent. \"add a mapper that maps \"CableTypeDescription\" string property to \"CableType\" and report error if property missmatch. You will not write code for how to iterate the tree, how to unwrap the Dbus variant and how to report error. In trivial case(Majority) a one-liner will do the job. Look at the ethernet.hpp to see the 2 page long code do the same thing. The alternate solution that uses unpackPropertiesNoThrow may not scale well beyond 3 properties. Even in the simpler case such as this one the amount of code you write is still less. \nThe template instantiation is upper-bounded by the number of different types in Dbus variant. But unpackPropertiesNoThrow instantiation depends on the number of possible permutations and combinations of the arguments.\n\nBackground code handles several other rare usages. Which will get instantiated only when we use it.",
      "parentUuid": "e4541074_fdbd32eb",
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a61710f_1484658f",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 41,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-20T16:46:22Z",
      "side": 1,
      "message": "\u003e It depends on familiarity. If you read the code you will see that you are just stating the intent. \"add a mapper that maps \"CableTypeDescription\" string property to \"CableType\" and report error if property missmatch. \n\nWith respect, I\u0027ve read the code, and I definitely do not see the stated intent any more than I did in the previous code.  I see inline lambdas, which are disallowed, and callbacks that it\u0027s difficult to determine the effect of.\n\n\u003e You will not write code for how to iterate the tree, how to unwrap the Dbus variant and how to report error. In trivial case(Majority) a one-liner will do the job.\n\nPlease actually show this.  I do not see a case where the majority one liner would do the job.\n\n\n\u003e Look at the ethernet.hpp to see the 2 page long code do the same thing.\n\nEthernet was one of the first schemas written, and hasn\u0027t taken advantage of the latest helper functions.  Please start by moving ethernet over to the helper functions we already have before you do your comparison.\n\n\u003e The alternate solution that uses unpackPropertiesNoThrow may not scale well beyond 3 properties.\n\nYou say this.... but \"may not scale well\" does really tell me what the problem is.  Can you elaborate?  We have unpackPropertiesNoThrow calls that use more than 3 properties today.\n\n\u003e Even in the simpler case such as this one the amount of code you write is still less. \n\n\nUnless you count all the helper functions, in which case you\u0027ve written more code, even if you assume we port over every handler, there will be more boilerplate.\n\n\u003e The template instantiation is upper-bounded by the number of different types in Dbus variant. But unpackPropertiesNoThrow instantiation depends on the number of possible permutations and combinations of the arguments.\n\nI\u0027m confused what argument you\u0027re making here.  If the argument that more code gets generated with unpackPropertiesNoThrow, that seems to be not true (the binaries on this patchset are larger).\n\n\u003e \n\u003e Background code handles several other rare usages. Which will get instantiated only when we use it.\n\nQuite confused at this statement.",
      "parentUuid": "d484448f_629b7ebe",
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9441b03_e768c3ae",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 45,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-15T21:51:04Z",
      "side": 1,
      "message": "This branch is also wrong.\n\nthe old behavior was\n\n1. If it\u0027s finite: include it directly with no error.\n2. if it\u0027s not finite, but nan, do not add it but do not put in an error.\n3. if it\u0027s not finite, and not NAN, do not add it but add an error.\n\nThis patchset looks like it handles #2 incorrectly.",
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "785216f7_b6e37def",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 45,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-06-19T16:52:37Z",
      "side": 1,
      "message": "Ack , will update the code accordingly",
      "parentUuid": "a9441b03_e768c3ae",
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad967220_238c26ac",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 47,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-15T21:28:10Z",
      "side": 1,
      "message": "Isn\u0027t this wrong?  This is going to return a filled std::optional with a default constructed double (ie 0.0), which would then get serialized as 0.0, not null right?",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ed821c3_30a9c4a0",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 47,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-06-19T16:52:37Z",
      "side": 1,
      "message": "No. std::optional\u003cdouble\u003e() is null optional and will be evaluated to false in an if statement.",
      "parentUuid": "ad967220_238c26ac",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23a1a5fe_52f9aa81",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 47,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-20T16:46:22Z",
      "side": 1,
      "message": "Right, which would mean that the property would get omitted from the json object rather than being put in as null?",
      "parentUuid": "8ed821c3_30a9c4a0",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87037c9b_41c2a507",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-15T21:28:10Z",
      "side": 1,
      "message": "This isn\u0027t the same has messages::internalError().",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 75
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "899131b5_1a516c88",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 57,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-06-19T16:52:37Z",
      "side": 1,
      "message": "The internal error messages are already captured as part of the target Json. Here we are just setting the response code.",
      "parentUuid": "87037c9b_41c2a507",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 75
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed971194_f3688f7b",
        "filename": "redfish-core/lib/cable.hpp",
        "patchSetId": 38
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-06-20T16:46:22Z",
      "side": 1,
      "message": "That seems error prone and confusing.  Is there any way to make that more clear?",
      "parentUuid": "899131b5_1a516c88",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 75
      },
      "revId": "0d059be9b4e78e6bf0efd0e0fd8483b88a0b7929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "210c047c_8e99e4cb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-12T18:24:21Z",
      "side": 1,
      "message": "Somewhere, ideally in the first patch in the series, we need a better commit message about:\n\n1. Why these are being combined.\n2. What user impacts there will be by combining these.\n3. What features will no longer work once these are combined.\n4. Testing that we\u0027ll do to combine these.\n\n\n\nOverall, I don\u0027t see anything that actually documents or tests user impact, and looking at the series, there will be significant impact to the user-facing API.  That needs documented, discussed, and probably put behind an option flag so users can get the old behavior if they want it.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 0
      },
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "861211c6_ea38aabd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-08-13T09:25:07Z",
      "side": 1,
      "message": "\u003e Overall, I don\u0027t see anything that actually documents or tests user impact, and looking at the series, there will be significant impact to the user-facing API\n\nWhich impacts? I see that the rsyslog based entries will be able to be resolved and deleted individually. \nAdditionally there is a small performance impact.\n\nOtherwise there should be no impact from the current iteration of the patch series. \n\nRemember, the querying of the event log collection is still guarded by the meson option. So the client will have the same event logs returned as before.\n\nThe clients using rsyslog backend will additionally have the \"Resolved\" property in their json response.\n\n\u003e Overall, I don\u0027t see anything that actually documents or tests user impact, and looking at the series, there will be significant impact to the user-facing API\n\nFor the testing, what do you have in mind? What would you like to see tested? I assume this will require further changes to the function signatures to decouple them from dbus and the ```/var/log/redfish``` respectively. Some ideas what we can test\n\n- presence of some properties in the response json\n- maybe we can make the location of the rsyslog logs (```/var/log/redfish```) configurable. Then the behavior of the implementation  on that backend can also be tested, including\n  - get all logs\n  - delete an individual log entry\n  - resolve an individual log entry\n  - clear logs\n\nFor the phosphor-logging backend i can imagine it does not require much testing from bmcweb side since bmcweb just uses it without much processing on bmcweb side.",
      "parentUuid": "210c047c_8e99e4cb",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 0
      },
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ba9c9a5_a2be8619",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-13T17:13:53Z",
      "side": 1,
      "message": "\u003e Which impacts? \n\nI\u0027m not going to enumerate all of them, but off the top of my head:\nProperty differences in result\nDifferences in LogEntry delete behavior\nDifferences in EventService behavior for the two backends.\nDifferences in Circular Buffering/overflow behavior\nDifferences in behavior if one backend isn\u0027t present.\nPolling Performance (as you mentioned).  My understanding was that this wasn\u0027t a \"small\" impact.  For large number (thousands) of entries my understanding is that it\u0027s quite a large impact.\nDifferences in Paging capabilities.\n\n\nI suspect the thing we discussed in discord about you adding an option mode where you get \"both\" logs under different URIs probably makes the most sense for now, and we can work through all the above over time, especially if this is just a dev use case, there\u0027s no sense in going through all the effort.\n\n\n\u003e For the testing, what do you have in mind? What would you like to see tested?\n\nIn a short sentence, all behavior that was changed needs tested.  This is also written down in TESTING.md if you want to read that.  You\u0027ve changed a lot of behavior in this patch series, so we need to at least try to test all the use cases you\u0027ve changed.  I suspect you\u0027ve broken the usage contract for a vast majority of them (see impacts above).",
      "parentUuid": "861211c6_ea38aabd",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 0
      },
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3adb2a2c_fa582b19",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-08-20T10:29:41Z",
      "side": 1,
      "message": "\u003e usage contract\n\nIs this usage contract written down somewhere? Do you mean the redfish specification? Or are you talking about client implementations that were coded to match the specific bmcweb implementation?\n\n\u003e Property differences in result\n\nSince most of the properties are optional in redfish, the result is still redfish compliant. There is no regression for individual log entries. If an entry had a property before, it will have that property after these patches.\n\n\u003e Differences in Circular Buffering/overflow behavior\n\nThis specific patch is just about GET of an individual log entry\n\n\u003e adding an option mode where you get \"both\"\n\nI don\u0027t like this idea. I want to get all the entries without any options. There is no need for options, one implementation can cover all use-cases. It just needs to be a good implementation. No one needs to worry about details of how Event Log works. It can just work without any need for configuration. Just needs some patches.\n\n\u003e You\u0027ve changed a lot of behavior in this patch series\n\nIt would make it a lot easier for me if any concerns were directed at individual patches. We can talk about the series as a whole on discord or something, but it\u0027s difficult for me if the whole series is discussed as a comment on a single patch.\n\nThe single patch is up for debate on the specific changes done in that patch.",
      "parentUuid": "6ba9c9a5_a2be8619",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 0
      },
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f1e1c4a_fd2ba6fa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-26T18:09:47Z",
      "side": 1,
      "message": "\u003e Is this usage contract written down somewhere?\n\nIn the code behavior of the user facing interface is the best resource to look at.  Look for things like property changes (entries that show up missing properties), full-behavior changes, or performance changes.\n\n\u003e  the result is still redfish compliant\n\n\"Redfish compliant\" doesn\u0027t mean anything.  This has for sure broken the rules on how circular collections are handled, so it\u0027s not compliant.  I\u0027m also fairly sure it breaks interop profiles.\n\n\u003e This specific patch is just about GET of an individual log entry\n\nThat doesn\u0027t change the point.\n\n\n\u003e I want to get all the entries without any options. \n\nWhy?\n\n\n\u003e one implementation can cover all use-cases.\n\nYou and I disagree on this point, which I\u0027m happy to chat about if you\u0027d rather.  I was trying to unblock you by letting you add an option key that you can go communicate the benefits of to other system owners/clients.  But if you\u0027d rather have all the patches wait on that, that\u0027s fine too.\n\n\n\u003e No one needs to worry about details of how Event Log works\n\nThis is an idealized statement, but the reality is that the two logging mechanisms support different features.",
      "parentUuid": "3adb2a2c_fa582b19",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 0
      },
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84a66d27_4ce85a37",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1662,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-12T18:29:00Z",
      "side": 1,
      "message": "Nit, new code is supposed to use sdbusplus::message::object_path.  I realize this code was just moved, so I don\u0027t expect you to change it, just FYI.",
      "range": {
        "startLine": 1662,
        "startChar": 48,
        "endLine": 1662,
        "endChar": 55
      },
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b85fad0_be461163",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1662,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-08-13T08:58:03Z",
      "side": 1,
      "message": "i would have rather not moved this code. But since it\u0027s a .hpp file (why?)\nand functions are not declared somewhere above, i had to move it so it would compile, since i am calling it from somewhere higher than it was called previously.\n\nLooking at this mess, how can we fix it? Should i pre-declare these functions\ninstead of moving them? Should we make this whole file a .cpp?\n\nIt\u0027s kind of ridiculous to be moving code around and creating huge diff for no good reason.",
      "parentUuid": "84a66d27_4ce85a37",
      "range": {
        "startLine": 1662,
        "startChar": 48,
        "endLine": 1662,
        "endChar": 55
      },
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2d18bb7_7bd49a12",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1662,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-13T17:13:53Z",
      "side": 1,
      "message": "\u003e i would have rather not moved this code. But since it\u0027s a .hpp file (why?)\n\u003e and functions are not declared somewhere above, i had to move it so it would compile, since i am calling it from somewhere higher than it was called previously.\n\u003e \n\u003e Looking at this mess, how can we fix it? Should i pre-declare these functions\n\u003e instead of moving them? Should we make this whole file a .cpp?\n\u003e \n\u003e It\u0027s kind of ridiculous to be moving code around and creating huge diff for no good reason.\n\nI suspect you misread the part where I said \"I don\u0027t expect you to change it\".  This was just something I noticed because the code moved and I did the review that might be fixed in the future.\n\nSure, we can debate the (over) use of headers in bmcweb.  In fact, that problem is even documented in HEADERS.md if you want to contribute to that effort of trying to find a solution.  Re-hashing it in an unrelated code review comment doesn\u0027t really fix the problem I\u0027m afraid.",
      "parentUuid": "5b85fad0_be461163",
      "range": {
        "startLine": 1662,
        "startChar": 48,
        "endLine": 1662,
        "endChar": 55
      },
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55d58b08_d689229a",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1662,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-08-20T10:29:41Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "a2d18bb7_7bd49a12",
      "range": {
        "startLine": 1662,
        "startChar": 48,
        "endLine": 1662,
        "endChar": 55
      },
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7a695c6_3e676941",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1753,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-12T18:29:00Z",
      "side": 1,
      "message": "So we try to find an entry in the Redfish log files, then fall back to dbus?  That seems error prone.  Is there any way to make the branching decision higher based on the ID + the meson option?",
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06371745_5e12b3f1",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1753,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-08-13T08:58:03Z",
      "side": 1,
      "message": "\u003e Is there any way to make the branching decision higher based on the ID + the meson option?\nThe point of this patch series is to remove the meson option 😊\n\n\u003e That seems error prone\nHow is the fallback error prone? Which errors do you expect? \n\nThe entry ids are disjoint. If we do not find it in the redfish logs, we look on dbus. If we do not find it on dbus, it does not exist.\n\nSo it is found or not found as before.",
      "parentUuid": "a7a695c6_3e676941",
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f4dd727_e0ff054a",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1753,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-13T17:13:53Z",
      "side": 1,
      "message": "\u003e The entry ids are disjoint.\n\nWhere is that documented?  There\u0027s nothing preventing a logging daemon from creating conflicting IDs compared to the rsyslog based implementation, and there\u0027s been discussions in the past about simplifying the rsyslog IDs down to the monotonic journal id that would now be not possible if we\u0027re doing an explicit merge.",
      "parentUuid": "06371745_5e12b3f1",
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af30a808_a0efb6da",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1753,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-08-20T10:29:41Z",
      "side": 1,
      "message": "\u003e Where is that documented? \n\nI did not find it documented anywhere. Same as the mysterious usage contract that seems to be going on with the redfish clients 😊\n\n\u003e there\u0027s been discussions in the past about simplifying the rsyslog IDs down to the monotonic journal id that would now be not possible if we\u0027re doing an explicit merge.\n\nif that id is monotonic and starts at some minimum value ```x``` then we can always offset it by ```n``` where ```n``` is the max amount of event logs expected to be provided by phosphor-logging backend (e.g. the desired 10000 or whatever)\n\nSo then externally the event log entries will have a unique id and be disjoint based on the backend.",
      "parentUuid": "0f4dd727_e0ff054a",
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b9f3dc2_fed2c80a",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1753,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-26T18:09:47Z",
      "side": 1,
      "message": "\u003e \u003e Where is that documented? \n\u003e \n\u003e I did not find it documented anywhere. Same as the mysterious usage contract that seems to be going on with the redfish clients 😊\n\nSo then lets keep them separate.  I\u0027m not aware of any requirement here that keeps the dbus IDs monotonic.  We treat the dbus ids as unique.\n\n\u003e \n\u003e \u003e there\u0027s been discussions in the past about simplifying the rsyslog IDs down to the monotonic journal id that would now be not possible if we\u0027re doing an explicit merge.\n\u003e \n\u003e if that id is monotonic and starts at some minimum value ```x``` then we can always offset it by ```n``` where ```n``` is the max amount of event logs expected to be provided by phosphor-logging backend (e.g. the desired 10000 or whatever)\n\u003e \n\u003e So then externally the event log entries will have a unique id and be disjoint based on the backend.\n\nYep, that\u0027s fair, if you assume that Redfish log collection behavior doesn\u0027t require circular buffer behavior.",
      "parentUuid": "af30a808_a0efb6da",
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
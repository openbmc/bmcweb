{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "210c047c_8e99e4cb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-12T18:24:21Z",
      "side": 1,
      "message": "Somewhere, ideally in the first patch in the series, we need a better commit message about:\n\n1. Why these are being combined.\n2. What user impacts there will be by combining these.\n3. What features will no longer work once these are combined.\n4. Testing that we\u0027ll do to combine these.\n\n\n\nOverall, I don\u0027t see anything that actually documents or tests user impact, and looking at the series, there will be significant impact to the user-facing API.  That needs documented, discussed, and probably put behind an option flag so users can get the old behavior if they want it.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 0
      },
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "861211c6_ea38aabd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-08-13T09:25:07Z",
      "side": 1,
      "message": "\u003e Overall, I don\u0027t see anything that actually documents or tests user impact, and looking at the series, there will be significant impact to the user-facing API\n\nWhich impacts? I see that the rsyslog based entries will be able to be resolved and deleted individually. \nAdditionally there is a small performance impact.\n\nOtherwise there should be no impact from the current iteration of the patch series. \n\nRemember, the querying of the event log collection is still guarded by the meson option. So the client will have the same event logs returned as before.\n\nThe clients using rsyslog backend will additionally have the \"Resolved\" property in their json response.\n\n\u003e Overall, I don\u0027t see anything that actually documents or tests user impact, and looking at the series, there will be significant impact to the user-facing API\n\nFor the testing, what do you have in mind? What would you like to see tested? I assume this will require further changes to the function signatures to decouple them from dbus and the ```/var/log/redfish``` respectively. Some ideas what we can test\n\n- presence of some properties in the response json\n- maybe we can make the location of the rsyslog logs (```/var/log/redfish```) configurable. Then the behavior of the implementation  on that backend can also be tested, including\n  - get all logs\n  - delete an individual log entry\n  - resolve an individual log entry\n  - clear logs\n\nFor the phosphor-logging backend i can imagine it does not require much testing from bmcweb side since bmcweb just uses it without much processing on bmcweb side.",
      "parentUuid": "210c047c_8e99e4cb",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 0
      },
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84a66d27_4ce85a37",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1662,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-12T18:29:00Z",
      "side": 1,
      "message": "Nit, new code is supposed to use sdbusplus::message::object_path.  I realize this code was just moved, so I don\u0027t expect you to change it, just FYI.",
      "range": {
        "startLine": 1662,
        "startChar": 48,
        "endLine": 1662,
        "endChar": 55
      },
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b85fad0_be461163",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1662,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-08-13T08:58:03Z",
      "side": 1,
      "message": "i would have rather not moved this code. But since it\u0027s a .hpp file (why?)\nand functions are not declared somewhere above, i had to move it so it would compile, since i am calling it from somewhere higher than it was called previously.\n\nLooking at this mess, how can we fix it? Should i pre-declare these functions\ninstead of moving them? Should we make this whole file a .cpp?\n\nIt\u0027s kind of ridiculous to be moving code around and creating huge diff for no good reason.",
      "parentUuid": "84a66d27_4ce85a37",
      "range": {
        "startLine": 1662,
        "startChar": 48,
        "endLine": 1662,
        "endChar": 55
      },
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7a695c6_3e676941",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1753,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-12T18:29:00Z",
      "side": 1,
      "message": "So we try to find an entry in the Redfish log files, then fall back to dbus?  That seems error prone.  Is there any way to make the branching decision higher based on the ID + the meson option?",
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06371745_5e12b3f1",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1753,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-08-13T08:58:03Z",
      "side": 1,
      "message": "\u003e Is there any way to make the branching decision higher based on the ID + the meson option?\nThe point of this patch series is to remove the meson option ðŸ˜Š\n\n\u003e That seems error prone\nHow is the fallback error prone? Which errors do you expect? \n\nThe entry ids are disjoint. If we do not find it in the redfish logs, we look on dbus. If we do not find it on dbus, it does not exist.\n\nSo it is found or not found as before.",
      "parentUuid": "a7a695c6_3e676941",
      "revId": "eaf4faa01dfa4e68a6943ff4513fd69410b295e2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
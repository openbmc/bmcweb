{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "065b6bf8_498a4fe8",
        "filename": "http/http_client.hpp",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-19T18:21:18Z",
      "side": 1,
      "message": "In terms of long term data storage data structures, please store these as boost::urls::url to ensure we maintain better safety.  Ideally the whole system would be using that struct (and there are patches in the works to improve the situation).",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 77,
        "endChar": 25
      },
      "revId": "22bf54deca23cba52805cf71678bbd9d09406ef9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c2606b8_b107efef",
        "filename": "http/http_client.hpp",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-04-25T20:10:35Z",
      "side": 1,
      "message": "I have completely removed that struct in favor of using boost::urls::url as the container for the satellite config information.",
      "parentUuid": "065b6bf8_498a4fe8",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 77,
        "endChar": 25
      },
      "revId": "22bf54deca23cba52805cf71678bbd9d09406ef9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27f4d22b_05717ef0",
        "filename": "http/http_client.hpp",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-19T18:21:18Z",
      "side": 1,
      "message": "For the first implementation, lets just go to dbus every time to simplify the first patchset (yes, it will slow things down, that\u0027s ok).\n\nFWIW, we need a generic \"cache dbus data\" mechanism for many....many other things, so this might fall into a more generic category where we solve the whole problem space, not just for Satelite configs.",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 70
      },
      "revId": "22bf54deca23cba52805cf71678bbd9d09406ef9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41b8b44e_1f7879b6",
        "filename": "http/http_client.hpp",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-04-19T19:50:34Z",
      "side": 1,
      "message": "Since this CL doesn\u0027t use the information I store in the map, I\u0027m not sure how much that change will simplify this patchset.  Are you referring to not also setting up a D-Bus match for new satellites like Benjamin requested in his comment?  If so I can move that into a subsequent CL and just focus on breaking up the config loading code.\n\nWill I need to wait until that \"cache dbus data\" mechanism is added before I can store the satellite config info?  I\u0027m planning to use the presence of satellite config info as an indicator that Redfish Aggregation is enabled.  Going to D-Bus every time will slow down not just aggregation operations, but also every endpoint that supports aggregation.  I want to double check that the future slowdown is alright for that as well.",
      "parentUuid": "27f4d22b_05717ef0",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 70
      },
      "revId": "22bf54deca23cba52805cf71678bbd9d09406ef9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e115063c_651483a0",
        "filename": "http/http_client.hpp",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-30T17:50:37Z",
      "side": 1,
      "message": "\u003e Since this CL doesn\u0027t use the information I store in the map, I\u0027m not sure how much that change will simplify this patchset.  Are you referring to not also setting up a D-Bus match for new satellites like Benjamin requested in his comment?\n\nCorrect\n\n\u003e  If so I can move that into a subsequent CL and just focus on breaking up the config loading code.\n\nYes.  That\u0027s the whole point of what I was asking for.  Split up the patches into a progression from simple -\u003e complex.\n\n\u003e \n\u003e Will I need to wait until that \"cache dbus data\" mechanism is added before I can store the satellite config info?\n\nNo.  In a perfect world, you\u0027d write a generic class for that, but I understand that\u0027s a bit of a daunting task, so I\u0027m not going to require it, just be thinking about it.  IMO, the ideal class would look something like\n\n\nclass DbusEventWatcher{\nDbusEventWatcher(string dbusPathPrefix, span\u003cstring\u003e interfacesToListenFor, std::function\u003cvoid(EventData)\u003e())\n}\n\nThen on construction, it would handle the get/introspect requests to determine all of the things that exist, and call the callback.\n\n\n\u003e  I\u0027m planning to use the presence of satellite config info as an indicator that Redfish Aggregation is enabled.\n\nThat seems fine to me, although I\u0027m not sure if a global enable/disable matters much.  If the array of satellite configs is 0, we\u0027ll basically do nothing, right?  We just avoid one dbus call.\n\n\u003e  Going to D-Bus every time will slow down not just aggregation operations, but also every endpoint that supports aggregation.\n\u003e  I want to double check that the future slowdown is alright for that as well.\n\n\nYep;  This needs discussed more, and we need to characterize the impact.  For the moment, I suspect that an \"enable aggregation\" compiler flag is warranted just so we can have a trap door for people to avoid the aggregation \"slowdown\" altogether, but I suspect there\u0027s a happy medium where the aggregation code just causes no slowdown if there are no satellite configs.",
      "parentUuid": "41b8b44e_1f7879b6",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 70
      },
      "revId": "22bf54deca23cba52805cf71678bbd9d09406ef9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "557ace55_3ff0ffd7",
        "filename": "http/http_client.hpp",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-02T20:09:52Z",
      "side": 1,
      "message": "\u003e Yes.  That\u0027s the whole point of what I was asking for.  Split up the patches into a progression from simple -\u003e complex.\nI ended up adding the matching because at the time I wasn\u0027t sure at what point its code would overlap with the original config lookup.  I\u0027ll break the matching into a separate CL.\n\n\u003e That seems fine to me, although I\u0027m not sure if a global enable/disable matters much.  If the array of satellite configs is 0, we\u0027ll basically do nothing, right?  We just avoid one dbus call.\nThat\u0027s correct for most instances.  I believe getting collections like \"/redfish/v1/Chassis\" would require two calls: 1) the initial check to see if a request needs to be forwarded rather than handled locally and 2) a check after the collection has been pulled to see if collection information needs to be added from any satellites.\n\n\u003e I suspect there\u0027s a happy medium where the aggregation code just causes no slowdown if there are no satellite configs.\nThat comes into play in this future patch that\u0027s a WIP as of right now (https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/53310).  I\u0027ll have a method that uses unordered_map satelliteInfo.empty() in some form as an initial check to determine if we need to go through the aggregation flow.  That should avoid the slowdown since we won\u0027t have to make any D-Bus reads.",
      "parentUuid": "e115063c_651483a0",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 70
      },
      "revId": "22bf54deca23cba52805cf71678bbd9d09406ef9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43c7248a_d069f5af",
        "filename": "http/http_client.hpp",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2022-05-03T01:06:38Z",
      "side": 1,
      "message": "\u003e That\u0027s correct for most instances\nActually you will have to make the two checks on every resource that\u0027s located on the aggregating BMC, not just the collection endpoints.  That\u0027s because any URIs in that response will need to be modified so that the \"main_\" prefix is added.",
      "parentUuid": "557ace55_3ff0ffd7",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 70
      },
      "revId": "22bf54deca23cba52805cf71678bbd9d09406ef9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aaee99ae_a080b399",
        "filename": "http/http_client.hpp",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-06T17:59:41Z",
      "side": 1,
      "message": "\u003e  \"main_\" prefix is added.\n\nI don\u0027t quite understand this, but lets follow up on a different thread where the code is actually doing this.",
      "parentUuid": "43c7248a_d069f5af",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 70
      },
      "revId": "22bf54deca23cba52805cf71678bbd9d09406ef9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
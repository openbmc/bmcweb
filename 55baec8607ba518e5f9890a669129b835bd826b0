{
  "comments": [
    {
      "key": {
        "uuid": "411647cb_fa41dbdc",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 46
      },
      "lineNbr": 77,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "Please inline these usings.  They make the code harder to maintain.",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 77,
        "endChar": 70
      },
      "revId": "55baec8607ba518e5f9890a669129b835bd826b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f50c053c_a44e1f13",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 46
      },
      "lineNbr": 77,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-03T15:26:47Z",
      "side": 1,
      "message": "It is easier to maintain all types in one place than looking for them in many places.",
      "parentUuid": "411647cb_fa41dbdc",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 77,
        "endChar": 70
      },
      "revId": "55baec8607ba518e5f9890a669129b835bd826b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92d530e8_3e496dcc",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 46
      },
      "lineNbr": 77,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-03T16:17:41Z",
      "side": 1,
      "message": "As a maintainer who has maintained this project for a long time, it is not easier to maintain, because a patchset can change the type easily, and not have all the call sites that now need to be re-reviewed for correctness show up in code review.  If you inline these, code reviews become much much easier.",
      "parentUuid": "f50c053c_a44e1f13",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 77,
        "endChar": 70
      },
      "revId": "55baec8607ba518e5f9890a669129b835bd826b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1015d349_b34757b0",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 46
      },
      "lineNbr": 77,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-03T16:17:57Z",
      "side": 1,
      "message": "Sorry, former maintainer.",
      "parentUuid": "92d530e8_3e496dcc",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 77,
        "endChar": 70
      },
      "revId": "55baec8607ba518e5f9890a669129b835bd826b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "221170b2_5dc0324a",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 46
      },
      "lineNbr": 77,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-04T12:56:39Z",
      "side": 1,
      "message": "I do not follow your inline style. You have to do review all places, it does not matter if it is inline or not. If you have one custom type that is common across project than it is easier to review it. You can find all important places to in blink of an eye. For example:\n#define time_t   long int\ngrep time_t | ./script_to_verify_if_type_is_ok\nDo you disagree with it? Other way you have to look for all those places manually.",
      "parentUuid": "1015d349_b34757b0",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 77,
        "endChar": 70
      },
      "revId": "55baec8607ba518e5f9890a669129b835bd826b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e455875d_7b1740a7",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 46
      },
      "lineNbr": 77,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-04T15:08:59Z",
      "side": 1,
      "message": "Lets say in the future, we have a review that adds this line to another file.\n\nScanPeriod scan \u003d (int64_t)-1;\n\nis that valid?  Is it secure from over/underflows for both 32 bit and 64 bit?\n\nNow, on the contrary, if I have this:\nuint32_t scan \u003d (int64_t)-1;\n\nThat immediately stands out as a problem, given that I\u0027m moving a larger parameter into a smaller parameter without a range check, and I\u0027m moving a signed int into an unsigned int without a \u003c 0 check.\n\n\nIn a review, you have no idea, unless you look up every using throughout the file, and in practice, that doesn\u0027t tend to happen, and we just end up with a security issue.  Unfortunately we see this pattern all the time in bmcweb, and given that most of the time we\u0027re dealing with attacker driven values, we need to be aware of that, and code in such a way that we can avoid it in review, even if it does require larger patchsets.\n\nHow about this as a compromise:  You can leave the types that are more complex than std::vector\u003cstd::string\u003e, but all others need to be inlined.  Does that sound reasonable?",
      "parentUuid": "221170b2_5dc0324a",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 77,
        "endChar": 70
      },
      "revId": "55baec8607ba518e5f9890a669129b835bd826b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7c2480a_36debb94",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 46
      },
      "lineNbr": 87,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-01T15:22:50Z",
      "side": 1,
      "message": "Please inline this function in the places it\u0027s needed.  That makes it more clear that the error handling is correct in all cases, and covers everything it needs to.",
      "revId": "55baec8607ba518e5f9890a669129b835bd826b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "500e87dd_9311a2ad",
        "filename": "redfish-core/include/utils/telemetry_utils.hpp",
        "patchSetId": 46
      },
      "lineNbr": 87,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2020-09-03T15:26:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7c2480a_36debb94",
      "revId": "55baec8607ba518e5f9890a669129b835bd826b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}
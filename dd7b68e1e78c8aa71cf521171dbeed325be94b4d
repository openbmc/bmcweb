{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "167ff42a_d389265c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 26,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-05-25T20:29:40Z",
      "side": 1,
      "message": "Not sure I would call this Trivial but I see other testing later so I am okay here",
      "revId": "dd7b68e1e78c8aa71cf521171dbeed325be94b4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa866ffc_5671ebd0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 26,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-05-25T21:07:16Z",
      "side": 1,
      "message": "The previous patchset where we didn\u0027t change any existing code is trivial. \n\nRemoved this comment on the latest patchset.",
      "parentUuid": "167ff42a_d389265c",
      "revId": "dd7b68e1e78c8aa71cf521171dbeed325be94b4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97d2a7f9_1ff54017",
        "filename": "redfish-core/lib/health.hpp",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-25T20:33:35Z",
      "side": 1,
      "message": "Why is this branch needed now?  This is duplicating the map lookup, so we at a minimum we want to avoid that (you\u0027ll notice there are no other uses of nlohmann::json::contains for this reason) but I\u0027m not really following how this could be needed in a way that isn\u0027t a bug?",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 64,
        "endChar": 9
      },
      "revId": "dd7b68e1e78c8aa71cf521171dbeed325be94b4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f38b874c_dc93893f",
        "filename": "redfish-core/lib/health.hpp",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-05-25T21:07:16Z",
      "side": 1,
      "message": "|statusPtr| is taken from the second constructor, there is no check in constructor wether the pointer is legal or not. Is it safe to trust callers?\n\nPreviously we don\u0027t this check since it takes a reference.",
      "parentUuid": "97d2a7f9_1ff54017",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 64,
        "endChar": 9
      },
      "revId": "dd7b68e1e78c8aa71cf521171dbeed325be94b4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40c0b1b4_7379d80f",
        "filename": "redfish-core/lib/health.hpp",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-25T22:04:57Z",
      "side": 1,
      "message": "\u003e |statusPtr| is taken from the second constructor, there is no check in constructor wether the pointer is legal or not. Is it safe to trust callers?\n\nI\u0027m not quite following how a caller could call a safety issue here.  Can you expand on what you mean?\n\noperator[] creates an element if it doesn\u0027t already exist, so there\u0027s no way that (I think) any value could cause a safety issue here.  If this were a vector, you would be right to check this.\n\n\u003e \n\u003e Previously we don\u0027t this check since it takes a reference.",
      "parentUuid": "f38b874c_dc93893f",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 64,
        "endChar": 9
      },
      "revId": "dd7b68e1e78c8aa71cf521171dbeed325be94b4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89f61fa7_3241b45e",
        "filename": "redfish-core/lib/health.hpp",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-05-25T23:50:25Z",
      "side": 1,
      "message": "Okay, our gap is that \" thought [] will throw an exception if it can\u0027t be resolved by reading https://json.nlohmann.me/api/basic_json/operator%5B%5D/#exception-safety\n\n```\nThe function can throw the following exceptions:\nThrows parse_error.106 if an array index in the passed JSON pointer ptr begins with \u00270\u0027.\nThrows parse_error.109 if an array index in the passed JSON pointer ptr is not a number.\nThrows out_of_range.402 if the array index \u0027-\u0027 is used in the passed JSON pointer ptr for the const version.\nThrows out_of_range.404 if the JSON pointer ptr can not be resolved.\n```\n\nI quickly tested it just now. You are right, it creates an object if the key doesn\u0027t exist. It even extends the array the index is out of boundary. \n\n```\n  \"test_list\": [\n    1.0,\n    \"test\",\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    \"123\"\n  ],\n```",
      "parentUuid": "40c0b1b4_7379d80f",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 64,
        "endChar": 9
      },
      "revId": "dd7b68e1e78c8aa71cf521171dbeed325be94b4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
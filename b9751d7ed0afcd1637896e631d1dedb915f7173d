{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "17c81189_ebc79ab2",
        "filename": "redfish-core/include/utils/pcie_util.hpp",
        "patchSetId": 25
      },
      "lineNbr": 31,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-09-19T14:09:31Z",
      "side": 1,
      "message": "Since `std::ranges` is used (and preferred) in bmcweb, this can be written as\n```\n    return std::ranges::find(pcieDevicePaths, pcieDevicePath) !\u003d \n                             pcieDevicePaths.end();\n```",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 62
      },
      "revId": "b9751d7ed0afcd1637896e631d1dedb915f7173d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7441d08d_a7fe50b7",
        "filename": "redfish-core/include/utils/pcie_util.hpp",
        "patchSetId": 25
      },
      "lineNbr": 31,
      "author": {
        "id": 1001633
      },
      "writtenOn": "2023-09-19T17:12:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17c81189_ebc79ab2",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 62
      },
      "revId": "b9751d7ed0afcd1637896e631d1dedb915f7173d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "430df036_937423f1",
        "filename": "redfish-core/include/utils/pcie_util.hpp",
        "patchSetId": 25
      },
      "lineNbr": 158,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-09-19T14:09:31Z",
      "side": 1,
      "message": "This part of logic \u0026 its children is to find the empty-slot by doing\n\n```\ngetSubTreePaths() --\u003e pcieDevicePaths\ngetSubTreePaths() -\u003e pcieSlotPaths\n\nfor each  pcieSlotPaths\n{\n   getAssociationEndPoints() -\u003e to check whether there is a pcieDevice\n}\n```\n\nThe logic seems simplified if we start with pcieSlots \u0026 check whether there is a pcieDevice using getAssociatedSubTreePaths()\n\n```\ngetSubTreePaths() -\u003e pcieSlotPaths\nfor each slot : pcieSlotPaths\n{ \n   slotAssocPath \u003d slot + \"/contained_by\";\n   getAssociatedSubTreePaths(slotAssocPath, Item.PCIeDevice interface)\n   if(empty ) {\n       pcieSlot is empty\n   }\n}\n```\n\nThis approach would reduce the first call `getSubTreePaths() --\u003e pcieDevicePaths`, and I think the code would be clearer to read.",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 158,
        "endChar": 11
      },
      "revId": "b9751d7ed0afcd1637896e631d1dedb915f7173d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf2961c4_a01e77be",
        "filename": "redfish-core/include/utils/pcie_util.hpp",
        "patchSetId": 25
      },
      "lineNbr": 158,
      "author": {
        "id": 1001633
      },
      "writtenOn": "2023-09-19T15:09:32Z",
      "side": 1,
      "message": "We require a list of PCIeDevices. It\u0027s possible to have multiple different objects sharing the same \u0027contained_by\u0027 association path. This association can be used for PCIe Device, Boards or Chassis. In addEmptyPCIeSlot, we iterate through each object and verify if the PCIeSlot contains a PCIe Device.\n\nThis is discord discussion\nhttps://discord.com/channels/775381525260664832/855566794994221117/1115344545815744532",
      "parentUuid": "430df036_937423f1",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 158,
        "endChar": 11
      },
      "revId": "b9751d7ed0afcd1637896e631d1dedb915f7173d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efd9208f_49ee5cb5",
        "filename": "redfish-core/include/utils/pcie_util.hpp",
        "patchSetId": 25
      },
      "lineNbr": 158,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-09-19T18:25:07Z",
      "side": 1,
      "message": "My suggested logic is the same as what you described.\n\nThe main loop is on pcieSlotPaths in both cases, and then check whether there is any device on the slot.\n\nThe difference is how to check the existence of a  pcie device.\ngetAssociatedSubtreePaths() is for the purpose.\n\n\n```\nfor each  pcieSlotPaths\n{\n   // The logic here is to check whether there is a pcieDevice\n}\n```\n\nHow to check whether it is a pcie device or not is done by getAssociatedSubTreePaths() by setting the specific interface \u0027PCIeDevice\u0027\nso that the only PCIeDevice (not others) is checked.",
      "parentUuid": "bf2961c4_a01e77be",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 158,
        "endChar": 11
      },
      "revId": "b9751d7ed0afcd1637896e631d1dedb915f7173d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2b9a9ec_fa8ba762",
        "filename": "redfish-core/include/utils/pcie_util.hpp",
        "patchSetId": 25
      },
      "lineNbr": 158,
      "author": {
        "id": 1001633
      },
      "writtenOn": "2023-09-19T18:31:57Z",
      "side": 1,
      "message": "if we use getAssociatedSubTreePaths, it queries the entire PCIeDevice subtree for each PCIeSlot to check if the endpoint is a PCIeDevice. While this approach may enhance code readability, it could impact performance. I am inclined to prioritize performance. However, I\u0027m open to changing the code to use getAssociatedSubTreePaths if Ed/Gunnar prefers that approach.",
      "parentUuid": "efd9208f_49ee5cb5",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 158,
        "endChar": 11
      },
      "revId": "b9751d7ed0afcd1637896e631d1dedb915f7173d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6a4e3a8_2a0b9ab5",
        "filename": "redfish-core/include/utils/pcie_util.hpp",
        "patchSetId": 25
      },
      "lineNbr": 158,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2023-09-19T18:58:16Z",
      "side": 1,
      "message": "I don\u0027t think there are much of the performance differences.\nCurrent code: (3 depths getSubTree or getAssoc Calls)\n\n```\ngetPCIeDeviceList()\n   dbus::utility::getSubTreePaths(...[](){\n      getEmptyPCIeSlots() {\n          dbus::utility::getSubTreePaths(...[](){\n             handleGetEmptyPCIeSlots() {\n               dbus::utility::getAssociationEndPoints();\n             }\n         });\n   });\n```\n\nThe new code: (2 depths getSubtree or getAssociatedSubTree)\n\n```\ngetPCIeDeviceList()\n   dbus::utility::getSubTreePaths(...[](){\n         slotAssocPath \u003d slot + \"/contained_by\";\n        getAssociatedSubTreePaths( ..[](){\n             if(ec || empty())\n             {\n             }\n       });\n```\n\nIt would be much more readable.",
      "parentUuid": "d2b9a9ec_fa8ba762",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 158,
        "endChar": 11
      },
      "revId": "b9751d7ed0afcd1637896e631d1dedb915f7173d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "878aaecf_3ca5da5b",
        "filename": "redfish-core/include/utils/pcie_util.hpp",
        "patchSetId": 25
      },
      "lineNbr": 158,
      "author": {
        "id": 1001633
      },
      "writtenOn": "2024-02-15T20:43:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6a4e3a8_2a0b9ab5",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 158,
        "endChar": 11
      },
      "revId": "b9751d7ed0afcd1637896e631d1dedb915f7173d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
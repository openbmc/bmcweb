{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7e8d1ccd_da209271",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 8
      },
      "lineNbr": 392,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-31T16:32:09Z",
      "side": 1,
      "message": "This function isn\u0027t really an appropriate conversion.  Lets use dateStringToEpoch to parse this into a value, then use getDateTimeUint to convert it to a Redfish value.  That\u0027s likely less code, and will verify that we\u0027re producing the value correctly.\n\nFor example\n\n19991399\n\nWould parse correctly here, but produce an incorrect Redfish result.",
      "revId": "574f6a5128adb4158e0a6af2ab12ad3cfa34276b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4118fea1_a7caf815",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 8
      },
      "lineNbr": 392,
      "author": {
        "id": 1000992
      },
      "writtenOn": "2024-09-04T10:01:48Z",
      "side": 1,
      "message": "Acknowledged\nI will update it.",
      "parentUuid": "7e8d1ccd_da209271",
      "revId": "574f6a5128adb4158e0a6af2ab12ad3cfa34276b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afb23fc9_d2b28b88",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 8
      },
      "lineNbr": 392,
      "author": {
        "id": 1000992
      },
      "writtenOn": "2024-09-24T09:18:06Z",
      "side": 1,
      "message": "Hi @Ed,\nI have updated based on your suggestion\n```\ninline std::optional\u003cstd::string\u003e getDateTimeIso8601(std::string_view datetime)\n{\n    BMCWEB_LOG_CRITICAL(\"datetimeStr: {}\", datetime);\n    std::optional\u003credfish::time_utils::usSinceEpoch\u003e us \u003d\n        redfish::time_utils::dateStringToEpoch(datetime);\n    if (!us)\n    {\n        BMCWEB_LOG_CRITICAL(\"Error Here!!!!\");\n        return std::nullopt;\n    }\n    std::string datetimeStr \u003d \n        redfish::time_utils::getDateTimeUint(static_cast\u003cuint64_t\u003e(us-\u003ecount()));\n    return std::make_optional(datetimeStr);\n}\n```\nBut has an issue in \"Error Here!!!!\" line\nThe input datetime value that print out is:\n```\ndatetimeStr: 20230531T000000Z\n```\nDo you have any idea? Does I miss anything?\n\nThanks",
      "parentUuid": "4118fea1_a7caf815",
      "revId": "574f6a5128adb4158e0a6af2ab12ad3cfa34276b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66a57bcf_f8775236",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 8
      },
      "lineNbr": 392,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-24T22:17:23Z",
      "side": 1,
      "message": "20230531T000000Z doesn\u0027t look like a valid time?  Probably need to add some debug logging if this is truly a correct iso8160 string.  it could be a problem in getDateTimeIso8601, or could be a problem in the string itself.  hard to know which without debugging further.",
      "parentUuid": "afb23fc9_d2b28b88",
      "revId": "574f6a5128adb4158e0a6af2ab12ad3cfa34276b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c480a8d_5d2debe4",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 8
      },
      "lineNbr": 392,
      "author": {
        "id": 1000992
      },
      "writtenOn": "2024-09-25T02:35:14Z",
      "side": 1,
      "message": "Hi @Ed,\nPer Dbus interface, the BuildDate format either as YYYYMMDD or YYYYMMDDThhmmssZ https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Inventory/Decorator/Asset.interface.yaml#L20. So I could say it\u0027s valid time.\nI will add more debug to dateStringToEpoch function.\n\nThanks,",
      "parentUuid": "66a57bcf_f8775236",
      "revId": "574f6a5128adb4158e0a6af2ab12ad3cfa34276b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b17086df_8ed44cf2",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 8
      },
      "lineNbr": 392,
      "author": {
        "id": 1000992
      },
      "writtenOn": "2024-10-03T07:34:37Z",
      "side": 1,
      "message": "Hi @Ed,\n\nAfter adds debug to `dateStringToEpoch` function, I see that this not handles the format for `YYYYMMDD` and `YYYYMMDDThhmmssZ` https://github.com/openbmc/bmcweb/blob/master/redfish-core/src/utils/time_utils.cpp#L17\n\nI have a fix for this likes that:\n```\n-    for (const char* format : std::to_array({\"%FT%T%Ez\", \"%FT%TZ\", \"%FT%T\"}))\n+    for (const char* format : std::to_array({\"%FT%T%Ez\", \"%FT%TZ\", \"%FT%T\",\"%Y%m%d\", \"%Y%m%dT%H%M%SZ\"}))\n```\n\nTested:\n\nTest case 1:\nThe input ISO 8601 timestamp: 20230531T000000Z\nThe output Epoch timestamp: 1685491200\n\nTest case 2:\nThe input ISO 8601 timestamp: 20230531\nThe output Epoch timestamp: 1685491200\n\n\nAfter uses getDateTimeUint to convert it to a Redfish value, the ProductionDate will shows:\n\"ProductionDate\": \"2023-05-31T00:00:00+00:00\"\n\nCould I have a new PR to update the `dateStringToEpoch` function?",
      "parentUuid": "4c480a8d_5d2debe4",
      "revId": "574f6a5128adb4158e0a6af2ab12ad3cfa34276b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da604ea5_05a8481a",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 8
      },
      "lineNbr": 392,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-03T16:34:40Z",
      "side": 1,
      "message": "Yes, seems fine. just add the additional format.",
      "parentUuid": "b17086df_8ed44cf2",
      "revId": "574f6a5128adb4158e0a6af2ab12ad3cfa34276b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb01e318_c48c82f5",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 8
      },
      "lineNbr": 392,
      "author": {
        "id": 1000992
      },
      "writtenOn": "2024-10-04T10:23:21Z",
      "side": 1,
      "message": "Hi @Ed, I have submited https://gerrit.openbmc.org/c/openbmc/bmcweb/+/75080. Please help review.",
      "parentUuid": "da604ea5_05a8481a",
      "revId": "574f6a5128adb4158e0a6af2ab12ad3cfa34276b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aaef6290_1dd30abf",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 8
      },
      "lineNbr": 392,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-04T16:15:27Z",
      "side": 1,
      "message": "Reviewed",
      "parentUuid": "cb01e318_c48c82f5",
      "revId": "574f6a5128adb4158e0a6af2ab12ad3cfa34276b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12bc5dc7_4177cded",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 8
      },
      "lineNbr": 412,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-31T16:32:09Z",
      "side": 1,
      "message": "We shouldn\u0027t be producing two different strings for a single type.",
      "range": {
        "startLine": 400,
        "startChar": 0,
        "endLine": 412,
        "endChar": 0
      },
      "revId": "574f6a5128adb4158e0a6af2ab12ad3cfa34276b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5f247a5_b787be59",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 8
      },
      "lineNbr": 412,
      "author": {
        "id": 1000992
      },
      "writtenOn": "2024-09-04T10:01:48Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "12bc5dc7_4177cded",
      "range": {
        "startLine": 400,
        "startChar": 0,
        "endLine": 412,
        "endChar": 0
      },
      "revId": "574f6a5128adb4158e0a6af2ab12ad3cfa34276b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72e587a7_9a1a8d5a",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 8
      },
      "lineNbr": 412,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-03T16:34:40Z",
      "side": 1,
      "message": "Not resolved on the patchset.",
      "parentUuid": "d5f247a5_b787be59",
      "range": {
        "startLine": 400,
        "startChar": 0,
        "endLine": 412,
        "endChar": 0
      },
      "revId": "574f6a5128adb4158e0a6af2ab12ad3cfa34276b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5209f47_d5004134",
        "filename": "redfish-core/include/utils/time_utils.hpp",
        "patchSetId": 8
      },
      "lineNbr": 412,
      "author": {
        "id": 1000992
      },
      "writtenOn": "2024-10-04T10:23:21Z",
      "side": 1,
      "message": "Updated",
      "parentUuid": "72e587a7_9a1a8d5a",
      "range": {
        "startLine": 400,
        "startChar": 0,
        "endLine": 412,
        "endChar": 0
      },
      "revId": "574f6a5128adb4158e0a6af2ab12ad3cfa34276b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
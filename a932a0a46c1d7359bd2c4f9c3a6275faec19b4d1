{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "99d52cc0_5256f31c",
        "filename": "http/http_connection.hpp",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-01-07T18:05:19Z",
      "side": 1,
      "message": "const auto* ?\nWant the auto?",
      "revId": "a932a0a46c1d7359bd2c4f9c3a6275faec19b4d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af116826_b27845e2",
        "filename": "http/http_connection.hpp",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-07T18:11:45Z",
      "side": 1,
      "message": "This one was subtle.  Because of the limitations in clang-tidy, NOLINTNEXTLINE means it literally has to be on the next line in source, not the next semantic line.  When I added the const unsigned char* to the left, it caused the reinterpret_cast to move to the next line, which caused the checks to now fail because the \"next\" line wasn\u0027t the one with the issue.\n\nGiven how long the typename is, moving to auto seemed like the best compromise between the dumb gymnastics to make the check pass, and still leaves the type obviously in the call site, which is really the intent of avoiding auto.\n\nWith that said, if you have other ideas on how we could do this better, I\u0027m all ears.  This one frustrated me for a bit.",
      "parentUuid": "99d52cc0_5256f31c",
      "revId": "a932a0a46c1d7359bd2c4f9c3a6275faec19b4d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bfb01fc_92bbc0d7",
        "filename": "http/http_connection.hpp",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-01-10T19:09:16Z",
      "side": 1,
      "message": "\u003e  Because of the limitations in clang-tidy, NOLINTNEXTLINE means it literally has to be on the next line in source, not the next semantic line. \n\nThis is annoying.\n\n\u003e With that said, if you have other ideas on how we could do this better, I\u0027m all ears.\n\nNah. Could do something like \n\n\"// NOLINT\" \non both lines or \n\"// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)\" before both ? \nbut that is messy\n\nI am good as is.",
      "parentUuid": "af116826_b27845e2",
      "revId": "a932a0a46c1d7359bd2c4f9c3a6275faec19b4d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1389fe09_fa425881",
        "filename": "http/http_connection.hpp",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-11T17:16:52Z",
      "side": 1,
      "message": "clang-tidy master now contains NOLINTBEGIN and NOLINTEND, which kind of could solve this, but we can\u0027t use those for another 6 months until the next clang release.",
      "parentUuid": "0bfb01fc_92bbc0d7",
      "revId": "a932a0a46c1d7359bd2c4f9c3a6275faec19b4d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90326744_a2648532",
        "filename": "http/http_connection.hpp",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-01-11T19:35:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1389fe09_fa425881",
      "revId": "a932a0a46c1d7359bd2c4f9c3a6275faec19b4d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
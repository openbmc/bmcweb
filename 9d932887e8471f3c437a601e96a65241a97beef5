{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "074b8ab7_32c38752",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-05-12T18:32:29Z",
      "side": 1,
      "message": "Test Results and performance charts for different scenarios are captured in this doc- https://docs.google.com/document/d/1EXFMc9tLzQsfyYtF6nuAVw6yadIjUQkwnalU34Vl4uU/edit?pli\u003d1\u0026tab\u003dt.0#heading\u003dh.ax2n0js5wlay",
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5fdf221_ddad43f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-12T22:31:44Z",
      "side": 1,
      "message": "Initial round of comments",
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c24cf24_51a366cf",
        "filename": "http/http_body.hpp",
        "patchSetId": 10
      },
      "lineNbr": 345,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-15T22:58:34Z",
      "side": 1,
      "message": "This is one of the parts that should mark the failure in the response somehow.",
      "range": {
        "startLine": 344,
        "startChar": 0,
        "endLine": 345,
        "endChar": 54
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ca52e20_183d9b0f",
        "filename": "http/http_body.hpp",
        "patchSetId": 10
      },
      "lineNbr": 345,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-05-29T08:27:35Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "8c24cf24_51a366cf",
      "range": {
        "startLine": 344,
        "startChar": 0,
        "endLine": 345,
        "endChar": 54
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85ebc3e8_382de58a",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 146,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-12T22:31:44Z",
      "side": 1,
      "message": "This API needs to give some indication to the caller when multipart parsing failed.",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 146,
        "endChar": 2
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b135349_8c0fc59b",
        "filename": "http/http_request.hpp",
        "patchSetId": 10
      },
      "lineNbr": 146,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-05-29T08:27:35Z",
      "side": 1,
      "message": "The API has been updated to return std::optional\u003cstd::vector\u003cFormPart\u003e\u003e\n\nSuccess case: Returns a valid optional containing the parsed FormPart vector\nFailure case: Returns std::nullopt when multipart parsing fails",
      "parentUuid": "85ebc3e8_382de58a",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 146,
        "endChar": 2
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acd714c5_03e15432",
        "filename": "include/multipart_parser.hpp",
        "patchSetId": 10
      },
      "lineNbr": 68,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-15T22:58:34Z",
      "side": 1,
      "message": "This looks like it will fail if we\u0027ve converted content to a file.",
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9258ee4_fed00975",
        "filename": "include/multipart_parser.hpp",
        "patchSetId": 10
      },
      "lineNbr": 68,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-05-29T08:27:35Z",
      "side": 1,
      "message": "Fixed by adding type-safe content access. Instead of always calling contentString(), we now check the content variant type first",
      "parentUuid": "acd714c5_03e15432",
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e48c428f_00fdb04b",
        "filename": "include/multipart_parser.hpp",
        "patchSetId": 10
      },
      "lineNbr": 73,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-15T22:58:34Z",
      "side": 1,
      "message": "This is a header, static isn\u0027t correct, inline might be correct.",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 6
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a734962_c52f57d0",
        "filename": "include/multipart_parser.hpp",
        "patchSetId": 10
      },
      "lineNbr": 73,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-05-29T08:27:35Z",
      "side": 1,
      "message": "As part of rework, this code is removed.",
      "parentUuid": "e48c428f_00fdb04b",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 6
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4ac404b_70eff9ad",
        "filename": "include/multipart_parser.hpp",
        "patchSetId": 10
      },
      "lineNbr": 82,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-15T22:58:34Z",
      "side": 1,
      "message": "?  How were these conditions chosen?  These look like they\u0027re hardcoding redfish specifics (ie UpdateFile).",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 82,
        "endChar": 1
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbdf1d75_b5f45e4e",
        "filename": "include/multipart_parser.hpp",
        "patchSetId": 10
      },
      "lineNbr": 82,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-05-29T08:27:35Z",
      "side": 1,
      "message": "Removed Redfish-specific hardcoding. Now using only the standard HTTP filename\u003d parameter in Content-Disposition header to detect file uploads.",
      "parentUuid": "c4ac404b_70eff9ad",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 82,
        "endChar": 1
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e132bf9_e4bf12d5",
        "filename": "include/multipart_parser.hpp",
        "patchSetId": 10
      },
      "lineNbr": 137,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-15T22:58:34Z",
      "side": 1,
      "message": "Why are we doing this in the finish() call?  Shouldn\u0027t this be done incrementally as parsing is completed?  Otherwise this is no more efficient than what we had (we still have to read the whole request into ram).",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 137,
        "endChar": 53
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e7759ec_45adb319",
        "filename": "include/multipart_parser.hpp",
        "patchSetId": 10
      },
      "lineNbr": 137,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-05-29T08:27:35Z",
      "side": 1,
      "message": "Originally planned to buffer up to 1MB in RAM before writing to file (to reduce IO operations), to handle cases where image is less than 1MB, I added this logic in finish().\nBut I\u0027ve removed this approach in the rework- we are writing the subsequent chunks directly to file now",
      "parentUuid": "9e132bf9_e4bf12d5",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 137,
        "endChar": 53
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97fef7b3_e5f58084",
        "filename": "include/temporary_releasable_file_handle.hpp",
        "patchSetId": 10
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-15T22:45:25Z",
      "side": 1,
      "message": "We have several file classes already with various levels of \"goodness\".  Please reuse one of the existing and add your logic to it.  DuplicatableFileHandle or TemporaryFileHandle might be similar?",
      "range": {
        "startLine": 10,
        "startChar": 6,
        "endLine": 10,
        "endChar": 35
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b542dc6c_703bd9b0",
        "filename": "include/temporary_releasable_file_handle.hpp",
        "patchSetId": 10
      },
      "lineNbr": 10,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-05-29T08:27:35Z",
      "side": 1,
      "message": "Refractored the code to extend the existing DuplicatableFileHandle class",
      "parentUuid": "97fef7b3_e5f58084",
      "range": {
        "startLine": 10,
        "startChar": 6,
        "endLine": 10,
        "endChar": 35
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "530aa969_c1931ea3",
        "filename": "include/temporary_releasable_file_handle.hpp",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-15T22:45:25Z",
      "side": 1,
      "message": "should we make this just /tmp ?  we already have a bmcweb prefix.",
      "range": {
        "startLine": 17,
        "startChar": 49,
        "endLine": 17,
        "endChar": 68
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0aa6a067_8958180c",
        "filename": "include/temporary_releasable_file_handle.hpp",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-05-29T08:27:35Z",
      "side": 1,
      "message": "In our bmc paltforms, /tmp/ and /tmp/images are on different filesystem.\n\nOn cross file system, a copy is required which means 2x memory usage\nBut on same filesystem -\u003e rename() succeeds → No extra copy\n\nI\u0027ve captured the free memory graph for different scenarios here- https://docs.google.com/document/d/1EXFMc9tLzQsfyYtF6nuAVw6yadIjUQkwnalU34Vl4uU/edit?pli\u003d1\u0026tab\u003dt.0#heading\u003dh.ax2n0js5wlay. Please take a look",
      "parentUuid": "530aa969_c1931ea3",
      "range": {
        "startLine": 17,
        "startChar": 49,
        "endLine": 17,
        "endChar": 68
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83ebdf15_9133c382",
        "filename": "include/temporary_releasable_file_handle.hpp",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-29T22:48:48Z",
      "side": 1,
      "message": "\u003e In our bmc paltforms, /tmp/ and /tmp/images are on different filesystem.\n\nLets just do /tmp/bmcweb/\u003cfile\u003e\n\nThen on your platforms you\u0027re free to symlink that directory wherever you like.\n\n\u003e On cross file system, a copy is required which means 2x memory usage\n\nI don\u0027t understand this.  if it\u0027s cross filesystem, you\u0027re not using memory, you\u0027re using filesystem.",
      "parentUuid": "0aa6a067_8958180c",
      "range": {
        "startLine": 17,
        "startChar": 49,
        "endLine": 17,
        "endChar": 68
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2dcdf03_cfed529d",
        "filename": "include/temporary_releasable_file_handle.hpp",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-06-11T19:12:54Z",
      "side": 1,
      "message": "On different filesystems, a move() operation will not be an atomic metadata operation, it becomes copy + delete operation.\n\nSo both the files will exist simulataneously during the copy and therefore free memory drops by 2X.\n\n| Lets just do /tmp/bmcweb/\u003cfile\u003e \n-\u003e how about using a meson build option, I can set the default to /tmp/bmcweb/\u003cfile\u003e ?",
      "parentUuid": "83ebdf15_9133c382",
      "range": {
        "startLine": 17,
        "startChar": 49,
        "endLine": 17,
        "endChar": 68
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1e8a832_c570dbfe",
        "filename": "include/temporary_releasable_file_handle.hpp",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-01T16:10:38Z",
      "side": 1,
      "message": "Lets focus on what openbmc does, which doesn\u0027t currently have the problem you\u0027ve described.  You are free to do whatever you like in your downstream, or propose a new filesystem format upstream.",
      "parentUuid": "c2dcdf03_cfed529d",
      "range": {
        "startLine": 17,
        "startChar": 49,
        "endLine": 17,
        "endChar": 68
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b5db06b_30ef8a89",
        "filename": "include/temporary_releasable_file_handle.hpp",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-07-01T20:36:16Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "e1e8a832_c570dbfe",
      "range": {
        "startLine": 17,
        "startChar": 49,
        "endLine": 17,
        "endChar": 68
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e8a74c5_e1488274",
        "filename": "include/temporary_releasable_file_handle.hpp",
        "patchSetId": 10
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-15T22:45:25Z",
      "side": 1,
      "message": "This error needs returned to the caller somehow, right?  Might need to move this all into a \"create\" method?",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 79
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc08c189_b0e85b77",
        "filename": "include/temporary_releasable_file_handle.hpp",
        "patchSetId": 10
      },
      "lineNbr": 22,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-06-17T20:09:50Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "7e8a74c5_e1488274",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 79
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a349b0b_ab23d9a3",
        "filename": "meson.build",
        "patchSetId": 10
      },
      "lineNbr": 445,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-15T22:49:17Z",
      "side": 1,
      "message": "I appreciate your attempt to keep things passing on every intermediate patch.  So long as the unit tests pass on the last patch, and you intend for them to all merge together, it\u0027s fine if only the last patch passes CI.",
      "range": {
        "startLine": 445,
        "startChar": 4,
        "endLine": 445,
        "endChar": 6
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd324252_450ddbe4",
        "filename": "meson.build",
        "patchSetId": 10
      },
      "lineNbr": 445,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-05-29T08:27:35Z",
      "side": 1,
      "message": "Uncommented this line. CI is passing for the final patch.",
      "parentUuid": "5a349b0b_ab23d9a3",
      "range": {
        "startLine": 445,
        "startChar": 4,
        "endLine": 445,
        "endChar": 6
      },
      "revId": "9d932887e8471f3c437a601e96a65241a97beef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
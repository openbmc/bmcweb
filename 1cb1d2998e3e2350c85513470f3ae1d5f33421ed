{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "88c73c19_2d9f6986",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-03-18T23:59:00Z",
      "side": 1,
      "message": "This is the bug that needs fixed.  our sort code shouldn\u0027t assume ID exists.  Do you know the line where it actually crashes (throws an exception) on this?\n\nI\u0027m looking through odataObjectCmp, and it looks correct to me.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 57
      },
      "revId": "1cb1d2998e3e2350c85513470f3ae1d5f33421ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4644fa06_61036ea8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1002230
      },
      "writtenOn": "2025-03-19T14:51:22Z",
      "side": 1,
      "message": "Unfortunately no. The only thing I have is the `journalctl -xe -u bmcweb` output I put to the commit message.",
      "parentUuid": "88c73c19_2d9f6986",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 57
      },
      "revId": "1cb1d2998e3e2350c85513470f3ae1d5f33421ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e558318b_7e4eca00",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1002230
      },
      "writtenOn": "2025-03-20T19:13:20Z",
      "side": 1,
      "message": "I did not have time to repro this, i.e use debug symbols/collect and analyze a core dump. However, one notice was, it did not fail immediately, i.e. if everything works the client receives result almost instantly, but if it\u0027s going to fail, it takes a few seconds after the server received request. So, it seems it reads memory, until it hits an address out of process\u0027 address space. That\u0027s my speculation.",
      "parentUuid": "4644fa06_61036ea8",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 57
      },
      "revId": "1cb1d2998e3e2350c85513470f3ae1d5f33421ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3c6fda2_caaee900",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1002230
      },
      "writtenOn": "2025-03-20T19:21:48Z",
      "side": 1,
      "message": "Sorry, why are you looking through odataObjectCmp? The [code](https://github.com/openbmc/bmcweb/blob/master/redfish-core/lib/log_services.hpp#L1514-L1517) does not use it, it defines lambda that explicitly compares Id fields. I briefly checked odataObjectCmp, we probably should change the comparison in the lambda, so, something like this:\n```\nstd::ranges::sort(entriesArray, [](const nlohmann::json\u0026 left,\n                                   const nlohmann::json\u0026 right) {\n        return odataObjectCmp(\"Id\", left, right);\n    });\n```",
      "parentUuid": "e558318b_7e4eca00",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 57
      },
      "revId": "1cb1d2998e3e2350c85513470f3ae1d5f33421ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c51db64e_cc4c00f5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-03-25T13:50:33Z",
      "side": 1,
      "message": "Tested, works for me üëç",
      "revId": "1cb1d2998e3e2350c85513470f3ae1d5f33421ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be6f8cd8_a0f17b65",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 1514,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-03-18T23:53:26Z",
      "side": 1,
      "message": "Need to return internal error to the user here I would expect?",
      "range": {
        "startLine": 1514,
        "startChar": 0,
        "endLine": 1514,
        "endChar": 20
      },
      "revId": "1cb1d2998e3e2350c85513470f3ae1d5f33421ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60c797f8_f641dd71",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 1514,
      "author": {
        "id": 1002230
      },
      "writtenOn": "2025-03-19T14:51:22Z",
      "side": 1,
      "message": "The error is being exposed to the client.\nWhen fillEventLogLogEntryFromPropertyMap returns false, it also calls \"messages::internalError(asyncResp-\u003eres);\". And as a result, the return will contain the error. It will not fail the whole request though. Take a look at [3] in the commit message, you will see that the errors are there, along with processed entries.",
      "parentUuid": "be6f8cd8_a0f17b65",
      "range": {
        "startLine": 1514,
        "startChar": 0,
        "endLine": 1514,
        "endChar": 20
      },
      "revId": "1cb1d2998e3e2350c85513470f3ae1d5f33421ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c71a6e0e_f918ff61",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 1514,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-03-20T14:50:46Z",
      "side": 1,
      "message": "so then should this be \n\nif (!success){\n   return;\n}\n\nTo avoid duplicating internal error messages?",
      "parentUuid": "60c797f8_f641dd71",
      "range": {
        "startLine": 1514,
        "startChar": 0,
        "endLine": 1514,
        "endChar": 20
      },
      "revId": "1cb1d2998e3e2350c85513470f3ae1d5f33421ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17df048b_ffb1ba9c",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 3
      },
      "lineNbr": 1514,
      "author": {
        "id": 1002230
      },
      "writtenOn": "2025-03-20T19:09:57Z",
      "side": 1,
      "message": "The error messages gets added by the `messages::internalError(asyncResp-\u003eres);` call, so by this time, it\u0027s already there. We can start doing interesting stuff - keeping the state (whether there was at least one error) here, pass it to the fillEventLogLogEntryFromPropertyMap and it will invoke messages::internalError only in case if no errors have registered yet. I don\u0027t think we should do that. Now client sees how many invalid entries there are, and can work on fixing them.",
      "parentUuid": "c71a6e0e_f918ff61",
      "range": {
        "startLine": 1514,
        "startChar": 0,
        "endLine": 1514,
        "endChar": 20
      },
      "revId": "1cb1d2998e3e2350c85513470f3ae1d5f33421ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
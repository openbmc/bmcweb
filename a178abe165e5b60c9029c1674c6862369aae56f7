{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "748666d0_49f60683",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-15T15:49:07Z",
      "side": 1,
      "message": "In the above design, it calls out a obmc-bmc-service-quiesce.target that is used.  Considering that the existing code is already checking the systemd targets, why don\u0027t we just add that to the list and check it as well?  That seems more in line with what a normal linux distro would do.",
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21f0f8f2_5d024394",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 17,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-08-18T14:36:14Z",
      "side": 1,
      "message": "See above points on phosphor-state-manager providing abstractions. Why should bmcweb even know the system uses systemd? I feel like we just have fundamental differences here (and neither is going to convince the other) so we probably just have to abandon this (and continue to carry downstream).",
      "parentUuid": "748666d0_49f60683",
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dd6b535_165ac5bd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 20,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-15T15:46:55Z",
      "side": 1,
      "message": "Why does xyz.openbmc_project.State.BMC own this state?  Shouldn\u0027t the firmware update daemon (that bmcweb already interacts with) maintain this state?",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 20,
        "endChar": 56
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8dd0391_eaec4196",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 20,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-08-18T14:36:14Z",
      "side": 1,
      "message": "Feels like we\u0027re talking past ourselves a bit which makes me think there\u0027s just a fundamental divide in our thinking here. phophor-state-manager was created to abstract the BMC, Chassis, and Host states (as well as with providing some operations like powering on/off and rebooting). x86-power-control does the same for chassis and host. We could have bmcweb do all of the logic contained in those apps (look at systemd targets, pgood, host BIOS post codes, ...) but we don\u0027t because that\u0027s the job of those repositories. xyz.openbmc_project.State.BMC doesn\u0027t own the state, it provides an abstraction of it, providing a holistic view of the BMC state.",
      "parentUuid": "8dd6b535_165ac5bd",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 20,
        "endChar": 56
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82b93c53_0d4c0a5f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-15T15:46:55Z",
      "side": 1,
      "message": "What logic?  Checking to see if a firmware update is in progress through the dbus APIs?  That doesn\u0027t really seem like logic.",
      "range": {
        "startLine": 28,
        "startChar": 19,
        "endLine": 28,
        "endChar": 24
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "824595dc_6e98f107",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 28,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-08-18T14:36:14Z",
      "side": 1,
      "message": "Yes, checking quiesce target, checking code update state. This is logic, and with this abstraction, it can change in the future without bmcweb needding to be involved in the back end details.",
      "parentUuid": "82b93c53_0d4c0a5f",
      "range": {
        "startLine": 28,
        "startChar": 19,
        "endLine": 28,
        "endChar": 24
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff0fef7d_309b5ba7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 32,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-15T15:46:55Z",
      "side": 1,
      "message": "I\u0027m not quite understanding this statement.  Today, bmcweb lets systemd abstract away these complexities, which seems reasonable, given that in the design, that\u0027s systemds job.  What I don\u0027t see in the above is why we\u0027re adding yet another middle daemon to the design, and why this state can\u0027t exist from systemd, considering we already have code to do it, and systemd owns the concept of \"started\" for the system.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 50
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "729e9fa4_df02f818",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 32,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-08-18T14:36:14Z",
      "side": 1,
      "message": "So it seems like you\u0027re saying, if the BMC state were to get more complicated (like chassis ans host are), you\u0027d be ok with the abstraction, but since it\u0027s just systemd checks, you\u0027d prefer to keep all that logic in bmcweb? From my perspective, we\u0027d just be copy/pasting code form phosphor-state-manger into bmcweb. Why do that when we already have it all done and abstracted in xyz.openbmc_project.State.BMC?",
      "parentUuid": "ff0fef7d_309b5ba7",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 50
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c2811df_3ca4ca6d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 33,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-15T15:46:55Z",
      "side": 1,
      "message": "While this goes through quite a bit of history, and has a lot of good details, it still doesn\u0027t list WHY this change is being made.  To ask in other terms, if we didn\u0027t merge this patch, what does the user lose out on?",
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c48d3273_f6f92d36",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 33,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-08-18T14:36:14Z",
      "side": 1,
      "message": "More details added to commit message.",
      "parentUuid": "7c2811df_3ca4ca6d",
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "293204a1_6936fbba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-08-15T15:10:14Z",
      "side": 1,
      "message": "This latest patch was just a rebase due to merge conflict. CI fail was something infrastructure related so I retriggered.",
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba876e0c_97c8c0f5",
        "filename": "redfish-core/lib/managers.hpp",
        "patchSetId": 26
      },
      "lineNbr": 1929,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-15T15:46:55Z",
      "side": 1,
      "message": "So if bmcweb starts before xyz.openbmc_project.State.BMC, the user sees\n\n\"State\": \"Enabled\"\n\nthen immediately sees state \"Quiesced\".",
      "range": {
        "startLine": 1928,
        "startChar": 0,
        "endLine": 1929,
        "endChar": 60
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "687f3812_af0bf599",
        "filename": "redfish-core/lib/managers.hpp",
        "patchSetId": 26
      },
      "lineNbr": 1929,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-08-18T14:36:14Z",
      "side": 1,
      "message": "Hmm , don\u0027t get that. Why does it immediately see \"Quiesced\" in this case?",
      "parentUuid": "ba876e0c_97c8c0f5",
      "range": {
        "startLine": 1928,
        "startChar": 0,
        "endLine": 1929,
        "endChar": 60
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1911dc2b_6acf52a6",
        "filename": "redfish-core/lib/managers.hpp",
        "patchSetId": 26
      },
      "lineNbr": 1929,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-08-29T16:47:00Z",
      "side": 1,
      "message": "So if bmcweb is up before  xyz.openbmc_project.State.BMC, the user would see Enabled.. But when xyz.openbmc_project.State.BMC comes up, the user would then see \"Starting\" / \"Quiesced\" / \"Enabled\" based now on the information coming from xyz.openbmc_project.State.BMC.. so yes, it could go from \"Enabled\" to \"Quiesced\" but that seems reasonable to me based on the old behavior and what we want here.",
      "parentUuid": "687f3812_af0bf599",
      "range": {
        "startLine": 1928,
        "startChar": 0,
        "endLine": 1929,
        "endChar": 60
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32fcc6e2_c4b7c537",
        "filename": "redfish-core/lib/managers.hpp",
        "patchSetId": 26
      },
      "lineNbr": 1929,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-29T22:42:51Z",
      "side": 1,
      "message": "\u003e but that seems reasonable to me based on the old behavior and what we want here.\n\nThat seems like it would completely defeat the purpose of this if it\u0027s inconsistent?",
      "parentUuid": "1911dc2b_6acf52a6",
      "range": {
        "startLine": 1928,
        "startChar": 0,
        "endLine": 1929,
        "endChar": 60
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3359e55c_7445d849",
        "filename": "redfish-core/lib/managers.hpp",
        "patchSetId": 26
      },
      "lineNbr": 1929,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-09-01T19:21:32Z",
      "side": 1,
      "message": "What is the alternative? don\u0027t have a default here? i.e. if don\u0027t get back something from xyz.openbmc_project.State.BMC, just leave these properties off? Leave off State and Health, have PowerState still?\n\nI am fine with that but this did have a default before.. \n\n\n\u003e That seems like it would completely defeat the purpose of this if it\u0027s inconsistent?\n\nFor hoststate, you could move from some Enabled/On/Poweringon state to Quiesced (e.g. hoststate is on, then hoststate goes to that Quiesced target.). Why is inconsistent such a concern here for bmc state?",
      "parentUuid": "32fcc6e2_c4b7c537",
      "range": {
        "startLine": 1928,
        "startChar": 0,
        "endLine": 1929,
        "endChar": 60
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d9c91ff_b3495ffd",
        "filename": "redfish-core/lib/managers.hpp",
        "patchSetId": 26
      },
      "lineNbr": 1929,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-09-26T20:33:38Z",
      "side": 1,
      "message": "\u003e What is the alternative? don\u0027t have a default here? i.e. if don\u0027t get back something from xyz.openbmc_project.State.BMC, just leave these properties off? Leave off State and Health, have PowerState still?\n\nI assume this is the direction we want?",
      "parentUuid": "3359e55c_7445d849",
      "range": {
        "startLine": 1928,
        "startChar": 0,
        "endLine": 1929,
        "endChar": 60
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6295ac4a_3c31a88a",
        "filename": "redfish-core/lib/managers.hpp",
        "patchSetId": 26
      },
      "lineNbr": 1929,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-10-05T22:13:28Z",
      "side": 1,
      "message": "My personal alternative is to rely on things that we already know are up and functional (ie systemd) to determine the \"upness\" of the system, and totally avoid this race condition.",
      "parentUuid": "7d9c91ff_b3495ffd",
      "range": {
        "startLine": 1928,
        "startChar": 0,
        "endLine": 1929,
        "endChar": 60
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2d6a4a2_5bbc6293",
        "filename": "redfish-core/lib/managers.hpp",
        "patchSetId": 26
      },
      "lineNbr": 1929,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-10-06T17:45:35Z",
      "side": 1,
      "message": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/57724 is that alternative",
      "parentUuid": "6295ac4a_3c31a88a",
      "range": {
        "startLine": 1928,
        "startChar": 0,
        "endLine": 1929,
        "endChar": 60
      },
      "revId": "a178abe165e5b60c9029c1674c6862369aae56f7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "66e3c60a_2a309f31",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-01T04:50:14Z",
      "side": 1,
      "message": "Please wrap your commits properly.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 40
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b25625e_4f45cc07",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-09-16T08:43:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66e3c60a_2a309f31",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 40
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13344d12_1e3b8ac1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-08-02T14:48:42Z",
      "side": 1,
      "message": "How many of these audit::audit_acct_event would we add to bmcweb?\n \nYou mentioned \"Actions with accounts and privileges\", do those traces go in user managmenet or bmcweb?\n\nWould we ever just log every request ?",
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c41ce092_fa412b25",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-09-10T14:52:50Z",
      "side": 1,
      "message": "\u003e How many of these audit::audit_acct_event would we add to bmcweb?\n\nI don\u0027t have anything else in mind as of now, but audit frame work could be used log various type of events [not just login type].\n\nVarious user space audit record types that are supported as of today are at :  https://github.com/linux-audit/audit-userspace/blob/94efd7da510bf58aed15f82652b3f481e0d5cc61/lib/libaudit.h#L48\n\nWe could just start with login events for now - and could add various other events if required [in that sense it is pretty scalable].",
      "parentUuid": "13344d12_1e3b8ac1",
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d37b45f3_7436aa4a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-01T04:50:14Z",
      "side": 1,
      "message": "How do other distros manage it?  Surely things like nginx don\u0027t link in auditd as a required module as you\u0027ve done here (or does it, I don\u0027t really know).  Is there recommendations from libaudit on how it should be integrated?",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 67
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab1dbedc_9c6b0b56",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-08-01T18:25:44Z",
      "side": 1,
      "message": "As i said above, my intent was to only depend on the libaudit \u0026 kernel netlink socket support for pushing the events.\n\nAuditd is sort of additional toppings that would help regulate these events to its own file , with a great set of configuration options. We don\u0027t necessarily need this, as per the audit documentation without a listener on the netlink socket, the logs should by default be routed to syslog daemon (journal).",
      "parentUuid": "d37b45f3_7436aa4a",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 67
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93d13d4d_efdcef03",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-09-13T21:16:41Z",
      "side": 1,
      "message": "Spelling on auditd.",
      "parentUuid": "ab1dbedc_9c6b0b56",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 67
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f973f26_003a58e6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-09-16T08:43:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93d13d4d_efdcef03",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 67
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15929ce0_e019328f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-01T04:50:14Z",
      "side": 1,
      "message": "Any webservers?  All of those are login daemons, which arguably we should be using on openbmc, but I never got there and we currently have evolved to not having shared session infrastructure.",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 56
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13fde02c_badaf44d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-08-01T18:25:44Z",
      "side": 1,
      "message": "\u003e Any webservers?  \nI have not found any opensource webservers that use this (at least in my research), I found reference to libaudit in projects like sshd, sssd, clevis(pluggable framework for automated decryption), usbguard(software framework for implementing USB device authorization policies).\n\n\n\u003e All of those are login daemons, which arguably we should be using on openbmc, but I never got there and we currently have evolved to not having shared session infrastructure.\n\nAck",
      "parentUuid": "15929ce0_e019328f",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 56
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88a7ef5e_53773bc5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-12T17:36:07Z",
      "side": 1,
      "message": "a year later, and still not reply to this?",
      "parentUuid": "13fde02c_badaf44d",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 56
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9debe39a_61f865ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-07-31T06:07:09Z",
      "side": 1,
      "message": "CI would fail - as we don\u0027t have libaudit-dev package installed in the CI docker image.",
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdb4ec6e_2fe4d271",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-01T04:50:14Z",
      "side": 1,
      "message": "Cool to see progress, and happy to help you work through getting it merged.\n\nSome initial thoughts that come to mind:\n1. Presumably this library is doing blocking filesystem calls, which could lock up all of bmcweb (given that it\u0027s a single-threaded reactor).  Do we need to evict this audit logging to another process where it can be done at a lower priority soas not to impact the performance?\n2. This patch is proposing auditd be a required dependency.  Surely there are users that would opt out of it?  If so, how do we manage that complexity?  Runtime selection?  Compile time?\n3. Overall, my eventual goal was to completely remove session collections out of bmcweb, and make use of one of the existing login daemons (probably systemd logind) through pam.  This would get us more standard login/logout procedures, and we could easily hook in whatever plugins we wanted, including this one, because users would be logging in \"normally\".  This is similar to what the cockpit project (another webserver for remote managing linux systems) does.  If that were to happen, would that make using this plugin easier?",
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e1cd6a6_53749bef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-08-01T18:25:44Z",
      "side": 1,
      "message": "\u003e Cool to see progress, and happy to help you work through getting it merged.\n\u003e \n\u003e Some initial thoughts that come to mind:\n\u003e 1. Presumably this library is doing blocking filesystem calls, which could lock up all of bmcweb (given that it\u0027s a single-threaded reactor).  Do we need to evict this audit logging to another process where it can be done at a lower priority soas not to impact the performance?\n\nPer my understanding about audit framework, this library would only send messages over netlink_audit socket (this is just a sender) to the kernel part of the linux audit subsystem, these don\u0027t actually touch the filesystem. There is another listening daemon \"audid\" that would be responsible for writing records onto the disk, so in that sense it is already separated ? \n\nAnd also auditd has a configuration option where we could tell it to not flush the data into the file immediately - rather we could also tell at what frequency we should flush things to the log.\n\n\u003e 2. This patch is proposing auditd be a required dependency.  Surely there are users that would opt out of it?  If so, how do we manage that complexity?  Runtime selection?  Compile time?\nMy intent in this patch is to not have auditd daemon as a required dependency , rather have kernel support for audit + libaudit shared library as runtime + compile time dependency, and per audit RFC  \"All messages are logged via the netlink socket if a user-space daemon is listening(auditd). If not, the messages are logged via printk to the syslog daemon (by default). So I am guessing if we don\u0027t have auditd, but just have libaudit \u0026 kernel support for audit enabled, we can at-least see the audit events in the journal(although I have not tested this myself).\n\n\n\u003e 3. Overall, my eventual goal was to completely remove session collections out of bmcweb, and make use of one of the existing login daemons (probably systemd logind) through pam.  This would get us more standard login/logout procedures, and we could easily hook in whatever plugins we wanted, including this one, because users would be logging in \"normally\".  This is similar to what the cockpit project (another webserver for remote managing linux systems) does.  If that were to happen, would that make using this plugin easier?\n\nI see that systemd,dbus \u0026 journal already have audit support (https://github.com/systemd/systemd/blob/e0a12b96344b1d7ee499df1d0447b14ced62c1b4/meson.build#L1218), i think that we would probably not need this change if we use systemd logind , probably we need to tweak some options of systemd , but that should work out of the box and should give us the audit events(if it is compiled with audit support \u0026 have kernel support for audit events)",
      "parentUuid": "fdb4ec6e_2fe4d271",
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7767c7e7_929eaaf2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-09-12T17:24:17Z",
      "side": 1,
      "message": "\u003e this library would only send messages over netlink_audit socket\n\u003e so in that sense it is already separated ? \n\nSockets can block the same as the filesystem can.  In this case the daemon on the other end is writing to the filesystem, so it\u0027s quite possible to lock up and backpressure the socket.\n\n\n\u003e And also auditd has a configuration option where we could tell it to not flush the data into the file immediately\n\nI\u0027m not sure this solves it, and I don\u0027t really understand what we\u0027re avoiding here.  We have mechanisms for pushing to a socket async that we use every day.  We should use them.\n\n\n\u003e  think that we would probably not need this change if we use systemd logind , \n\nFWIW, I think that\u0027s the intent of this library.  I don\u0027t see openSSH directly pulling this in, but the fact that openssh relies on pam/logind to manage sessions means that it doesn\u0027t have to, and logind/pam can have the auditd hooks.  That seems like the direction to pursue IMO.",
      "parentUuid": "9e1cd6a6_53749bef",
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe6179f1_15080e5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-09-16T08:43:38Z",
      "side": 1,
      "message": "\u003e \u003e this library would only send messages over netlink_audit socket\n\u003e \u003e so in that sense it is already separated ? \n\u003e \n\u003e Sockets can block the same as the filesystem can.  In this case the daemon on the other end is writing to the filesystem, so it\u0027s quite possible to lock up and backpressure the socket.\n\nwell, so my understanding is that when bmcweb sends the message to kernel audit subsystem - it gets netlink-ack response back immediately, the ack is used to let user know if there was a problem such as lack of permissions e.t.c and bmcweb will be blocked till then. Is this what you are concerned about ? \n\nThe design principle for audit events is that - user should not be able to the operation that they are doing if we fail to log an error.we cannot let the operation continue \u0026 also in parallel keep logging audit events.\n\nBut bmcweb will not be blocked until some [another user space daemon - like audid] pulls out the message from kernel \u0026 writes into the file system - I think auditd polls on the fd \u0026 based on events..it parses things out to put in readable form on the file system. So there is no back pressure as such to bmcweb.\n\nI am not really much concerned about waiting for the ACK form the kernel audit system. kernel audit subsystem is there since kernel 2.6 and pretty mature at this stage to hit nasty bugs where bmcweb can be blocked for very long time[milli seconds]. But if think of it in other way let me know.\n\n\u003e \n\u003e \n\u003e \u003e And also auditd has a configuration option where we could tell it to not flush the data into the file immediately\n\u003e \n\u003e I\u0027m not sure this solves it, and I don\u0027t really understand what we\u0027re avoiding here.  We have mechanisms for pushing to a socket async that we use every day.  We should use them.\n\u003e \n\u003e \n\u003e \u003e  think that we would probably not need this change if we use systemd logind , \n\u003e \n\u003e FWIW, I think that\u0027s the intent of this library.  I don\u0027t see openSSH directly pulling this in, but the fact that openssh relies on pam/logind to manage sessions means that it doesn\u0027t have to, and logind/pam can have the auditd hooks.  That seems like the direction to pursue IMO.\n\nlogin deamon - sure, but pam I am not 100 percent sure that the pluggable modules can have all the necessary information needed for audit events.",
      "parentUuid": "7767c7e7_929eaaf2",
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1733476e_73e9c83d",
        "filename": "include/audit_events.hpp",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-08-02T17:02:02Z",
      "side": 1,
      "message": "Please respect the OpenBMC naming convention",
      "range": {
        "startLine": 9,
        "startChar": 34,
        "endLine": 9,
        "endChar": 51
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afec344b_8dce7c24",
        "filename": "include/audit_events.hpp",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-09-10T14:52:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1733476e_73e9c83d",
      "range": {
        "startLine": 9,
        "startChar": 34,
        "endLine": 9,
        "endChar": 51
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8cd782e_b79fa553",
        "filename": "include/audit_events.hpp",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-08-02T17:02:02Z",
      "side": 1,
      "message": "does this mean we create a fd every time this function gets called? What\u0027s the trade-off between this and keeping a single fd?",
      "range": {
        "startLine": 16,
        "startChar": 14,
        "endLine": 16,
        "endChar": 24
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9654fa07_c5c04da9",
        "filename": "include/audit_events.hpp",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-09-10T14:52:50Z",
      "side": 1,
      "message": "well, I have not thought about this when I was working for the proof of concept.\n\naudit_open creates a NETLINK_AUDIT socket for communication with the kernel part of the Linux Audit Subsystem. If it is just an event or two this might not be any problem , but if we are okay \u0026 agree to use this framework for the audit events \u0026 probably for much more events than just login events, then definitely opening and closing is an overhead that could be avoided if we could - open the fd and pass it across from the main app ...or may be some sort of single ton that always returns the same fd instance ?",
      "parentUuid": "a8cd782e_b79fa553",
      "range": {
        "startLine": 16,
        "startChar": 14,
        "endLine": 16,
        "endChar": 24
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95817edd_1e0229e8",
        "filename": "include/audit_events.hpp",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2023-08-07T19:29:43Z",
      "side": 1,
      "message": "I\u0027ve added retaining the file descriptor for auditing to decrease the path-length on an audit call.",
      "parentUuid": "9654fa07_c5c04da9",
      "range": {
        "startLine": 16,
        "startChar": 14,
        "endLine": 16,
        "endChar": 24
      },
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f8f98fc_e279da65",
        "filename": "meson_options.txt",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-08-02T14:48:42Z",
      "side": 1,
      "message": "Can you add a bit more here.",
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3644fef9_8933a904",
        "filename": "meson_options.txt",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-09-10T14:52:50Z",
      "side": 1,
      "message": "can you give me pointers as to what additional information would you like to see here ? I believe I have added good amount of information in commit message but if you like anything else to be added ..I can definitely add that here as well.",
      "parentUuid": "7f8f98fc_e279da65",
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b70a82bb_b01a98e8",
        "filename": "meson_options.txt",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-09-13T21:16:41Z",
      "side": 1,
      "message": "Just a little more from the commit msg here. E.g.\n\n\u0027\u0027\u0027Enable audit events support for bmcweb. This uses libaudit. security-relevant events are wrote as entries in /var/log/audit/audit.log. Tools such as aureport  can be used to produce reports. \u0027\u0027\u0027\n\nLooking for more than 6 words here.",
      "parentUuid": "3644fef9_8933a904",
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c688a8d_d7c89859",
        "filename": "meson_options.txt",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-09-16T08:43:38Z",
      "side": 1,
      "message": "ah , makes sense. thank you for the words :), added.",
      "parentUuid": "b70a82bb_b01a98e8",
      "revId": "c569d8b23d46eee454b5cdc67d86b228a9e60b76",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
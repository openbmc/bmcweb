{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "84acc22b_d55ede50",
        "filename": "include/http_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-02T22:18:37Z",
      "side": 1,
      "message": "This is an example of COMMON_ERROR 12.  I suspect we should be using something like https://www.boost.org/doc/libs/1_78_0/libs/beast/doc/html/beast/ref/boost__beast__http__ext_list.html\n\nhere?  Which looks like it\u0027s purpose built for parsing accept headers.",
      "range": {
        "startLine": 40,
        "startChar": 47,
        "endLine": 40,
        "endChar": 51
      },
      "revId": "b50860e2626c6920453b81db2336d00783114e34",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "698f338d_ada74588",
        "filename": "include/http_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-02T23:01:50Z",
      "side": 1,
      "message": "nvm, I played with this, and the ext_list headers look like they split on /, which messes the whole thing up.  I wonder if that\u0027s a boost bug?",
      "parentUuid": "84acc22b_d55ede50",
      "range": {
        "startLine": 40,
        "startChar": 47,
        "endLine": 40,
        "endChar": 51
      },
      "revId": "b50860e2626c6920453b81db2336d00783114e34",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c18077d_98753f19",
        "filename": "include/http_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-02-03T19:18:47Z",
      "side": 1,
      "message": "Maybe they just don\u0027t have support for q-factor weighting (;q\u003d) ?\n\nWhich is odd because i see this used on both firefox and chrome (Accept: text/html,application/xhtml+xml,application/xml;q\u003d0.9,image/avif,image/webp,image/apng,*/*;q\u003d0.8,application/signed-exchange;v\u003db3;q\u003d0.9)",
      "parentUuid": "698f338d_ada74588",
      "range": {
        "startLine": 40,
        "startChar": 47,
        "endLine": 40,
        "endChar": 51
      },
      "revId": "b50860e2626c6920453b81db2336d00783114e34",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1706651d_90337a82",
        "filename": "include/http_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-02-03T19:19:45Z",
      "side": 1,
      "message": "\u003e This is an example of COMMON_ERROR 12.\n\nDone. Followed code elsewhere like: \nhttps://github.com/openbmc/bmcweb/blob/41d61c8281ed9af50630c78f0a646e726139fb25/include/authorization.hpp#L57",
      "parentUuid": "8c18077d_98753f19",
      "range": {
        "startLine": 40,
        "startChar": 47,
        "endLine": 40,
        "endChar": 51
      },
      "revId": "b50860e2626c6920453b81db2336d00783114e34",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f2ceb87_8e1637ef",
        "filename": "include/http_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-03T20:52:19Z",
      "side": 1,
      "message": "That code as written isn\u0027t an example of common error 12, because Basic auth defines \":\" as a delimiter, and the next call to that is a substr call.  Ideally that code should also be checking for duplicated \":\" to avoid injection attacks, but given that the next call is to pamAuthenticateUser, there\u0027s no way to get that code to accept things that it shouldn\u0027t.\n\nThis code, in theory, if I was able to inject \";q\u003d\" into an accept header, I could make this algorithm fail.\n\nNow, how much that matters in practice, it implies that the client didn\u0027t scrub their inputs properly, which one could argue is a client problem.....\n\nAs an example of something this code would now accept as a valid accept header that it didn\u0027t before\n\napplication/json;q\u003dFOOBAR\n\nI don\u0027t think that should be permitted, and ideally should be returning a 400 error.",
      "parentUuid": "1706651d_90337a82",
      "range": {
        "startLine": 40,
        "startChar": 47,
        "endLine": 40,
        "endChar": 51
      },
      "revId": "b50860e2626c6920453b81db2336d00783114e34",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "492c9768_38c15342",
        "filename": "include/http_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-08-10T17:48:20Z",
      "side": 1,
      "message": "I could write some more complex code to reject */*;q\u003dFOOBAR, but I am struggling to see the value. We aren\u0027t doing anything with the q-factor weighting (;q\u003d).\n\nTrying to enable this GUI code (download the additional data when there is one):\nhttps://github.com/openbmc/webui-vue/blob/9b79a6e7e3df3d3cbaf9a7750bbe343628022026/src/views/Logs/EventLogs/EventLogs.vue#L155\nhttps://github.com/openbmc/webui-vue/blob/9b79a6e7e3df3d3cbaf9a7750bbe343628022026/src/locales/en-US.json#L251\nThe browser says it accepts all content types, we should honor that, which I think we all agree on. I am just struggling with writing code like \nhttps://github.com/openbmc/bmcweb/blob/d9f6c621036162e9071ce3c3a333b4544c6db870/redfish-core/lib/log_services.hpp#L284\nto do a test for if the q-factor weighting is really between 0-1",
      "parentUuid": "2f2ceb87_8e1637ef",
      "range": {
        "startLine": 40,
        "startChar": 47,
        "endLine": 40,
        "endChar": 51
      },
      "revId": "b50860e2626c6920453b81db2336d00783114e34",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f48aeab8_b17a427d",
        "filename": "include/http_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-11T04:42:04Z",
      "side": 1,
      "message": "\u003e I could write some more complex code to reject */*;q\u003dFOOBAR, but I am struggling to see the value. We aren\u0027t doing anything with the q-factor weighting (;q\u003d).\n\n\nACK.  I can get behind this \"it\u0027s arguably wrong but not wrong in a way that matters\" logic.  I didn\u0027t mean for this to be a major blocking thing.\n\n\u003e \n\u003e Trying to enable this GUI code (download the additional data when there is one):\n\u003e https://github.com/openbmc/webui-vue/blob/9b79a6e7e3df3d3cbaf9a7750bbe343628022026/src/views/Logs/EventLogs/EventLogs.vue#L155\n\u003e https://github.com/openbmc/webui-vue/blob/9b79a6e7e3df3d3cbaf9a7750bbe343628022026/src/locales/en-US.json#L251\n\u003e The browser says it accepts all content types, we should honor that, which I think we all agree on. I am just struggling with writing code like \n\u003e https://github.com/openbmc/bmcweb/blob/d9f6c621036162e9071ce3c3a333b4544c6db870/redfish-core/lib/log_services.hpp#L284\n\u003e to do a test for if the q-factor weighting is really between 0-1\n\nq-factor was added later, and servers are allowed to ignore it if they choose, right?",
      "parentUuid": "492c9768_38c15342",
      "range": {
        "startLine": 40,
        "startChar": 47,
        "endLine": 40,
        "endChar": 51
      },
      "revId": "b50860e2626c6920453b81db2336d00783114e34",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2135d9a_1c8f5b70",
        "filename": "include/http_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-08-15T17:03:35Z",
      "side": 1,
      "message": "\u003e q-factor was added later, and servers are allowed to ignore it if they choose, right?\n\nYes. \"Quality factors allow the user or user agent to indicate the relative degree of preference for that media-range, using the ‘q’ value scale from 0 to 1.\".. So it is just the preference from the client.",
      "parentUuid": "f48aeab8_b17a427d",
      "range": {
        "startLine": 40,
        "startChar": 47,
        "endLine": 40,
        "endChar": 51
      },
      "revId": "b50860e2626c6920453b81db2336d00783114e34",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47346bd9_1d14f6e1",
        "filename": "include/http_utility.hpp",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-22T20:26:04Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c2135d9a_1c8f5b70",
      "range": {
        "startLine": 40,
        "startChar": 47,
        "endLine": 40,
        "endChar": 51
      },
      "revId": "b50860e2626c6920453b81db2336d00783114e34",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
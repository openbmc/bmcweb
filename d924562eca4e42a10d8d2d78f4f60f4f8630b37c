{
  "comments": [
    {
      "key": {
        "uuid": "2ad60a92_ed38f2d3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-20T18:24:31Z",
      "side": 1,
      "message": "More details needed here:\n\n1. This is a breaking change to the API.  How do we plan on rolling it out?\n2. What supported resource/API do we expect clients to move to instead?\n3. How will we warn/document that we\u0027re breaking the API in this way?\n4. Why are we changing this at all?  \"the protocol says so\" is a mediocre reason IMO.  There\u0027s plenty of places we \"break\" the protocol in this way, do you plan on fixing all of them?\n5. What are the dates of the bmcweb instances that were broken?  Was this checked in recently?  Or long enough that we\u0027re going to break ancient clients.\n6. (you might have already done this, but just to document it) Does the webui use this functionality, and now needs fixed?\n\n\nYes, supporting PATCH on this is counter to the protocol, but it doesn\u0027t really effect our compatibility with well behaving clients.  If there\u0027s a specific validator/test we\u0027re trying to pass, that would significantly strengthen the argument for making this breaking change.",
      "revId": "d924562eca4e42a10d8d2d78f4f60f4f8630b37c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf2fdf76_fa8f2a9f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2020-11-20T19:34:36Z",
      "side": 1,
      "message": "I\u0027m a little taken aback that this wasn\u0027t a rubber stamp Ed.\n1. Redfish API clearly indicates this is RO. The current use is a violation of that API.\n2. Per the Redfish spec HostName is RW from:\n/redfish/v1/Managers/bmc/EthernetInterfaces/eth(x)\n3. The Redfish API is clear, HostName is Read Only from this node. It\u0027s documented clearly. IMO no work needs to be done. OBMC breaks things all the time. An example is some recent sdbusplus changes that caused us some significant issues. The change was correct, our use was not. Functionality broke, and we had to figure out why. No one proactively sent out a message to all sdbusplus users saying \"I changed something that might break you.\".\n4. I disagree this is a mediocre reason. Why even have an agreed upon spec at all? This begins/continues a trend toward turning Redfish into multiple versions of IPMI, one for each IPMI vendor. The goal should be for any user of Redfish to read the schema and know what to expect. The goal should be for a computer to do the correct actions based on the schema. Permitting this to be RW breaks the \"rule\" of \"least surprise\". It is my opinion, when a dev finds a mismatch from the spec that a commit be made to follow the spec. OBMC isn\u0027t the only Redfish provider. What happens to a set of tests written to OBMC Redfish when they are applied to AMI Redfish? In theory they will all complete with the same results.\n5. Based on my statements in #4, I don\u0027t know that it much matters when the spec was violated. In any case, to answer your question, the commit that added this was done 1.75 years ago.\n6. I did not check webui. I am willing to bet it will need to be changed should this commit move forward.",
      "parentUuid": "2ad60a92_ed38f2d3",
      "revId": "d924562eca4e42a10d8d2d78f4f60f4f8630b37c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c758449_0baa5cc5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-20T19:58:10Z",
      "side": 1,
      "message": "\u003e I\u0027m a little taken aback that this wasn\u0027t a rubber stamp Ed.\n\nSorry to disappoint :)\n\n\u003e 1. Redfish API clearly indicates this is RO. The current use is a violation of that API.\n\nCool.  bmcweb goes outside the Redfish specification in a lot of places.  Is your intent to fix all instances of that?  Maybe we need a \"strict redfish compliance\" mode where we disable sensor setting, the dbus api, and mutual TLS support as well as this thing?  If this change were behind an option flag like that, I\u0027d be fine with it, but as is, it\u0027s a breaking API change, deleting code that a client might use, with no documentation or discussion.  It should be noted, your reply above is an order of magnitude longer than your commit message, and a lot of what you just typed would be very useful to include in it.\n\n\u003e 2. Per the Redfish spec HostName is RW from:\n\u003e /redfish/v1/Managers/bmc/EthernetInterfaces/eth(x)\n\nCool, that should go in the commit message please.\n\n\u003e 3. The Redfish API is clear, HostName is Read Only from this node. It\u0027s documented clearly. IMO no work needs to be done.\n\n\u003e OBMC breaks things all the time.\n\nNot by policy or intentionally.  If you found something broken, point out the patch that broke it, and we\u0027ll get it reverted/fixed.\n\n\u003e An example is some recent sdbusplus changes that caused us some significant issues.\n\nDid you post the bug, and suggest reverting it?  That\u0027s the correct path if you identified code that broke you.\n\n\u003e The change was correct, our use was not. Functionality broke, and we had to figure out why. No one proactively sent out a message to all sdbusplus users saying \"I changed something that might break you.\".\n\nsdbusplus is an internal-to-openbmc interface.  I can\u0027t say I\u0027m happy with the way that change was done, but changes to external interfaces are a different animal entirely than changing an internal API that can be verified to be correct by looking at the openbmc codebase.  With that said, this patchset isn\u0027t about sdbusplus.\n\n\u003e 4. I disagree this is a mediocre reason. Why even have an agreed upon spec at all? This begins/continues a trend toward turning Redfish into multiple versions of IPMI, one for each IPMI vendor. The goal should be for any user of Redfish to read the schema and know what to expect. The goal should be for a computer to do the correct actions based on the schema. Permitting this to be RW breaks the \"rule\" of \"least surprise\".\n\nIf a client has read the specification, and is obeying it properly, they would never be able to hit this code, right?  Technically the client has broken the spec in your example, which somewhat defeats the purpose of this patch, and in the eyes of the Redfish spec, makes this unused code, which brings me back around to, why make this change at all if it\u0027s going to break (admittedly misbehaving) clients without warning?\n\n\u003e It is my opinion, when a dev finds a mismatch from the spec that a commit be made to follow the spec. OBMC isn\u0027t the only Redfish provider. What happens to a set of tests written to OBMC Redfish when they are applied to AMI Redfish? In theory they will all complete with the same results.\n\nAnd if the tests follow the standard, they will never hit this code, so it\u0027s not a problem?\n\n\u003e 5. Based on my statements in #4, I don\u0027t know that it much matters when the spec was violated. In any case, to answer your question, the commit that added this was done 1.75 years ago.\n\nSo, we\u0027ve had almost 2 years of clients being possibly coded against that interface.  That\u0027s not something to break lightly.  If we\u0027d just broken it a month ago, and hadn\u0027t had a formal release since then, that makes it a very different animal.\n\n\u003e 6. I did not check webui. I am willing to bet it will need to be changed should this commit move forward.\n\nCool, that\u0027s something I would recommend noting as a TODO in your commit message so I can track it as a dependency.\n\n\nAgain, sorry to be the stick in the mud about this;  If it\u0027s any consolation, I did the same thing to Gunnar recently (which resulted in his question to the mailing list about this exact topic).",
      "parentUuid": "bf2fdf76_fa8f2a9f",
      "revId": "d924562eca4e42a10d8d2d78f4f60f4f8630b37c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56deb2e7_8531e7a2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2020-11-30T19:35:37Z",
      "side": 1,
      "message": "\u003e \u003e I\u0027m a little taken aback that this wasn\u0027t a rubber stamp Ed.\n\u003e \n\u003e Sorry to disappoint :)\n\u003e \n\u003e \u003e 1. Redfish API clearly indicates this is RO. The current use is a violation of that API.\n\u003e \n\u003e Cool.  bmcweb goes outside the Redfish specification in a lot of places.  Is your intent to fix all instances of that?  Maybe we need a \"strict redfish compliance\" mode where we disable sensor setting, the dbus api, and mutual TLS support as well as this thing?  If this change were behind an option flag like that, I\u0027d be fine with it, but as is, it\u0027s a breaking API change, deleting code that a client might use, with no documentation or discussion.  It should be noted, your reply above is an order of magnitude longer than your commit message, and a lot of what you just typed would be very useful to include in it.\n\u003e \n\nWhy isn\u0027t strict Redfish compliance the norm? Why did anything that does not comply get added (i.e set sensor api)? How am I as an average developer, reading the Redfish schema, and specs to know that OBMC Redfish does it\u0027s own thing whenever it wants, and where is OBMC Redifsh documenting same, other than in the source code? Tribal lore doesn\u0027t scale very well.\n\nIMO, if we\u0027re coloring outside the lines then our coloring needs to be done in the DMTF approved location, OEM. Of course, now I add more controversy, as OBMC has a policy against adding OEM section, if I\u0027m not mistaken. \nDMTF basically said they would not approve mTLS. OBMC is using it anyway, which is more tribal lore.\n\nI\u0027m confused as to the \"with no documentation\" comment. The documentation is the Redfish schema for the /redfish/v1/Managers/bmc/NetworkProtocol node. My question is where is the documentation in OBMC saying \"HostName read-only, it ain\u0027t so\"?\n\n\u003e \u003e 2. Per the Redfish spec HostName is RW from:\n\u003e \u003e /redfish/v1/Managers/bmc/EthernetInterfaces/eth(x)\n\u003e \n\u003e Cool, that should go in the commit message please.\n\nA reasonable request, since the reviewer may not have ready knowledge of the correct Redfish location for changing hostnames.\n\n\u003e \n\u003e \u003e 3. The Redfish API is clear, HostName is Read Only from this node. It\u0027s documented clearly. IMO no work needs to be done.\n\u003e \n\u003e \u003e OBMC breaks things all the time.\n\u003e \n\u003e Not by policy or intentionally.  If you found something broken, point out the patch that broke it, and we\u0027ll get it reverted/fixed.\n\u003e \n\nHow do you revert/fix something if the code change made *is* the fix? Reverting the fix, in this case, only continues to mask incorrect use of the API.\n\n\u003e \u003e An example is some recent sdbusplus changes that caused us some significant issues.\n\u003e \n\u003e Did you post the bug, and suggest reverting it?  That\u0027s the correct path if you identified code that broke you.\n\u003e \n\nWe reverted the offending change internally until we understood how it broke us. Upon review, it was determined the change was correct, and should stay.\n\n\u003e \u003e The change was correct, our use was not. Functionality broke, and we had to figure out why. No one proactively sent out a message to all sdbusplus users saying \"I changed something that might break you.\".\n\u003e \n\u003e sdbusplus is an internal-to-openbmc interface.  I can\u0027t say I\u0027m happy with the way that change was done, but changes to external interfaces are a different animal entirely than changing an internal API that can be verified to be correct by looking at the openbmc codebase.  With that said, this patchset isn\u0027t about sdbusplus.\n\u003e \n\nI\u0027m not understanding your point.\nMy use of sdbusplus was as an example of OBMC breaking code. Last time the breakage was sdbusplus, next time may be phosphor-network, or bmcweb, or choose any of the components that make up the OBMC project. Changes happen everywhere in the code base, and whether by design or not, breakage occurs. OBMC devs have to compensate for the fallout.\n\n\u003e \u003e 4. I disagree this is a mediocre reason. Why even have an agreed upon spec at all? This begins/continues a trend toward turning Redfish into multiple versions of IPMI, one for each IPMI vendor. The goal should be for any user of Redfish to read the schema and know what to expect. The goal should be for a computer to do the correct actions based on the schema. Permitting this to be RW breaks the \"rule\" of \"least surprise\".\n\u003e \n\u003e If a client has read the specification, and is obeying it properly, they would never be able to hit this code, right?  Technically the client has broken the spec in your example, which somewhat defeats the purpose of this patch, and in the eyes of the Redfish spec, makes this unused code, which brings me back around to, why make this change at all if it\u0027s going to break (admittedly misbehaving) clients without warning?\n\u003e \n\nMy point, from the non-inline response, is that every company with a QA/Validation team will team write tests according to the spec. For this schema HostName is read-only. The QA team must be able to write two tests, that apply to any implementation of Redfish. One that confirms correct behavior, the other that is the negative case. This should not be considered a \"misbehaving client\".\n\nDid test pass if a GET is performed, and the value retrieved matches the previously assigned HostName?\n\nCan the hostname be written from this location? If HostName can be written, test is marked as having failed.\n\n\u003e \u003e It is my opinion, when a dev finds a mismatch from the spec that a commit be made to follow the spec. OBMC isn\u0027t the only Redfish provider. What happens to a set of tests written to OBMC Redfish when they are applied to AMI Redfish? In theory they will all complete with the same results.\n\u003e \n\u003e And if the tests follow the standard, they will never hit this code, so it\u0027s not a problem?\n\u003e \n\nSee previous section: QA writes a test to confirm correct operation of this RF schema, and the test fails. Now a dev gets a defect, and finds \"OBMC Redfish just does this\". Returns the defect as \"not a bug\". Submitter disagrees, reopens defect. Now a time wasting \"is\"/\"is not\" defect argument ensues for weeks. Multiply by some non-zero number of dev/QA teams.\nI consider that a problem.\n\nOn the converse side, the defect saying \"It used to be writable\" can be easily defended, as \"the spec never said that was a writable node, alter your test configuration, or alter your API interaction\".\n\n\u003e \u003e 5. Based on my statements in #4, I don\u0027t know that it much matters when the spec was violated. In any case, to answer your question, the commit that added this was done 1.75 years ago.\n\u003e \n\u003e So, we\u0027ve had almost 2 years of clients being possibly coded against that interface.  That\u0027s not something to break lightly.  If we\u0027d just broken it a month ago, and hadn\u0027t had a formal release since then, that makes it a very different animal.\n\u003e \n\nThen in order for the code to not be broken the spec needs to change. I\u0027m advocating for following the existing spec. Does this mean you\u0027re going to champion a spec change, for all locations that do not comply, to keep OBMC Redfish in compliance?\n\n\u003e \u003e 6. I did not check webui. I am willing to bet it will need to be changed should this commit move forward.\n\u003e \n\u003e Cool, that\u0027s something I would recommend noting as a TODO in your commit message so I can track it as a dependency.\n\nphosphor-webui is d-bus. This change does not affect that code.\nwebui-vue, per Gunnar, uses the correct node.\n\n\u003e \n\u003e \n\u003e Again, sorry to be the stick in the mud about this;  If it\u0027s any consolation, I did the same thing to Gunnar recently (which resulted in his question to the mailing list about this exact topic).\n\nIn response to your 20 Nov 2020 comments:\n\n\u003eObviously writing a generic test harness for Redfish like the above would be nuts.  No disagreement there.\n\n\u003eFor what it\u0027s worth, the set sensor api, which breaks Redfish in a very similar way (allows PATCH when the protocol species only GET) was built specifically for a QA team, so I\u0027m struggling to see the QA argument here without comparing to that.  If your QA team is trying to build a compliant-to-the-spec Redfish test, state that as your goal, then lets get that sensor override code removed as well so we can be \"spec compliant\" in the truest sense.  If this patch were proposing that, under an option that I can point people to so they get the old  behavior, that would be fine, but as is, you\u0027re saying in effect, \"some QA use cases are more important than the protocol, so when QA breaks the protocol on purpose, that\u0027s fine\" which I\u0027m struggling to be ok with, because as a policy, I can\u0027t apply it to other places in a consistent manner, and I\u0027m sure everyones QA teams have different requirements.\n\nAgain, I don\u0027t understand why a non-compliant API was allowed to come into being. Also, don\u0027t put words in my mouth that I am not saying.\n\nMy point is that ALL QA/Val teams should have the same interface, and that interface is the DMTF Redfish spec.\n\nIMO, it would be in the OBMC working group to be expecting strict compliance in order to identify places that need to be added to the spec. In addition I would expect it to be in their best interest to be in first level control of an OEM nodes that are being created that the DMTF rejects. This allows the entire community to benefit from the custom features, such as Set Sensor API.\n\n\n\n\u003e\u003eWe\u0027re not always dealing with people who have our best interests at heart.\n\n\u003eI\u0027m struggling.  I\u0027ve given you a path forward that gets you strict protocol compliance by either adding an option that developers can disable, and including the other \"strict\" protocol compliance options with it, which avoids the code entirely. \n\nYou aren\u0027t the only one struggling Ed. I don\u0027t see the advantage to the OBMC community to allow an escape hatch. It prolongs fragmentation between the various server vendors using the OBMC platform.",
      "parentUuid": "8c758449_0baa5cc5",
      "revId": "d924562eca4e42a10d8d2d78f4f60f4f8630b37c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "d033a289_960e6e19",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-01-19T21:06:49Z",
      "side": 1,
      "message": "I think the goal of CI is to test as much as possible, so I\u0027d argue we should enable everything we can in CI. If it\u0027s not being built for CI, then I\u0027d agree, it should build the minimal amount and users can enable what they need.",
      "revId": "60e96a04ab3e6820637367fdb8883c684750f53a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "278ba03e_5e4684ac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-19T21:14:36Z",
      "side": 1,
      "message": "\u003e I think the goal of CI is to test as much as possible, so I\u0027d argue we should enable everything we can in CI. If it\u0027s not being built for CI, then I\u0027d agree, it should build the minimal amount and users can enable what they need.\n\nIMO, testing the default build is much more important than testing everything.  If we wanted to do both, we could, but in this file, we should not be enabling IBM-specific options.  That should be for IBM-specific systems, so that when that CI breaks, we know it\u0027s system-dependent, which helps a lot in triage time.\n\nIf someone wanted to put up a patchset to enable all options in CI, like you propose, I\u0027d be happy to have the discussion, but as-is, enabling one random option, based on the incorrect configure option (ie, whether we\u0027re in a yocto build) is not the way to do it.  This is simply going back to what we had before in cmake, and only changed when we moved to meson.  I missed it in one of the final patchsets on that review.",
      "parentUuid": "d033a289_960e6e19",
      "revId": "60e96a04ab3e6820637367fdb8883c684750f53a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be07ef12_b8c7c59a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-01-20T06:57:21Z",
      "side": 1,
      "message": "\u003e \n\u003e If someone wanted to put up a patchset to enable all options in CI, like you propose, I\u0027d be happy to have the discussion, but as-is, enabling one random option, based on the incorrect configure option (ie, whether we\u0027re in a yocto build) is not the way to do it.  This is simply going back to what we had before in cmake, and only changed when we moved to meson.  I missed it in one of the final patchsets on that review.\n\nThe earlier state of bmcweb before meson migration has the similar option enabled in the CMakelist.txt. This is not something that was added as part of the migration.\n\nhttps://github.com/openbmc/bmcweb/blob/65176d3908b27393d81b72284dbebc47055e517c/CMakeLists.txt#L327\n\nI don\u0027t recollect the right commit where we had this discussion , but earlier maintainer James stated that there is a flag(YOCTO_DEPENDENCIES) in bmcweb to distinguish between - whether we are doing a yocto build or an out of tree build \u0026 suggested us to enable the ibm flag under that to make sure it was compiled for CI.\n    option (YOCTO_DEPENDENCIES \"Use YOCTO dependencies system\" OFF)\n\nI don\u0027t have a strong preference here,but i would love to see the repo-CI catching most of the bugs rather than catching them at a much later stage(meta-CI).",
      "parentUuid": "278ba03e_5e4684ac",
      "revId": "60e96a04ab3e6820637367fdb8883c684750f53a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b710dff_3c915a17",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-20T16:22:04Z",
      "side": 1,
      "message": "\u003e \u003e \n\u003e \u003e If someone wanted to put up a patchset to enable all options in CI, like you propose, I\u0027d be happy to have the discussion, but as-is, enabling one random option, based on the incorrect configure option (ie, whether we\u0027re in a yocto build) is not the way to do it.  This is simply going back to what we had before in cmake, and only changed when we moved to meson.  I missed it in one of the final patchsets on that review.\n\u003e \n\u003e The earlier state of bmcweb before meson migration has the similar option enabled in the CMakelist.txt. This is not something that was added as part of the migration.\n\nAh, I didn\u0027t see that before.\n\n\u003e \n\u003e https://github.com/openbmc/bmcweb/blob/65176d3908b27393d81b72284dbebc47055e517c/CMakeLists.txt#L327\n\u003e \n\u003e I don\u0027t recollect the right commit where we had this discussion , but earlier maintainer James stated that there is a flag(YOCTO_DEPENDENCIES) in bmcweb to distinguish between - whether we are doing a yocto build or an out of tree build \u0026 suggested us to enable the ibm flag under that to make sure it was compiled for CI.\n\nThis is not a good way to detect CI.  All unit tests should be compiled and run in all configurations, and should be reliable enough that it doesn\u0027t matter if they\u0027re enabled or disabled.  This is how all the other unit tests work.\n\n\u003e     option (YOCTO_DEPENDENCIES \"Use YOCTO dependencies system\" OFF)\n\nThis option is telling cmake/meson \"Should you rely on the dependencies already being installed\", not \"Are we running in CI\"\n\nOccasionally this build gets used by other projects that don\u0027t run within yocto, so we need to make sure that we\u0027re treating that option correctly.\n\n\u003e \n\u003e I don\u0027t have a strong preference here,but i would love to see the repo-CI catching most of the bugs rather than catching them at a much later stage(meta-CI).\n\nAgreed.  The way all other modules do this is the way I described above.",
      "parentUuid": "be07ef12_b8c7c59a",
      "revId": "60e96a04ab3e6820637367fdb8883c684750f53a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6524cc9_312eb126",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-02-01T05:04:06Z",
      "side": 1,
      "message": "Sure, Agree with the suggestion of having UT to test the logic that is sitting under a compilation flag which is disabled by default.\n\nBut the problem with bmcweb is it has a huge code base with more than 20 configurations \u0026 none of them have any UT,so how will we make sure that bmcweb builds in other configurations apart from the default one ?\n\nAtleast for ibm Locks, we have UT\u0027s ,so it should not be much of a problem even if we remove this flag. \n\nBut Atleast having something compiled in CI is better than nothing right ? until some one comes up with UT\u0027s for the other features apart from IBM one ?",
      "parentUuid": "0b710dff_3c915a17",
      "revId": "60e96a04ab3e6820637367fdb8883c684750f53a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a684e6e0_cd05e7cd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-01T17:27:16Z",
      "side": 1,
      "message": "\u003e Sure, Agree with the suggestion of having UT to test the logic that is sitting under a compilation flag which is disabled by default.\n\u003e \n\u003e But the problem with bmcweb is it has a huge code base with more than 20 configurations \u0026 none of them have any UT,so how will we make sure that bmcweb builds in other configurations apart from the default one ?\n\nUsing CI, the same way we always do with per-machine CI?\n\nIf you\u0027re interested in writing unit tests for the rest of the bmcweb code, that\u0027s one solution, but in general bmcweb submitters tend to not want to write unit tests, and prefer functional tests instead.  It\u0027s not something I really like, but it\u0027s what we have today.  You\u0027ll notice that bmcweb has some unit tests, but in the early days of bmcweb, I got tired of enforcing their use, so they\u0027re not that useful.\n\n\u003e \n\u003e Atleast for ibm Locks, we have UT\u0027s ,so it should not be much of a problem even if we remove this flag. \n\u003e \n\u003e But Atleast having something compiled in CI is better than nothing right ? until some one comes up with UT\u0027s for the other features apart from IBM one ?\n\nHere\u0027s the core of the problem: if we\u0027re testing an optional config at the expense of the default config, that\u0027s an issue, as way more people use the default config.  Presumably we could build every possible option and every combination, but we have limited build resources, so we can\u0027t really do that in anything except the machine build.\n\nTo be clear, my priority here is the default build, and making sure it stays stable, as I think that\u0027s the most useful to everyone.  If you have ways that we can have that, and test every option, I\u0027m open to ideas, but barring rewriting unit tests for every conceivable option, I\u0027m not sure how to do it aside from relying on the machine-specific builds.",
      "parentUuid": "e6524cc9_312eb126",
      "revId": "60e96a04ab3e6820637367fdb8883c684750f53a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef30179f_a5cbf316",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-02-02T02:59:20Z",
      "side": 1,
      "message": "\u003e If you\u0027re interested in writing unit tests for the rest of the bmcweb code, that\u0027s one solution, \n\nyes ,I have some other priority items on my plate right now, but once i am free ,i would be happy to take up that activity if no one else is interested.\n\n\u003e To be clear, my priority here is the default build, and making sure it stays stable, as I think that\u0027s the most useful to everyone.  If you have ways that we can have that, and test every option, I\u0027m open to ideas, but barring rewriting unit tests for every conceivable option, I\u0027m not sure how to do it aside from relying on the machine-specific builds.\n\nI understood what you are trying to say, but we can always test the superset of the default build, so that CI tests the default build+featurecode.\n\nAs i said, i don\u0027t have much preference on this one. removing this flag will not harm, as meta-CI will catch it. If maintainers are keen to remove ,then i guess i am okay with it.",
      "parentUuid": "a684e6e0_cd05e7cd",
      "revId": "60e96a04ab3e6820637367fdb8883c684750f53a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a997e4b9_81989f04",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-03T19:09:16Z",
      "side": 1,
      "message": "\u003e \u003e If you\u0027re interested in writing unit tests for the rest of the bmcweb code, that\u0027s one solution, \n\u003e \n\u003e yes ,I have some other priority items on my plate right now, but once i am free ,i would be happy to take up that activity if no one else is interested.\n\nGreat.  Looking forward to seeing the patches.  I have it on my todo list too, so when you get there, lets see if we can split up the work in a reasonable way.\n\n\u003e \n\u003e \u003e To be clear, my priority here is the default build, and making sure it stays stable, as I think that\u0027s the most useful to everyone.  If you have ways that we can have that, and test every option, I\u0027m open to ideas, but barring rewriting unit tests for every conceivable option, I\u0027m not sure how to do it aside from relying on the machine-specific builds.\n\u003e \n\u003e I understood what you are trying to say, but we can always test the superset of the default build, so that CI tests the default build+featurecode.\n\nIf we had a way to build both the default build and the \"everything\" build in CI, that would be great, but barring that, default build takes priority.\n\n\u003e \n\u003e As i said, i don\u0027t have much preference on this one. removing this flag will not harm, as meta-CI will catch it. If maintainers are keen to remove ,then i guess i am okay with it.\n\nThis is kinda my thought too.  It should be noted, most of the IBM code is behind unit tests, so those get built whether or not the option is enabled.",
      "parentUuid": "ef30179f_a5cbf316",
      "revId": "60e96a04ab3e6820637367fdb8883c684750f53a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "219082f6_c419d947",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-02-05T21:14:27Z",
      "side": 1,
      "message": "\u003e I think the goal of CI is to test as much as possible, so I\u0027d argue we should enable everything we can in CI. If it\u0027s not being built for CI, then I\u0027d agree, it should build the minimal amount and users can enable what they need.\n\nI agree but if so we should put up a patchset to enable all options in CI, not as Ed put it \"enabling one random option, based on the incorrect configure option (ie, whether we\u0027re in a yocto build) is not the way to do it\"",
      "parentUuid": "a997e4b9_81989f04",
      "revId": "60e96a04ab3e6820637367fdb8883c684750f53a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
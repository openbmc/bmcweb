{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4d8f4614_fa10b2eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-03-25T14:26:12Z",
      "side": 1,
      "message": "Tested the series to work üëç\n\n```\nlog-create xyz.openbmc_project.Sensor.Threshold.ReadingBelowLowerCriticalThreshold --json \u0027{ \"SENSOR_NAME\": \"BIC_JI_SENSOR_MB_RETIMER_TEMP_C\", \"READING_VALUE\": 10.2, \"UNITS\": \"xyz.openbmc_project.Sensor.Value.Unit.DegreesC\", \"THRESHOLD_VALUE\": 15.5 }\u0027\n```\n\ncreates the expected log entry which is picked up and returned to the subscribed server\n\n```\n{\n  \"@odata.type\": \"#Event.v1_4_0.Event\",\n  \"Events\": [\n    {\n      \"Context\": \"EventLogSubscription\",\n      \"EventId\": \"2\",\n      \"EventTimestamp\": \"2025-03-25T14:22:46+00:00\",\n      \"MemberId\": \"0\",\n      \"Message\": \"Sensor \u0027BIC_JI_SENSOR_MB_RETIMER_TEMP_C\u0027 reading of 10.2 (xyz.openbmc_project.Sensor.Value.Unit.DegreesC) is below the 15.5 lower critical threshold.\",\n      \"MessageArgs\": [\n        \"BIC_JI_SENSOR_MB_RETIMER_TEMP_C\",\n        \"10.2\",\n        \"xyz.openbmc_project.Sensor.Value.Unit.DegreesC\",\n        \"15.5\"\n      ],\n      \"MessageId\": \"SensorEvent.1.0.ReadingBelowLowerCriticalThreshold\",\n      \"Severity\": \"Critical\"\n    }\n  ],\n  \"Id\": \"3\",\n  \"Name\": \"Event Log\"\n}\n```",
      "revId": "b6c3fd5ab48ee3a5d8fd9be25ffe61f21c480928",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba035b92_9e198f55",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1448,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-03-19T15:04:43Z",
      "side": 1,
      "message": "@ed@tanous.net - I\u0027m slightly surprised there was an ask for a new option for this.  Is there any case where we don\u0027t want to use the mapping if it exists?\n\nI\u0027d expect dbusEventLogEntryToEventLogObjectsType (wow that is a long function name) to handle cases where the dbus event id doesn\u0027t exist in the registry and then return the message/resolution/severity unchanged.\n\nCan we go that route rather than adding a new option?",
      "revId": "b6c3fd5ab48ee3a5d8fd9be25ffe61f21c480928",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a835f9a2_a21521cf",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1448,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-03-20T14:49:30Z",
      "side": 1,
      "message": "\u003e @ed@tanous.net - I\u0027m slightly surprised there was an ask for a new option for this.  Is there any case where we don\u0027t want to use the mapping if it exists?\n\u003e \n\u003e I\u0027d expect dbusEventLogEntryToEventLogObjectsType (wow that is a long function name) to handle cases where the dbus event id doesn\u0027t exist in the registry and then return the message/resolution/severity unchanged.\n\nLogServices should be consistently exposing a MessageId or not;  If we wanted to have two different LogService collections (one with message id, and one without) we could do that and put each behind option keys?\n\nIf we want to avoid the option, we could just say that all messages now have MessageIds and just move forward.\n\n\n\u003e \n\u003e Can we go that route rather than adding a new option?",
      "parentUuid": "ba035b92_9e198f55",
      "revId": "b6c3fd5ab48ee3a5d8fd9be25ffe61f21c480928",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af60048e_65fbf40a",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1448,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-03-21T10:38:18Z",
      "side": 1,
      "message": "\u003e LogServices should be consistently exposing a MessageId or not\n\nCan you point me to what drew you to this conclusion?  I don\u0027t find it in my reading of either the Redfish Specification nor the `LogEntry`/`LogEntryCollection` schemas.  It seems quite reasonable, to me, for a `LogEntryCollection` to contain _both_ `SEL` and `Event` (`LogEntryType`) and I\u0027m not finding any reason to preclude it.\n\nI think we are already violating the schema in that our older dbus-based events are of type `LogEntryType::Event` but they don\u0027t have a `MessageId`; they really should be `LogEntryType::OEM`, right?  I recognize changing this potentially breaks backwards compatibility so I don\u0027t know if it is worth fixing.",
      "parentUuid": "a835f9a2_a21521cf",
      "revId": "b6c3fd5ab48ee3a5d8fd9be25ffe61f21c480928",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "294d5ff8_abdbceeb",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1448,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-03-26T15:39:14Z",
      "side": 1,
      "message": "\u003e \u003e LogServices should be consistently exposing a MessageId or not\n\u003e \n\u003e Can you point me to what drew you to this conclusion?  I don\u0027t find it in my reading of either the Redfish Specification nor the `LogEntry`/`LogEntryCollection` schemas.  It seems quite reasonable, to me, for a `LogEntryCollection` to contain _both_ `SEL` and `Event` (`LogEntryType`) and I\u0027m not finding any reason to preclude it.\n\nLet me try to hunt it down.  It could\u0027ve just been in meeting minutes or in a discussion in the standards body that I\u0027m remembering.\n\n\u003e \n\u003e I think we are already violating the schema in that our older dbus-based events are of type `LogEntryType::Event` but they don\u0027t have a `MessageId`; they really should be `LogEntryType::OEM`, right?  I recognize changing this potentially breaks backwards compatibility so I don\u0027t know if it is worth fixing.\n\nI don\u0027t think all things with LogEntryType::Event are required to have a messageid.",
      "parentUuid": "af60048e_65fbf40a",
      "revId": "b6c3fd5ab48ee3a5d8fd9be25ffe61f21c480928",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1eab319e_4b2a9864",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1448,
      "author": {
        "id": 1002230
      },
      "writtenOn": "2025-03-27T11:37:34Z",
      "side": 1,
      "message": "Here is why I think all things with LogEntryType::Event are required to have a MessageId.\nThe MessageId property is not on the list of required properties for the LogEntry definition, but the reason behind that is, its purpose depends on value of the EntryType. Here is what long description of the MessageId property says:\n```\n% curl -s \u0027https://redfish.dmtf.org/schemas/v1/LogEntry.v1_15_0.json#/definitions/LogEntry\u0027 | jq .definitions.LogEntry.properties.MessageId.longDescription\n\"This property shall contain the MessageId, event data, or OEM-specific information.  This property decodes from the entry type.  If the entry type is `Event`, this property contains a Redfish Specification-defined MessageId property of the event.  If the entry type is `SEL`, the format should follow the pattern \u0027^0[xX](([a-fA-F]|[0-9]){2}){4}$\u0027, which results in a string in the form \u00270xNNaabbcc\u0027, where \u0027NN\u0027 is the EventDir/EventType byte, \u0027aa\u0027 is the Event Data 1 byte, \u0027bb\u0027 is Event Data 2 byte, \u0027cc\u0027 is Event Data 3 byte, corresponding with bytes 13-16 in the IPMI SEL Event Record.  If the entry type is `CXL`, this property shall not be present.  Otherwise, this property contains OEM-specific information.\"\n```\n\nI read \"If the entry type is `Event`, this property contains a Redfish Specification-defined MessageId property of the event.\" as \"it\u0027s required for LogEntryType::Event\".\nAnd it\u0027s not on the list of required props because \"If the entry type is `CXL`, this property shall not be present.\". In all the other cases, it is required to be populated with a value in particular format described.",
      "parentUuid": "294d5ff8_abdbceeb",
      "revId": "b6c3fd5ab48ee3a5d8fd9be25ffe61f21c480928",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4d8f4614_fa10b2eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-03-25T14:26:12Z",
      "side": 1,
      "message": "Tested the series to work üëç\n\n```\nlog-create xyz.openbmc_project.Sensor.Threshold.ReadingBelowLowerCriticalThreshold --json \u0027{ \"SENSOR_NAME\": \"BIC_JI_SENSOR_MB_RETIMER_TEMP_C\", \"READING_VALUE\": 10.2, \"UNITS\": \"xyz.openbmc_project.Sensor.Value.Unit.DegreesC\", \"THRESHOLD_VALUE\": 15.5 }\u0027\n```\n\ncreates the expected log entry which is picked up and returned to the subscribed server\n\n```\n{\n  \"@odata.type\": \"#Event.v1_4_0.Event\",\n  \"Events\": [\n    {\n      \"Context\": \"EventLogSubscription\",\n      \"EventId\": \"2\",\n      \"EventTimestamp\": \"2025-03-25T14:22:46+00:00\",\n      \"MemberId\": \"0\",\n      \"Message\": \"Sensor \u0027BIC_JI_SENSOR_MB_RETIMER_TEMP_C\u0027 reading of 10.2 (xyz.openbmc_project.Sensor.Value.Unit.DegreesC) is below the 15.5 lower critical threshold.\",\n      \"MessageArgs\": [\n        \"BIC_JI_SENSOR_MB_RETIMER_TEMP_C\",\n        \"10.2\",\n        \"xyz.openbmc_project.Sensor.Value.Unit.DegreesC\",\n        \"15.5\"\n      ],\n      \"MessageId\": \"SensorEvent.1.0.ReadingBelowLowerCriticalThreshold\",\n      \"Severity\": \"Critical\"\n    }\n  ],\n  \"Id\": \"3\",\n  \"Name\": \"Event Log\"\n}\n```",
      "revId": "b6c3fd5ab48ee3a5d8fd9be25ffe61f21c480928",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba035b92_9e198f55",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1448,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-03-19T15:04:43Z",
      "side": 1,
      "message": "@ed@tanous.net - I\u0027m slightly surprised there was an ask for a new option for this.  Is there any case where we don\u0027t want to use the mapping if it exists?\n\nI\u0027d expect dbusEventLogEntryToEventLogObjectsType (wow that is a long function name) to handle cases where the dbus event id doesn\u0027t exist in the registry and then return the message/resolution/severity unchanged.\n\nCan we go that route rather than adding a new option?",
      "revId": "b6c3fd5ab48ee3a5d8fd9be25ffe61f21c480928",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a835f9a2_a21521cf",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1448,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-03-20T14:49:30Z",
      "side": 1,
      "message": "\u003e @ed@tanous.net - I\u0027m slightly surprised there was an ask for a new option for this.  Is there any case where we don\u0027t want to use the mapping if it exists?\n\u003e \n\u003e I\u0027d expect dbusEventLogEntryToEventLogObjectsType (wow that is a long function name) to handle cases where the dbus event id doesn\u0027t exist in the registry and then return the message/resolution/severity unchanged.\n\nLogServices should be consistently exposing a MessageId or not;  If we wanted to have two different LogService collections (one with message id, and one without) we could do that and put each behind option keys?\n\nIf we want to avoid the option, we could just say that all messages now have MessageIds and just move forward.\n\n\n\u003e \n\u003e Can we go that route rather than adding a new option?",
      "parentUuid": "ba035b92_9e198f55",
      "revId": "b6c3fd5ab48ee3a5d8fd9be25ffe61f21c480928",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af60048e_65fbf40a",
        "filename": "redfish-core/lib/log_services.hpp",
        "patchSetId": 15
      },
      "lineNbr": 1448,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-03-21T10:38:18Z",
      "side": 1,
      "message": "\u003e LogServices should be consistently exposing a MessageId or not\n\nCan you point me to what drew you to this conclusion?  I don\u0027t find it in my reading of either the Redfish Specification nor the `LogEntry`/`LogEntryCollection` schemas.  It seems quite reasonable, to me, for a `LogEntryCollection` to contain _both_ `SEL` and `Event` (`LogEntryType`) and I\u0027m not finding any reason to preclude it.\n\nI think we are already violating the schema in that our older dbus-based events are of type `LogEntryType::Event` but they don\u0027t have a `MessageId`; they really should be `LogEntryType::OEM`, right?  I recognize changing this potentially breaks backwards compatibility so I don\u0027t know if it is worth fixing.",
      "parentUuid": "a835f9a2_a21521cf",
      "revId": "b6c3fd5ab48ee3a5d8fd9be25ffe61f21c480928",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "0d3daede_eb5713a0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 36
      },
      "lineNbr": 13,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-19T10:55:16Z",
      "side": 1,
      "message": "nit: This part of code can be separated.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 53
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83e812cc_901375a1",
        "filename": "http/http_connection.hpp",
        "patchSetId": 36
      },
      "lineNbr": 363,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2021-03-08T05:25:01Z",
      "side": 1,
      "message": "Please use boost::iequals",
      "range": {
        "startLine": 363,
        "startChar": 20,
        "endLine": 363,
        "endChar": 38
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7ce360d_2312b2c4",
        "filename": "http/http_connection.hpp",
        "patchSetId": 36
      },
      "lineNbr": 363,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-08T15:29:02Z",
      "side": 1,
      "message": "I\u0027m not following.  I didn\u0027t realize mime types were supposed to be case insensitive in the standard.  I know the keys are, but I thought the values were case sensitive?\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type.\n\nWith that said, this should really parse this string with the proper beast parser.",
      "parentUuid": "83e812cc_901375a1",
      "range": {
        "startLine": 363,
        "startChar": 20,
        "endLine": 363,
        "endChar": 38
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9431ef80_bb78a951",
        "filename": "http/http_connection.hpp",
        "patchSetId": 36
      },
      "lineNbr": 363,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2021-03-18T14:30:50Z",
      "side": 1,
      "message": "I suggested because starts_with can also allow malicious content_type as \"multipart/form-datasomescriptlines\" . It just checks if the string passed starts with the mentioned substring",
      "parentUuid": "f7ce360d_2312b2c4",
      "range": {
        "startLine": 363,
        "startChar": 20,
        "endLine": 363,
        "endChar": 38
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fdae5b5_136ca677",
        "filename": "http/http_connection.hpp",
        "patchSetId": 36
      },
      "lineNbr": 363,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-18T16:44:20Z",
      "side": 1,
      "message": "iequals gives case insensitive equals.\n\nTechnically the nefarious string you gave wouldn\u0027t be parsed properly.  A user would have to do\nmultipart/form-data;somescriptlines\n\nWhich, is actually legitimate in this header, as you\u0027re supposed to match the first type in the list, and ignore the rest.\n\nWith that said, we should be using the iso parser here.  I can fix that.",
      "parentUuid": "9431ef80_bb78a951",
      "range": {
        "startLine": 363,
        "startChar": 20,
        "endLine": 363,
        "endChar": 38
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa627a3a_ed4f3798",
        "filename": "http/http_connection.hpp",
        "patchSetId": 36
      },
      "lineNbr": 365,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-19T10:55:16Z",
      "side": 1,
      "message": "nit: Not needed",
      "range": {
        "startLine": 365,
        "startChar": 67,
        "endLine": 365,
        "endChar": 69
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "235c3968_06493d6a",
        "filename": "http/http_connection.hpp",
        "patchSetId": 36
      },
      "lineNbr": 376,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-19T17:29:18Z",
      "side": 1,
      "message": "One thing I wonder is whether the framework should just pass the error on to the handler.  I imagine if this is a redfish uri, we want to return a redfish error.  If this is a phosphor-rest uri, we want to return a phosphor-rest error.\n\nI wonder how we can propogate that error into the response object without being too invasive.",
      "range": {
        "startLine": 375,
        "startChar": 0,
        "endLine": 376,
        "endChar": 42
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91762a7c_e26106c0",
        "filename": "http/http_connection.hpp",
        "patchSetId": 36
      },
      "lineNbr": 378,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-19T10:55:16Z",
      "side": 1,
      "message": "Since its request data, we need to validate it to at begging. At least top of this if block. (Line no: 343)",
      "range": {
        "startLine": 360,
        "startChar": 0,
        "endLine": 378,
        "endChar": 17
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad66a0e1_80a1c399",
        "filename": "include/login_routes.hpp",
        "patchSetId": 36
      },
      "lineNbr": 123,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2021-03-08T05:25:01Z",
      "side": 1,
      "message": "Please use boost::iequals",
      "range": {
        "startLine": 123,
        "startChar": 21,
        "endLine": 123,
        "endChar": 39
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "139185d2_194e583f",
        "filename": "include/login_routes.hpp",
        "patchSetId": 36
      },
      "lineNbr": 123,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-08T15:29:02Z",
      "side": 1,
      "message": "Please see previous comment.  I didn\u0027t think MIME types were case insensitive.",
      "parentUuid": "ad66a0e1_80a1c399",
      "range": {
        "startLine": 123,
        "startChar": 21,
        "endLine": 123,
        "endChar": 39
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8169183_d3c32296",
        "filename": "include/login_routes.hpp",
        "patchSetId": 36
      },
      "lineNbr": 123,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-19T10:55:16Z",
      "side": 1,
      "message": "MIME types are not case sensitive (RFC 2045) right? Need to check them accordingly.",
      "parentUuid": "139185d2_194e583f",
      "range": {
        "startLine": 123,
        "startChar": 21,
        "endLine": 123,
        "endChar": 39
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d08c6bf_a6ae0a6f",
        "filename": "include/login_routes.hpp",
        "patchSetId": 36
      },
      "lineNbr": 125,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-19T10:55:16Z",
      "side": 1,
      "message": "Why is this been set here?",
      "range": {
        "startLine": 125,
        "startChar": 16,
        "endLine": 125,
        "endChar": 45
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e34690a_dccc7167",
        "filename": "include/login_routes.hpp",
        "patchSetId": 36
      },
      "lineNbr": 139,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-19T10:55:16Z",
      "side": 1,
      "message": "Is this always in lower case? Is this mandatory to be lower case?",
      "range": {
        "startLine": 139,
        "startChar": 58,
        "endLine": 139,
        "endChar": 66
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f583f714_8809451a",
        "filename": "include/login_routes.hpp",
        "patchSetId": 36
      },
      "lineNbr": 143,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-19T10:55:16Z",
      "side": 1,
      "message": "same here?",
      "range": {
        "startLine": 143,
        "startChar": 63,
        "endLine": 143,
        "endChar": 71
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e7151e2_51f43cdc",
        "filename": "include/multipart_parser.hpp",
        "patchSetId": 36
      },
      "lineNbr": 301,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-19T10:55:16Z",
      "side": 1,
      "message": "const crow::Request\u0026 reqIn",
      "range": {
        "startLine": 301,
        "startChar": 20,
        "endLine": 301,
        "endChar": 40
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c33e48c_ed701cc6",
        "filename": "include/multipart_parser.hpp",
        "patchSetId": 36
      },
      "lineNbr": 509,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-19T10:55:16Z",
      "side": 1,
      "message": "not needed, Its already checked at the top",
      "range": {
        "startLine": 509,
        "startChar": 8,
        "endLine": 509,
        "endChar": 21
      },
      "revId": "eaa5125e2a71e4963fe8685a5ec61773ec1ace2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
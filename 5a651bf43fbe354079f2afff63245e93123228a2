{
  "comments": [
    {
      "key": {
        "uuid": "260ac994_416dfe5e",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 229,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2019-04-23T22:45:16Z",
      "side": 1,
      "message": "You should read in all your parameters in one readJson call.\n\nsomething like\n\nreadJson(req, res, \"TransferProtocol\", transferProtocol, \"ImageURI\", imageURI);\n\nOtherwise you will get conflicting error messages about missing parameters.",
      "range": {
        "startLine": 229,
        "startChar": 8,
        "endLine": 229,
        "endChar": 65
      },
      "revId": "5a651bf43fbe354079f2afff63245e93123228a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f638b9f6_9a662555",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 229,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2019-04-24T16:07:13Z",
      "side": 1,
      "message": "Thanks! This fixed it.",
      "parentUuid": "260ac994_416dfe5e",
      "range": {
        "startLine": 229,
        "startChar": 8,
        "endLine": 229,
        "endChar": 65
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "5a651bf43fbe354079f2afff63245e93123228a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0ee5009_56bad5c1",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 249,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2019-04-23T22:45:16Z",
      "side": 1,
      "message": "You might consider throwing this check inside the conditional on line 240.",
      "range": {
        "startLine": 249,
        "startChar": 12,
        "endLine": 249,
        "endChar": 45
      },
      "revId": "5a651bf43fbe354079f2afff63245e93123228a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a1d815d_58c49026",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 249,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2019-04-24T16:07:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f0ee5009_56bad5c1",
      "range": {
        "startLine": 249,
        "startChar": 12,
        "endLine": 249,
        "endChar": 45
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "5a651bf43fbe354079f2afff63245e93123228a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ed2772d_14851fee",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 256,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2019-04-23T22:45:16Z",
      "side": 1,
      "message": "I don\u0027t recommend this very often, but this might be a case where boost::split would be useful to avoid checking a bunch of redundant error conditions.\n\nsomething like\nstd::vector\u003cstd::string\u003e v\nboost::split(v, imageURI, boost::any_of(\"/\"));\nif (c.size() !\u003d 2){\n  // handle error\n  return\n}\n\nOn second thought... I wonder if we\u0027re supposed to use a fully qualified URL parser here to decode something like \"tftp://\u003cmyserver\u003e:\u003cmy port\u003e/\u003cmypath\u003e\n\nI need to look closer at the redfish spec.",
      "range": {
        "startLine": 238,
        "startChar": 0,
        "endLine": 256,
        "endChar": 9
      },
      "revId": "5a651bf43fbe354079f2afff63245e93123228a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffc1e931_4bca8649",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 256,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2019-04-24T16:07:13Z",
      "side": 1,
      "message": "Yeah, the spec as far as I\u0027ve seen is pretty light and I can\u0027t find any examples. I\u0027ll see if I can get anything out of the DMTF meeting or maybe a github issue to the DMTF github repo.",
      "parentUuid": "6ed2772d_14851fee",
      "range": {
        "startLine": 238,
        "startChar": 0,
        "endLine": 256,
        "endChar": 9
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "5a651bf43fbe354079f2afff63245e93123228a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72ac8cf5_373f9972",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2019-04-23T22:45:16Z",
      "side": 1,
      "message": "Forgot to call res.end() here.\n\nThe current state-of-the-art is to use the AsyncResp object in all cases, so you get RAII to call res.end() automatically, instead of it being manual.",
      "range": {
        "startLine": 261,
        "startChar": 0,
        "endLine": 261,
        "endChar": 42
      },
      "revId": "5a651bf43fbe354079f2afff63245e93123228a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d9619c5_2664f378",
        "filename": "redfish-core/lib/update_service.hpp",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2019-04-24T16:07:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72ac8cf5_373f9972",
      "range": {
        "startLine": 261,
        "startChar": 0,
        "endLine": 261,
        "endChar": 42
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "5a651bf43fbe354079f2afff63245e93123228a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "60bcf916_3b824947",
        "filename": "http/http_connection.hpp",
        "patchSetId": 5
      },
      "lineNbr": 363,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "Can you revisit this and make sure this is what you intended;  You are using the request payload type to determine if we need to switch to dynamic response mode?  That seems incorrect.",
      "range": {
        "startLine": 352,
        "startChar": 0,
        "endLine": 363,
        "endChar": 17
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1875aaf1_2aaf9855",
        "filename": "http/http_connection.hpp",
        "patchSetId": 5
      },
      "lineNbr": 363,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-17T09:00:31Z",
      "side": 1,
      "message": "I could not think of any other way, can you please suggest what\u0027s the right way to find out if is dynamic response.",
      "parentUuid": "60bcf916_3b824947",
      "range": {
        "startLine": 352,
        "startChar": 0,
        "endLine": 363,
        "endChar": 17
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13a38d91_6fbee67a",
        "filename": "http/http_connection.hpp",
        "patchSetId": 5
      },
      "lineNbr": 363,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "Should we upgrade the connection by looking at the specific URL? or upgrade the connection at the route handler but we don\u0027t have that infra.",
      "parentUuid": "1875aaf1_2aaf9855",
      "range": {
        "startLine": 352,
        "startChar": 0,
        "endLine": 363,
        "endChar": 17
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1316f69_c736dfaf",
        "filename": "http/http_response.hpp",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "Considering that nlohmann doesn\u0027t support streaming, this doesn\u0027t really make sense in a \"dynamic\" response type.",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 162,
        "endChar": 29
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56404bc1_3b8a486c",
        "filename": "http/http_response.hpp",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "How we use the json value?",
      "range": {
        "startLine": 162,
        "startChar": 19,
        "endLine": 162,
        "endChar": 28
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "607174b3_3840b688",
        "filename": "http/http_response.hpp",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "not used, can remove",
      "parentUuid": "56404bc1_3b8a486c",
      "range": {
        "startLine": 162,
        "startChar": 19,
        "endLine": 162,
        "endChar": 28
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "246915d5_bba9c740",
        "filename": "http/http_response.hpp",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2020-12-08T16:51:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "607174b3_3840b688",
      "range": {
        "startLine": 162,
        "startChar": 19,
        "endLine": 162,
        "endChar": 28
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a43578c5_ee6edc7a",
        "filename": "http/http_response.hpp",
        "patchSetId": 5
      },
      "lineNbr": 220,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "Considering the body isn\u0027t available, I wouldn\u0027t expect a dynamic response to have a body method at all.",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 220,
        "endChar": 5
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7662f06b_f58a8dd6",
        "filename": "http/http_response.hpp",
        "patchSetId": 5
      },
      "lineNbr": 220,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "If the body is not available then body will not be sent.I didn\u0027t get this comment, can you please explain more?\nI expect the response in that case would be \nHttp return code /r/n  http headers /r/n /r/n \u003cbody which is of 0 size\u003e\n\nDo you mean to say that as the response is dynamic so we can not keep the whole reponse in memory so we shouldn\u0027t have the body method at all?",
      "parentUuid": "a43578c5_ee6edc7a",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 220,
        "endChar": 5
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77acdf0d_44719373",
        "filename": "http/http_response.hpp",
        "patchSetId": 5
      },
      "lineNbr": 249,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "Error or Debug??",
      "range": {
        "startLine": 249,
        "startChar": 12,
        "endLine": 249,
        "endChar": 28
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d5ab7d5_423e0841",
        "filename": "http/http_response.hpp",
        "patchSetId": 5
      },
      "lineNbr": 249,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "we can use debug here.",
      "parentUuid": "77acdf0d_44719373",
      "range": {
        "startLine": 249,
        "startChar": 12,
        "endLine": 249,
        "endChar": 28
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c0dd1ad_2e321d49",
        "filename": "http/http_response.hpp",
        "patchSetId": 5
      },
      "lineNbr": 269,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "This seems odd.  Why is this here?",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 269,
        "endChar": 28
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "378f65db_1e65302d",
        "filename": "http/http_response.hpp",
        "patchSetId": 5
      },
      "lineNbr": 269,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "1c0dd1ad_2e321d49",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 269,
        "endChar": 28
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0941fd1a_c07b5e1d",
        "filename": "http/http_response.hpp",
        "patchSetId": 5
      },
      "lineNbr": 269,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "378f65db_1e65302d",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 269,
        "endChar": 28
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdd7d3c1_3d4e0315",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "can we create class for this?\n\nWhy do we need this base class and the derived class at line no 35?\n\nAre we expecting that there could be more concrete differnt type of classes under name space crow:streamsocket?",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 6
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20b1cc64_26315f4c",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "yes.we can create class as well, but it will be useful to extend for different types in future.\n\nEd, what do you suggest here?",
      "parentUuid": "bdd7d3c1_3d4e0315",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 6
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba18191c_7112d35f",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-30T07:21:25Z",
      "side": 1,
      "message": "\u003e yes.we can create class as well\nI said that it is easy to read that class is being extended, However struct is same as class but with different access rules for member variables/functions.\n\n\u003e but it will be useful to extend for different types in future.\nIf that is the case we can create this base class later but can you list out those possibilities?",
      "parentUuid": "20b1cc64_26315f4c",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 6
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c3ef489_7c209149",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-08T07:05:09Z",
      "side": 1,
      "message": "same way followed in other places under bmcweb.\nso i thought its right way to do. i dont see any possibilities of extending this class right now",
      "parentUuid": "ba18191c_7112d35f",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 6
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02de1555_bc958b50",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "Why does the connection at this level need to store the request?  Also, you should be storing the crow::Request type, not the underlying boost type.",
      "range": {
        "startLine": 30,
        "startChar": 4,
        "endLine": 30,
        "endChar": 69
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9203807_7c299272",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "If I am getting correctly, this infrastructure is taken from the http/wbsocket..where it is same..\nUpgraded connection have the req and response.",
      "parentUuid": "02de1555_bc958b50",
      "range": {
        "startLine": 30,
        "startChar": 4,
        "endLine": 30,
        "endChar": 69
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78164435_c205d196",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "yes.",
      "parentUuid": "e9203807_7c299272",
      "range": {
        "startLine": 30,
        "startChar": 4,
        "endLine": 30,
        "endChar": 69
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd158b8f_feb4c599",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "can this go as part of res.end() which takes completerequesthandler?\nSeems you wnat to keep the connection alive, if the connection is having the response and the response can\u0027t be destructed then connection will not get destroyed.",
      "range": {
        "startLine": 58,
        "startChar": 4,
        "endLine": 68,
        "endChar": 5
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0ad9526_72fa85f6",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "Ed has comment where you can not hardcode this header here, let the caller gives the header and its value.",
      "range": {
        "startLine": 96,
        "startChar": 8,
        "endLine": 96,
        "endChar": 72
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21825dcc_5feff661",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0ad9526_72fa85f6",
      "range": {
        "startLine": 96,
        "startChar": 8,
        "endLine": 96,
        "endChar": 72
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20d388de_382af2b1",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "Delete",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 127,
        "endChar": 9
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03f77eea_bf5c093c",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "20d388de_382af2b1",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 127,
        "endChar": 9
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2c3baec_c8450129",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "replace with boost::beast::lowest_layer.",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 142,
        "endChar": 9
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21a6f373_2dbfbbef",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-30T08:56:15Z",
      "side": 1,
      "message": "any specific reason, why its better to use boost::beast::lowest_layer.",
      "parentUuid": "a2c3baec_c8450129",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 142,
        "endChar": 9
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2978fa6e_43c0a814",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-30T15:50:11Z",
      "side": 1,
      "message": "1. It\u0027s less code.\n2. It allows any adapter to be injected, not just tcp_socket or ssl_stream\u003ctcp_socket\u003e so when we have unit/fuzz tests, this wont need to be fixed.",
      "parentUuid": "21a6f373_2dbfbbef",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 142,
        "endChar": 9
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1ab65c8_3c046f7f",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-02T14:57:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2978fa6e_43c0a814",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 142,
        "endChar": 9
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc190a48_ed319eed",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "do we need this two if conditions if the action are the same except logging a error journal trace.\nCan we convert it into debug and print the error code and remove one of the condition?",
      "range": {
        "startLine": 157,
        "startChar": 16,
        "endLine": 167,
        "endChar": 17
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d6023b3_70e3c433",
        "filename": "http/http_stream.hpp",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc190a48_ed319eed",
      "range": {
        "startLine": 157,
        "startChar": 16,
        "endLine": 167,
        "endChar": 17
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "134fb77f_ffdda5b8",
        "filename": "http/routing.hpp",
        "patchSetId": 5
      },
      "lineNbr": 394,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "Nit, this isn\u0027t really a StreamSocket.  can we call this \"StreamingResponseRule\"?",
      "range": {
        "startLine": 394,
        "startChar": 6,
        "endLine": 394,
        "endChar": 22
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0ab845b_16d1d324",
        "filename": "http/routing.hpp",
        "patchSetId": 5
      },
      "lineNbr": 394,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-26T04:25:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "134fb77f_ffdda5b8",
      "range": {
        "startLine": 394,
        "startChar": 6,
        "endLine": 394,
        "endChar": 22
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3520d615_9d776b48",
        "filename": "http/routing.hpp",
        "patchSetId": 5
      },
      "lineNbr": 441,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "Do we need two handleUpgrade function if the SSL is enabled?\nSeems #ifdef should start from line no 410 and the function at line no 427 is required if SSL is enabled otherwise function at line no 410 is required.",
      "range": {
        "startLine": 411,
        "startChar": 1,
        "endLine": 441,
        "endChar": 6
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09a59080_1a41929a",
        "filename": "http/routing.hpp",
        "patchSetId": 5
      },
      "lineNbr": 441,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-26T04:25:53Z",
      "side": 1,
      "message": "yes we need both, these are virtual functions in base class",
      "parentUuid": "3520d615_9d776b48",
      "range": {
        "startLine": 411,
        "startChar": 1,
        "endLine": 441,
        "endChar": 6
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84bcb272_84b338aa",
        "filename": "http/routing.hpp",
        "patchSetId": 5
      },
      "lineNbr": 477,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "Doesn\u0027t look used in your example?",
      "range": {
        "startLine": 477,
        "startChar": 57,
        "endLine": 477,
        "endChar": 69
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "591131bc_eae0cd42",
        "filename": "http/routing.hpp",
        "patchSetId": 5
      },
      "lineNbr": 477,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2020-12-08T16:51:21Z",
      "side": 1,
      "message": "unaddressed",
      "parentUuid": "84bcb272_84b338aa",
      "range": {
        "startLine": 477,
        "startChar": 57,
        "endLine": 477,
        "endChar": 69
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ea72ac6_05057dbb",
        "filename": "http/routing.hpp",
        "patchSetId": 5
      },
      "lineNbr": 477,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-08T17:22:41Z",
      "side": 1,
      "message": "i have posted question already https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/38051/2/http/http_stream.hpp#168",
      "parentUuid": "591131bc_eae0cd42",
      "range": {
        "startLine": 477,
        "startChar": 57,
        "endLine": 477,
        "endChar": 69
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b179d685_0cbf1755",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "Please inline this definition.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 42
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36532d87_ad99e27a",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-10T03:51:51Z",
      "side": 1,
      "message": "could not use inline, i see compilation error.",
      "parentUuid": "b179d685_0cbf1755",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 42
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a86546b_1152aaa7",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-10T04:20:40Z",
      "side": 1,
      "message": "by \"inline\" I mean don\u0027t use a using at the top.  Everywhere you write stream_protocol, replace it with boost::asio::local::stream_protocol and delete this line.",
      "parentUuid": "36532d87_ad99e27a",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 42
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e8f5d19_c50ff987",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-10T18:55:23Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "1a86546b_1152aaa7",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 42
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efbce714_1a2cc9ba",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2021-01-04T11:55:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e8f5d19_c50ff987",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 42
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e50e521_1e5cecef",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "size_t here please.",
      "range": {
        "startLine": 27,
        "startChar": 17,
        "endLine": 27,
        "endChar": 21
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4328a6cd_449308a3",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "Considering this is a streaming socket, 1M seems like a really big buffer size.  Maybe 10KB would be more appropriate?",
      "range": {
        "startLine": 27,
        "startChar": 41,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b265a2ae_3a3940d3",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-17T09:00:31Z",
      "side": 1,
      "message": "I found that one unix socket read gets around 178k data in this case, so i kept max of 1M.",
      "parentUuid": "4328a6cd_449308a3",
      "range": {
        "startLine": 27,
        "startChar": 41,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a27962c_1693eade",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e50e521_1e5cecef",
      "range": {
        "startLine": 27,
        "startChar": 17,
        "endLine": 27,
        "endChar": 21
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "387f8b1a_5746b236",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-10T03:51:51Z",
      "side": 1,
      "message": "any suggestions?",
      "parentUuid": "b265a2ae_3a3940d3",
      "range": {
        "startLine": 27,
        "startChar": 41,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3c6bb74_6e2426ca",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-10T04:20:40Z",
      "side": 1,
      "message": "It doesn\u0027t matter how much the socket can read at a time.  bmcweb should only buffer slightly more than the minimum SSL frame size, otherwise flow control semantics get difficult, and we waste a lot of time with copies.",
      "parentUuid": "387f8b1a_5746b236",
      "range": {
        "startLine": 27,
        "startChar": 41,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cfe6d1b_8713a75a",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-10T18:55:23Z",
      "side": 1,
      "message": "i did not understand why its waste of time with copies?\n\ncan we keep 64k?",
      "parentUuid": "c3c6bb74_6e2426ca",
      "range": {
        "startLine": 27,
        "startChar": 41,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dffd35a_80865765",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-10T19:37:09Z",
      "side": 1,
      "message": "64k would be much more reasonable, although I my intuition says it\u0027s still a little higher than is required.  Ideally we would test performance vs buffer size, and pick something just before the performance degredation takes over, but I get that kind of performance testing takes time and effort.  My gut says that the optimal is close to 10k, but 64k would probably be be fine too?  See the math in the next paragraph.  1M is certainly too large.\n\nIt\u0027s not about wasting time copying really, it\u0027s more about limiting the maximum amount of memory bmcweb can take at any given time to a well defined (and low) value.  Limiting this buffer to 10k means that this would only ever have an overhead of 10k per connection, if we support 100 connections, the upper bound for our memory usage here is 10k, therefore 10k * 100 \u003d 1M maximum memory usage.  If this buffer is 1M, we have a maximum memory usage of 100M, which wouldn\u0027t fit on a lot of BMCs.",
      "parentUuid": "2cfe6d1b_8713a75a",
      "range": {
        "startLine": 27,
        "startChar": 41,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "261807cf_a16514a1",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2021-01-04T11:55:21Z",
      "side": 1,
      "message": "Done, lets keep 64k.",
      "parentUuid": "6dffd35a_80865765",
      "range": {
        "startLine": 27,
        "startChar": 41,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "557c5778_01e9a331",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "Missing timeouts.",
      "range": {
        "startLine": 56,
        "startChar": 8,
        "endLine": 56,
        "endChar": 16
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac586eed_c5d4f8c6",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "As Ed suggested , seems we need to revert the server / client terminology.\nBmcweb should act as a unix client and the entity which is giving the data should act as a server.. so bmcweb will do a connect.",
      "parentUuid": "557c5778_01e9a331",
      "range": {
        "startLine": 56,
        "startChar": 8,
        "endLine": 56,
        "endChar": 16
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e823827_9b483541",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac586eed_c5d4f8c6",
      "range": {
        "startLine": 56,
        "startChar": 8,
        "endLine": 56,
        "endChar": 16
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a70d393e_4b02b4b3",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 100,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "This is the path where the other end should start the server and bmcweb will connect on this path?",
      "range": {
        "startLine": 100,
        "startChar": 12,
        "endLine": 100,
        "endChar": 26
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b84f9a3_be9c663e",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 100,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "yes. i think here we need one dbus method which setup socket and returns so that bmcweb will start connect using this path.\notherwise if bmcweb tries to connect before backend setup unix socket,this will be an issue.",
      "parentUuid": "a70d393e_4b02b4b3",
      "range": {
        "startLine": 100,
        "startChar": 12,
        "endLine": 100,
        "endChar": 26
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00c44b85_f9faaa66",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 103,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-11-18T03:48:46Z",
      "side": 1,
      "message": "can we use std::string_view where we use the const std:string\u0026 for better performnace?",
      "range": {
        "startLine": 103,
        "startChar": 21,
        "endLine": 103,
        "endChar": 39
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6afecc5_cc9f139e",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 141,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "Needs a mechanism for timing out if data is not sent in a reasonable amount of time.",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 141,
        "endChar": 35
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "598b54bc_fb7b33a3",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 141,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "can you please suggest a mechanism how can we accomplish timing out in this case.",
      "parentUuid": "d6afecc5_cc9f139e",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 141,
        "endChar": 35
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29ef1bd4_48f7605b",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 141,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-10T03:51:51Z",
      "side": 1,
      "message": "i have tried to use deadline or steady timer but seems these wont work in this case\nwe can\u0027t set timeout, if data size is large then read operation can go till 2-3 mins.\nwe just need to timeout when there is no data available on socket for 1-2 second\nhow do we achieve this? do we need to explore socket options?",
      "parentUuid": "598b54bc_fb7b33a3",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 141,
        "endChar": 35
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "279b4657_c058a77a",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 169,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "In general, connections didn\u0027t have a write callback, they simply copied the data into it\u0027s internal buffers and returned immediately.  Changing this semantic means that this can possibly overflow.",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 169,
        "endChar": 70
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e15169ac_288820a3",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 169,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-17T09:00:31Z",
      "side": 1,
      "message": "in this case, i have passed a handler which will be run inside write complete handler.\nthat means further sendMessage calls will be called only after sending data given.\notherwise we need to buffer lot of data.",
      "parentUuid": "279b4657_c058a77a",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 169,
        "endChar": 70
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b71aaf0_ff513edb",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "Doesn\u0027t look used?",
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4d656fa_925e7e63",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 177,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8b71aaf0_ff513edb",
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29b2c940_d5fd3ed6",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 184,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "Why unique_ptr here?  Should this just be used as-is?",
      "range": {
        "startLine": 184,
        "startChar": 9,
        "endLine": 184,
        "endChar": 19
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f41aa752_82a95408",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 184,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-10T03:51:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29b2c940_d5fd3ed6",
      "range": {
        "startLine": 184,
        "startChar": 9,
        "endLine": 184,
        "endChar": 19
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7870fa8d_475bb7c9",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 186,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "std::filesystem::path here please .",
      "range": {
        "startLine": 186,
        "startChar": 4,
        "endLine": 186,
        "endChar": 15
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08e7bf51_03ec45e5",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 186,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7870fa8d_475bb7c9",
      "range": {
        "startLine": 186,
        "startChar": 4,
        "endLine": 186,
        "endChar": 15
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47510a6c_eba06123",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "?  The bmc should not be accepting a socket connection that it now has to maintain.  Reversing the acceptor, acceptee relationship (The dump service exposes a unix socket that bmcweb can connect to) would simplify this a lot, and keep the principal similar.",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 187,
        "endChar": 40
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbf90fcc_2f6f8977",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-17T09:00:31Z",
      "side": 1,
      "message": "right now we have used existing DUMP manager infrastructure to offload dump, there is dbus method \"InitiateOffload\" which takes  nbd device path or unix socket path as argument.\ndump manager/PLDM will be using this path to write dump data.\n\nbmcweb frames a unique UNIX domain socket path for each dump offload request, create listening socket and send this path as argument to IntiateOffload method.\n\n1.If its BMC dump then DUMP manager connects to that socket using socket path given, write bmc dump data on socket.\n2.If its system dump then PLDM does connects to that socket using socket path given, write system dump data on socket.\n\nyes,i agree that it would be better to Reverse the acceptor, acceptee relationship\n\nHere is the flow to reverse the model:\nbmcweb frames a unique UNIX domain socket path for each dump offload request and call \"InitiateOffload\" D-bus method with socket path.\n\n1.If its BMC dump then DUMP manager creates listening socket using the socket path given and bmcweb connects to socket(socket path known), dump manager accepts socket connection, start writing bmc dump data on socket. bmcweb reads system dump data from socket.\n2.If its system dump then PLDM manager creates listening socket using the socket path given and bmcweb connects to socket(socket path known), PLDM accepts socket connection and start writing system dump data on socket, bmcweb reads system dump data from socket\n\ndo you see any problem if bmcweb generates socket path(/var/lib/bmcweb/bmc_dump_1) and pass it to InitiateOffload method.\nso that dump manager and pldm can use this socket path to setup socket??",
      "parentUuid": "47510a6c_eba06123",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 187,
        "endChar": 40
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc592e2d_fbc2226a",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-10T03:51:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbf90fcc_2f6f8977",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 187,
        "endChar": 40
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3555fa71_0fe707fc",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 195,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "This can be done without a global, and at a minimum, this global isn\u0027t reentrant safe.  See COMMON_ERRORS.md.",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 195,
        "endChar": 13
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c28664c_9dd1a1a1",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 195,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-30T11:46:05Z",
      "side": 1,
      "message": "Ed\ncan you please suggest how can we do without a global?\nGiven the single threaded nature of bmcweb, they are not required to be explicitly threadsafe, but they must be always left in a valid state, and checked for other uses before occupying.\ndo you want to me check if \"handlers\" variable is getting used before using?",
      "parentUuid": "3555fa71_0fe707fc",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 195,
        "endChar": 13
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18640c05_6a64c450",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 195,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-30T15:50:11Z",
      "side": 1,
      "message": "\u003e Ed\n\u003e can you please suggest how can we do without a global?\n\nusing lambda captures to capture the appropriate resources.\n\n\u003e Given the single threaded nature of bmcweb, they are not required to be explicitly threadsafe, but they must be always left in a valid state, and checked for other uses before occupying.\n\u003e do you want to me check if \"handlers\" variable is getting used before using?\n\nYou\u0027ve roughly described what common_errors.md suggests about this.",
      "parentUuid": "7c28664c_9dd1a1a1",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 195,
        "endChar": 13
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b41568ac_3f27db69",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 195,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-02T14:57:50Z",
      "side": 1,
      "message": "yes. i have seen global variables used in different places in bmcweb.\ni am thinking how can we make this variable reentrant in this case",
      "parentUuid": "18640c05_6a64c450",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 195,
        "endChar": 13
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f378339_08a2fd6e",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 195,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-10T03:51:51Z",
      "side": 1,
      "message": "looking for your inputs",
      "parentUuid": "b41568ac_3f27db69",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 195,
        "endChar": 13
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4346a47_32e3e94c",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 195,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-10T04:20:40Z",
      "side": 1,
      "message": "I have not looked at this too in depth, but I really would like to be able to get away from using globals for this if it\u0027s possible.",
      "parentUuid": "7f378339_08a2fd6e",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 195,
        "endChar": 13
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e65d919f_35c061d1",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 200,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-10T04:20:40Z",
      "side": 1,
      "message": "Routes should end in /",
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53375a95_ecf23de8",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 200,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2021-01-04T11:55:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e65d919f_35c061d1",
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa9cbac9_b42724c5",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 210,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "This should be using the params passed to it, not pulling the information out of target()",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 210,
        "endChar": 13
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11387a14_8ead4ab4",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 210,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "do you mean parameters passed to BMCWEB_ROUTE or onopen() handler?",
      "parentUuid": "aa9cbac9_b42724c5",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 210,
        "endChar": 13
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cba7d040_09a2eb9e",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 210,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-30T15:50:11Z",
      "side": 1,
      "message": "I mean the route handler already has mechanisms for routing params, \n\n.onopen([](crow::streamsocket::Connection\u0026 conn, std::string\u0026 dumpId)\n\nI believe should fix your issue.",
      "parentUuid": "11387a14_8ead4ab4",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 210,
        "endChar": 13
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "273220bd_3adea297",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 210,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-02T14:57:50Z",
      "side": 1,
      "message": "yes we can add a parameter to open handler,\nbut openHandler is generic infrastructure which can be used for other use-cases other than dump\nright?",
      "parentUuid": "cba7d040_09a2eb9e",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 210,
        "endChar": 13
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ad8767a_d0ce5f7a",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 210,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-12-10T03:51:51Z",
      "side": 1,
      "message": "looking for inputs",
      "parentUuid": "273220bd_3adea297",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 210,
        "endChar": 13
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75884e4a_ea244afd",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 210,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-10T04:20:40Z",
      "side": 1,
      "message": "openHandler is generic infrastructure just like the other routes, which do handle pulling parameters out of the end.",
      "parentUuid": "0ad8767a_d0ce5f7a",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 210,
        "endChar": 13
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74e282d9_0a473b69",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 225,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "unique_ptr needed here.",
      "range": {
        "startLine": 225,
        "startChar": 20,
        "endLine": 225,
        "endChar": 23
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fc69873_f60402b6",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 225,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "removed acceptor",
      "parentUuid": "74e282d9_0a473b69",
      "range": {
        "startLine": 225,
        "startChar": 20,
        "endLine": 225,
        "endChar": 23
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33e3b6b5_307417f8",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 225,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2021-01-04T11:55:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6fc69873_f60402b6",
      "range": {
        "startLine": 225,
        "startChar": 20,
        "endLine": 225,
        "endChar": 23
      },
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7aedadd_b2bcdffd",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-12T19:08:45Z",
      "side": 1,
      "message": "See bmcweb exception policy in DEVELOPING.md.  This case is not exceptional.",
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45199de2_b075cfde",
        "filename": "include/dump_offload.hpp",
        "patchSetId": 5
      },
      "lineNbr": 229,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2020-11-24T17:50:46Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "f7aedadd_b2bcdffd",
      "revId": "fb1492326bdad906fdd2c6f9e3380da7251565b0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}